{
  "version": 3,
  "sources": ["src\\commands-list.module.ts", "src\\lib\\ericchase\\Utility\\UpdateMarker.ts", "src\\lib\\ericchase\\Utility\\Console.ts", "src\\lib\\lib.env.ts"],
  "sourcesContent": [
    "import { ApplicationCommand, REST, Routes } from 'src/external/discord/discord.module.js';\nimport { ConsoleError, ConsoleLog } from 'src/lib/ericchase/Utility/Console.js';\nimport { getBotToken, getClientID } from 'src/lib/lib.env.js';\n\nconst rest = new REST({ version: '10' }).setToken(getBotToken());\n\nasync function getCommands() {\n  try {\n    ConsoleLog('Fetching global commands.');\n    const commands = (await rest.get(Routes.applicationCommands(getClientID()))) as ApplicationCommand[];\n    if (commands.length === 0) {\n      ConsoleLog('No global commands registered.');\n    } else {\n      for (const command of commands) {\n        ConsoleLog(`Command Name: ${command.name}, Command ID: ${command.id}`);\n      }\n    }\n  } catch (error) {\n    ConsoleError('Failed to fetch commands:', error);\n  }\n}\n\ngetCommands();\n",
    "export class UpdateMarker {\n  updated = false;\n  constructor(readonly $manager: UpdateMarkerManager) {}\n  reset() {\n    this.$manager.resetMarker(this);\n  }\n}\n\nexport class UpdateMarkerManager {\n  $marks = new Set<UpdateMarker>();\n  getNewMarker() {\n    const marker = new UpdateMarker(this);\n    this.$marks.add(marker);\n    return marker;\n  }\n  resetMarker(mark: UpdateMarker) {\n    mark.updated = false;\n    this.$marks.add(mark);\n  }\n  updateMarkers() {\n    for (const mark of this.$marks) {\n      this.$marks.delete(mark);\n      mark.updated = true;\n    }\n  }\n}\n\nexport class DataSetMarker<T> {\n  dataset = new Set<T>();\n  constructor(readonly $manager: DataSetMarkerManager<T>) {}\n  reset() {\n    this.$manager.resetMarker(this);\n  }\n}\n\nexport class DataSetMarkerManager<T> {\n  $marks = new Set<DataSetMarker<T>>();\n  getNewMarker() {\n    const marker = new DataSetMarker<T>(this);\n    this.$marks.add(marker);\n    return marker;\n  }\n  resetMarker(mark: DataSetMarker<T>) {\n    mark.dataset.clear();\n    this.$marks.add(mark);\n  }\n  updateMarkers(data: T) {\n    for (const mark of this.$marks) {\n      mark.dataset.add(data);\n    }\n  }\n}\n",
    "import { UpdateMarkerManager } from './UpdateMarker.js';\n\nconst marker_manager = new UpdateMarkerManager();\nlet newline_count = 0;\n\nexport function GetConsoleMarker() {\n  return marker_manager.getNewMarker();\n}\n\nexport function ConsoleError(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[error]s\n  console['error'](...items);\n  newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleErrorWithDate(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[error]s\n  console['error'](`[${new Date().toLocaleTimeString()}]`, ...items);\n  newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleLog(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[log]s\n  console['log'](...items);\n  newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleLogWithDate(...items: any[]) {\n  // biome-ignore lint: this let's us search for undesired console[log]s\n  console['log'](`[${new Date().toLocaleTimeString()}]`, ...items);\n  newline_count = 0;\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleNewline(ensure_count = 1) {\n  for (let i = newline_count; i < ensure_count; i++) {\n    // biome-ignore lint: this let's us search for undesired console[log]s\n    console['log']();\n    newline_count++;\n  }\n  marker_manager.updateMarkers();\n}\n\nexport function ConsoleLogToLines(items: Iterable<any>) {\n  if (typeof items === 'string') {\n    ConsoleLog(items);\n  } else {\n    for (const item of items) {\n      ConsoleLog(item);\n    }\n  }\n}\n\nexport function ConsoleErrorToLines(items: Iterable<any>) {\n  if (typeof items === 'string') {\n    ConsoleError(items);\n  } else {\n    for (const item of items) {\n      ConsoleError(item);\n    }\n  }\n}\n",
    "function getVariable(key: string) {\n  if (process.env[key] === undefined || process.env[key] === '') {\n    throw new Error(`.env '${key}' is undefined`);\n  }\n  return process.env[key];\n}\n\nexport function getBotToken() {\n  return getVariable('BOT_TOKEN');\n}\nexport function getClientID() {\n  return getVariable('CLIENT_ID');\n}\nexport function getGuildID() {\n  return getVariable('GUILD_ID');\n}\nexport function getMongoDBUrl() {\n  return getVariable('MONGODBURL');\n}\n"
  ],
  "mappings": ";;AAAA;;;ACAO,MAAM,aAAa;AAAA,EAEH;AAAA,EADrB,UAAU;AAAA,EACV,WAAW,CAAU,UAA+B;AAA/B;AAAA;AAAA,EACrB,KAAK,GAAG;AACN,SAAK,SAAS,YAAY,IAAI;AAAA;AAElC;AAEO;AAAA,MAAM,oBAAoB;AAAA,EAC/B,SAAS,IAAI;AAAA,EACb,YAAY,GAAG;AACb,UAAM,SAAS,IAAI,aAAa,IAAI;AACpC,SAAK,OAAO,IAAI,MAAM;AACtB,WAAO;AAAA;AAAA,EAET,WAAW,CAAC,MAAoB;AAC9B,SAAK,UAAU;AACf,SAAK,OAAO,IAAI,IAAI;AAAA;AAAA,EAEtB,aAAa,GAAG;AACd,eAAW,QAAQ,KAAK,QAAQ;AAC9B,WAAK,OAAO,OAAO,IAAI;AACvB,WAAK,UAAU;AAAA,IACjB;AAAA;AAEJ;AAEO;AAAA,MAAM,cAAiB;AAAA,EAEP;AAAA,EADrB,UAAU,IAAI;AAAA,EACd,WAAW,CAAU,UAAmC;AAAnC;AAAA;AAAA,EACrB,KAAK,GAAG;AACN,SAAK,SAAS,YAAY,IAAI;AAAA;AAElC;AAEO;AAAA,MAAM,qBAAwB;AAAA,EACnC,SAAS,IAAI;AAAA,EACb,YAAY,GAAG;AACb,UAAM,SAAS,IAAI,cAAiB,IAAI;AACxC,SAAK,OAAO,IAAI,MAAM;AACtB,WAAO;AAAA;AAAA,EAET,WAAW,CAAC,MAAwB;AAClC,SAAK,QAAQ,MAAM;AACnB,SAAK,OAAO,IAAI,IAAI;AAAA;AAAA,EAEtB,aAAa,CAAC,MAAS;AACrB,eAAW,QAAQ,KAAK,QAAQ;AAC9B,WAAK,QAAQ,IAAI,IAAI;AAAA,IACvB;AAAA;AAEJ;;;ACjDA,IAAM,iBAAiB,IAAI;AAC3B,IAAI,gBAAgB;AAMb,SAAS,YAAY,IAAI,OAAc;AAE5C,UAAQ,SAAS,GAAG,KAAK;AACzB,kBAAgB;AAChB,iBAAe,cAAc;AAAA;AAUxB,SAAS,UAAU,IAAI,OAAc;AAE1C,UAAQ,OAAO,GAAG,KAAK;AACvB,kBAAgB;AAChB,iBAAe,cAAc;AAAA;;;AC3B/B,SAAS,WAAW,CAAC,KAAa;AAChC,MAAI,QAAQ,IAAI,SAAS,aAAa,QAAQ,IAAI,SAAS,IAAI;AAC7D,UAAM,IAAI,MAAM,SAAS,mBAAmB;AAAA,EAC9C;AACA,SAAO,QAAQ,IAAI;AAAA;AAGd,SAAS,WAAW,GAAG;AAC5B,SAAO,YAAY,WAAW;AAAA;AAEzB,SAAS,WAAW,GAAG;AAC5B,SAAO,YAAY,WAAW;AAAA;;;AHPhC,IAAM,OAAO,IAAI,KAAK,EAAE,SAAS,KAAK,CAAC,EAAE,SAAS,YAAY,CAAC;AAE/D,eAAe,WAAW,GAAG;AAC3B,MAAI;AACF,eAAW,2BAA2B;AACtC,UAAM,WAAY,MAAM,KAAK,IAAI,OAAO,oBAAoB,YAAY,CAAC,CAAC;AAC1E,QAAI,SAAS,WAAW,GAAG;AACzB,iBAAW,gCAAgC;AAAA,IAC7C,OAAO;AACL,iBAAW,WAAW,UAAU;AAC9B,mBAAW,iBAAiB,QAAQ,qBAAqB,QAAQ,IAAI;AAAA,MACvE;AAAA;AAAA,WAEK,OAAP;AACA,iBAAa,6BAA6B,KAAK;AAAA;AAAA;AAInD,YAAY;",
  "debugId": "364442360DFA228964756E2164756E21",
  "names": []
}