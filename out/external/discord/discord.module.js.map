{
  "version": 3,
  "sources": ["node_modules\\@discordjs\\util\\dist\\index.js", "node_modules\\tslib\\tslib.js", "node_modules\\discord-api-types\\gateway\\common.js", "node_modules\\discord-api-types\\gateway\\v10.js", "node_modules\\discord-api-types\\globals.js", "node_modules\\discord-api-types\\payloads\\common.js", "node_modules\\discord-api-types\\payloads\\v10\\application.js", "node_modules\\discord-api-types\\payloads\\v10\\auditLog.js", "node_modules\\discord-api-types\\payloads\\v10\\autoModeration.js", "node_modules\\discord-api-types\\payloads\\v10\\channel.js", "node_modules\\discord-api-types\\payloads\\v10\\emoji.js", "node_modules\\discord-api-types\\payloads\\v10\\gateway.js", "node_modules\\discord-api-types\\payloads\\v10\\guild.js", "node_modules\\discord-api-types\\payloads\\v10\\guildScheduledEvent.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\attachment.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\base.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\boolean.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\channel.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\integer.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\mentionable.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\number.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\role.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\shared.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\string.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\subcommand.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\subcommandGroup.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\_chatInput\\user.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\chatInput.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\contextMenu.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\permissions.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\_applicationCommands\\entryPoint.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\applicationCommands.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\autocomplete.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\base.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\messageComponents.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\modalSubmit.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\ping.js", "node_modules\\discord-api-types\\payloads\\v10\\_interactions\\responses.js", "node_modules\\discord-api-types\\payloads\\v10\\interactions.js", "node_modules\\discord-api-types\\payloads\\v10\\invite.js", "node_modules\\discord-api-types\\payloads\\v10\\monetization.js", "node_modules\\discord-api-types\\payloads\\v10\\oauth2.js", "node_modules\\discord-api-types\\payloads\\v10\\permissions.js", "node_modules\\discord-api-types\\payloads\\v10\\poll.js", "node_modules\\discord-api-types\\payloads\\v10\\soundboard.js", "node_modules\\discord-api-types\\payloads\\v10\\stageInstance.js", "node_modules\\discord-api-types\\payloads\\v10\\sticker.js", "node_modules\\discord-api-types\\payloads\\v10\\teams.js", "node_modules\\discord-api-types\\payloads\\v10\\template.js", "node_modules\\discord-api-types\\payloads\\v10\\user.js", "node_modules\\discord-api-types\\payloads\\v10\\voice.js", "node_modules\\discord-api-types\\payloads\\v10\\webhook.js", "node_modules\\discord-api-types\\payloads\\v10\\index.js", "node_modules\\discord-api-types\\utils\\internals.js", "node_modules\\discord-api-types\\rest\\common.js", "node_modules\\discord-api-types\\rest\\v10\\application.js", "node_modules\\discord-api-types\\rest\\v10\\auditLog.js", "node_modules\\discord-api-types\\rest\\v10\\autoModeration.js", "node_modules\\discord-api-types\\rest\\v10\\channel.js", "node_modules\\discord-api-types\\rest\\v10\\emoji.js", "node_modules\\discord-api-types\\rest\\v10\\gateway.js", "node_modules\\discord-api-types\\rest\\v10\\guild.js", "node_modules\\discord-api-types\\rest\\v10\\guildScheduledEvent.js", "node_modules\\discord-api-types\\rest\\v10\\interactions.js", "node_modules\\discord-api-types\\rest\\v10\\invite.js", "node_modules\\discord-api-types\\rest\\v10\\monetization.js", "node_modules\\discord-api-types\\rest\\v10\\oauth2.js", "node_modules\\discord-api-types\\rest\\v10\\poll.js", "node_modules\\discord-api-types\\rest\\v10\\soundboard.js", "node_modules\\discord-api-types\\rest\\v10\\stageInstance.js", "node_modules\\discord-api-types\\rest\\v10\\sticker.js", "node_modules\\discord-api-types\\rest\\v10\\template.js", "node_modules\\discord-api-types\\rest\\v10\\user.js", "node_modules\\discord-api-types\\rest\\v10\\voice.js", "node_modules\\discord-api-types\\rest\\v10\\webhook.js", "node_modules\\discord-api-types\\rest\\v10\\index.js", "node_modules\\discord-api-types\\rpc\\common.js", "node_modules\\discord-api-types\\rpc\\v10.js", "node_modules\\discord-api-types\\utils\\v10.js", "node_modules\\discord-api-types\\v10.js", "node_modules\\@discordjs\\rest\\node_modules\\@discordjs\\collection\\dist\\index.js", "node_modules\\@sapphire\\snowflake\\dist\\cjs\\index.cjs", "node_modules\\@vladfrangu\\async_event_emitter\\dist\\index.cjs", "node_modules\\magic-bytes.js\\dist\\model\\toHex.js", "node_modules\\magic-bytes.js\\dist\\model\\tree.js", "node_modules\\magic-bytes.js\\dist\\model\\pattern-tree.js", "node_modules\\magic-bytes.js\\dist\\index.js", "node_modules\\@sapphire\\async-queue\\dist\\cjs\\index.cjs", "node_modules\\@discordjs\\rest\\dist\\index.js", "node_modules\\discord.js\\src\\errors\\ErrorCodes.js", "node_modules\\discord.js\\src\\errors\\Messages.js", "node_modules\\discord.js\\src\\errors\\DJSError.js", "node_modules\\discord.js\\src\\errors\\index.js", "node_modules\\lodash.snakecase\\index.js", "node_modules\\discord.js\\src\\util\\Transformers.js", "node_modules\\@discordjs\\collection\\dist\\index.js", "node_modules\\discord.js\\src\\util\\LimitedCollection.js", "node_modules\\discord.js\\src\\util\\Options.js", "node_modules\\discord.js\\src\\util\\Colors.js", "node_modules\\discord.js\\src\\util\\BitField.js", "node_modules\\discord.js\\src\\util\\AttachmentFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\Attachment.js", "node_modules\\@discordjs\\formatters\\dist\\index.js", "node_modules\\discord.js\\src\\structures\\Base.js", "node_modules\\discord.js\\src\\util\\ChannelFlagsBitField.js", "node_modules\\discord.js\\src\\util\\Constants.js", "node_modules\\discord.js\\src\\structures\\BaseChannel.js", "node_modules\\discord.js\\src\\managers\\BaseManager.js", "node_modules\\discord.js\\src\\managers\\DataManager.js", "node_modules\\discord.js\\src\\util\\Symbols.js", "node_modules\\discord.js\\src\\managers\\CachedManager.js", "node_modules\\discord.js\\src\\util\\PermissionsBitField.js", "node_modules\\discord.js\\src\\util\\RoleFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\Role.js", "node_modules\\discord.js\\src\\structures\\PermissionOverwrites.js", "node_modules\\discord.js\\src\\managers\\PermissionOverwriteManager.js", "node_modules\\discord.js\\src\\structures\\GuildChannel.js", "node_modules\\discord.js\\src\\util\\SKUFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\SKU.js", "node_modules\\discord.js\\src\\util\\Util.js", "node_modules\\discord.js\\src\\client\\BaseClient.js", "node_modules\\discord.js\\src\\util\\Enums.js", "node_modules\\discord.js\\src\\util\\Partials.js", "node_modules\\discord.js\\src\\client\\actions\\Action.js", "node_modules\\discord.js\\src\\util\\Events.js", "node_modules\\discord.js\\src\\client\\actions\\ApplicationCommandPermissionsUpdate.js", "node_modules\\discord.js\\src\\structures\\AutoModerationActionExecution.js", "node_modules\\discord.js\\src\\client\\actions\\AutoModerationActionExecution.js", "node_modules\\discord.js\\src\\client\\actions\\AutoModerationRuleCreate.js", "node_modules\\discord.js\\src\\client\\actions\\AutoModerationRuleDelete.js", "node_modules\\discord.js\\src\\client\\actions\\AutoModerationRuleUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\ChannelCreate.js", "node_modules\\discord.js\\src\\client\\actions\\ChannelDelete.js", "node_modules\\discord.js\\src\\managers\\CategoryChannelChildManager.js", "node_modules\\discord.js\\src\\structures\\CategoryChannel.js", "node_modules\\discord.js\\src\\structures\\interfaces\\Collector.js", "node_modules\\discord.js\\src\\structures\\InteractionCollector.js", "node_modules\\discord.js\\src\\structures\\MessageCollector.js", "node_modules\\lodash\\isArray.js", "node_modules\\lodash\\_freeGlobal.js", "node_modules\\lodash\\_root.js", "node_modules\\lodash\\_Symbol.js", "node_modules\\lodash\\_getRawTag.js", "node_modules\\lodash\\_objectToString.js", "node_modules\\lodash\\_baseGetTag.js", "node_modules\\lodash\\isObjectLike.js", "node_modules\\lodash\\isSymbol.js", "node_modules\\lodash\\_isKey.js", "node_modules\\lodash\\isObject.js", "node_modules\\lodash\\isFunction.js", "node_modules\\lodash\\_coreJsData.js", "node_modules\\lodash\\_isMasked.js", "node_modules\\lodash\\_toSource.js", "node_modules\\lodash\\_baseIsNative.js", "node_modules\\lodash\\_getValue.js", "node_modules\\lodash\\_getNative.js", "node_modules\\lodash\\_nativeCreate.js", "node_modules\\lodash\\_hashClear.js", "node_modules\\lodash\\_hashDelete.js", "node_modules\\lodash\\_hashGet.js", "node_modules\\lodash\\_hashHas.js", "node_modules\\lodash\\_hashSet.js", "node_modules\\lodash\\_Hash.js", "node_modules\\lodash\\_listCacheClear.js", "node_modules\\lodash\\eq.js", "node_modules\\lodash\\_assocIndexOf.js", "node_modules\\lodash\\_listCacheDelete.js", "node_modules\\lodash\\_listCacheGet.js", "node_modules\\lodash\\_listCacheHas.js", "node_modules\\lodash\\_listCacheSet.js", "node_modules\\lodash\\_ListCache.js", "node_modules\\lodash\\_Map.js", "node_modules\\lodash\\_mapCacheClear.js", "node_modules\\lodash\\_isKeyable.js", "node_modules\\lodash\\_getMapData.js", "node_modules\\lodash\\_mapCacheDelete.js", "node_modules\\lodash\\_mapCacheGet.js", "node_modules\\lodash\\_mapCacheHas.js", "node_modules\\lodash\\_mapCacheSet.js", "node_modules\\lodash\\_MapCache.js", "node_modules\\lodash\\memoize.js", "node_modules\\lodash\\_memoizeCapped.js", "node_modules\\lodash\\_stringToPath.js", "node_modules\\lodash\\_arrayMap.js", "node_modules\\lodash\\_baseToString.js", "node_modules\\lodash\\toString.js", "node_modules\\lodash\\_castPath.js", "node_modules\\lodash\\_toKey.js", "node_modules\\lodash\\_baseGet.js", "node_modules\\lodash\\get.js", "node_modules\\fast-deep-equal\\es6\\index.js", "node_modules\\lodash\\_setCacheAdd.js", "node_modules\\lodash\\_setCacheHas.js", "node_modules\\lodash\\_SetCache.js", "node_modules\\lodash\\_baseFindIndex.js", "node_modules\\lodash\\_baseIsNaN.js", "node_modules\\lodash\\_strictIndexOf.js", "node_modules\\lodash\\_baseIndexOf.js", "node_modules\\lodash\\_arrayIncludes.js", "node_modules\\lodash\\_arrayIncludesWith.js", "node_modules\\lodash\\_cacheHas.js", "node_modules\\lodash\\_Set.js", "node_modules\\lodash\\noop.js", "node_modules\\lodash\\_setToArray.js", "node_modules\\lodash\\_createSet.js", "node_modules\\lodash\\_baseUniq.js", "node_modules\\lodash\\uniqWith.js", "node_modules\\@sapphire\\shapeshift\\dist\\cjs\\index.cjs", "node_modules\\fast-deep-equal\\index.js", "node_modules\\ts-mixer\\dist\\cjs\\util.js", "node_modules\\ts-mixer\\dist\\cjs\\proxy.js", "node_modules\\ts-mixer\\dist\\cjs\\settings.js", "node_modules\\ts-mixer\\dist\\cjs\\mixin-tracking.js", "node_modules\\ts-mixer\\dist\\cjs\\decorator.js", "node_modules\\ts-mixer\\dist\\cjs\\mixins.js", "node_modules\\ts-mixer\\dist\\cjs\\index.js", "node_modules\\@discordjs\\builders\\dist\\index.js", "node_modules\\discord.js\\src\\structures\\Component.js", "node_modules\\discord.js\\src\\structures\\ActionRow.js", "node_modules\\discord.js\\src\\structures\\ButtonBuilder.js", "node_modules\\discord.js\\src\\structures\\ButtonComponent.js", "node_modules\\discord.js\\src\\structures\\ChannelSelectMenuBuilder.js", "node_modules\\discord.js\\src\\structures\\BaseSelectMenuComponent.js", "node_modules\\discord.js\\src\\structures\\ChannelSelectMenuComponent.js", "node_modules\\discord.js\\src\\structures\\MentionableSelectMenuBuilder.js", "node_modules\\discord.js\\src\\structures\\MentionableSelectMenuComponent.js", "node_modules\\discord.js\\src\\structures\\RoleSelectMenuBuilder.js", "node_modules\\discord.js\\src\\structures\\RoleSelectMenuComponent.js", "node_modules\\discord.js\\src\\structures\\StringSelectMenuBuilder.js", "node_modules\\discord.js\\src\\structures\\StringSelectMenuComponent.js", "node_modules\\discord.js\\src\\structures\\TextInputBuilder.js", "node_modules\\discord.js\\src\\structures\\TextInputComponent.js", "node_modules\\discord.js\\src\\structures\\UserSelectMenuBuilder.js", "node_modules\\discord.js\\src\\structures\\UserSelectMenuComponent.js", "node_modules\\discord.js\\src\\util\\Components.js", "node_modules\\discord.js\\src\\structures\\ActionRowBuilder.js", "node_modules\\discord.js\\src\\structures\\GuildScheduledEvent.js", "node_modules\\discord.js\\src\\structures\\interfaces\\Application.js", "node_modules\\discord.js\\src\\structures\\IntegrationApplication.js", "node_modules\\discord.js\\src\\structures\\InviteStageInstance.js", "node_modules\\discord.js\\src\\structures\\BaseGuild.js", "node_modules\\discord.js\\src\\structures\\AnonymousGuild.js", "node_modules\\discord.js\\src\\structures\\Emoji.js", "node_modules\\discord.js\\src\\structures\\WelcomeChannel.js", "node_modules\\discord.js\\src\\structures\\WelcomeScreen.js", "node_modules\\discord.js\\src\\structures\\InviteGuild.js", "node_modules\\discord.js\\src\\structures\\Invite.js", "node_modules\\discord.js\\src\\structures\\GuildTemplate.js", "node_modules\\discord.js\\src\\util\\DataResolver.js", "node_modules\\discord.js\\src\\util\\MessageFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\BaseInteraction.js", "node_modules\\discord.js\\src\\structures\\ApplicationRoleConnectionMetadata.js", "node_modules\\discord.js\\src\\structures\\TeamMember.js", "node_modules\\discord.js\\src\\structures\\Team.js", "node_modules\\discord.js\\src\\managers\\ApplicationCommandPermissionsManager.js", "node_modules\\discord.js\\src\\structures\\ApplicationCommand.js", "node_modules\\discord.js\\src\\managers\\ApplicationCommandManager.js", "node_modules\\discord.js\\src\\structures\\ApplicationEmoji.js", "node_modules\\discord.js\\src\\managers\\ApplicationEmojiManager.js", "node_modules\\discord.js\\src\\structures\\Entitlement.js", "node_modules\\discord.js\\src\\managers\\EntitlementManager.js", "node_modules\\discord.js\\src\\structures\\Subscription.js", "node_modules\\discord.js\\src\\managers\\SubscriptionManager.js", "node_modules\\discord.js\\src\\util\\ApplicationFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\ClientApplication.js", "node_modules\\discord.js\\src\\structures\\Embed.js", "node_modules\\discord.js\\src\\structures\\MessageMentions.js", "node_modules\\discord.js\\src\\structures\\PollAnswer.js", "node_modules\\discord.js\\src\\structures\\Poll.js", "node_modules\\discord.js\\src\\structures\\ReactionCollector.js", "node_modules\\discord.js\\src\\structures\\Sticker.js", "node_modules\\discord.js\\src\\structures\\BaseGuildEmoji.js", "node_modules\\discord.js\\src\\managers\\GuildEmojiRoleManager.js", "node_modules\\discord.js\\src\\structures\\GuildEmoji.js", "node_modules\\discord.js\\src\\structures\\ReactionEmoji.js", "node_modules\\discord.js\\src\\util\\UserFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\User.js", "node_modules\\discord.js\\src\\managers\\ReactionUserManager.js", "node_modules\\discord.js\\src\\structures\\MessageReaction.js", "node_modules\\discord.js\\src\\managers\\ReactionManager.js", "node_modules\\discord.js\\src\\structures\\Message.js", "node_modules\\discord.js\\src\\structures\\Webhook.js", "node_modules\\discord.js\\src\\client\\WebhookClient.js", "node_modules\\discord.js\\src\\structures\\VoiceState.js", "node_modules\\discord.js\\src\\managers\\GuildMemberRoleManager.js", "node_modules\\discord.js\\src\\util\\GuildMemberFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\GuildMember.js", "node_modules\\discord.js\\src\\managers\\MessageManager.js", "node_modules\\discord.js\\src\\structures\\InteractionWebhook.js", "node_modules\\discord.js\\src\\structures\\MessagePayload.js", "node_modules\\discord.js\\src\\managers\\GuildMessageManager.js", "node_modules\\discord.js\\src\\structures\\interfaces\\TextBasedChannel.js", "node_modules\\discord.js\\src\\managers\\DMMessageManager.js", "node_modules\\discord.js\\src\\structures\\DMChannel.js", "node_modules\\discord.js\\src\\managers\\GuildForumThreadManager.js", "node_modules\\discord.js\\src\\structures\\ThreadOnlyChannel.js", "node_modules\\discord.js\\src\\util\\ThreadMemberFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\ThreadMember.js", "node_modules\\discord.js\\src\\managers\\ThreadMemberManager.js", "node_modules\\discord.js\\src\\structures\\ThreadChannel.js", "node_modules\\discord.js\\src\\managers\\ThreadManager.js", "node_modules\\discord.js\\src\\managers\\GuildTextThreadManager.js", "node_modules\\discord.js\\src\\structures\\BaseGuildTextChannel.js", "node_modules\\discord.js\\src\\structures\\NewsChannel.js", "node_modules\\discord.js\\src\\structures\\BaseGuildVoiceChannel.js", "node_modules\\discord.js\\src\\structures\\StageChannel.js", "node_modules\\discord.js\\src\\structures\\TextChannel.js", "node_modules\\discord.js\\src\\structures\\VoiceChannel.js", "node_modules\\discord.js\\src\\structures\\DirectoryChannel.js", "node_modules\\discord.js\\src\\managers\\PartialGroupDMMessageManager.js", "node_modules\\discord.js\\src\\structures\\PartialGroupDMChannel.js", "node_modules\\discord.js\\src\\structures\\ForumChannel.js", "node_modules\\discord.js\\src\\structures\\MediaChannel.js", "node_modules\\discord.js\\src\\util\\Channels.js", "node_modules\\discord.js\\src\\client\\actions\\ChannelUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\EntitlementCreate.js", "node_modules\\discord.js\\src\\client\\actions\\EntitlementDelete.js", "node_modules\\discord.js\\src\\client\\actions\\EntitlementUpdate.js", "node_modules\\discord.js\\src\\structures\\AutoModerationRule.js", "node_modules\\discord.js\\src\\structures\\GuildOnboardingPromptOption.js", "node_modules\\discord.js\\src\\structures\\GuildOnboardingPrompt.js", "node_modules\\discord.js\\src\\structures\\Integration.js", "node_modules\\discord.js\\src\\structures\\StageInstance.js", "node_modules\\discord.js\\src\\structures\\GuildAuditLogsEntry.js", "node_modules\\discord.js\\src\\client\\actions\\GuildAuditLogEntryCreate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildBanAdd.js", "node_modules\\discord.js\\src\\structures\\GuildBan.js", "node_modules\\discord.js\\src\\client\\actions\\GuildBanRemove.js", "node_modules\\discord.js\\src\\client\\actions\\GuildChannelsPositionUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildDelete.js", "node_modules\\discord.js\\src\\client\\actions\\GuildEmojiCreate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildEmojiDelete.js", "node_modules\\discord.js\\src\\client\\actions\\GuildEmojiUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildEmojisUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildIntegrationsUpdate.js", "node_modules\\discord.js\\src\\util\\Status.js", "node_modules\\discord.js\\src\\client\\actions\\GuildMemberRemove.js", "node_modules\\discord.js\\src\\client\\actions\\GuildMemberUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildRoleCreate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildRoleDelete.js", "node_modules\\discord.js\\src\\client\\actions\\GuildRoleUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildRolesPositionUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildScheduledEventCreate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildScheduledEventDelete.js", "node_modules\\discord.js\\src\\client\\actions\\GuildScheduledEventUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildScheduledEventUserAdd.js", "node_modules\\discord.js\\src\\client\\actions\\GuildScheduledEventUserRemove.js", "node_modules\\discord.js\\src\\client\\actions\\GuildStickerCreate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildStickerDelete.js", "node_modules\\discord.js\\src\\client\\actions\\GuildStickerUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildStickersUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\GuildUpdate.js", "node_modules\\discord.js\\src\\structures\\CommandInteractionOptionResolver.js", "node_modules\\discord.js\\src\\structures\\AutocompleteInteraction.js", "node_modules\\discord.js\\src\\structures\\InteractionCallback.js", "node_modules\\discord.js\\src\\structures\\InteractionCallbackResource.js", "node_modules\\discord.js\\src\\structures\\InteractionCallbackResponse.js", "node_modules\\discord.js\\src\\structures\\InteractionResponse.js", "node_modules\\discord.js\\src\\structures\\interfaces\\InteractionResponses.js", "node_modules\\discord.js\\src\\structures\\MessageComponentInteraction.js", "node_modules\\discord.js\\src\\structures\\ButtonInteraction.js", "node_modules\\discord.js\\src\\structures\\ChannelSelectMenuInteraction.js", "node_modules\\discord.js\\src\\structures\\CommandInteraction.js", "node_modules\\discord.js\\src\\structures\\ChatInputCommandInteraction.js", "node_modules\\discord.js\\src\\structures\\MentionableSelectMenuInteraction.js", "node_modules\\discord.js\\src\\structures\\ContextMenuCommandInteraction.js", "node_modules\\discord.js\\src\\structures\\MessageContextMenuCommandInteraction.js", "node_modules\\discord.js\\src\\structures\\ModalSubmitFields.js", "node_modules\\discord.js\\src\\structures\\ModalSubmitInteraction.js", "node_modules\\discord.js\\src\\structures\\RoleSelectMenuInteraction.js", "node_modules\\discord.js\\src\\structures\\StringSelectMenuInteraction.js", "node_modules\\discord.js\\src\\structures\\UserContextMenuCommandInteraction.js", "node_modules\\discord.js\\src\\structures\\UserSelectMenuInteraction.js", "node_modules\\discord.js\\src\\client\\actions\\InteractionCreate.js", "node_modules\\discord.js\\src\\client\\actions\\InviteCreate.js", "node_modules\\discord.js\\src\\client\\actions\\InviteDelete.js", "node_modules\\discord.js\\src\\client\\actions\\MessageCreate.js", "node_modules\\discord.js\\src\\client\\actions\\MessageDelete.js", "node_modules\\discord.js\\src\\client\\actions\\MessageDeleteBulk.js", "node_modules\\discord.js\\src\\client\\actions\\MessagePollVoteAdd.js", "node_modules\\discord.js\\src\\client\\actions\\MessagePollVoteRemove.js", "node_modules\\discord.js\\src\\client\\actions\\MessageReactionAdd.js", "node_modules\\discord.js\\src\\client\\actions\\MessageReactionRemove.js", "node_modules\\discord.js\\src\\client\\actions\\MessageReactionRemoveAll.js", "node_modules\\discord.js\\src\\client\\actions\\MessageReactionRemoveEmoji.js", "node_modules\\discord.js\\src\\client\\actions\\MessageUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\PresenceUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\StageInstanceCreate.js", "node_modules\\discord.js\\src\\client\\actions\\StageInstanceDelete.js", "node_modules\\discord.js\\src\\client\\actions\\StageInstanceUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\ThreadCreate.js", "node_modules\\discord.js\\src\\client\\actions\\ThreadDelete.js", "node_modules\\discord.js\\src\\client\\actions\\ThreadListSync.js", "node_modules\\discord.js\\src\\client\\actions\\ThreadMemberUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\ThreadMembersUpdate.js", "node_modules\\discord.js\\src\\structures\\Typing.js", "node_modules\\discord.js\\src\\client\\actions\\TypingStart.js", "node_modules\\discord.js\\src\\client\\actions\\UserUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\VoiceStateUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\WebhooksUpdate.js", "node_modules\\discord.js\\src\\client\\actions\\ActionsManager.js", "node_modules\\discord.js\\src\\client\\voice\\ClientVoiceManager.js", "node_modules\\@discordjs\\ws\\node_modules\\@discordjs\\collection\\dist\\index.js", "node_modules\\@discordjs\\ws\\dist\\index.js", "node_modules\\discord.js\\src\\util\\WebSocketShardEvents.js", "node_modules\\discord.js\\src\\client\\websocket\\WebSocketShard.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\APPLICATION_COMMAND_PERMISSIONS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\AUTO_MODERATION_ACTION_EXECUTION.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\AUTO_MODERATION_RULE_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\AUTO_MODERATION_RULE_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\AUTO_MODERATION_RULE_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\CHANNEL_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\CHANNEL_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\CHANNEL_PINS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\CHANNEL_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\ENTITLEMENT_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\ENTITLEMENT_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\ENTITLEMENT_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_AUDIT_LOG_ENTRY_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_BAN_ADD.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_BAN_REMOVE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_EMOJIS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_INTEGRATIONS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_MEMBERS_CHUNK.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_MEMBER_ADD.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_MEMBER_REMOVE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_MEMBER_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_ROLE_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_ROLE_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_ROLE_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_SCHEDULED_EVENT_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_SCHEDULED_EVENT_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_SCHEDULED_EVENT_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_SCHEDULED_EVENT_USER_ADD.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_SCHEDULED_EVENT_USER_REMOVE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_STICKERS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\GUILD_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\INTERACTION_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\INVITE_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\INVITE_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_DELETE_BULK.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_POLL_VOTE_ADD.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_POLL_VOTE_REMOVE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_REACTION_ADD.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_REACTION_REMOVE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_REACTION_REMOVE_ALL.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_REACTION_REMOVE_EMOJI.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\MESSAGE_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\PRESENCE_UPDATE.js", "node_modules\\discord.js\\src\\structures\\ClientUser.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\READY.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\RESUMED.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\STAGE_INSTANCE_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\STAGE_INSTANCE_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\STAGE_INSTANCE_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\SUBSCRIPTION_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\SUBSCRIPTION_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\SUBSCRIPTION_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\THREAD_CREATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\THREAD_DELETE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\THREAD_LIST_SYNC.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\THREAD_MEMBERS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\THREAD_MEMBER_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\THREAD_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\TYPING_START.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\USER_UPDATE.js", "node_modules\\discord.js\\src\\structures\\VoiceChannelEffect.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\VOICE_CHANNEL_EFFECT_SEND.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\VOICE_SERVER_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\VOICE_STATE_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\WEBHOOKS_UPDATE.js", "node_modules\\discord.js\\src\\client\\websocket\\handlers\\index.js", "node_modules\\discord.js\\src\\client\\websocket\\WebSocketManager.js", "node_modules\\discord.js\\src\\managers\\BaseGuildEmojiManager.js", "node_modules\\discord.js\\src\\managers\\ChannelManager.js", "node_modules\\discord.js\\src\\sharding\\ShardClientUtil.js", "node_modules\\discord.js\\src\\structures\\GuildAuditLogs.js", "node_modules\\discord.js\\src\\structures\\GuildOnboarding.js", "node_modules\\discord.js\\src\\structures\\GuildPreviewEmoji.js", "node_modules\\discord.js\\src\\structures\\GuildPreview.js", "node_modules\\discord.js\\src\\managers\\AutoModerationRuleManager.js", "node_modules\\discord.js\\src\\managers\\GuildApplicationCommandManager.js", "node_modules\\discord.js\\src\\managers\\GuildBanManager.js", "node_modules\\discord.js\\src\\managers\\GuildChannelManager.js", "node_modules\\discord.js\\src\\managers\\GuildEmojiManager.js", "node_modules\\discord.js\\src\\managers\\GuildInviteManager.js", "node_modules\\discord.js\\src\\managers\\GuildMemberManager.js", "node_modules\\discord.js\\src\\managers\\GuildScheduledEventManager.js", "node_modules\\discord.js\\src\\managers\\GuildStickerManager.js", "node_modules\\discord.js\\src\\util\\ActivityFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\Presence.js", "node_modules\\discord.js\\src\\managers\\PresenceManager.js", "node_modules\\discord.js\\src\\managers\\RoleManager.js", "node_modules\\discord.js\\src\\managers\\StageInstanceManager.js", "node_modules\\discord.js\\src\\managers\\VoiceStateManager.js", "node_modules\\discord.js\\src\\util\\SystemChannelFlagsBitField.js", "node_modules\\discord.js\\src\\structures\\Guild.js", "node_modules\\discord.js\\src\\structures\\OAuth2Guild.js", "node_modules\\discord.js\\src\\managers\\GuildManager.js", "node_modules\\discord.js\\src\\managers\\UserManager.js", "node_modules\\discord.js\\src\\structures\\ClientPresence.js", "node_modules\\discord.js\\src\\structures\\StickerPack.js", "node_modules\\discord.js\\src\\structures\\VoiceRegion.js", "node_modules\\discord.js\\src\\structures\\WidgetMember.js", "node_modules\\discord.js\\src\\structures\\Widget.js", "node_modules\\discord.js\\src\\util\\IntentsBitField.js", "node_modules\\discord.js\\src\\util\\Sweepers.js", "node_modules\\discord.js\\src\\client\\Client.js", "node_modules\\discord.js\\src\\util\\ShardEvents.js", "node_modules\\discord.js\\src\\sharding\\Shard.js", "node_modules\\discord.js\\src\\sharding\\ShardingManager.js", "node_modules\\discord.js\\src\\util\\Formatters.js", "node_modules\\discord.js\\src\\structures\\EmbedBuilder.js", "node_modules\\discord.js\\src\\structures\\AttachmentBuilder.js", "node_modules\\discord.js\\src\\structures\\ModalBuilder.js", "node_modules\\discord.js\\src\\structures\\SelectMenuBuilder.js", "node_modules\\discord.js\\src\\structures\\SelectMenuComponent.js", "node_modules\\discord.js\\src\\structures\\SelectMenuInteraction.js", "node_modules\\discord.js\\src\\structures\\StringSelectMenuOptionBuilder.js", "node_modules\\discord.js\\src\\structures\\SelectMenuOptionBuilder.js", "node_modules\\discord.js\\src\\index.js", "src\\external\\discord\\discord.module.ts"],
  "sourcesContent": [
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  calculateShardId: () => calculateShardId,\n  getUserAgentAppendix: () => getUserAgentAppendix,\n  isEquatable: () => isEquatable,\n  isJSONEncodable: () => isJSONEncodable,\n  lazy: () => lazy,\n  polyfillDispose: () => polyfillDispose,\n  range: () => range,\n  shouldUseGlobalFetchAndWebSocket: () => shouldUseGlobalFetchAndWebSocket,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/functions/lazy.ts\nfunction lazy(cb) {\n  let defaultValue;\n  return () => defaultValue ??= cb();\n}\n__name(lazy, \"lazy\");\n\n// src/functions/range.ts\nfunction* range(range2) {\n  let rangeEnd;\n  let start = 0;\n  let step = 1;\n  if (typeof range2 === \"number\") {\n    rangeEnd = range2;\n  } else {\n    start = range2.start;\n    rangeEnd = range2.end;\n    step = range2.step ?? 1;\n  }\n  for (let index = start; index < rangeEnd; index += step) {\n    yield index;\n  }\n}\n__name(range, \"range\");\n\n// src/functions/calculateShardId.ts\nfunction calculateShardId(guildId, shardCount) {\n  return Number(BigInt(guildId) >> 22n) % shardCount;\n}\n__name(calculateShardId, \"calculateShardId\");\n\n// src/functions/runtime.ts\nfunction shouldUseGlobalFetchAndWebSocket() {\n  if (typeof globalThis.process === \"undefined\") {\n    return \"fetch\" in globalThis && \"WebSocket\" in globalThis;\n  }\n  if (\"versions\" in globalThis.process) {\n    return \"deno\" in globalThis.process.versions || \"bun\" in globalThis.process.versions;\n  }\n  return false;\n}\n__name(shouldUseGlobalFetchAndWebSocket, \"shouldUseGlobalFetchAndWebSocket\");\n\n// src/functions/userAgentAppendix.ts\nfunction getUserAgentAppendix() {\n  if (typeof globalThis.EdgeRuntime !== \"undefined\") {\n    return \"Vercel-Edge-Functions\";\n  }\n  if (typeof globalThis.R2 !== \"undefined\" && typeof globalThis.WebSocketPair !== \"undefined\") {\n    return \"Cloudflare-Workers\";\n  }\n  if (typeof globalThis.Netlify !== \"undefined\") {\n    return \"Netlify-Edge-Functions\";\n  }\n  if (typeof globalThis.process !== \"object\") {\n    if (typeof globalThis.navigator === \"object\") {\n      return globalThis.navigator.userAgent;\n    }\n    return \"UnknownEnvironment\";\n  }\n  if (\"versions\" in globalThis.process) {\n    if (\"deno\" in globalThis.process.versions) {\n      return `Deno/${globalThis.process.versions.deno}`;\n    }\n    if (\"bun\" in globalThis.process.versions) {\n      return `Bun/${globalThis.process.versions.bun}`;\n    }\n    if (\"node\" in globalThis.process.versions) {\n      return `Node.js/${globalThis.process.versions.node}`;\n    }\n  }\n  return \"UnknownEnvironment\";\n}\n__name(getUserAgentAppendix, \"getUserAgentAppendix\");\n\n// src/functions/polyfillDispose.ts\nfunction polyfillDispose() {\n  Symbol.dispose ??= Symbol(\"Symbol.dispose\");\n  Symbol.asyncDispose ??= Symbol(\"Symbol.asyncDispose\");\n}\n__name(polyfillDispose, \"polyfillDispose\");\n\n// src/JSONEncodable.ts\nfunction isJSONEncodable(maybeEncodable) {\n  return maybeEncodable !== null && typeof maybeEncodable === \"object\" && \"toJSON\" in maybeEncodable;\n}\n__name(isJSONEncodable, \"isJSONEncodable\");\n\n// src/Equatable.ts\nfunction isEquatable(maybeEquatable) {\n  return maybeEquatable !== null && typeof maybeEquatable === \"object\" && \"equals\" in maybeEquatable;\n}\n__name(isEquatable, \"isEquatable\");\n\n// src/index.ts\nvar version = \"1.1.1\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  calculateShardId,\n  getUserAgentAppendix,\n  isEquatable,\n  isJSONEncodable,\n  lazy,\n  polyfillDispose,\n  range,\n  shouldUseGlobalFetchAndWebSocket,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global global, define, Symbol, Reflect, Promise, SuppressedError, Iterator */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __esDecorate;\r\nvar __runInitializers;\r\nvar __propKey;\r\nvar __setFunctionName;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __spreadArrays;\r\nvar __spreadArray;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\nvar __makeTemplateObject;\r\nvar __importStar;\r\nvar __importDefault;\r\nvar __classPrivateFieldGet;\r\nvar __classPrivateFieldSet;\r\nvar __classPrivateFieldIn;\r\nvar __createBinding;\r\nvar __addDisposableResource;\r\nvar __disposeResources;\r\nvar __rewriteRelativeImportExtension;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        if (exports !== root) {\r\n            if (typeof Object.create === \"function\") {\r\n                Object.defineProperty(exports, \"__esModule\", { value: true });\r\n            }\r\n            else {\r\n                exports.__esModule = true;\r\n            }\r\n        }\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                    t[p[i]] = s[p[i]];\r\n            }\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n        function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n        var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n        var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n        var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n        var _, done = false;\r\n        for (var i = decorators.length - 1; i >= 0; i--) {\r\n            var context = {};\r\n            for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n            for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n            context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n            var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n            if (kind === \"accessor\") {\r\n                if (result === void 0) continue;\r\n                if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n                if (_ = accept(result.get)) descriptor.get = _;\r\n                if (_ = accept(result.set)) descriptor.set = _;\r\n                if (_ = accept(result.init)) initializers.unshift(_);\r\n            }\r\n            else if (_ = accept(result)) {\r\n                if (kind === \"field\") initializers.unshift(_);\r\n                else descriptor[key] = _;\r\n            }\r\n        }\r\n        if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n        done = true;\r\n    };\r\n\r\n    __runInitializers = function (thisArg, initializers, value) {\r\n        var useValue = arguments.length > 2;\r\n        for (var i = 0; i < initializers.length; i++) {\r\n            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n        }\r\n        return useValue ? value : void 0;\r\n    };\r\n\r\n    __propKey = function (x) {\r\n        return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n    };\r\n\r\n    __setFunctionName = function (f, name, prefix) {\r\n        if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n        return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\r\n        return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function(m, o) {\r\n        for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n    };\r\n\r\n    __createBinding = Object.create ? (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        var desc = Object.getOwnPropertyDescriptor(m, k);\r\n        if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n            desc = { enumerable: true, get: function() { return m[k]; } };\r\n        }\r\n        Object.defineProperty(o, k2, desc);\r\n    }) : (function(o, m, k, k2) {\r\n        if (k2 === undefined) k2 = k;\r\n        o[k2] = m[k];\r\n    });\r\n\r\n    __values = function (o) {\r\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n        if (m) return m.call(o);\r\n        if (o && typeof o.length === \"number\") return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    /** @deprecated */\r\n    __spreadArrays = function () {\r\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n                r[k] = a[j];\r\n        return r;\r\n    };\r\n\r\n    __spreadArray = function (to, from, pack) {\r\n        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n            if (ar || !(i in from)) {\r\n                if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n                ar[i] = from[i];\r\n            }\r\n        }\r\n        return to.concat(ar || Array.prototype.slice.call(from));\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\r\n        function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    };\r\n\r\n    __makeTemplateObject = function (cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    var __setModuleDefault = Object.create ? (function(o, v) {\r\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n    }) : function(o, v) {\r\n        o[\"default\"] = v;\r\n    };\r\n\r\n    var ownKeys = function(o) {\r\n        ownKeys = Object.getOwnPropertyNames || function (o) {\r\n            var ar = [];\r\n            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\r\n            return ar;\r\n        };\r\n        return ownKeys(o);\r\n    };\r\n\r\n    __importStar = function (mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\r\n        __setModuleDefault(result, mod);\r\n        return result;\r\n    };\r\n\r\n    __importDefault = function (mod) {\r\n        return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n    };\r\n\r\n    __classPrivateFieldGet = function (receiver, state, kind, f) {\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n        return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n    };\r\n\r\n    __classPrivateFieldSet = function (receiver, state, value, kind, f) {\r\n        if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n        if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n        if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n        return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n    };\r\n\r\n    __classPrivateFieldIn = function (state, receiver) {\r\n        if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n        return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n    };\r\n\r\n    __addDisposableResource = function (env, value, async) {\r\n        if (value !== null && value !== void 0) {\r\n            if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\r\n            var dispose, inner;\r\n            if (async) {\r\n                if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\r\n                dispose = value[Symbol.asyncDispose];\r\n            }\r\n            if (dispose === void 0) {\r\n                if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\r\n                dispose = value[Symbol.dispose];\r\n                if (async) inner = dispose;\r\n            }\r\n            if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\r\n            if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\r\n            env.stack.push({ value: value, dispose: dispose, async: async });\r\n        }\r\n        else if (async) {\r\n            env.stack.push({ async: true });\r\n        }\r\n        return value;\r\n    };\r\n\r\n    var _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n        var e = new Error(message);\r\n        return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n    };\r\n\r\n    __disposeResources = function (env) {\r\n        function fail(e) {\r\n            env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\r\n            env.hasError = true;\r\n        }\r\n        var r, s = 0;\r\n        function next() {\r\n            while (r = env.stack.pop()) {\r\n                try {\r\n                    if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\r\n                    if (r.dispose) {\r\n                        var result = r.dispose.call(r.value);\r\n                        if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\r\n                    }\r\n                    else s |= 1;\r\n                }\r\n                catch (e) {\r\n                    fail(e);\r\n                }\r\n            }\r\n            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\r\n            if (env.hasError) throw env.error;\r\n        }\r\n        return next();\r\n    };\r\n\r\n    __rewriteRelativeImportExtension = function (path, preserveJsx) {\r\n        if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\r\n            return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\r\n                return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\r\n            });\r\n        }\r\n        return path;\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__esDecorate\", __esDecorate);\r\n    exporter(\"__runInitializers\", __runInitializers);\r\n    exporter(\"__propKey\", __propKey);\r\n    exporter(\"__setFunctionName\", __setFunctionName);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__createBinding\", __createBinding);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__spreadArrays\", __spreadArrays);\r\n    exporter(\"__spreadArray\", __spreadArray);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n    exporter(\"__makeTemplateObject\", __makeTemplateObject);\r\n    exporter(\"__importStar\", __importStar);\r\n    exporter(\"__importDefault\", __importDefault);\r\n    exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\r\n    exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\r\n    exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\r\n    exporter(\"__addDisposableResource\", __addDisposableResource);\r\n    exporter(\"__disposeResources\", __disposeResources);\r\n    exporter(\"__rewriteRelativeImportExtension\", __rewriteRelativeImportExtension);\r\n});\r\n\r\n0 && (module.exports = {\r\n    __extends: __extends,\r\n    __assign: __assign,\r\n    __rest: __rest,\r\n    __decorate: __decorate,\r\n    __param: __param,\r\n    __esDecorate: __esDecorate,\r\n    __runInitializers: __runInitializers,\r\n    __propKey: __propKey,\r\n    __setFunctionName: __setFunctionName,\r\n    __metadata: __metadata,\r\n    __awaiter: __awaiter,\r\n    __generator: __generator,\r\n    __exportStar: __exportStar,\r\n    __createBinding: __createBinding,\r\n    __values: __values,\r\n    __read: __read,\r\n    __spread: __spread,\r\n    __spreadArrays: __spreadArrays,\r\n    __spreadArray: __spreadArray,\r\n    __await: __await,\r\n    __asyncGenerator: __asyncGenerator,\r\n    __asyncDelegator: __asyncDelegator,\r\n    __asyncValues: __asyncValues,\r\n    __makeTemplateObject: __makeTemplateObject,\r\n    __importStar: __importStar,\r\n    __importDefault: __importDefault,\r\n    __classPrivateFieldGet: __classPrivateFieldGet,\r\n    __classPrivateFieldSet: __classPrivateFieldSet,\r\n    __classPrivateFieldIn: __classPrivateFieldIn,\r\n    __addDisposableResource: __addDisposableResource,\r\n    __disposeResources: __disposeResources,\r\n    __rewriteRelativeImportExtension: __rewriteRelativeImportExtension,\r\n});\r\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=common.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/topics/gateway\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VoiceChannelEffectSendAnimationType = exports.GatewayDispatchEvents = exports.GatewayIntentBits = exports.GatewayCloseCodes = exports.GatewayOpcodes = exports.GatewayVersion = void 0;\n__exportStar(require(\"./common\"), exports);\nexports.GatewayVersion = '10';\n/**\n * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes\n */\nvar GatewayOpcodes;\n(function (GatewayOpcodes) {\n    /**\n     * An event was dispatched\n     */\n    GatewayOpcodes[GatewayOpcodes[\"Dispatch\"] = 0] = \"Dispatch\";\n    /**\n     * A bidirectional opcode to maintain an active gateway connection.\n     * Fired periodically by the client, or fired by the gateway to request an immediate heartbeat from the client.\n     */\n    GatewayOpcodes[GatewayOpcodes[\"Heartbeat\"] = 1] = \"Heartbeat\";\n    /**\n     * Starts a new session during the initial handshake\n     */\n    GatewayOpcodes[GatewayOpcodes[\"Identify\"] = 2] = \"Identify\";\n    /**\n     * Update the client's presence\n     */\n    GatewayOpcodes[GatewayOpcodes[\"PresenceUpdate\"] = 3] = \"PresenceUpdate\";\n    /**\n     * Used to join/leave or move between voice channels\n     */\n    GatewayOpcodes[GatewayOpcodes[\"VoiceStateUpdate\"] = 4] = \"VoiceStateUpdate\";\n    /**\n     * Resume a previous session that was disconnected\n     */\n    GatewayOpcodes[GatewayOpcodes[\"Resume\"] = 6] = \"Resume\";\n    /**\n     * You should attempt to reconnect and resume immediately\n     */\n    GatewayOpcodes[GatewayOpcodes[\"Reconnect\"] = 7] = \"Reconnect\";\n    /**\n     * Request information about offline guild members in a large guild\n     */\n    GatewayOpcodes[GatewayOpcodes[\"RequestGuildMembers\"] = 8] = \"RequestGuildMembers\";\n    /**\n     * The session has been invalidated. You should reconnect and identify/resume accordingly\n     */\n    GatewayOpcodes[GatewayOpcodes[\"InvalidSession\"] = 9] = \"InvalidSession\";\n    /**\n     * Sent immediately after connecting, contains the `heartbeat_interval` to use\n     */\n    GatewayOpcodes[GatewayOpcodes[\"Hello\"] = 10] = \"Hello\";\n    /**\n     * Sent in response to receiving a heartbeat to acknowledge that it has been received\n     */\n    GatewayOpcodes[GatewayOpcodes[\"HeartbeatAck\"] = 11] = \"HeartbeatAck\";\n    /**\n     * Request information about soundboard sounds in a set of guilds\n     */\n    GatewayOpcodes[GatewayOpcodes[\"RequestSoundboardSounds\"] = 31] = \"RequestSoundboardSounds\";\n})(GatewayOpcodes || (exports.GatewayOpcodes = GatewayOpcodes = {}));\n/**\n * https://discord.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-close-event-codes\n */\nvar GatewayCloseCodes;\n(function (GatewayCloseCodes) {\n    /**\n     * We're not sure what went wrong. Try reconnecting?\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"UnknownError\"] = 4000] = \"UnknownError\";\n    /**\n     * You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!\n     *\n     * See https://discord.com/developers/docs/topics/gateway-events#payload-structure\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"UnknownOpcode\"] = 4001] = \"UnknownOpcode\";\n    /**\n     * You sent an invalid payload to us. Don't do that!\n     *\n     * See https://discord.com/developers/docs/topics/gateway#sending-events\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"DecodeError\"] = 4002] = \"DecodeError\";\n    /**\n     * You sent us a payload prior to identifying\n     *\n     * See https://discord.com/developers/docs/topics/gateway-events#identify\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"NotAuthenticated\"] = 4003] = \"NotAuthenticated\";\n    /**\n     * The account token sent with your identify payload is incorrect\n     *\n     * See https://discord.com/developers/docs/topics/gateway-events#identify\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"AuthenticationFailed\"] = 4004] = \"AuthenticationFailed\";\n    /**\n     * You sent more than one identify payload. Don't do that!\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"AlreadyAuthenticated\"] = 4005] = \"AlreadyAuthenticated\";\n    /**\n     * The sequence sent when resuming the session was invalid. Reconnect and start a new session\n     *\n     * See https://discord.com/developers/docs/topics/gateway-events#resume\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"InvalidSeq\"] = 4007] = \"InvalidSeq\";\n    /**\n     * Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"RateLimited\"] = 4008] = \"RateLimited\";\n    /**\n     * Your session timed out. Reconnect and start a new one\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"SessionTimedOut\"] = 4009] = \"SessionTimedOut\";\n    /**\n     * You sent us an invalid shard when identifying\n     *\n     * See https://discord.com/developers/docs/topics/gateway#sharding\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"InvalidShard\"] = 4010] = \"InvalidShard\";\n    /**\n     * The session would have handled too many guilds - you are required to shard your connection in order to connect\n     *\n     * See https://discord.com/developers/docs/topics/gateway#sharding\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"ShardingRequired\"] = 4011] = \"ShardingRequired\";\n    /**\n     * You sent an invalid version for the gateway\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"InvalidAPIVersion\"] = 4012] = \"InvalidAPIVersion\";\n    /**\n     * You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value\n     *\n     * See https://discord.com/developers/docs/topics/gateway#gateway-intents\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"InvalidIntents\"] = 4013] = \"InvalidIntents\";\n    /**\n     * You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not\n     * enabled or are not whitelisted for\n     *\n     * See https://discord.com/developers/docs/topics/gateway#gateway-intents\n     *\n     * See https://discord.com/developers/docs/topics/gateway#privileged-intents\n     */\n    GatewayCloseCodes[GatewayCloseCodes[\"DisallowedIntents\"] = 4014] = \"DisallowedIntents\";\n})(GatewayCloseCodes || (exports.GatewayCloseCodes = GatewayCloseCodes = {}));\n/**\n * https://discord.com/developers/docs/topics/gateway#list-of-intents\n */\nvar GatewayIntentBits;\n(function (GatewayIntentBits) {\n    GatewayIntentBits[GatewayIntentBits[\"Guilds\"] = 1] = \"Guilds\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildMembers\"] = 2] = \"GuildMembers\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildModeration\"] = 4] = \"GuildModeration\";\n    /**\n     * @deprecated This is the old name for {@apilink GatewayIntentBits#GuildModeration}\n     */\n    GatewayIntentBits[GatewayIntentBits[\"GuildBans\"] = 4] = \"GuildBans\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildExpressions\"] = 8] = \"GuildExpressions\";\n    /**\n     * @deprecated This is the old name for {@apilink GatewayIntentBits#GuildExpressions}\n     */\n    GatewayIntentBits[GatewayIntentBits[\"GuildEmojisAndStickers\"] = 8] = \"GuildEmojisAndStickers\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildIntegrations\"] = 16] = \"GuildIntegrations\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildWebhooks\"] = 32] = \"GuildWebhooks\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildInvites\"] = 64] = \"GuildInvites\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildVoiceStates\"] = 128] = \"GuildVoiceStates\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildPresences\"] = 256] = \"GuildPresences\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildMessages\"] = 512] = \"GuildMessages\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildMessageReactions\"] = 1024] = \"GuildMessageReactions\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildMessageTyping\"] = 2048] = \"GuildMessageTyping\";\n    GatewayIntentBits[GatewayIntentBits[\"DirectMessages\"] = 4096] = \"DirectMessages\";\n    GatewayIntentBits[GatewayIntentBits[\"DirectMessageReactions\"] = 8192] = \"DirectMessageReactions\";\n    GatewayIntentBits[GatewayIntentBits[\"DirectMessageTyping\"] = 16384] = \"DirectMessageTyping\";\n    GatewayIntentBits[GatewayIntentBits[\"MessageContent\"] = 32768] = \"MessageContent\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildScheduledEvents\"] = 65536] = \"GuildScheduledEvents\";\n    GatewayIntentBits[GatewayIntentBits[\"AutoModerationConfiguration\"] = 1048576] = \"AutoModerationConfiguration\";\n    GatewayIntentBits[GatewayIntentBits[\"AutoModerationExecution\"] = 2097152] = \"AutoModerationExecution\";\n    GatewayIntentBits[GatewayIntentBits[\"GuildMessagePolls\"] = 16777216] = \"GuildMessagePolls\";\n    GatewayIntentBits[GatewayIntentBits[\"DirectMessagePolls\"] = 33554432] = \"DirectMessagePolls\";\n})(GatewayIntentBits || (exports.GatewayIntentBits = GatewayIntentBits = {}));\n/**\n * https://discord.com/developers/docs/topics/gateway-events#receive-events\n */\nvar GatewayDispatchEvents;\n(function (GatewayDispatchEvents) {\n    GatewayDispatchEvents[\"ApplicationCommandPermissionsUpdate\"] = \"APPLICATION_COMMAND_PERMISSIONS_UPDATE\";\n    GatewayDispatchEvents[\"AutoModerationActionExecution\"] = \"AUTO_MODERATION_ACTION_EXECUTION\";\n    GatewayDispatchEvents[\"AutoModerationRuleCreate\"] = \"AUTO_MODERATION_RULE_CREATE\";\n    GatewayDispatchEvents[\"AutoModerationRuleDelete\"] = \"AUTO_MODERATION_RULE_DELETE\";\n    GatewayDispatchEvents[\"AutoModerationRuleUpdate\"] = \"AUTO_MODERATION_RULE_UPDATE\";\n    GatewayDispatchEvents[\"ChannelCreate\"] = \"CHANNEL_CREATE\";\n    GatewayDispatchEvents[\"ChannelDelete\"] = \"CHANNEL_DELETE\";\n    GatewayDispatchEvents[\"ChannelPinsUpdate\"] = \"CHANNEL_PINS_UPDATE\";\n    GatewayDispatchEvents[\"ChannelUpdate\"] = \"CHANNEL_UPDATE\";\n    GatewayDispatchEvents[\"EntitlementCreate\"] = \"ENTITLEMENT_CREATE\";\n    GatewayDispatchEvents[\"EntitlementDelete\"] = \"ENTITLEMENT_DELETE\";\n    GatewayDispatchEvents[\"EntitlementUpdate\"] = \"ENTITLEMENT_UPDATE\";\n    GatewayDispatchEvents[\"GuildAuditLogEntryCreate\"] = \"GUILD_AUDIT_LOG_ENTRY_CREATE\";\n    GatewayDispatchEvents[\"GuildBanAdd\"] = \"GUILD_BAN_ADD\";\n    GatewayDispatchEvents[\"GuildBanRemove\"] = \"GUILD_BAN_REMOVE\";\n    GatewayDispatchEvents[\"GuildCreate\"] = \"GUILD_CREATE\";\n    GatewayDispatchEvents[\"GuildDelete\"] = \"GUILD_DELETE\";\n    GatewayDispatchEvents[\"GuildEmojisUpdate\"] = \"GUILD_EMOJIS_UPDATE\";\n    GatewayDispatchEvents[\"GuildIntegrationsUpdate\"] = \"GUILD_INTEGRATIONS_UPDATE\";\n    GatewayDispatchEvents[\"GuildMemberAdd\"] = \"GUILD_MEMBER_ADD\";\n    GatewayDispatchEvents[\"GuildMemberRemove\"] = \"GUILD_MEMBER_REMOVE\";\n    GatewayDispatchEvents[\"GuildMembersChunk\"] = \"GUILD_MEMBERS_CHUNK\";\n    GatewayDispatchEvents[\"GuildMemberUpdate\"] = \"GUILD_MEMBER_UPDATE\";\n    GatewayDispatchEvents[\"GuildRoleCreate\"] = \"GUILD_ROLE_CREATE\";\n    GatewayDispatchEvents[\"GuildRoleDelete\"] = \"GUILD_ROLE_DELETE\";\n    GatewayDispatchEvents[\"GuildRoleUpdate\"] = \"GUILD_ROLE_UPDATE\";\n    GatewayDispatchEvents[\"GuildScheduledEventCreate\"] = \"GUILD_SCHEDULED_EVENT_CREATE\";\n    GatewayDispatchEvents[\"GuildScheduledEventDelete\"] = \"GUILD_SCHEDULED_EVENT_DELETE\";\n    GatewayDispatchEvents[\"GuildScheduledEventUpdate\"] = \"GUILD_SCHEDULED_EVENT_UPDATE\";\n    GatewayDispatchEvents[\"GuildScheduledEventUserAdd\"] = \"GUILD_SCHEDULED_EVENT_USER_ADD\";\n    GatewayDispatchEvents[\"GuildScheduledEventUserRemove\"] = \"GUILD_SCHEDULED_EVENT_USER_REMOVE\";\n    GatewayDispatchEvents[\"GuildSoundboardSoundCreate\"] = \"GUILD_SOUNDBOARD_SOUND_CREATE\";\n    GatewayDispatchEvents[\"GuildSoundboardSoundDelete\"] = \"GUILD_SOUNDBOARD_SOUND_DELETE\";\n    GatewayDispatchEvents[\"GuildSoundboardSoundsUpdate\"] = \"GUILD_SOUNDBOARD_SOUNDS_UPDATE\";\n    GatewayDispatchEvents[\"GuildSoundboardSoundUpdate\"] = \"GUILD_SOUNDBOARD_SOUND_UPDATE\";\n    GatewayDispatchEvents[\"SoundboardSounds\"] = \"SOUNDBOARD_SOUNDS\";\n    GatewayDispatchEvents[\"GuildStickersUpdate\"] = \"GUILD_STICKERS_UPDATE\";\n    GatewayDispatchEvents[\"GuildUpdate\"] = \"GUILD_UPDATE\";\n    GatewayDispatchEvents[\"IntegrationCreate\"] = \"INTEGRATION_CREATE\";\n    GatewayDispatchEvents[\"IntegrationDelete\"] = \"INTEGRATION_DELETE\";\n    GatewayDispatchEvents[\"IntegrationUpdate\"] = \"INTEGRATION_UPDATE\";\n    GatewayDispatchEvents[\"InteractionCreate\"] = \"INTERACTION_CREATE\";\n    GatewayDispatchEvents[\"InviteCreate\"] = \"INVITE_CREATE\";\n    GatewayDispatchEvents[\"InviteDelete\"] = \"INVITE_DELETE\";\n    GatewayDispatchEvents[\"MessageCreate\"] = \"MESSAGE_CREATE\";\n    GatewayDispatchEvents[\"MessageDelete\"] = \"MESSAGE_DELETE\";\n    GatewayDispatchEvents[\"MessageDeleteBulk\"] = \"MESSAGE_DELETE_BULK\";\n    GatewayDispatchEvents[\"MessagePollVoteAdd\"] = \"MESSAGE_POLL_VOTE_ADD\";\n    GatewayDispatchEvents[\"MessagePollVoteRemove\"] = \"MESSAGE_POLL_VOTE_REMOVE\";\n    GatewayDispatchEvents[\"MessageReactionAdd\"] = \"MESSAGE_REACTION_ADD\";\n    GatewayDispatchEvents[\"MessageReactionRemove\"] = \"MESSAGE_REACTION_REMOVE\";\n    GatewayDispatchEvents[\"MessageReactionRemoveAll\"] = \"MESSAGE_REACTION_REMOVE_ALL\";\n    GatewayDispatchEvents[\"MessageReactionRemoveEmoji\"] = \"MESSAGE_REACTION_REMOVE_EMOJI\";\n    GatewayDispatchEvents[\"MessageUpdate\"] = \"MESSAGE_UPDATE\";\n    GatewayDispatchEvents[\"PresenceUpdate\"] = \"PRESENCE_UPDATE\";\n    GatewayDispatchEvents[\"Ready\"] = \"READY\";\n    GatewayDispatchEvents[\"Resumed\"] = \"RESUMED\";\n    GatewayDispatchEvents[\"StageInstanceCreate\"] = \"STAGE_INSTANCE_CREATE\";\n    GatewayDispatchEvents[\"StageInstanceDelete\"] = \"STAGE_INSTANCE_DELETE\";\n    GatewayDispatchEvents[\"StageInstanceUpdate\"] = \"STAGE_INSTANCE_UPDATE\";\n    GatewayDispatchEvents[\"SubscriptionCreate\"] = \"SUBSCRIPTION_CREATE\";\n    GatewayDispatchEvents[\"SubscriptionDelete\"] = \"SUBSCRIPTION_DELETE\";\n    GatewayDispatchEvents[\"SubscriptionUpdate\"] = \"SUBSCRIPTION_UPDATE\";\n    GatewayDispatchEvents[\"ThreadCreate\"] = \"THREAD_CREATE\";\n    GatewayDispatchEvents[\"ThreadDelete\"] = \"THREAD_DELETE\";\n    GatewayDispatchEvents[\"ThreadListSync\"] = \"THREAD_LIST_SYNC\";\n    GatewayDispatchEvents[\"ThreadMembersUpdate\"] = \"THREAD_MEMBERS_UPDATE\";\n    GatewayDispatchEvents[\"ThreadMemberUpdate\"] = \"THREAD_MEMBER_UPDATE\";\n    GatewayDispatchEvents[\"ThreadUpdate\"] = \"THREAD_UPDATE\";\n    GatewayDispatchEvents[\"TypingStart\"] = \"TYPING_START\";\n    GatewayDispatchEvents[\"UserUpdate\"] = \"USER_UPDATE\";\n    GatewayDispatchEvents[\"VoiceChannelEffectSend\"] = \"VOICE_CHANNEL_EFFECT_SEND\";\n    GatewayDispatchEvents[\"VoiceServerUpdate\"] = \"VOICE_SERVER_UPDATE\";\n    GatewayDispatchEvents[\"VoiceStateUpdate\"] = \"VOICE_STATE_UPDATE\";\n    GatewayDispatchEvents[\"WebhooksUpdate\"] = \"WEBHOOKS_UPDATE\";\n})(GatewayDispatchEvents || (exports.GatewayDispatchEvents = GatewayDispatchEvents = {}));\n/**\n * https://discord.com/developers/docs/topics/gateway-events#voice-channel-effect-send-animation-types\n */\nvar VoiceChannelEffectSendAnimationType;\n(function (VoiceChannelEffectSendAnimationType) {\n    /**\n     * A fun animation, sent by a Nitro subscriber\n     */\n    VoiceChannelEffectSendAnimationType[VoiceChannelEffectSendAnimationType[\"Premium\"] = 0] = \"Premium\";\n    /**\n     * The standard animation\n     */\n    VoiceChannelEffectSendAnimationType[VoiceChannelEffectSendAnimationType[\"Basic\"] = 1] = \"Basic\";\n})(VoiceChannelEffectSendAnimationType || (exports.VoiceChannelEffectSendAnimationType = VoiceChannelEffectSendAnimationType = {}));\n// #endregion Shared\n//# sourceMappingURL=v10.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FormattingPatterns = void 0;\n/**\n * https://discord.com/developers/docs/reference#message-formatting-formats\n */\nexports.FormattingPatterns = {\n    /**\n     * Regular expression for matching a user mention, strictly without a nickname\n     *\n     * The `id` group property is present on the `exec` result of this expression\n     */\n    User: /<@(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching a user mention, strictly with a nickname\n     *\n     * The `id` group property is present on the `exec` result of this expression\n     *\n     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it\n     */\n    UserWithNickname: /<@!(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching a user mention, with or without a nickname\n     *\n     * The `id` group property is present on the `exec` result of this expression\n     *\n     * @deprecated Passing `!` in user mentions is no longer necessary / supported, and future message contents won't have it\n     */\n    UserWithOptionalNickname: /<@!?(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching a channel mention\n     *\n     * The `id` group property is present on the `exec` result of this expression\n     */\n    Channel: /<#(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching a role mention\n     *\n     * The `id` group property is present on the `exec` result of this expression\n     */\n    Role: /<@&(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching a application command mention\n     *\n     * The `fullName` (possibly including `name`, `subcommandOrGroup` and `subcommand`) and `id` group properties are present on the `exec` result of this expression\n     */\n    SlashCommand: \n    // eslint-disable-next-line unicorn/no-unsafe-regex\n    /<\\/(?<fullName>(?<name>[-_\\p{Letter}\\p{Number}\\p{sc=Deva}\\p{sc=Thai}]{1,32})(?: (?<subcommandOrGroup>[-_\\p{Letter}\\p{Number}\\p{sc=Deva}\\p{sc=Thai}]{1,32}))?(?: (?<subcommand>[-_\\p{Letter}\\p{Number}\\p{sc=Deva}\\p{sc=Thai}]{1,32}))?):(?<id>\\d{17,20})>/u,\n    /**\n     * Regular expression for matching a custom emoji, either static or animated\n     *\n     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression\n     */\n    Emoji: /<(?<animated>a)?:(?<name>\\w{2,32}):(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching strictly an animated custom emoji\n     *\n     * The `animated`, `name` and `id` group properties are present on the `exec` result of this expression\n     */\n    AnimatedEmoji: /<(?<animated>a):(?<name>\\w{2,32}):(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching strictly a static custom emoji\n     *\n     * The `name` and `id` group properties are present on the `exec` result of this expression\n     */\n    StaticEmoji: /<:(?<name>\\w{2,32}):(?<id>\\d{17,20})>/,\n    /**\n     * Regular expression for matching a timestamp, either default or custom styled\n     *\n     * The `timestamp` and `style` group properties are present on the `exec` result of this expression\n     */\n    // eslint-disable-next-line prefer-named-capture-group\n    Timestamp: /<t:(?<timestamp>-?\\d{1,13})(:(?<style>[DFRTdft]))?>/,\n    /**\n     * Regular expression for matching strictly default styled timestamps\n     *\n     * The `timestamp` group property is present on the `exec` result of this expression\n     */\n    DefaultStyledTimestamp: /<t:(?<timestamp>-?\\d{1,13})>/,\n    /**\n     * Regular expression for matching strictly custom styled timestamps\n     *\n     * The `timestamp` and `style` group properties are present on the `exec` result of this expression\n     */\n    StyledTimestamp: /<t:(?<timestamp>-?\\d{1,13}):(?<style>[DFRTdft])>/,\n    /**\n     * Regular expression for matching a guild navigation mention\n     *\n     * The `type` group property is present on the `exec` result of this expression\n     */\n    GuildNavigation: /<id:(?<type>customize|browse|guide|linked-roles)>/,\n    /**\n     * Regular expression for matching a linked role mention\n     *\n     * The `id` group property is present on the `exec` result of this expression\n     */\n    LinkedRole: /<id:linked-roles:(?<id>\\d{17,20})>/,\n};\n/**\n * Freezes the formatting patterns\n *\n * @internal\n */\nObject.freeze(exports.FormattingPatterns);\n//# sourceMappingURL=globals.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PermissionFlagsBits = void 0;\n/**\n * https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags\n *\n * These flags are exported as `BigInt`s and NOT numbers. Wrapping them in `Number()`\n * may cause issues, try to use BigInts as much as possible or modules that can\n * replicate them in some way\n */\nexports.PermissionFlagsBits = {\n    /**\n     * Allows creation of instant invites\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    CreateInstantInvite: 1n << 0n,\n    /**\n     * Allows kicking members\n     */\n    // eslint-disable-next-line sonarjs/no-identical-expressions\n    KickMembers: 1n << 1n,\n    /**\n     * Allows banning members\n     */\n    BanMembers: 1n << 2n,\n    /**\n     * Allows all permissions and bypasses channel permission overwrites\n     */\n    Administrator: 1n << 3n,\n    /**\n     * Allows management and editing of channels\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    ManageChannels: 1n << 4n,\n    /**\n     * Allows management and editing of the guild\n     */\n    ManageGuild: 1n << 5n,\n    /**\n     * Allows for the addition of reactions to messages\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    AddReactions: 1n << 6n,\n    /**\n     * Allows for viewing of audit logs\n     */\n    ViewAuditLog: 1n << 7n,\n    /**\n     * Allows for using priority speaker in a voice channel\n     *\n     * Applies to channel types: Voice\n     */\n    PrioritySpeaker: 1n << 8n,\n    /**\n     * Allows the user to go live\n     *\n     * Applies to channel types: Voice, Stage\n     */\n    Stream: 1n << 9n,\n    /**\n     * Allows guild members to view a channel, which includes reading messages in text channels and joining voice channels\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    ViewChannel: 1n << 10n,\n    /**\n     * Allows for sending messages in a channel and creating threads in a forum\n     * (does not allow sending messages in threads)\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    SendMessages: 1n << 11n,\n    /**\n     * Allows for sending of `/tts` messages\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    SendTTSMessages: 1n << 12n,\n    /**\n     * Allows for deletion of other users messages\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    ManageMessages: 1n << 13n,\n    /**\n     * Links sent by users with this permission will be auto-embedded\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    EmbedLinks: 1n << 14n,\n    /**\n     * Allows for uploading images and files\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    AttachFiles: 1n << 15n,\n    /**\n     * Allows for reading of message history\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    ReadMessageHistory: 1n << 16n,\n    /**\n     * Allows for using the `@everyone` tag to notify all users in a channel,\n     * and the `@here` tag to notify all online users in a channel\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    MentionEveryone: 1n << 17n,\n    /**\n     * Allows the usage of custom emojis from other servers\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    UseExternalEmojis: 1n << 18n,\n    /**\n     * Allows for viewing guild insights\n     */\n    ViewGuildInsights: 1n << 19n,\n    /**\n     * Allows for joining of a voice channel\n     *\n     * Applies to channel types: Voice, Stage\n     */\n    Connect: 1n << 20n,\n    /**\n     * Allows for speaking in a voice channel\n     *\n     * Applies to channel types: Voice\n     */\n    Speak: 1n << 21n,\n    /**\n     * Allows for muting members in a voice channel\n     *\n     * Applies to channel types: Voice, Stage\n     */\n    MuteMembers: 1n << 22n,\n    /**\n     * Allows for deafening of members in a voice channel\n     *\n     * Applies to channel types: Voice\n     */\n    DeafenMembers: 1n << 23n,\n    /**\n     * Allows for moving of members between voice channels\n     *\n     * Applies to channel types: Voice, Stage\n     */\n    MoveMembers: 1n << 24n,\n    /**\n     * Allows for using voice-activity-detection in a voice channel\n     *\n     * Applies to channel types: Voice\n     */\n    UseVAD: 1n << 25n,\n    /**\n     * Allows for modification of own nickname\n     */\n    ChangeNickname: 1n << 26n,\n    /**\n     * Allows for modification of other users nicknames\n     */\n    ManageNicknames: 1n << 27n,\n    /**\n     * Allows management and editing of roles\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    ManageRoles: 1n << 28n,\n    /**\n     * Allows management and editing of webhooks\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    ManageWebhooks: 1n << 29n,\n    /**\n     * Allows management and editing of emojis, stickers, and soundboard sounds\n     *\n     * @deprecated This is the old name for {@apilink PermissionFlagsBits#ManageGuildExpressions}\n     */\n    ManageEmojisAndStickers: 1n << 30n,\n    /**\n     * Allows for editing and deleting emojis, stickers, and soundboard sounds created by all users\n     */\n    ManageGuildExpressions: 1n << 30n,\n    /**\n     * Allows members to use application commands, including slash commands and context menu commands\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    UseApplicationCommands: 1n << 31n,\n    /**\n     * Allows for requesting to speak in stage channels\n     *\n     * Applies to channel types: Stage\n     */\n    RequestToSpeak: 1n << 32n,\n    /**\n     * Allows for editing and deleting scheduled events created by all users\n     *\n     * Applies to channel types: Voice, Stage\n     */\n    ManageEvents: 1n << 33n,\n    /**\n     * Allows for deleting and archiving threads, and viewing all private threads\n     *\n     * Applies to channel types: Text\n     */\n    ManageThreads: 1n << 34n,\n    /**\n     * Allows for creating public and announcement threads\n     *\n     * Applies to channel types: Text\n     */\n    CreatePublicThreads: 1n << 35n,\n    /**\n     * Allows for creating private threads\n     *\n     * Applies to channel types: Text\n     */\n    CreatePrivateThreads: 1n << 36n,\n    /**\n     * Allows the usage of custom stickers from other servers\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    UseExternalStickers: 1n << 37n,\n    /**\n     * Allows for sending messages in threads\n     *\n     * Applies to channel types: Text\n     */\n    SendMessagesInThreads: 1n << 38n,\n    /**\n     * Allows for using Activities (applications with the {@apilink ApplicationFlags.Embedded} flag) in a voice channel\n     *\n     * Applies to channel types: Voice\n     */\n    UseEmbeddedActivities: 1n << 39n,\n    /**\n     * Allows for timing out users to prevent them from sending or reacting to messages in chat and threads,\n     * and from speaking in voice and stage channels\n     */\n    ModerateMembers: 1n << 40n,\n    /**\n     * Allows for viewing role subscription insights\n     */\n    ViewCreatorMonetizationAnalytics: 1n << 41n,\n    /**\n     * Allows for using soundboard in a voice channel\n     *\n     * Applies to channel types: Voice\n     */\n    UseSoundboard: 1n << 42n,\n    /**\n     * Allows for creating emojis, stickers, and soundboard sounds, and editing and deleting those created by the current user\n     */\n    CreateGuildExpressions: 1n << 43n,\n    /**\n     * Allows for creating scheduled events, and editing and deleting those created by the current user\n     *\n     * Applies to channel types: Voice, Stage\n     */\n    CreateEvents: 1n << 44n,\n    /**\n     * Allows the usage of custom soundboard sounds from other servers\n     *\n     * Applies to channel types: Voice\n     */\n    UseExternalSounds: 1n << 45n,\n    /**\n     * Allows sending voice messages\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    SendVoiceMessages: 1n << 46n,\n    /**\n     * Allows sending polls\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    SendPolls: 1n << 49n,\n    /**\n     * Allows user-installed apps to send public responses. When disabled, users will still be allowed to use their apps but the responses will be ephemeral. This only applies to apps not also installed to the server\n     *\n     * Applies to channel types: Text, Voice, Stage\n     */\n    UseExternalApps: 1n << 50n,\n};\n/**\n * Freeze the object of bits, preventing any modifications to it\n *\n * @internal\n */\nObject.freeze(exports.PermissionFlagsBits);\n//# sourceMappingURL=common.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/application\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApplicationWebhookEventStatus = exports.ApplicationRoleConnectionMetadataType = exports.ApplicationFlags = void 0;\n/**\n * https://discord.com/developers/docs/resources/application#application-object-application-flags\n */\nvar ApplicationFlags;\n(function (ApplicationFlags) {\n    /**\n     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ApplicationFlags[ApplicationFlags[\"EmbeddedReleased\"] = 2] = \"EmbeddedReleased\";\n    /**\n     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ApplicationFlags[ApplicationFlags[\"ManagedEmoji\"] = 4] = \"ManagedEmoji\";\n    /**\n     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ApplicationFlags[ApplicationFlags[\"EmbeddedIAP\"] = 8] = \"EmbeddedIAP\";\n    /**\n     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ApplicationFlags[ApplicationFlags[\"GroupDMCreate\"] = 16] = \"GroupDMCreate\";\n    /**\n     * Indicates if an app uses the Auto Moderation API\n     */\n    ApplicationFlags[ApplicationFlags[\"ApplicationAutoModerationRuleCreateBadge\"] = 64] = \"ApplicationAutoModerationRuleCreateBadge\";\n    /**\n     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ApplicationFlags[ApplicationFlags[\"RPCHasConnected\"] = 2048] = \"RPCHasConnected\";\n    /**\n     * Intent required for bots in 100 or more servers to receive `presence_update` events\n     */\n    ApplicationFlags[ApplicationFlags[\"GatewayPresence\"] = 4096] = \"GatewayPresence\";\n    /**\n     * Intent required for bots in under 100 servers to receive `presence_update` events, found in Bot Settings\n     */\n    ApplicationFlags[ApplicationFlags[\"GatewayPresenceLimited\"] = 8192] = \"GatewayPresenceLimited\";\n    /**\n     * Intent required for bots in 100 or more servers to receive member-related events like `guild_member_add`.\n     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)\n     */\n    ApplicationFlags[ApplicationFlags[\"GatewayGuildMembers\"] = 16384] = \"GatewayGuildMembers\";\n    /**\n     * Intent required for bots in under 100 servers to receive member-related events like `guild_member_add`, found in Bot Settings.\n     * See list of member-related events [under `GUILD_MEMBERS`](https://discord.com/developers/docs/topics/gateway#list-of-intents)\n     */\n    ApplicationFlags[ApplicationFlags[\"GatewayGuildMembersLimited\"] = 32768] = \"GatewayGuildMembersLimited\";\n    /**\n     * Indicates unusual growth of an app that prevents verification\n     */\n    ApplicationFlags[ApplicationFlags[\"VerificationPendingGuildLimit\"] = 65536] = \"VerificationPendingGuildLimit\";\n    /**\n     * Indicates if an app is embedded within the Discord client (currently unavailable publicly)\n     */\n    ApplicationFlags[ApplicationFlags[\"Embedded\"] = 131072] = \"Embedded\";\n    /**\n     * Intent required for bots in 100 or more servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055)\n     */\n    ApplicationFlags[ApplicationFlags[\"GatewayMessageContent\"] = 262144] = \"GatewayMessageContent\";\n    /**\n     * Intent required for bots in under 100 servers to receive [message content](https://support-dev.discord.com/hc/en-us/articles/4404772028055),\n     * found in Bot Settings\n     */\n    ApplicationFlags[ApplicationFlags[\"GatewayMessageContentLimited\"] = 524288] = \"GatewayMessageContentLimited\";\n    /**\n     * @unstable This application flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ApplicationFlags[ApplicationFlags[\"EmbeddedFirstParty\"] = 1048576] = \"EmbeddedFirstParty\";\n    /**\n     * Indicates if an app has registered global [application commands](https://discord.com/developers/docs/interactions/application-commands)\n     */\n    ApplicationFlags[ApplicationFlags[\"ApplicationCommandBadge\"] = 8388608] = \"ApplicationCommandBadge\";\n})(ApplicationFlags || (exports.ApplicationFlags = ApplicationFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/application-role-connection-metadata#application-role-connection-metadata-object-application-role-connection-metadata-type\n */\nvar ApplicationRoleConnectionMetadataType;\n(function (ApplicationRoleConnectionMetadataType) {\n    /**\n     * The metadata value (`integer`) is less than or equal to the guild's configured value (`integer`)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"IntegerLessThanOrEqual\"] = 1] = \"IntegerLessThanOrEqual\";\n    /**\n     * The metadata value (`integer`) is greater than or equal to the guild's configured value (`integer`)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"IntegerGreaterThanOrEqual\"] = 2] = \"IntegerGreaterThanOrEqual\";\n    /**\n     * The metadata value (`integer`) is equal to the guild's configured value (`integer`)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"IntegerEqual\"] = 3] = \"IntegerEqual\";\n    /**\n     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"IntegerNotEqual\"] = 4] = \"IntegerNotEqual\";\n    /**\n     * The metadata value (`ISO8601 string`) is less than or equal to the guild's configured value (`integer`; days before current date)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"DatetimeLessThanOrEqual\"] = 5] = \"DatetimeLessThanOrEqual\";\n    /**\n     * The metadata value (`ISO8601 string`) is greater than or equal to the guild's configured value (`integer`; days before current date)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"DatetimeGreaterThanOrEqual\"] = 6] = \"DatetimeGreaterThanOrEqual\";\n    /**\n     * The metadata value (`integer`) is equal to the guild's configured value (`integer`; `1`)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"BooleanEqual\"] = 7] = \"BooleanEqual\";\n    /**\n     * The metadata value (`integer`) is not equal to the guild's configured value (`integer`; `1`)\n     */\n    ApplicationRoleConnectionMetadataType[ApplicationRoleConnectionMetadataType[\"BooleanNotEqual\"] = 8] = \"BooleanNotEqual\";\n})(ApplicationRoleConnectionMetadataType || (exports.ApplicationRoleConnectionMetadataType = ApplicationRoleConnectionMetadataType = {}));\n/**\n * https://discord.com/developers/docs/resources/application#application-object-application-event-webhook-status\n */\nvar ApplicationWebhookEventStatus;\n(function (ApplicationWebhookEventStatus) {\n    /**\n     * Webhook events are disabled by developer\n     */\n    ApplicationWebhookEventStatus[ApplicationWebhookEventStatus[\"Disabled\"] = 1] = \"Disabled\";\n    /**\n     * Webhook events are enabled by developer\n     */\n    ApplicationWebhookEventStatus[ApplicationWebhookEventStatus[\"Enabled\"] = 2] = \"Enabled\";\n    /**\n     * Webhook events are disabled by Discord, usually due to inactivity\n     */\n    ApplicationWebhookEventStatus[ApplicationWebhookEventStatus[\"DisabledByDiscord\"] = 3] = \"DisabledByDiscord\";\n})(ApplicationWebhookEventStatus || (exports.ApplicationWebhookEventStatus = ApplicationWebhookEventStatus = {}));\n//# sourceMappingURL=application.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/audit-log\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuditLogOptionsType = exports.AuditLogEvent = void 0;\n/**\n * https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events\n */\nvar AuditLogEvent;\n(function (AuditLogEvent) {\n    AuditLogEvent[AuditLogEvent[\"GuildUpdate\"] = 1] = \"GuildUpdate\";\n    AuditLogEvent[AuditLogEvent[\"ChannelCreate\"] = 10] = \"ChannelCreate\";\n    AuditLogEvent[AuditLogEvent[\"ChannelUpdate\"] = 11] = \"ChannelUpdate\";\n    AuditLogEvent[AuditLogEvent[\"ChannelDelete\"] = 12] = \"ChannelDelete\";\n    AuditLogEvent[AuditLogEvent[\"ChannelOverwriteCreate\"] = 13] = \"ChannelOverwriteCreate\";\n    AuditLogEvent[AuditLogEvent[\"ChannelOverwriteUpdate\"] = 14] = \"ChannelOverwriteUpdate\";\n    AuditLogEvent[AuditLogEvent[\"ChannelOverwriteDelete\"] = 15] = \"ChannelOverwriteDelete\";\n    AuditLogEvent[AuditLogEvent[\"MemberKick\"] = 20] = \"MemberKick\";\n    AuditLogEvent[AuditLogEvent[\"MemberPrune\"] = 21] = \"MemberPrune\";\n    AuditLogEvent[AuditLogEvent[\"MemberBanAdd\"] = 22] = \"MemberBanAdd\";\n    AuditLogEvent[AuditLogEvent[\"MemberBanRemove\"] = 23] = \"MemberBanRemove\";\n    AuditLogEvent[AuditLogEvent[\"MemberUpdate\"] = 24] = \"MemberUpdate\";\n    AuditLogEvent[AuditLogEvent[\"MemberRoleUpdate\"] = 25] = \"MemberRoleUpdate\";\n    AuditLogEvent[AuditLogEvent[\"MemberMove\"] = 26] = \"MemberMove\";\n    AuditLogEvent[AuditLogEvent[\"MemberDisconnect\"] = 27] = \"MemberDisconnect\";\n    AuditLogEvent[AuditLogEvent[\"BotAdd\"] = 28] = \"BotAdd\";\n    AuditLogEvent[AuditLogEvent[\"RoleCreate\"] = 30] = \"RoleCreate\";\n    AuditLogEvent[AuditLogEvent[\"RoleUpdate\"] = 31] = \"RoleUpdate\";\n    AuditLogEvent[AuditLogEvent[\"RoleDelete\"] = 32] = \"RoleDelete\";\n    AuditLogEvent[AuditLogEvent[\"InviteCreate\"] = 40] = \"InviteCreate\";\n    AuditLogEvent[AuditLogEvent[\"InviteUpdate\"] = 41] = \"InviteUpdate\";\n    AuditLogEvent[AuditLogEvent[\"InviteDelete\"] = 42] = \"InviteDelete\";\n    AuditLogEvent[AuditLogEvent[\"WebhookCreate\"] = 50] = \"WebhookCreate\";\n    AuditLogEvent[AuditLogEvent[\"WebhookUpdate\"] = 51] = \"WebhookUpdate\";\n    AuditLogEvent[AuditLogEvent[\"WebhookDelete\"] = 52] = \"WebhookDelete\";\n    AuditLogEvent[AuditLogEvent[\"EmojiCreate\"] = 60] = \"EmojiCreate\";\n    AuditLogEvent[AuditLogEvent[\"EmojiUpdate\"] = 61] = \"EmojiUpdate\";\n    AuditLogEvent[AuditLogEvent[\"EmojiDelete\"] = 62] = \"EmojiDelete\";\n    AuditLogEvent[AuditLogEvent[\"MessageDelete\"] = 72] = \"MessageDelete\";\n    AuditLogEvent[AuditLogEvent[\"MessageBulkDelete\"] = 73] = \"MessageBulkDelete\";\n    AuditLogEvent[AuditLogEvent[\"MessagePin\"] = 74] = \"MessagePin\";\n    AuditLogEvent[AuditLogEvent[\"MessageUnpin\"] = 75] = \"MessageUnpin\";\n    AuditLogEvent[AuditLogEvent[\"IntegrationCreate\"] = 80] = \"IntegrationCreate\";\n    AuditLogEvent[AuditLogEvent[\"IntegrationUpdate\"] = 81] = \"IntegrationUpdate\";\n    AuditLogEvent[AuditLogEvent[\"IntegrationDelete\"] = 82] = \"IntegrationDelete\";\n    AuditLogEvent[AuditLogEvent[\"StageInstanceCreate\"] = 83] = \"StageInstanceCreate\";\n    AuditLogEvent[AuditLogEvent[\"StageInstanceUpdate\"] = 84] = \"StageInstanceUpdate\";\n    AuditLogEvent[AuditLogEvent[\"StageInstanceDelete\"] = 85] = \"StageInstanceDelete\";\n    AuditLogEvent[AuditLogEvent[\"StickerCreate\"] = 90] = \"StickerCreate\";\n    AuditLogEvent[AuditLogEvent[\"StickerUpdate\"] = 91] = \"StickerUpdate\";\n    AuditLogEvent[AuditLogEvent[\"StickerDelete\"] = 92] = \"StickerDelete\";\n    AuditLogEvent[AuditLogEvent[\"GuildScheduledEventCreate\"] = 100] = \"GuildScheduledEventCreate\";\n    AuditLogEvent[AuditLogEvent[\"GuildScheduledEventUpdate\"] = 101] = \"GuildScheduledEventUpdate\";\n    AuditLogEvent[AuditLogEvent[\"GuildScheduledEventDelete\"] = 102] = \"GuildScheduledEventDelete\";\n    AuditLogEvent[AuditLogEvent[\"ThreadCreate\"] = 110] = \"ThreadCreate\";\n    AuditLogEvent[AuditLogEvent[\"ThreadUpdate\"] = 111] = \"ThreadUpdate\";\n    AuditLogEvent[AuditLogEvent[\"ThreadDelete\"] = 112] = \"ThreadDelete\";\n    AuditLogEvent[AuditLogEvent[\"ApplicationCommandPermissionUpdate\"] = 121] = \"ApplicationCommandPermissionUpdate\";\n    AuditLogEvent[AuditLogEvent[\"SoundboardSoundCreate\"] = 130] = \"SoundboardSoundCreate\";\n    AuditLogEvent[AuditLogEvent[\"SoundboardSoundUpdate\"] = 131] = \"SoundboardSoundUpdate\";\n    AuditLogEvent[AuditLogEvent[\"SoundboardSoundDelete\"] = 132] = \"SoundboardSoundDelete\";\n    AuditLogEvent[AuditLogEvent[\"AutoModerationRuleCreate\"] = 140] = \"AutoModerationRuleCreate\";\n    AuditLogEvent[AuditLogEvent[\"AutoModerationRuleUpdate\"] = 141] = \"AutoModerationRuleUpdate\";\n    AuditLogEvent[AuditLogEvent[\"AutoModerationRuleDelete\"] = 142] = \"AutoModerationRuleDelete\";\n    AuditLogEvent[AuditLogEvent[\"AutoModerationBlockMessage\"] = 143] = \"AutoModerationBlockMessage\";\n    AuditLogEvent[AuditLogEvent[\"AutoModerationFlagToChannel\"] = 144] = \"AutoModerationFlagToChannel\";\n    AuditLogEvent[AuditLogEvent[\"AutoModerationUserCommunicationDisabled\"] = 145] = \"AutoModerationUserCommunicationDisabled\";\n    AuditLogEvent[AuditLogEvent[\"CreatorMonetizationRequestCreated\"] = 150] = \"CreatorMonetizationRequestCreated\";\n    AuditLogEvent[AuditLogEvent[\"CreatorMonetizationTermsAccepted\"] = 151] = \"CreatorMonetizationTermsAccepted\";\n    AuditLogEvent[AuditLogEvent[\"OnboardingPromptCreate\"] = 163] = \"OnboardingPromptCreate\";\n    AuditLogEvent[AuditLogEvent[\"OnboardingPromptUpdate\"] = 164] = \"OnboardingPromptUpdate\";\n    AuditLogEvent[AuditLogEvent[\"OnboardingPromptDelete\"] = 165] = \"OnboardingPromptDelete\";\n    AuditLogEvent[AuditLogEvent[\"OnboardingCreate\"] = 166] = \"OnboardingCreate\";\n    AuditLogEvent[AuditLogEvent[\"OnboardingUpdate\"] = 167] = \"OnboardingUpdate\";\n    AuditLogEvent[AuditLogEvent[\"HomeSettingsCreate\"] = 190] = \"HomeSettingsCreate\";\n    AuditLogEvent[AuditLogEvent[\"HomeSettingsUpdate\"] = 191] = \"HomeSettingsUpdate\";\n})(AuditLogEvent || (exports.AuditLogEvent = AuditLogEvent = {}));\nvar AuditLogOptionsType;\n(function (AuditLogOptionsType) {\n    AuditLogOptionsType[\"Role\"] = \"0\";\n    AuditLogOptionsType[\"Member\"] = \"1\";\n})(AuditLogOptionsType || (exports.AuditLogOptionsType = AuditLogOptionsType = {}));\n//# sourceMappingURL=auditLog.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/auto-moderation\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AutoModerationActionType = exports.AutoModerationRuleEventType = exports.AutoModerationRuleKeywordPresetType = exports.AutoModerationRuleTriggerType = void 0;\n/**\n * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-trigger-types\n */\nvar AutoModerationRuleTriggerType;\n(function (AutoModerationRuleTriggerType) {\n    /**\n     * Check if content contains words from a user defined list of keywords (Maximum of 6 per guild)\n     */\n    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType[\"Keyword\"] = 1] = \"Keyword\";\n    /**\n     * Check if content represents generic spam (Maximum of 1 per guild)\n     */\n    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType[\"Spam\"] = 3] = \"Spam\";\n    /**\n     * Check if content contains words from internal pre-defined wordsets (Maximum of 1 per guild)\n     */\n    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType[\"KeywordPreset\"] = 4] = \"KeywordPreset\";\n    /**\n     * Check if content contains more mentions than allowed (Maximum of 1 per guild)\n     */\n    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType[\"MentionSpam\"] = 5] = \"MentionSpam\";\n    /**\n     * Check if member profile contains words from a user defined list of keywords (Maximum of 1 per guild)\n     */\n    AutoModerationRuleTriggerType[AutoModerationRuleTriggerType[\"MemberProfile\"] = 6] = \"MemberProfile\";\n})(AutoModerationRuleTriggerType || (exports.AutoModerationRuleTriggerType = AutoModerationRuleTriggerType = {}));\n/**\n * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-keyword-preset-types\n */\nvar AutoModerationRuleKeywordPresetType;\n(function (AutoModerationRuleKeywordPresetType) {\n    /**\n     * Words that may be considered forms of swearing or cursing\n     */\n    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType[\"Profanity\"] = 1] = \"Profanity\";\n    /**\n     * Words that refer to sexually explicit behavior or activity\n     */\n    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType[\"SexualContent\"] = 2] = \"SexualContent\";\n    /**\n     * Personal insults or words that may be considered hate speech\n     */\n    AutoModerationRuleKeywordPresetType[AutoModerationRuleKeywordPresetType[\"Slurs\"] = 3] = \"Slurs\";\n})(AutoModerationRuleKeywordPresetType || (exports.AutoModerationRuleKeywordPresetType = AutoModerationRuleKeywordPresetType = {}));\n/**\n * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-rule-object-event-types\n */\nvar AutoModerationRuleEventType;\n(function (AutoModerationRuleEventType) {\n    /**\n     * When a member sends or edits a message in the guild\n     */\n    AutoModerationRuleEventType[AutoModerationRuleEventType[\"MessageSend\"] = 1] = \"MessageSend\";\n    /**\n     * When a member edits their profile\n     */\n    AutoModerationRuleEventType[AutoModerationRuleEventType[\"MemberUpdate\"] = 2] = \"MemberUpdate\";\n})(AutoModerationRuleEventType || (exports.AutoModerationRuleEventType = AutoModerationRuleEventType = {}));\n/**\n * https://discord.com/developers/docs/resources/auto-moderation#auto-moderation-action-object-action-types\n */\nvar AutoModerationActionType;\n(function (AutoModerationActionType) {\n    /**\n     * Blocks a member's message and prevents it from being posted.\n     * A custom explanation can be specified and shown to members whenever their message is blocked\n     */\n    AutoModerationActionType[AutoModerationActionType[\"BlockMessage\"] = 1] = \"BlockMessage\";\n    /**\n     * Logs user content to a specified channel\n     */\n    AutoModerationActionType[AutoModerationActionType[\"SendAlertMessage\"] = 2] = \"SendAlertMessage\";\n    /**\n     * Timeout user for specified duration, this action type can be set if the bot has `MODERATE_MEMBERS` permission\n     */\n    AutoModerationActionType[AutoModerationActionType[\"Timeout\"] = 3] = \"Timeout\";\n    /**\n     * Prevents a member from using text, voice, or other interactions\n     */\n    AutoModerationActionType[AutoModerationActionType[\"BlockMemberInteraction\"] = 4] = \"BlockMemberInteraction\";\n})(AutoModerationActionType || (exports.AutoModerationActionType = AutoModerationActionType = {}));\n//# sourceMappingURL=autoModeration.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/channel\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ChannelFlags = exports.SelectMenuDefaultValueType = exports.TextInputStyle = exports.ButtonStyle = exports.ComponentType = exports.AllowedMentionsTypes = exports.AttachmentFlags = exports.EmbedType = exports.ThreadMemberFlags = exports.ThreadAutoArchiveDuration = exports.OverwriteType = exports.MessageFlags = exports.MessageReferenceType = exports.MessageActivityType = exports.MessageType = exports.VideoQualityMode = exports.ChannelType = exports.ForumLayoutType = exports.SortOrderType = void 0;\n/**\n * https://discord.com/developers/docs/resources/channel/#channel-object-sort-order-types\n */\nvar SortOrderType;\n(function (SortOrderType) {\n    /**\n     * Sort forum posts by activity\n     */\n    SortOrderType[SortOrderType[\"LatestActivity\"] = 0] = \"LatestActivity\";\n    /**\n     * Sort forum posts by creation time (from most recent to oldest)\n     */\n    SortOrderType[SortOrderType[\"CreationDate\"] = 1] = \"CreationDate\";\n})(SortOrderType || (exports.SortOrderType = SortOrderType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel/#channel-object-forum-layout-types\n */\nvar ForumLayoutType;\n(function (ForumLayoutType) {\n    /**\n     * No default has been set for forum channel\n     */\n    ForumLayoutType[ForumLayoutType[\"NotSet\"] = 0] = \"NotSet\";\n    /**\n     * Display posts as a list\n     */\n    ForumLayoutType[ForumLayoutType[\"ListView\"] = 1] = \"ListView\";\n    /**\n     * Display posts as a collection of tiles\n     */\n    ForumLayoutType[ForumLayoutType[\"GalleryView\"] = 2] = \"GalleryView\";\n})(ForumLayoutType || (exports.ForumLayoutType = ForumLayoutType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#channel-object-channel-types\n */\nvar ChannelType;\n(function (ChannelType) {\n    /**\n     * A text channel within a guild\n     */\n    ChannelType[ChannelType[\"GuildText\"] = 0] = \"GuildText\";\n    /**\n     * A direct message between users\n     */\n    ChannelType[ChannelType[\"DM\"] = 1] = \"DM\";\n    /**\n     * A voice channel within a guild\n     */\n    ChannelType[ChannelType[\"GuildVoice\"] = 2] = \"GuildVoice\";\n    /**\n     * A direct message between multiple users\n     */\n    ChannelType[ChannelType[\"GroupDM\"] = 3] = \"GroupDM\";\n    /**\n     * An organizational category that contains up to 50 channels\n     *\n     * See https://support.discord.com/hc/articles/115001580171\n     */\n    ChannelType[ChannelType[\"GuildCategory\"] = 4] = \"GuildCategory\";\n    /**\n     * A channel that users can follow and crosspost into their own guild\n     *\n     * See https://support.discord.com/hc/articles/360032008192\n     */\n    ChannelType[ChannelType[\"GuildAnnouncement\"] = 5] = \"GuildAnnouncement\";\n    /**\n     * A temporary sub-channel within a Guild Announcement channel\n     */\n    ChannelType[ChannelType[\"AnnouncementThread\"] = 10] = \"AnnouncementThread\";\n    /**\n     * A temporary sub-channel within a Guild Text or Guild Forum channel\n     */\n    ChannelType[ChannelType[\"PublicThread\"] = 11] = \"PublicThread\";\n    /**\n     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission\n     */\n    ChannelType[ChannelType[\"PrivateThread\"] = 12] = \"PrivateThread\";\n    /**\n     * A voice channel for hosting events with an audience\n     *\n     * See https://support.discord.com/hc/articles/1500005513722\n     */\n    ChannelType[ChannelType[\"GuildStageVoice\"] = 13] = \"GuildStageVoice\";\n    /**\n     * The channel in a Student Hub containing the listed servers\n     *\n     * See https://support.discord.com/hc/articles/4406046651927\n     */\n    ChannelType[ChannelType[\"GuildDirectory\"] = 14] = \"GuildDirectory\";\n    /**\n     * A channel that can only contain threads\n     */\n    ChannelType[ChannelType[\"GuildForum\"] = 15] = \"GuildForum\";\n    /**\n     * A channel like forum channels but contains media for server subscriptions\n     *\n     * See https://creator-support.discord.com/hc/articles/14346342766743\n     */\n    ChannelType[ChannelType[\"GuildMedia\"] = 16] = \"GuildMedia\";\n    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //\n    /**\n     * A channel that users can follow and crosspost into their own guild\n     *\n     * @deprecated This is the old name for {@apilink ChannelType#GuildAnnouncement}\n     *\n     * See https://support.discord.com/hc/articles/360032008192\n     */\n    ChannelType[ChannelType[\"GuildNews\"] = 5] = \"GuildNews\";\n    /**\n     * A temporary sub-channel within a Guild Announcement channel\n     *\n     * @deprecated This is the old name for {@apilink ChannelType#AnnouncementThread}\n     */\n    // eslint-disable-next-line @typescript-eslint/no-duplicate-enum-values\n    ChannelType[ChannelType[\"GuildNewsThread\"] = 10] = \"GuildNewsThread\";\n    /**\n     * A temporary sub-channel within a Guild Text channel\n     *\n     * @deprecated This is the old name for {@apilink ChannelType#PublicThread}\n     */\n    ChannelType[ChannelType[\"GuildPublicThread\"] = 11] = \"GuildPublicThread\";\n    /**\n     * A temporary sub-channel within a Guild Text channel that is only viewable by those invited and those with the Manage Threads permission\n     *\n     * @deprecated This is the old name for {@apilink ChannelType#PrivateThread}\n     */\n    ChannelType[ChannelType[\"GuildPrivateThread\"] = 12] = \"GuildPrivateThread\";\n})(ChannelType || (exports.ChannelType = ChannelType = {}));\nvar VideoQualityMode;\n(function (VideoQualityMode) {\n    /**\n     * Discord chooses the quality for optimal performance\n     */\n    VideoQualityMode[VideoQualityMode[\"Auto\"] = 1] = \"Auto\";\n    /**\n     * 720p\n     */\n    VideoQualityMode[VideoQualityMode[\"Full\"] = 2] = \"Full\";\n})(VideoQualityMode || (exports.VideoQualityMode = VideoQualityMode = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#message-object-message-types\n */\nvar MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"Default\"] = 0] = \"Default\";\n    MessageType[MessageType[\"RecipientAdd\"] = 1] = \"RecipientAdd\";\n    MessageType[MessageType[\"RecipientRemove\"] = 2] = \"RecipientRemove\";\n    MessageType[MessageType[\"Call\"] = 3] = \"Call\";\n    MessageType[MessageType[\"ChannelNameChange\"] = 4] = \"ChannelNameChange\";\n    MessageType[MessageType[\"ChannelIconChange\"] = 5] = \"ChannelIconChange\";\n    MessageType[MessageType[\"ChannelPinnedMessage\"] = 6] = \"ChannelPinnedMessage\";\n    MessageType[MessageType[\"UserJoin\"] = 7] = \"UserJoin\";\n    MessageType[MessageType[\"GuildBoost\"] = 8] = \"GuildBoost\";\n    MessageType[MessageType[\"GuildBoostTier1\"] = 9] = \"GuildBoostTier1\";\n    MessageType[MessageType[\"GuildBoostTier2\"] = 10] = \"GuildBoostTier2\";\n    MessageType[MessageType[\"GuildBoostTier3\"] = 11] = \"GuildBoostTier3\";\n    MessageType[MessageType[\"ChannelFollowAdd\"] = 12] = \"ChannelFollowAdd\";\n    MessageType[MessageType[\"GuildDiscoveryDisqualified\"] = 14] = \"GuildDiscoveryDisqualified\";\n    MessageType[MessageType[\"GuildDiscoveryRequalified\"] = 15] = \"GuildDiscoveryRequalified\";\n    MessageType[MessageType[\"GuildDiscoveryGracePeriodInitialWarning\"] = 16] = \"GuildDiscoveryGracePeriodInitialWarning\";\n    MessageType[MessageType[\"GuildDiscoveryGracePeriodFinalWarning\"] = 17] = \"GuildDiscoveryGracePeriodFinalWarning\";\n    MessageType[MessageType[\"ThreadCreated\"] = 18] = \"ThreadCreated\";\n    MessageType[MessageType[\"Reply\"] = 19] = \"Reply\";\n    MessageType[MessageType[\"ChatInputCommand\"] = 20] = \"ChatInputCommand\";\n    MessageType[MessageType[\"ThreadStarterMessage\"] = 21] = \"ThreadStarterMessage\";\n    MessageType[MessageType[\"GuildInviteReminder\"] = 22] = \"GuildInviteReminder\";\n    MessageType[MessageType[\"ContextMenuCommand\"] = 23] = \"ContextMenuCommand\";\n    MessageType[MessageType[\"AutoModerationAction\"] = 24] = \"AutoModerationAction\";\n    MessageType[MessageType[\"RoleSubscriptionPurchase\"] = 25] = \"RoleSubscriptionPurchase\";\n    MessageType[MessageType[\"InteractionPremiumUpsell\"] = 26] = \"InteractionPremiumUpsell\";\n    MessageType[MessageType[\"StageStart\"] = 27] = \"StageStart\";\n    MessageType[MessageType[\"StageEnd\"] = 28] = \"StageEnd\";\n    MessageType[MessageType[\"StageSpeaker\"] = 29] = \"StageSpeaker\";\n    /**\n     * @unstable https://github.com/discord/discord-api-docs/pull/5927#discussion_r1107678548\n     */\n    MessageType[MessageType[\"StageRaiseHand\"] = 30] = \"StageRaiseHand\";\n    MessageType[MessageType[\"StageTopic\"] = 31] = \"StageTopic\";\n    MessageType[MessageType[\"GuildApplicationPremiumSubscription\"] = 32] = \"GuildApplicationPremiumSubscription\";\n    MessageType[MessageType[\"GuildIncidentAlertModeEnabled\"] = 36] = \"GuildIncidentAlertModeEnabled\";\n    MessageType[MessageType[\"GuildIncidentAlertModeDisabled\"] = 37] = \"GuildIncidentAlertModeDisabled\";\n    MessageType[MessageType[\"GuildIncidentReportRaid\"] = 38] = \"GuildIncidentReportRaid\";\n    MessageType[MessageType[\"GuildIncidentReportFalseAlarm\"] = 39] = \"GuildIncidentReportFalseAlarm\";\n    MessageType[MessageType[\"PurchaseNotification\"] = 44] = \"PurchaseNotification\";\n    MessageType[MessageType[\"PollResult\"] = 46] = \"PollResult\";\n})(MessageType || (exports.MessageType = MessageType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#message-object-message-activity-types\n */\nvar MessageActivityType;\n(function (MessageActivityType) {\n    MessageActivityType[MessageActivityType[\"Join\"] = 1] = \"Join\";\n    MessageActivityType[MessageActivityType[\"Spectate\"] = 2] = \"Spectate\";\n    MessageActivityType[MessageActivityType[\"Listen\"] = 3] = \"Listen\";\n    MessageActivityType[MessageActivityType[\"JoinRequest\"] = 5] = \"JoinRequest\";\n})(MessageActivityType || (exports.MessageActivityType = MessageActivityType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#message-reference-types\n */\nvar MessageReferenceType;\n(function (MessageReferenceType) {\n    /**\n     * A standard reference used by replies\n     */\n    MessageReferenceType[MessageReferenceType[\"Default\"] = 0] = \"Default\";\n    /**\n     * Reference used to point to a message at a point in time\n     */\n    MessageReferenceType[MessageReferenceType[\"Forward\"] = 1] = \"Forward\";\n})(MessageReferenceType || (exports.MessageReferenceType = MessageReferenceType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#message-object-message-flags\n */\nvar MessageFlags;\n(function (MessageFlags) {\n    /**\n     * This message has been published to subscribed channels (via Channel Following)\n     */\n    MessageFlags[MessageFlags[\"Crossposted\"] = 1] = \"Crossposted\";\n    /**\n     * This message originated from a message in another channel (via Channel Following)\n     */\n    MessageFlags[MessageFlags[\"IsCrosspost\"] = 2] = \"IsCrosspost\";\n    /**\n     * Do not include any embeds when serializing this message\n     */\n    MessageFlags[MessageFlags[\"SuppressEmbeds\"] = 4] = \"SuppressEmbeds\";\n    /**\n     * The source message for this crosspost has been deleted (via Channel Following)\n     */\n    MessageFlags[MessageFlags[\"SourceMessageDeleted\"] = 8] = \"SourceMessageDeleted\";\n    /**\n     * This message came from the urgent message system\n     */\n    MessageFlags[MessageFlags[\"Urgent\"] = 16] = \"Urgent\";\n    /**\n     * This message has an associated thread, which shares its id\n     */\n    MessageFlags[MessageFlags[\"HasThread\"] = 32] = \"HasThread\";\n    /**\n     * This message is only visible to the user who invoked the Interaction\n     */\n    MessageFlags[MessageFlags[\"Ephemeral\"] = 64] = \"Ephemeral\";\n    /**\n     * This message is an Interaction Response and the bot is \"thinking\"\n     */\n    MessageFlags[MessageFlags[\"Loading\"] = 128] = \"Loading\";\n    /**\n     * This message failed to mention some roles and add their members to the thread\n     */\n    MessageFlags[MessageFlags[\"FailedToMentionSomeRolesInThread\"] = 256] = \"FailedToMentionSomeRolesInThread\";\n    /**\n     * @unstable This message flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    MessageFlags[MessageFlags[\"ShouldShowLinkNotDiscordWarning\"] = 1024] = \"ShouldShowLinkNotDiscordWarning\";\n    /**\n     * This message will not trigger push and desktop notifications\n     */\n    MessageFlags[MessageFlags[\"SuppressNotifications\"] = 4096] = \"SuppressNotifications\";\n    /**\n     * This message is a voice message\n     */\n    MessageFlags[MessageFlags[\"IsVoiceMessage\"] = 8192] = \"IsVoiceMessage\";\n    /**\n     * This message has a snapshot (via Message Forwarding)\n     */\n    MessageFlags[MessageFlags[\"HasSnapshot\"] = 16384] = \"HasSnapshot\";\n})(MessageFlags || (exports.MessageFlags = MessageFlags = {}));\nvar OverwriteType;\n(function (OverwriteType) {\n    OverwriteType[OverwriteType[\"Role\"] = 0] = \"Role\";\n    OverwriteType[OverwriteType[\"Member\"] = 1] = \"Member\";\n})(OverwriteType || (exports.OverwriteType = OverwriteType = {}));\nvar ThreadAutoArchiveDuration;\n(function (ThreadAutoArchiveDuration) {\n    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration[\"OneHour\"] = 60] = \"OneHour\";\n    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration[\"OneDay\"] = 1440] = \"OneDay\";\n    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration[\"ThreeDays\"] = 4320] = \"ThreeDays\";\n    ThreadAutoArchiveDuration[ThreadAutoArchiveDuration[\"OneWeek\"] = 10080] = \"OneWeek\";\n})(ThreadAutoArchiveDuration || (exports.ThreadAutoArchiveDuration = ThreadAutoArchiveDuration = {}));\nvar ThreadMemberFlags;\n(function (ThreadMemberFlags) {\n    /**\n     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ThreadMemberFlags[ThreadMemberFlags[\"HasInteracted\"] = 1] = \"HasInteracted\";\n    /**\n     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ThreadMemberFlags[ThreadMemberFlags[\"AllMessages\"] = 2] = \"AllMessages\";\n    /**\n     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ThreadMemberFlags[ThreadMemberFlags[\"OnlyMentions\"] = 4] = \"OnlyMentions\";\n    /**\n     * @unstable This thread member flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ThreadMemberFlags[ThreadMemberFlags[\"NoMessages\"] = 8] = \"NoMessages\";\n})(ThreadMemberFlags || (exports.ThreadMemberFlags = ThreadMemberFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#embed-object-embed-types\n */\nvar EmbedType;\n(function (EmbedType) {\n    /**\n     * Generic embed rendered from embed attributes\n     */\n    EmbedType[\"Rich\"] = \"rich\";\n    /**\n     * Image embed\n     */\n    EmbedType[\"Image\"] = \"image\";\n    /**\n     * Video embed\n     */\n    EmbedType[\"Video\"] = \"video\";\n    /**\n     * Animated gif image embed rendered as a video embed\n     */\n    EmbedType[\"GIFV\"] = \"gifv\";\n    /**\n     * Article embed\n     */\n    EmbedType[\"Article\"] = \"article\";\n    /**\n     * Link embed\n     */\n    EmbedType[\"Link\"] = \"link\";\n    /**\n     * Auto moderation alert embed\n     *\n     * @unstable This embed type is currently not documented by Discord, but it is returned in the auto moderation system messages.\n     */\n    EmbedType[\"AutoModerationMessage\"] = \"auto_moderation_message\";\n    /**\n     * Poll result embed\n     */\n    EmbedType[\"PollResult\"] = \"poll_result\";\n})(EmbedType || (exports.EmbedType = EmbedType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#attachment-object-attachment-structure-attachment-flags\n */\nvar AttachmentFlags;\n(function (AttachmentFlags) {\n    /**\n     * This attachment has been edited using the remix feature on mobile\n     */\n    AttachmentFlags[AttachmentFlags[\"IsRemix\"] = 4] = \"IsRemix\";\n})(AttachmentFlags || (exports.AttachmentFlags = AttachmentFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types\n */\nvar AllowedMentionsTypes;\n(function (AllowedMentionsTypes) {\n    /**\n     * Controls @everyone and @here mentions\n     */\n    AllowedMentionsTypes[\"Everyone\"] = \"everyone\";\n    /**\n     * Controls role mentions\n     */\n    AllowedMentionsTypes[\"Role\"] = \"roles\";\n    /**\n     * Controls user mentions\n     */\n    AllowedMentionsTypes[\"User\"] = \"users\";\n})(AllowedMentionsTypes || (exports.AllowedMentionsTypes = AllowedMentionsTypes = {}));\n/**\n * https://discord.com/developers/docs/interactions/message-components#component-object-component-types\n */\nvar ComponentType;\n(function (ComponentType) {\n    /**\n     * Action Row component\n     */\n    ComponentType[ComponentType[\"ActionRow\"] = 1] = \"ActionRow\";\n    /**\n     * Button component\n     */\n    ComponentType[ComponentType[\"Button\"] = 2] = \"Button\";\n    /**\n     * Select menu for picking from defined text options\n     */\n    ComponentType[ComponentType[\"StringSelect\"] = 3] = \"StringSelect\";\n    /**\n     * Text Input component\n     */\n    ComponentType[ComponentType[\"TextInput\"] = 4] = \"TextInput\";\n    /**\n     * Select menu for users\n     */\n    ComponentType[ComponentType[\"UserSelect\"] = 5] = \"UserSelect\";\n    /**\n     * Select menu for roles\n     */\n    ComponentType[ComponentType[\"RoleSelect\"] = 6] = \"RoleSelect\";\n    /**\n     * Select menu for users and roles\n     */\n    ComponentType[ComponentType[\"MentionableSelect\"] = 7] = \"MentionableSelect\";\n    /**\n     * Select menu for channels\n     */\n    ComponentType[ComponentType[\"ChannelSelect\"] = 8] = \"ChannelSelect\";\n    // EVERYTHING BELOW THIS LINE SHOULD BE OLD NAMES FOR RENAMED ENUM MEMBERS //\n    /**\n     * Select menu for picking from defined text options\n     *\n     * @deprecated This is the old name for {@apilink ComponentType#StringSelect}\n     */\n    ComponentType[ComponentType[\"SelectMenu\"] = 3] = \"SelectMenu\";\n})(ComponentType || (exports.ComponentType = ComponentType = {}));\n/**\n * https://discord.com/developers/docs/interactions/message-components#button-object-button-styles\n */\nvar ButtonStyle;\n(function (ButtonStyle) {\n    ButtonStyle[ButtonStyle[\"Primary\"] = 1] = \"Primary\";\n    ButtonStyle[ButtonStyle[\"Secondary\"] = 2] = \"Secondary\";\n    ButtonStyle[ButtonStyle[\"Success\"] = 3] = \"Success\";\n    ButtonStyle[ButtonStyle[\"Danger\"] = 4] = \"Danger\";\n    ButtonStyle[ButtonStyle[\"Link\"] = 5] = \"Link\";\n    ButtonStyle[ButtonStyle[\"Premium\"] = 6] = \"Premium\";\n})(ButtonStyle || (exports.ButtonStyle = ButtonStyle = {}));\n/**\n * https://discord.com/developers/docs/interactions/message-components#text-inputs-text-input-styles\n */\nvar TextInputStyle;\n(function (TextInputStyle) {\n    TextInputStyle[TextInputStyle[\"Short\"] = 1] = \"Short\";\n    TextInputStyle[TextInputStyle[\"Paragraph\"] = 2] = \"Paragraph\";\n})(TextInputStyle || (exports.TextInputStyle = TextInputStyle = {}));\n/**\n * https://discord.com/developers/docs/interactions/message-components#select-menu-object-select-default-value-structure\n */\nvar SelectMenuDefaultValueType;\n(function (SelectMenuDefaultValueType) {\n    SelectMenuDefaultValueType[\"Channel\"] = \"channel\";\n    SelectMenuDefaultValueType[\"Role\"] = \"role\";\n    SelectMenuDefaultValueType[\"User\"] = \"user\";\n})(SelectMenuDefaultValueType || (exports.SelectMenuDefaultValueType = SelectMenuDefaultValueType = {}));\n/**\n * https://discord.com/developers/docs/resources/channel#channel-object-channel-flags\n */\nvar ChannelFlags;\n(function (ChannelFlags) {\n    /**\n     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ChannelFlags[ChannelFlags[\"GuildFeedRemoved\"] = 1] = \"GuildFeedRemoved\";\n    /**\n     * This thread is pinned to the top of its parent forum channel\n     */\n    ChannelFlags[ChannelFlags[\"Pinned\"] = 2] = \"Pinned\";\n    /**\n     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ChannelFlags[ChannelFlags[\"ActiveChannelsRemoved\"] = 4] = \"ActiveChannelsRemoved\";\n    /**\n     * Whether a tag is required to be specified when creating a thread in a forum channel.\n     * Tags are specified in the `applied_tags` field\n     */\n    ChannelFlags[ChannelFlags[\"RequireTag\"] = 16] = \"RequireTag\";\n    /**\n     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ChannelFlags[ChannelFlags[\"IsSpam\"] = 32] = \"IsSpam\";\n    /**\n     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ChannelFlags[ChannelFlags[\"IsGuildResourceChannel\"] = 128] = \"IsGuildResourceChannel\";\n    /**\n     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ChannelFlags[ChannelFlags[\"ClydeAI\"] = 256] = \"ClydeAI\";\n    /**\n     * @unstable This channel flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    ChannelFlags[ChannelFlags[\"IsScheduledForDeletion\"] = 512] = \"IsScheduledForDeletion\";\n    /**\n     * Whether media download options are hidden.\n     */\n    ChannelFlags[ChannelFlags[\"HideMediaDownloadOptions\"] = 32768] = \"HideMediaDownloadOptions\";\n})(ChannelFlags || (exports.ChannelFlags = ChannelFlags = {}));\n//# sourceMappingURL=channel.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/emoji\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=emoji.js.map",
    "\"use strict\";\n/**\n * Types extracted from\n *  - https://discord.com/developers/docs/topics/gateway\n *  - https://discord.com/developers/docs/topics/gateway-events\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ActivityFlags = exports.ActivityType = exports.ActivityPlatform = exports.PresenceUpdateStatus = void 0;\n/**\n * https://discord.com/developers/docs/topics/gateway-events#update-presence-status-types\n */\nvar PresenceUpdateStatus;\n(function (PresenceUpdateStatus) {\n    PresenceUpdateStatus[\"Online\"] = \"online\";\n    PresenceUpdateStatus[\"DoNotDisturb\"] = \"dnd\";\n    PresenceUpdateStatus[\"Idle\"] = \"idle\";\n    /**\n     * Invisible and shown as offline\n     */\n    PresenceUpdateStatus[\"Invisible\"] = \"invisible\";\n    PresenceUpdateStatus[\"Offline\"] = \"offline\";\n})(PresenceUpdateStatus || (exports.PresenceUpdateStatus = PresenceUpdateStatus = {}));\n/**\n * @unstable This enum is currently not documented by Discord but has known values which we will try to keep up to date.\n * Values might be added or removed without a major version bump.\n */\nvar ActivityPlatform;\n(function (ActivityPlatform) {\n    ActivityPlatform[\"Desktop\"] = \"desktop\";\n    ActivityPlatform[\"Xbox\"] = \"xbox\";\n    ActivityPlatform[\"Samsung\"] = \"samsung\";\n    ActivityPlatform[\"IOS\"] = \"ios\";\n    ActivityPlatform[\"Android\"] = \"android\";\n    ActivityPlatform[\"Embedded\"] = \"embedded\";\n    ActivityPlatform[\"PS4\"] = \"ps4\";\n    ActivityPlatform[\"PS5\"] = \"ps5\";\n})(ActivityPlatform || (exports.ActivityPlatform = ActivityPlatform = {}));\n/**\n * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types\n */\nvar ActivityType;\n(function (ActivityType) {\n    /**\n     * Playing {game}\n     */\n    ActivityType[ActivityType[\"Playing\"] = 0] = \"Playing\";\n    /**\n     * Streaming {details}\n     */\n    ActivityType[ActivityType[\"Streaming\"] = 1] = \"Streaming\";\n    /**\n     * Listening to {name}\n     */\n    ActivityType[ActivityType[\"Listening\"] = 2] = \"Listening\";\n    /**\n     * Watching {details}\n     */\n    ActivityType[ActivityType[\"Watching\"] = 3] = \"Watching\";\n    /**\n     * {emoji} {state}\n     */\n    ActivityType[ActivityType[\"Custom\"] = 4] = \"Custom\";\n    /**\n     * Competing in {name}\n     */\n    ActivityType[ActivityType[\"Competing\"] = 5] = \"Competing\";\n})(ActivityType || (exports.ActivityType = ActivityType = {}));\n/**\n * https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-flags\n */\nvar ActivityFlags;\n(function (ActivityFlags) {\n    ActivityFlags[ActivityFlags[\"Instance\"] = 1] = \"Instance\";\n    ActivityFlags[ActivityFlags[\"Join\"] = 2] = \"Join\";\n    ActivityFlags[ActivityFlags[\"Spectate\"] = 4] = \"Spectate\";\n    ActivityFlags[ActivityFlags[\"JoinRequest\"] = 8] = \"JoinRequest\";\n    ActivityFlags[ActivityFlags[\"Sync\"] = 16] = \"Sync\";\n    ActivityFlags[ActivityFlags[\"Play\"] = 32] = \"Play\";\n    ActivityFlags[ActivityFlags[\"PartyPrivacyFriends\"] = 64] = \"PartyPrivacyFriends\";\n    ActivityFlags[ActivityFlags[\"PartyPrivacyVoiceChannel\"] = 128] = \"PartyPrivacyVoiceChannel\";\n    ActivityFlags[ActivityFlags[\"Embedded\"] = 256] = \"Embedded\";\n})(ActivityFlags || (exports.ActivityFlags = ActivityFlags = {}));\n//# sourceMappingURL=gateway.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/guild\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GuildOnboardingPromptType = exports.GuildOnboardingMode = exports.MembershipScreeningFieldType = exports.GuildWidgetStyle = exports.IntegrationExpireBehavior = exports.GuildMemberFlags = exports.GuildFeature = exports.GuildSystemChannelFlags = exports.GuildHubType = exports.GuildPremiumTier = exports.GuildVerificationLevel = exports.GuildNSFWLevel = exports.GuildMFALevel = exports.GuildExplicitContentFilter = exports.GuildDefaultMessageNotifications = void 0;\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level\n */\nvar GuildDefaultMessageNotifications;\n(function (GuildDefaultMessageNotifications) {\n    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications[\"AllMessages\"] = 0] = \"AllMessages\";\n    GuildDefaultMessageNotifications[GuildDefaultMessageNotifications[\"OnlyMentions\"] = 1] = \"OnlyMentions\";\n})(GuildDefaultMessageNotifications || (exports.GuildDefaultMessageNotifications = GuildDefaultMessageNotifications = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level\n */\nvar GuildExplicitContentFilter;\n(function (GuildExplicitContentFilter) {\n    GuildExplicitContentFilter[GuildExplicitContentFilter[\"Disabled\"] = 0] = \"Disabled\";\n    GuildExplicitContentFilter[GuildExplicitContentFilter[\"MembersWithoutRoles\"] = 1] = \"MembersWithoutRoles\";\n    GuildExplicitContentFilter[GuildExplicitContentFilter[\"AllMembers\"] = 2] = \"AllMembers\";\n})(GuildExplicitContentFilter || (exports.GuildExplicitContentFilter = GuildExplicitContentFilter = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-mfa-level\n */\nvar GuildMFALevel;\n(function (GuildMFALevel) {\n    GuildMFALevel[GuildMFALevel[\"None\"] = 0] = \"None\";\n    GuildMFALevel[GuildMFALevel[\"Elevated\"] = 1] = \"Elevated\";\n})(GuildMFALevel || (exports.GuildMFALevel = GuildMFALevel = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level\n */\nvar GuildNSFWLevel;\n(function (GuildNSFWLevel) {\n    GuildNSFWLevel[GuildNSFWLevel[\"Default\"] = 0] = \"Default\";\n    GuildNSFWLevel[GuildNSFWLevel[\"Explicit\"] = 1] = \"Explicit\";\n    GuildNSFWLevel[GuildNSFWLevel[\"Safe\"] = 2] = \"Safe\";\n    GuildNSFWLevel[GuildNSFWLevel[\"AgeRestricted\"] = 3] = \"AgeRestricted\";\n})(GuildNSFWLevel || (exports.GuildNSFWLevel = GuildNSFWLevel = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-verification-level\n */\nvar GuildVerificationLevel;\n(function (GuildVerificationLevel) {\n    /**\n     * Unrestricted\n     */\n    GuildVerificationLevel[GuildVerificationLevel[\"None\"] = 0] = \"None\";\n    /**\n     * Must have verified email on account\n     */\n    GuildVerificationLevel[GuildVerificationLevel[\"Low\"] = 1] = \"Low\";\n    /**\n     * Must be registered on Discord for longer than 5 minutes\n     */\n    GuildVerificationLevel[GuildVerificationLevel[\"Medium\"] = 2] = \"Medium\";\n    /**\n     * Must be a member of the guild for longer than 10 minutes\n     */\n    GuildVerificationLevel[GuildVerificationLevel[\"High\"] = 3] = \"High\";\n    /**\n     * Must have a verified phone number\n     */\n    GuildVerificationLevel[GuildVerificationLevel[\"VeryHigh\"] = 4] = \"VeryHigh\";\n})(GuildVerificationLevel || (exports.GuildVerificationLevel = GuildVerificationLevel = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-premium-tier\n */\nvar GuildPremiumTier;\n(function (GuildPremiumTier) {\n    GuildPremiumTier[GuildPremiumTier[\"None\"] = 0] = \"None\";\n    GuildPremiumTier[GuildPremiumTier[\"Tier1\"] = 1] = \"Tier1\";\n    GuildPremiumTier[GuildPremiumTier[\"Tier2\"] = 2] = \"Tier2\";\n    GuildPremiumTier[GuildPremiumTier[\"Tier3\"] = 3] = \"Tier3\";\n})(GuildPremiumTier || (exports.GuildPremiumTier = GuildPremiumTier = {}));\nvar GuildHubType;\n(function (GuildHubType) {\n    GuildHubType[GuildHubType[\"Default\"] = 0] = \"Default\";\n    GuildHubType[GuildHubType[\"HighSchool\"] = 1] = \"HighSchool\";\n    GuildHubType[GuildHubType[\"College\"] = 2] = \"College\";\n})(GuildHubType || (exports.GuildHubType = GuildHubType = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-system-channel-flags\n */\nvar GuildSystemChannelFlags;\n(function (GuildSystemChannelFlags) {\n    /**\n     * Suppress member join notifications\n     */\n    GuildSystemChannelFlags[GuildSystemChannelFlags[\"SuppressJoinNotifications\"] = 1] = \"SuppressJoinNotifications\";\n    /**\n     * Suppress server boost notifications\n     */\n    GuildSystemChannelFlags[GuildSystemChannelFlags[\"SuppressPremiumSubscriptions\"] = 2] = \"SuppressPremiumSubscriptions\";\n    /**\n     * Suppress server setup tips\n     */\n    GuildSystemChannelFlags[GuildSystemChannelFlags[\"SuppressGuildReminderNotifications\"] = 4] = \"SuppressGuildReminderNotifications\";\n    /**\n     * Hide member join sticker reply buttons\n     */\n    GuildSystemChannelFlags[GuildSystemChannelFlags[\"SuppressJoinNotificationReplies\"] = 8] = \"SuppressJoinNotificationReplies\";\n    /**\n     * Suppress role subscription purchase and renewal notifications\n     */\n    GuildSystemChannelFlags[GuildSystemChannelFlags[\"SuppressRoleSubscriptionPurchaseNotifications\"] = 16] = \"SuppressRoleSubscriptionPurchaseNotifications\";\n    /**\n     * Hide role subscription sticker reply buttons\n     */\n    GuildSystemChannelFlags[GuildSystemChannelFlags[\"SuppressRoleSubscriptionPurchaseNotificationReplies\"] = 32] = \"SuppressRoleSubscriptionPurchaseNotificationReplies\";\n})(GuildSystemChannelFlags || (exports.GuildSystemChannelFlags = GuildSystemChannelFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-object-guild-features\n */\nvar GuildFeature;\n(function (GuildFeature) {\n    /**\n     * Guild has access to set an animated guild banner image\n     */\n    GuildFeature[\"AnimatedBanner\"] = \"ANIMATED_BANNER\";\n    /**\n     * Guild has access to set an animated guild icon\n     */\n    GuildFeature[\"AnimatedIcon\"] = \"ANIMATED_ICON\";\n    /**\n     * Guild is using the old permissions configuration behavior\n     *\n     * See https://discord.com/developers/docs/change-log#upcoming-application-command-permission-changes\n     */\n    GuildFeature[\"ApplicationCommandPermissionsV2\"] = \"APPLICATION_COMMAND_PERMISSIONS_V2\";\n    /**\n     * Guild has set up auto moderation rules\n     */\n    GuildFeature[\"AutoModeration\"] = \"AUTO_MODERATION\";\n    /**\n     * Guild has access to set a guild banner image\n     */\n    GuildFeature[\"Banner\"] = \"BANNER\";\n    /**\n     * Guild can enable welcome screen, Membership Screening and discovery, and receives community updates\n     */\n    GuildFeature[\"Community\"] = \"COMMUNITY\";\n    /**\n     * Guild has enabled monetization\n     */\n    GuildFeature[\"CreatorMonetizableProvisional\"] = \"CREATOR_MONETIZABLE_PROVISIONAL\";\n    /**\n     * Guild has enabled the role subscription promo page\n     */\n    GuildFeature[\"CreatorStorePage\"] = \"CREATOR_STORE_PAGE\";\n    /**\n     * Guild has been set as a support server on the App Directory\n     */\n    GuildFeature[\"DeveloperSupportServer\"] = \"DEVELOPER_SUPPORT_SERVER\";\n    /**\n     * Guild is able to be discovered in the directory\n     */\n    GuildFeature[\"Discoverable\"] = \"DISCOVERABLE\";\n    /**\n     * Guild is able to be featured in the directory\n     */\n    GuildFeature[\"Featurable\"] = \"FEATURABLE\";\n    /**\n     * Guild is listed in a directory channel\n     */\n    GuildFeature[\"HasDirectoryEntry\"] = \"HAS_DIRECTORY_ENTRY\";\n    /**\n     * Guild is a Student Hub\n     *\n     * See https://support.discord.com/hc/articles/4406046651927\n     *\n     * @unstable This feature is currently not documented by Discord, but has known value\n     */\n    GuildFeature[\"Hub\"] = \"HUB\";\n    /**\n     * Guild has disabled invite usage, preventing users from joining\n     */\n    GuildFeature[\"InvitesDisabled\"] = \"INVITES_DISABLED\";\n    /**\n     * Guild has access to set an invite splash background\n     */\n    GuildFeature[\"InviteSplash\"] = \"INVITE_SPLASH\";\n    /**\n     * Guild is in a Student Hub\n     *\n     * See https://support.discord.com/hc/articles/4406046651927\n     *\n     * @unstable This feature is currently not documented by Discord, but has known value\n     */\n    GuildFeature[\"LinkedToHub\"] = \"LINKED_TO_HUB\";\n    /**\n     * Guild has enabled Membership Screening\n     */\n    GuildFeature[\"MemberVerificationGateEnabled\"] = \"MEMBER_VERIFICATION_GATE_ENABLED\";\n    /**\n     * Guild has increased custom soundboard sound slots\n     */\n    GuildFeature[\"MoreSoundboard\"] = \"MORE_SOUNDBOARD\";\n    /**\n     * Guild has enabled monetization\n     *\n     * @unstable This feature is no longer documented by Discord\n     */\n    GuildFeature[\"MonetizationEnabled\"] = \"MONETIZATION_ENABLED\";\n    /**\n     * Guild has increased custom sticker slots\n     */\n    GuildFeature[\"MoreStickers\"] = \"MORE_STICKERS\";\n    /**\n     * Guild has access to create news channels\n     */\n    GuildFeature[\"News\"] = \"NEWS\";\n    /**\n     * Guild is partnered\n     */\n    GuildFeature[\"Partnered\"] = \"PARTNERED\";\n    /**\n     * Guild can be previewed before joining via Membership Screening or the directory\n     */\n    GuildFeature[\"PreviewEnabled\"] = \"PREVIEW_ENABLED\";\n    /**\n     * Guild has access to create private threads\n     */\n    GuildFeature[\"PrivateThreads\"] = \"PRIVATE_THREADS\";\n    /**\n     * Guild has disabled alerts for join raids in the configured safety alerts channel\n     */\n    GuildFeature[\"RaidAlertsDisabled\"] = \"RAID_ALERTS_DISABLED\";\n    GuildFeature[\"RelayEnabled\"] = \"RELAY_ENABLED\";\n    /**\n     * Guild is able to set role icons\n     */\n    GuildFeature[\"RoleIcons\"] = \"ROLE_ICONS\";\n    /**\n     * Guild has role subscriptions that can be purchased\n     */\n    GuildFeature[\"RoleSubscriptionsAvailableForPurchase\"] = \"ROLE_SUBSCRIPTIONS_AVAILABLE_FOR_PURCHASE\";\n    /**\n     * Guild has enabled role subscriptions\n     */\n    GuildFeature[\"RoleSubscriptionsEnabled\"] = \"ROLE_SUBSCRIPTIONS_ENABLED\";\n    /**\n     * Guild has created soundboard sounds\n     */\n    GuildFeature[\"Soundboard\"] = \"SOUNDBOARD\";\n    /**\n     * Guild has enabled ticketed events\n     */\n    GuildFeature[\"TicketedEventsEnabled\"] = \"TICKETED_EVENTS_ENABLED\";\n    /**\n     * Guild has access to set a vanity URL\n     */\n    GuildFeature[\"VanityURL\"] = \"VANITY_URL\";\n    /**\n     * Guild is verified\n     */\n    GuildFeature[\"Verified\"] = \"VERIFIED\";\n    /**\n     * Guild has access to set 384kbps bitrate in voice (previously VIP voice servers)\n     */\n    GuildFeature[\"VIPRegions\"] = \"VIP_REGIONS\";\n    /**\n     * Guild has enabled the welcome screen\n     */\n    GuildFeature[\"WelcomeScreenEnabled\"] = \"WELCOME_SCREEN_ENABLED\";\n})(GuildFeature || (exports.GuildFeature = GuildFeature = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-member-object-guild-member-flags\n */\nvar GuildMemberFlags;\n(function (GuildMemberFlags) {\n    /**\n     * Member has left and rejoined the guild\n     */\n    GuildMemberFlags[GuildMemberFlags[\"DidRejoin\"] = 1] = \"DidRejoin\";\n    /**\n     * Member has completed onboarding\n     */\n    GuildMemberFlags[GuildMemberFlags[\"CompletedOnboarding\"] = 2] = \"CompletedOnboarding\";\n    /**\n     * Member is exempt from guild verification requirements\n     */\n    GuildMemberFlags[GuildMemberFlags[\"BypassesVerification\"] = 4] = \"BypassesVerification\";\n    /**\n     * Member has started onboarding\n     */\n    GuildMemberFlags[GuildMemberFlags[\"StartedOnboarding\"] = 8] = \"StartedOnboarding\";\n    /**\n     * Member is a guest and can only access the voice channel they were invited to\n     */\n    GuildMemberFlags[GuildMemberFlags[\"IsGuest\"] = 16] = \"IsGuest\";\n    /**\n     * Member has started Server Guide new member actions\n     */\n    GuildMemberFlags[GuildMemberFlags[\"StartedHomeActions\"] = 32] = \"StartedHomeActions\";\n    /**\n     * Member has completed Server Guide new member actions\n     */\n    GuildMemberFlags[GuildMemberFlags[\"CompletedHomeActions\"] = 64] = \"CompletedHomeActions\";\n    /**\n     * Member's username, display name, or nickname is blocked by AutoMod\n     */\n    GuildMemberFlags[GuildMemberFlags[\"AutomodQuarantinedUsernameOrGuildNickname\"] = 128] = \"AutomodQuarantinedUsernameOrGuildNickname\";\n    /**\n     * @deprecated\n     */\n    GuildMemberFlags[GuildMemberFlags[\"AutomodQuarantinedBio\"] = 256] = \"AutomodQuarantinedBio\";\n    /**\n     * Member has dismissed the DM settings upsell\n     */\n    GuildMemberFlags[GuildMemberFlags[\"DmSettingsUpsellAcknowledged\"] = 512] = \"DmSettingsUpsellAcknowledged\";\n})(GuildMemberFlags || (exports.GuildMemberFlags = GuildMemberFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors\n */\nvar IntegrationExpireBehavior;\n(function (IntegrationExpireBehavior) {\n    IntegrationExpireBehavior[IntegrationExpireBehavior[\"RemoveRole\"] = 0] = \"RemoveRole\";\n    IntegrationExpireBehavior[IntegrationExpireBehavior[\"Kick\"] = 1] = \"Kick\";\n})(IntegrationExpireBehavior || (exports.IntegrationExpireBehavior = IntegrationExpireBehavior = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#get-guild-widget-image-widget-style-options\n */\nvar GuildWidgetStyle;\n(function (GuildWidgetStyle) {\n    /**\n     * Shield style widget with Discord icon and guild members online count\n     */\n    GuildWidgetStyle[\"Shield\"] = \"shield\";\n    /**\n     * Large image with guild icon, name and online count. \"POWERED BY DISCORD\" as the footer of the widget\n     */\n    GuildWidgetStyle[\"Banner1\"] = \"banner1\";\n    /**\n     * Smaller widget style with guild icon, name and online count. Split on the right with Discord logo\n     */\n    GuildWidgetStyle[\"Banner2\"] = \"banner2\";\n    /**\n     * Large image with guild icon, name and online count. In the footer, Discord logo on the left and \"Chat Now\" on the right\n     */\n    GuildWidgetStyle[\"Banner3\"] = \"banner3\";\n    /**\n     * Large Discord logo at the top of the widget. Guild icon, name and online count in the middle portion of the widget\n     * and a \"JOIN MY SERVER\" button at the bottom\n     */\n    GuildWidgetStyle[\"Banner4\"] = \"banner4\";\n})(GuildWidgetStyle || (exports.GuildWidgetStyle = GuildWidgetStyle = {}));\nvar MembershipScreeningFieldType;\n(function (MembershipScreeningFieldType) {\n    /**\n     * Server Rules\n     */\n    MembershipScreeningFieldType[\"Terms\"] = \"TERMS\";\n})(MembershipScreeningFieldType || (exports.MembershipScreeningFieldType = MembershipScreeningFieldType = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-onboarding-mode\n */\nvar GuildOnboardingMode;\n(function (GuildOnboardingMode) {\n    /**\n     * Counts only Default Channels towards constraints\n     */\n    GuildOnboardingMode[GuildOnboardingMode[\"OnboardingDefault\"] = 0] = \"OnboardingDefault\";\n    /**\n     * Counts Default Channels and Questions towards constraints\n     */\n    GuildOnboardingMode[GuildOnboardingMode[\"OnboardingAdvanced\"] = 1] = \"OnboardingAdvanced\";\n})(GuildOnboardingMode || (exports.GuildOnboardingMode = GuildOnboardingMode = {}));\n/**\n * https://discord.com/developers/docs/resources/guild#guild-onboarding-object-prompt-types\n */\nvar GuildOnboardingPromptType;\n(function (GuildOnboardingPromptType) {\n    GuildOnboardingPromptType[GuildOnboardingPromptType[\"MultipleChoice\"] = 0] = \"MultipleChoice\";\n    GuildOnboardingPromptType[GuildOnboardingPromptType[\"Dropdown\"] = 1] = \"Dropdown\";\n})(GuildOnboardingPromptType || (exports.GuildOnboardingPromptType = GuildOnboardingPromptType = {}));\n//# sourceMappingURL=guild.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GuildScheduledEventPrivacyLevel = exports.GuildScheduledEventStatus = exports.GuildScheduledEventEntityType = exports.GuildScheduledEventRecurrenceRuleMonth = exports.GuildScheduledEventRecurrenceRuleWeekday = exports.GuildScheduledEventRecurrenceRuleFrequency = void 0;\n/**\n * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-frequency\n */\nvar GuildScheduledEventRecurrenceRuleFrequency;\n(function (GuildScheduledEventRecurrenceRuleFrequency) {\n    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency[\"Yearly\"] = 0] = \"Yearly\";\n    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency[\"Monthly\"] = 1] = \"Monthly\";\n    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency[\"Weekly\"] = 2] = \"Weekly\";\n    GuildScheduledEventRecurrenceRuleFrequency[GuildScheduledEventRecurrenceRuleFrequency[\"Daily\"] = 3] = \"Daily\";\n})(GuildScheduledEventRecurrenceRuleFrequency || (exports.GuildScheduledEventRecurrenceRuleFrequency = GuildScheduledEventRecurrenceRuleFrequency = {}));\n/**\n * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-weekday\n */\nvar GuildScheduledEventRecurrenceRuleWeekday;\n(function (GuildScheduledEventRecurrenceRuleWeekday) {\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Monday\"] = 0] = \"Monday\";\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Tuesday\"] = 1] = \"Tuesday\";\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Wednesday\"] = 2] = \"Wednesday\";\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Thursday\"] = 3] = \"Thursday\";\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Friday\"] = 4] = \"Friday\";\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Saturday\"] = 5] = \"Saturday\";\n    GuildScheduledEventRecurrenceRuleWeekday[GuildScheduledEventRecurrenceRuleWeekday[\"Sunday\"] = 6] = \"Sunday\";\n})(GuildScheduledEventRecurrenceRuleWeekday || (exports.GuildScheduledEventRecurrenceRuleWeekday = GuildScheduledEventRecurrenceRuleWeekday = {}));\n/**\n * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-recurrence-rule-object-guild-scheduled-event-recurrence-rule-month\n */\nvar GuildScheduledEventRecurrenceRuleMonth;\n(function (GuildScheduledEventRecurrenceRuleMonth) {\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"January\"] = 1] = \"January\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"February\"] = 2] = \"February\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"March\"] = 3] = \"March\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"April\"] = 4] = \"April\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"May\"] = 5] = \"May\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"June\"] = 6] = \"June\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"July\"] = 7] = \"July\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"August\"] = 8] = \"August\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"September\"] = 9] = \"September\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"October\"] = 10] = \"October\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"November\"] = 11] = \"November\";\n    GuildScheduledEventRecurrenceRuleMonth[GuildScheduledEventRecurrenceRuleMonth[\"December\"] = 12] = \"December\";\n})(GuildScheduledEventRecurrenceRuleMonth || (exports.GuildScheduledEventRecurrenceRuleMonth = GuildScheduledEventRecurrenceRuleMonth = {}));\n/**\n * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-types\n */\nvar GuildScheduledEventEntityType;\n(function (GuildScheduledEventEntityType) {\n    GuildScheduledEventEntityType[GuildScheduledEventEntityType[\"StageInstance\"] = 1] = \"StageInstance\";\n    GuildScheduledEventEntityType[GuildScheduledEventEntityType[\"Voice\"] = 2] = \"Voice\";\n    GuildScheduledEventEntityType[GuildScheduledEventEntityType[\"External\"] = 3] = \"External\";\n})(GuildScheduledEventEntityType || (exports.GuildScheduledEventEntityType = GuildScheduledEventEntityType = {}));\n/**\n * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-status\n */\nvar GuildScheduledEventStatus;\n(function (GuildScheduledEventStatus) {\n    GuildScheduledEventStatus[GuildScheduledEventStatus[\"Scheduled\"] = 1] = \"Scheduled\";\n    GuildScheduledEventStatus[GuildScheduledEventStatus[\"Active\"] = 2] = \"Active\";\n    GuildScheduledEventStatus[GuildScheduledEventStatus[\"Completed\"] = 3] = \"Completed\";\n    GuildScheduledEventStatus[GuildScheduledEventStatus[\"Canceled\"] = 4] = \"Canceled\";\n})(GuildScheduledEventStatus || (exports.GuildScheduledEventStatus = GuildScheduledEventStatus = {}));\n/**\n * https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-privacy-level\n */\nvar GuildScheduledEventPrivacyLevel;\n(function (GuildScheduledEventPrivacyLevel) {\n    /**\n     * The scheduled event is only accessible to guild members\n     */\n    GuildScheduledEventPrivacyLevel[GuildScheduledEventPrivacyLevel[\"GuildOnly\"] = 2] = \"GuildOnly\";\n})(GuildScheduledEventPrivacyLevel || (exports.GuildScheduledEventPrivacyLevel = GuildScheduledEventPrivacyLevel = {}));\n//# sourceMappingURL=guildScheduledEvent.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=attachment.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=base.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=boolean.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=channel.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=integer.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=mentionable.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=number.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=role.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApplicationCommandOptionType = void 0;\n/**\n * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type\n */\nvar ApplicationCommandOptionType;\n(function (ApplicationCommandOptionType) {\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Subcommand\"] = 1] = \"Subcommand\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"SubcommandGroup\"] = 2] = \"SubcommandGroup\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"String\"] = 3] = \"String\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Integer\"] = 4] = \"Integer\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Boolean\"] = 5] = \"Boolean\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"User\"] = 6] = \"User\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Channel\"] = 7] = \"Channel\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Role\"] = 8] = \"Role\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Mentionable\"] = 9] = \"Mentionable\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Number\"] = 10] = \"Number\";\n    ApplicationCommandOptionType[ApplicationCommandOptionType[\"Attachment\"] = 11] = \"Attachment\";\n})(ApplicationCommandOptionType || (exports.ApplicationCommandOptionType = ApplicationCommandOptionType = {}));\n//# sourceMappingURL=shared.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=string.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=subcommand.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=subcommandGroup.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=user.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./_chatInput/attachment\"), exports);\n__exportStar(require(\"./_chatInput/base\"), exports);\n__exportStar(require(\"./_chatInput/boolean\"), exports);\n__exportStar(require(\"./_chatInput/channel\"), exports);\n__exportStar(require(\"./_chatInput/integer\"), exports);\n__exportStar(require(\"./_chatInput/mentionable\"), exports);\n__exportStar(require(\"./_chatInput/number\"), exports);\n__exportStar(require(\"./_chatInput/role\"), exports);\n__exportStar(require(\"./_chatInput/shared\"), exports);\n__exportStar(require(\"./_chatInput/string\"), exports);\n__exportStar(require(\"./_chatInput/subcommand\"), exports);\n__exportStar(require(\"./_chatInput/subcommandGroup\"), exports);\n__exportStar(require(\"./_chatInput/user\"), exports);\n//# sourceMappingURL=chatInput.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=contextMenu.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.APIApplicationCommandPermissionsConstant = exports.ApplicationCommandPermissionType = void 0;\n/**\n * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type\n */\nvar ApplicationCommandPermissionType;\n(function (ApplicationCommandPermissionType) {\n    ApplicationCommandPermissionType[ApplicationCommandPermissionType[\"Role\"] = 1] = \"Role\";\n    ApplicationCommandPermissionType[ApplicationCommandPermissionType[\"User\"] = 2] = \"User\";\n    ApplicationCommandPermissionType[ApplicationCommandPermissionType[\"Channel\"] = 3] = \"Channel\";\n})(ApplicationCommandPermissionType || (exports.ApplicationCommandPermissionType = ApplicationCommandPermissionType = {}));\n/**\n * https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants\n */\nexports.APIApplicationCommandPermissionsConstant = {\n    // eslint-disable-next-line unicorn/prefer-native-coercion-functions\n    Everyone: (guildId) => String(guildId),\n    AllChannels: (guildId) => String(BigInt(guildId) - 1n),\n};\n//# sourceMappingURL=permissions.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=entryPoint.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntryPointCommandHandlerType = exports.InteractionContextType = exports.ApplicationIntegrationType = exports.ApplicationCommandType = void 0;\n__exportStar(require(\"./_applicationCommands/chatInput\"), exports);\n__exportStar(require(\"./_applicationCommands/contextMenu\"), exports);\n__exportStar(require(\"./_applicationCommands/permissions\"), exports);\n__exportStar(require(\"./_applicationCommands/entryPoint\"), exports);\n/**\n * https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-types\n */\nvar ApplicationCommandType;\n(function (ApplicationCommandType) {\n    /**\n     * Slash commands; a text-based command that shows up when a user types `/`\n     */\n    ApplicationCommandType[ApplicationCommandType[\"ChatInput\"] = 1] = \"ChatInput\";\n    /**\n     * A UI-based command that shows up when you right click or tap on a user\n     */\n    ApplicationCommandType[ApplicationCommandType[\"User\"] = 2] = \"User\";\n    /**\n     * A UI-based command that shows up when you right click or tap on a message\n     */\n    ApplicationCommandType[ApplicationCommandType[\"Message\"] = 3] = \"Message\";\n    /**\n     * A UI-based command that represents the primary way to invoke an app's Activity\n     */\n    ApplicationCommandType[ApplicationCommandType[\"PrimaryEntryPoint\"] = 4] = \"PrimaryEntryPoint\";\n})(ApplicationCommandType || (exports.ApplicationCommandType = ApplicationCommandType = {}));\n/**\n * https://discord.com/developers/docs/resources/application#application-object-application-integration-types\n */\nvar ApplicationIntegrationType;\n(function (ApplicationIntegrationType) {\n    /**\n     * App is installable to servers\n     */\n    ApplicationIntegrationType[ApplicationIntegrationType[\"GuildInstall\"] = 0] = \"GuildInstall\";\n    /**\n     * App is installable to users\n     */\n    ApplicationIntegrationType[ApplicationIntegrationType[\"UserInstall\"] = 1] = \"UserInstall\";\n})(ApplicationIntegrationType || (exports.ApplicationIntegrationType = ApplicationIntegrationType = {}));\n/**\n * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-context-types\n */\nvar InteractionContextType;\n(function (InteractionContextType) {\n    /**\n     * Interaction can be used within servers\n     */\n    InteractionContextType[InteractionContextType[\"Guild\"] = 0] = \"Guild\";\n    /**\n     * Interaction can be used within DMs with the app's bot user\n     */\n    InteractionContextType[InteractionContextType[\"BotDM\"] = 1] = \"BotDM\";\n    /**\n     * Interaction can be used within Group DMs and DMs other than the app's bot user\n     */\n    InteractionContextType[InteractionContextType[\"PrivateChannel\"] = 2] = \"PrivateChannel\";\n})(InteractionContextType || (exports.InteractionContextType = InteractionContextType = {}));\n/**\n * https://discord.com/developers/docs/interactions/application-commands#application-command-object-entry-point-command-handler-types\n */\nvar EntryPointCommandHandlerType;\n(function (EntryPointCommandHandlerType) {\n    /**\n     * The app handles the interaction using an interaction token\n     */\n    EntryPointCommandHandlerType[EntryPointCommandHandlerType[\"AppHandler\"] = 1] = \"AppHandler\";\n    /**\n     * Discord handles the interaction by launching an Activity and sending a follow-up message without coordinating with\n     * the app\n     */\n    EntryPointCommandHandlerType[EntryPointCommandHandlerType[\"DiscordLaunchActivity\"] = 2] = \"DiscordLaunchActivity\";\n})(EntryPointCommandHandlerType || (exports.EntryPointCommandHandlerType = EntryPointCommandHandlerType = {}));\n//# sourceMappingURL=applicationCommands.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=autocomplete.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=base.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=messageComponents.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=modalSubmit.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ping.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InteractionResponseType = exports.InteractionType = void 0;\n/**\n * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type\n */\nvar InteractionType;\n(function (InteractionType) {\n    InteractionType[InteractionType[\"Ping\"] = 1] = \"Ping\";\n    InteractionType[InteractionType[\"ApplicationCommand\"] = 2] = \"ApplicationCommand\";\n    InteractionType[InteractionType[\"MessageComponent\"] = 3] = \"MessageComponent\";\n    InteractionType[InteractionType[\"ApplicationCommandAutocomplete\"] = 4] = \"ApplicationCommandAutocomplete\";\n    InteractionType[InteractionType[\"ModalSubmit\"] = 5] = \"ModalSubmit\";\n})(InteractionType || (exports.InteractionType = InteractionType = {}));\n/**\n * https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type\n */\nvar InteractionResponseType;\n(function (InteractionResponseType) {\n    /**\n     * ACK a `Ping`\n     */\n    InteractionResponseType[InteractionResponseType[\"Pong\"] = 1] = \"Pong\";\n    /**\n     * Respond to an interaction with a message\n     */\n    InteractionResponseType[InteractionResponseType[\"ChannelMessageWithSource\"] = 4] = \"ChannelMessageWithSource\";\n    /**\n     * ACK an interaction and edit to a response later, the user sees a loading state\n     */\n    InteractionResponseType[InteractionResponseType[\"DeferredChannelMessageWithSource\"] = 5] = \"DeferredChannelMessageWithSource\";\n    /**\n     * ACK a button interaction and update it to a loading state\n     */\n    InteractionResponseType[InteractionResponseType[\"DeferredMessageUpdate\"] = 6] = \"DeferredMessageUpdate\";\n    /**\n     * ACK a button interaction and edit the message to which the button was attached\n     */\n    InteractionResponseType[InteractionResponseType[\"UpdateMessage\"] = 7] = \"UpdateMessage\";\n    /**\n     * For autocomplete interactions\n     */\n    InteractionResponseType[InteractionResponseType[\"ApplicationCommandAutocompleteResult\"] = 8] = \"ApplicationCommandAutocompleteResult\";\n    /**\n     * Respond to an interaction with an modal for a user to fill-out\n     */\n    InteractionResponseType[InteractionResponseType[\"Modal\"] = 9] = \"Modal\";\n    /**\n     * Respond to an interaction with an upgrade button, only available for apps with monetization enabled\n     *\n     * @deprecated See https://discord.com/developers/docs/change-log#premium-apps-new-premium-button-style-deep-linking-url-schemes\n     */\n    InteractionResponseType[InteractionResponseType[\"PremiumRequired\"] = 10] = \"PremiumRequired\";\n    /**\n     * Launch the Activity associated with the app.\n     *\n     * @remarks\n     * Only available for apps with Activities enabled\n     */\n    InteractionResponseType[InteractionResponseType[\"LaunchActivity\"] = 12] = \"LaunchActivity\";\n})(InteractionResponseType || (exports.InteractionResponseType = InteractionResponseType = {}));\n//# sourceMappingURL=responses.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./_interactions/applicationCommands\"), exports);\n__exportStar(require(\"./_interactions/autocomplete\"), exports);\n__exportStar(require(\"./_interactions/base\"), exports);\n__exportStar(require(\"./_interactions/messageComponents\"), exports);\n__exportStar(require(\"./_interactions/modalSubmit\"), exports);\n__exportStar(require(\"./_interactions/ping\"), exports);\n__exportStar(require(\"./_interactions/responses\"), exports);\n//# sourceMappingURL=interactions.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/invite\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InviteTargetType = exports.InviteType = void 0;\n/**\n * https://discord.com/developers/docs/resources/invite#invite-object-invite-types\n */\nvar InviteType;\n(function (InviteType) {\n    InviteType[InviteType[\"Guild\"] = 0] = \"Guild\";\n    InviteType[InviteType[\"GroupDM\"] = 1] = \"GroupDM\";\n    InviteType[InviteType[\"Friend\"] = 2] = \"Friend\";\n})(InviteType || (exports.InviteType = InviteType = {}));\n/**\n * https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types\n */\nvar InviteTargetType;\n(function (InviteTargetType) {\n    InviteTargetType[InviteTargetType[\"Stream\"] = 1] = \"Stream\";\n    InviteTargetType[InviteTargetType[\"EmbeddedApplication\"] = 2] = \"EmbeddedApplication\";\n})(InviteTargetType || (exports.InviteTargetType = InviteTargetType = {}));\n//# sourceMappingURL=invite.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubscriptionStatus = exports.SKUType = exports.SKUFlags = exports.EntitlementType = void 0;\n/**\n * https://discord.com/developers/docs/monetization/entitlements#entitlement-object-entitlement-types\n */\nvar EntitlementType;\n(function (EntitlementType) {\n    /**\n     * Entitlement was purchased by user\n     */\n    EntitlementType[EntitlementType[\"Purchase\"] = 1] = \"Purchase\";\n    /**\n     * Entitlement for Discord Nitro subscription\n     */\n    EntitlementType[EntitlementType[\"PremiumSubscription\"] = 2] = \"PremiumSubscription\";\n    /**\n     * Entitlement was gifted by developer\n     */\n    EntitlementType[EntitlementType[\"DeveloperGift\"] = 3] = \"DeveloperGift\";\n    /**\n     * Entitlement was purchased by a dev in application test mode\n     */\n    EntitlementType[EntitlementType[\"TestModePurchase\"] = 4] = \"TestModePurchase\";\n    /**\n     * Entitlement was granted when the SKU was free\n     */\n    EntitlementType[EntitlementType[\"FreePurchase\"] = 5] = \"FreePurchase\";\n    /**\n     * Entitlement was gifted by another user\n     */\n    EntitlementType[EntitlementType[\"UserGift\"] = 6] = \"UserGift\";\n    /**\n     * Entitlement was claimed by user for free as a Nitro Subscriber\n     */\n    EntitlementType[EntitlementType[\"PremiumPurchase\"] = 7] = \"PremiumPurchase\";\n    /**\n     * Entitlement was purchased as an app subscription\n     */\n    EntitlementType[EntitlementType[\"ApplicationSubscription\"] = 8] = \"ApplicationSubscription\";\n})(EntitlementType || (exports.EntitlementType = EntitlementType = {}));\n/**\n * https://discord.com/developers/docs/monetization/skus#sku-object-sku-flags\n */\nvar SKUFlags;\n(function (SKUFlags) {\n    /**\n     * SKU is available for purchase\n     */\n    SKUFlags[SKUFlags[\"Available\"] = 4] = \"Available\";\n    /**\n     * Recurring SKU that can be purchased by a user and applied to a single server.\n     * Grants access to every user in that server.\n     */\n    SKUFlags[SKUFlags[\"GuildSubscription\"] = 128] = \"GuildSubscription\";\n    /**\n     * Recurring SKU purchased by a user for themselves. Grants access to the purchasing user in every server.\n     */\n    SKUFlags[SKUFlags[\"UserSubscription\"] = 256] = \"UserSubscription\";\n})(SKUFlags || (exports.SKUFlags = SKUFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/sku#sku-object-sku-types\n */\nvar SKUType;\n(function (SKUType) {\n    /**\n     * Durable one-time purchase\n     */\n    SKUType[SKUType[\"Durable\"] = 2] = \"Durable\";\n    /**\n     * Consumable one-time purchase\n     */\n    SKUType[SKUType[\"Consumable\"] = 3] = \"Consumable\";\n    /**\n     * Represents a recurring subscription\n     */\n    SKUType[SKUType[\"Subscription\"] = 5] = \"Subscription\";\n    /**\n     * System-generated group for each Subscription SKU created\n     */\n    SKUType[SKUType[\"SubscriptionGroup\"] = 6] = \"SubscriptionGroup\";\n})(SKUType || (exports.SKUType = SKUType = {}));\n/**\n * https://discord.com/developers/docs/resources/subscription#subscription-statuses\n */\nvar SubscriptionStatus;\n(function (SubscriptionStatus) {\n    /**\n     * Subscription is active and scheduled to renew.\n     */\n    SubscriptionStatus[SubscriptionStatus[\"Active\"] = 0] = \"Active\";\n    /**\n     * Subscription is active but will not renew.\n     */\n    SubscriptionStatus[SubscriptionStatus[\"Ending\"] = 1] = \"Ending\";\n    /**\n     * Subscription is inactive and not being charged.\n     */\n    SubscriptionStatus[SubscriptionStatus[\"Inactive\"] = 2] = \"Inactive\";\n})(SubscriptionStatus || (exports.SubscriptionStatus = SubscriptionStatus = {}));\n//# sourceMappingURL=monetization.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/topics/oauth2\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuth2Scopes = void 0;\nvar OAuth2Scopes;\n(function (OAuth2Scopes) {\n    /**\n     * For oauth2 bots, this puts the bot in the user's selected guild by default\n     */\n    OAuth2Scopes[\"Bot\"] = \"bot\";\n    /**\n     * Allows [/users/@me/connections](https://discord.com/developers/docs/resources/user#get-user-connections)\n     * to return linked third-party accounts\n     *\n     * See https://discord.com/developers/docs/resources/user#get-user-connections\n     */\n    OAuth2Scopes[\"Connections\"] = \"connections\";\n    /**\n     * Allows your app to see information about the user's DMs and group DMs - requires Discord approval\n     */\n    OAuth2Scopes[\"DMChannelsRead\"] = \"dm_channels.read\";\n    /**\n     * Enables [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) to return an `email`\n     *\n     * See https://discord.com/developers/docs/resources/user#get-current-user\n     */\n    OAuth2Scopes[\"Email\"] = \"email\";\n    /**\n     * Allows [/users/@me](https://discord.com/developers/docs/resources/user#get-current-user) without `email`\n     *\n     * See https://discord.com/developers/docs/resources/user#get-current-user\n     */\n    OAuth2Scopes[\"Identify\"] = \"identify\";\n    /**\n     * Allows [/users/@me/guilds](https://discord.com/developers/docs/resources/user#get-current-user-guilds)\n     * to return basic information about all of a user's guilds\n     *\n     * See https://discord.com/developers/docs/resources/user#get-current-user-guilds\n     */\n    OAuth2Scopes[\"Guilds\"] = \"guilds\";\n    /**\n     * Allows [/guilds/{guild.id}/members/{user.id}](https://discord.com/developers/docs/resources/guild#add-guild-member)\n     * to be used for joining users to a guild\n     *\n     * See https://discord.com/developers/docs/resources/guild#add-guild-member\n     */\n    OAuth2Scopes[\"GuildsJoin\"] = \"guilds.join\";\n    /**\n     * Allows /users/@me/guilds/{guild.id}/member to return a user's member information in a guild\n     *\n     * See https://discord.com/developers/docs/resources/user#get-current-user-guild-member\n     */\n    OAuth2Scopes[\"GuildsMembersRead\"] = \"guilds.members.read\";\n    /**\n     * Allows your app to join users to a group dm\n     *\n     * See https://discord.com/developers/docs/resources/channel#group-dm-add-recipient\n     */\n    OAuth2Scopes[\"GroupDMJoins\"] = \"gdm.join\";\n    /**\n     * For local rpc server api access, this allows you to read messages from all client channels\n     * (otherwise restricted to channels/guilds your app creates)\n     */\n    OAuth2Scopes[\"MessagesRead\"] = \"messages.read\";\n    /**\n     * Allows your app to update a user's connection and metadata for the app\n     */\n    OAuth2Scopes[\"RoleConnectionsWrite\"] = \"role_connections.write\";\n    /**\n     * For local rpc server access, this allows you to control a user's local Discord client - requires Discord approval\n     */\n    OAuth2Scopes[\"RPC\"] = \"rpc\";\n    /**\n     * For local rpc server api access, this allows you to receive notifications pushed out to the user - requires Discord approval\n     */\n    OAuth2Scopes[\"RPCNotificationsRead\"] = \"rpc.notifications.read\";\n    /**\n     * This generates a webhook that is returned in the oauth token response for authorization code grants\n     */\n    OAuth2Scopes[\"WebhookIncoming\"] = \"webhook.incoming\";\n    /**\n     * Allows your app to connect to voice on user's behalf and see all the voice members - requires Discord approval\n     */\n    OAuth2Scopes[\"Voice\"] = \"voice\";\n    /**\n     * Allows your app to upload/update builds for a user's applications - requires Discord approval\n     */\n    OAuth2Scopes[\"ApplicationsBuildsUpload\"] = \"applications.builds.upload\";\n    /**\n     * Allows your app to read build data for a user's applications\n     */\n    OAuth2Scopes[\"ApplicationsBuildsRead\"] = \"applications.builds.read\";\n    /**\n     * Allows your app to read and update store data (SKUs, store listings, achievements, etc.) for a user's applications\n     */\n    OAuth2Scopes[\"ApplicationsStoreUpdate\"] = \"applications.store.update\";\n    /**\n     * Allows your app to read entitlements for a user's applications\n     */\n    OAuth2Scopes[\"ApplicationsEntitlements\"] = \"applications.entitlements\";\n    /**\n     * Allows your app to know a user's friends and implicit relationships - requires Discord approval\n     */\n    OAuth2Scopes[\"RelationshipsRead\"] = \"relationships.read\";\n    /**\n     * Allows your app to fetch data from a user's \"Now Playing/Recently Played\" list - requires Discord approval\n     */\n    OAuth2Scopes[\"ActivitiesRead\"] = \"activities.read\";\n    /**\n     * Allows your app to update a user's activity - requires Discord approval (NOT REQUIRED FOR GAMESDK ACTIVITY MANAGER)\n     *\n     * See https://discord.com/developers/docs/game-sdk/activities\n     */\n    OAuth2Scopes[\"ActivitiesWrite\"] = \"activities.write\";\n    /**\n     * Allows your app to use Application Commands in a guild\n     *\n     * See https://discord.com/developers/docs/interactions/application-commands\n     */\n    OAuth2Scopes[\"ApplicationsCommands\"] = \"applications.commands\";\n    /**\n     * Allows your app to update its Application Commands via this bearer token - client credentials grant only\n     *\n     * See https://discord.com/developers/docs/interactions/application-commands\n     */\n    OAuth2Scopes[\"ApplicationsCommandsUpdate\"] = \"applications.commands.update\";\n    /**\n     * Allows your app to update permissions for its commands using a Bearer token - client credentials grant only\n     *\n     * See https://discord.com/developers/docs/interactions/application-commands\n     */\n    OAuth2Scopes[\"ApplicationCommandsPermissionsUpdate\"] = \"applications.commands.permissions.update\";\n})(OAuth2Scopes || (exports.OAuth2Scopes = OAuth2Scopes = {}));\n//# sourceMappingURL=oauth2.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/topics/permissions\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RoleFlags = void 0;\n/**\n * https://discord.com/developers/docs/topics/permissions#role-object-role-flags\n */\nvar RoleFlags;\n(function (RoleFlags) {\n    /**\n     * Role can be selected by members in an onboarding prompt\n     */\n    RoleFlags[RoleFlags[\"InPrompt\"] = 1] = \"InPrompt\";\n})(RoleFlags || (exports.RoleFlags = RoleFlags = {}));\n//# sourceMappingURL=permissions.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/poll\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PollLayoutType = void 0;\n/**\n * https://discord.com/developers/docs/resources/poll#layout-type\n */\nvar PollLayoutType;\n(function (PollLayoutType) {\n    /**\n     * The, uhm, default layout type\n     */\n    PollLayoutType[PollLayoutType[\"Default\"] = 1] = \"Default\";\n})(PollLayoutType || (exports.PollLayoutType = PollLayoutType = {}));\n//# sourceMappingURL=poll.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/soundboard\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=soundboard.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StageInstancePrivacyLevel = void 0;\n/**\n * https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level\n */\nvar StageInstancePrivacyLevel;\n(function (StageInstancePrivacyLevel) {\n    /**\n     * The stage instance is visible publicly, such as on stage discovery\n     *\n     * @deprecated\n     */\n    StageInstancePrivacyLevel[StageInstancePrivacyLevel[\"Public\"] = 1] = \"Public\";\n    /**\n     * The stage instance is visible to only guild members\n     */\n    StageInstancePrivacyLevel[StageInstancePrivacyLevel[\"GuildOnly\"] = 2] = \"GuildOnly\";\n})(StageInstancePrivacyLevel || (exports.StageInstancePrivacyLevel = StageInstancePrivacyLevel = {}));\n//# sourceMappingURL=stageInstance.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/sticker\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StickerFormatType = exports.StickerType = void 0;\n/**\n * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types\n */\nvar StickerType;\n(function (StickerType) {\n    /**\n     * An official sticker in a pack\n     */\n    StickerType[StickerType[\"Standard\"] = 1] = \"Standard\";\n    /**\n     * A sticker uploaded to a guild for the guild's members\n     */\n    StickerType[StickerType[\"Guild\"] = 2] = \"Guild\";\n})(StickerType || (exports.StickerType = StickerType = {}));\n/**\n * https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types\n */\nvar StickerFormatType;\n(function (StickerFormatType) {\n    StickerFormatType[StickerFormatType[\"PNG\"] = 1] = \"PNG\";\n    StickerFormatType[StickerFormatType[\"APNG\"] = 2] = \"APNG\";\n    StickerFormatType[StickerFormatType[\"Lottie\"] = 3] = \"Lottie\";\n    StickerFormatType[StickerFormatType[\"GIF\"] = 4] = \"GIF\";\n})(StickerFormatType || (exports.StickerFormatType = StickerFormatType = {}));\n//# sourceMappingURL=sticker.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/topics/teams\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TeamMemberRole = exports.TeamMemberMembershipState = void 0;\n/**\n * https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum\n */\nvar TeamMemberMembershipState;\n(function (TeamMemberMembershipState) {\n    TeamMemberMembershipState[TeamMemberMembershipState[\"Invited\"] = 1] = \"Invited\";\n    TeamMemberMembershipState[TeamMemberMembershipState[\"Accepted\"] = 2] = \"Accepted\";\n})(TeamMemberMembershipState || (exports.TeamMemberMembershipState = TeamMemberMembershipState = {}));\n/**\n * https://discord.com/developers/docs/topics/teams#team-member-roles-team-member-role-types\n */\nvar TeamMemberRole;\n(function (TeamMemberRole) {\n    TeamMemberRole[\"Admin\"] = \"admin\";\n    TeamMemberRole[\"Developer\"] = \"developer\";\n    TeamMemberRole[\"ReadOnly\"] = \"read_only\";\n})(TeamMemberRole || (exports.TeamMemberRole = TeamMemberRole = {}));\n//# sourceMappingURL=teams.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/guild-template\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=template.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/user\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ConnectionVisibility = exports.ConnectionService = exports.UserPremiumType = exports.UserFlags = void 0;\n/**\n * https://discord.com/developers/docs/resources/user#user-object-user-flags\n */\nvar UserFlags;\n(function (UserFlags) {\n    /**\n     * Discord Employee\n     */\n    UserFlags[UserFlags[\"Staff\"] = 1] = \"Staff\";\n    /**\n     * Partnered Server Owner\n     */\n    UserFlags[UserFlags[\"Partner\"] = 2] = \"Partner\";\n    /**\n     * HypeSquad Events Member\n     */\n    UserFlags[UserFlags[\"Hypesquad\"] = 4] = \"Hypesquad\";\n    /**\n     * Bug Hunter Level 1\n     */\n    UserFlags[UserFlags[\"BugHunterLevel1\"] = 8] = \"BugHunterLevel1\";\n    /**\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    UserFlags[UserFlags[\"MFASMS\"] = 16] = \"MFASMS\";\n    /**\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    UserFlags[UserFlags[\"PremiumPromoDismissed\"] = 32] = \"PremiumPromoDismissed\";\n    /**\n     * House Bravery Member\n     */\n    UserFlags[UserFlags[\"HypeSquadOnlineHouse1\"] = 64] = \"HypeSquadOnlineHouse1\";\n    /**\n     * House Brilliance Member\n     */\n    UserFlags[UserFlags[\"HypeSquadOnlineHouse2\"] = 128] = \"HypeSquadOnlineHouse2\";\n    /**\n     * House Balance Member\n     */\n    UserFlags[UserFlags[\"HypeSquadOnlineHouse3\"] = 256] = \"HypeSquadOnlineHouse3\";\n    /**\n     * Early Nitro Supporter\n     */\n    UserFlags[UserFlags[\"PremiumEarlySupporter\"] = 512] = \"PremiumEarlySupporter\";\n    /**\n     * User is a [team](https://discord.com/developers/docs/topics/teams)\n     */\n    UserFlags[UserFlags[\"TeamPseudoUser\"] = 1024] = \"TeamPseudoUser\";\n    /**\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    UserFlags[UserFlags[\"HasUnreadUrgentMessages\"] = 8192] = \"HasUnreadUrgentMessages\";\n    /**\n     * Bug Hunter Level 2\n     */\n    UserFlags[UserFlags[\"BugHunterLevel2\"] = 16384] = \"BugHunterLevel2\";\n    /**\n     * Verified Bot\n     */\n    UserFlags[UserFlags[\"VerifiedBot\"] = 65536] = \"VerifiedBot\";\n    /**\n     * Early Verified Bot Developer\n     */\n    UserFlags[UserFlags[\"VerifiedDeveloper\"] = 131072] = \"VerifiedDeveloper\";\n    /**\n     * Moderator Programs Alumni\n     */\n    UserFlags[UserFlags[\"CertifiedModerator\"] = 262144] = \"CertifiedModerator\";\n    /**\n     * Bot uses only [HTTP interactions](https://discord.com/developers/docs/interactions/receiving-and-responding#receiving-an-interaction) and is shown in the online member list\n     */\n    UserFlags[UserFlags[\"BotHTTPInteractions\"] = 524288] = \"BotHTTPInteractions\";\n    /**\n     * User has been identified as spammer\n     *\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    UserFlags[UserFlags[\"Spammer\"] = 1048576] = \"Spammer\";\n    /**\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     */\n    UserFlags[UserFlags[\"DisablePremium\"] = 2097152] = \"DisablePremium\";\n    /**\n     * User is an [Active Developer](https://support-dev.discord.com/hc/articles/10113997751447)\n     */\n    UserFlags[UserFlags[\"ActiveDeveloper\"] = 4194304] = \"ActiveDeveloper\";\n    /**\n     * User's account has been [quarantined](https://support.discord.com/hc/articles/6461420677527) based on recent activity\n     *\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     * @privateRemarks\n     *\n     * This value would be 1 << 44, but bit shifting above 1 << 30 requires bigints\n     */\n    UserFlags[UserFlags[\"Quarantined\"] = 17592186044416] = \"Quarantined\";\n    /**\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     * @privateRemarks\n     *\n     * This value would be 1 << 50, but bit shifting above 1 << 30 requires bigints\n     */\n    UserFlags[UserFlags[\"Collaborator\"] = 1125899906842624] = \"Collaborator\";\n    /**\n     * @unstable This user flag is currently not documented by Discord but has a known value which we will try to keep up to date.\n     * @privateRemarks\n     *\n     * This value would be 1 << 51, but bit shifting above 1 << 30 requires bigints\n     */\n    UserFlags[UserFlags[\"RestrictedCollaborator\"] = 2251799813685248] = \"RestrictedCollaborator\";\n})(UserFlags || (exports.UserFlags = UserFlags = {}));\n/**\n * https://discord.com/developers/docs/resources/user#user-object-premium-types\n */\nvar UserPremiumType;\n(function (UserPremiumType) {\n    UserPremiumType[UserPremiumType[\"None\"] = 0] = \"None\";\n    UserPremiumType[UserPremiumType[\"NitroClassic\"] = 1] = \"NitroClassic\";\n    UserPremiumType[UserPremiumType[\"Nitro\"] = 2] = \"Nitro\";\n    UserPremiumType[UserPremiumType[\"NitroBasic\"] = 3] = \"NitroBasic\";\n})(UserPremiumType || (exports.UserPremiumType = UserPremiumType = {}));\nvar ConnectionService;\n(function (ConnectionService) {\n    ConnectionService[\"AmazonMusic\"] = \"amazon-music\";\n    ConnectionService[\"BattleNet\"] = \"battlenet\";\n    ConnectionService[\"Bluesky\"] = \"bluesky\";\n    ConnectionService[\"BungieNet\"] = \"bungie\";\n    ConnectionService[\"Crunchyroll\"] = \"crunchyroll\";\n    ConnectionService[\"Domain\"] = \"domain\";\n    ConnectionService[\"eBay\"] = \"ebay\";\n    ConnectionService[\"EpicGames\"] = \"epicgames\";\n    ConnectionService[\"Facebook\"] = \"facebook\";\n    ConnectionService[\"GitHub\"] = \"github\";\n    ConnectionService[\"Instagram\"] = \"instagram\";\n    ConnectionService[\"LeagueOfLegends\"] = \"leagueoflegends\";\n    ConnectionService[\"Mastodon\"] = \"mastodon\";\n    ConnectionService[\"PayPal\"] = \"paypal\";\n    ConnectionService[\"PlayStationNetwork\"] = \"playstation\";\n    ConnectionService[\"Reddit\"] = \"reddit\";\n    ConnectionService[\"RiotGames\"] = \"riotgames\";\n    ConnectionService[\"Roblox\"] = \"roblox\";\n    ConnectionService[\"Spotify\"] = \"spotify\";\n    ConnectionService[\"Skype\"] = \"skype\";\n    ConnectionService[\"Steam\"] = \"steam\";\n    ConnectionService[\"TikTok\"] = \"tiktok\";\n    ConnectionService[\"Twitch\"] = \"twitch\";\n    ConnectionService[\"X\"] = \"twitter\";\n    /**\n     * @deprecated This is the old name for {@apilink ConnectionService#X}\n     */\n    ConnectionService[\"Twitter\"] = \"twitter\";\n    ConnectionService[\"Xbox\"] = \"xbox\";\n    ConnectionService[\"YouTube\"] = \"youtube\";\n})(ConnectionService || (exports.ConnectionService = ConnectionService = {}));\nvar ConnectionVisibility;\n(function (ConnectionVisibility) {\n    /**\n     * Invisible to everyone except the user themselves\n     */\n    ConnectionVisibility[ConnectionVisibility[\"None\"] = 0] = \"None\";\n    /**\n     * Visible to everyone\n     */\n    ConnectionVisibility[ConnectionVisibility[\"Everyone\"] = 1] = \"Everyone\";\n})(ConnectionVisibility || (exports.ConnectionVisibility = ConnectionVisibility = {}));\n//# sourceMappingURL=user.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/voice\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=voice.js.map",
    "\"use strict\";\n/**\n * Types extracted from https://discord.com/developers/docs/resources/webhook\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebhookType = exports.ApplicationWebhookEventType = exports.ApplicationWebhookType = void 0;\n/**\n * https://discord.com/developers/docs/events/webhook-events#webhook-types\n */\nvar ApplicationWebhookType;\n(function (ApplicationWebhookType) {\n    /**\n     * PING event sent to verify your Webhook Event URL is active\n     */\n    ApplicationWebhookType[ApplicationWebhookType[\"Ping\"] = 0] = \"Ping\";\n    /**\n     * Webhook event (details for event in event body object)\n     */\n    ApplicationWebhookType[ApplicationWebhookType[\"Event\"] = 1] = \"Event\";\n})(ApplicationWebhookType || (exports.ApplicationWebhookType = ApplicationWebhookType = {}));\n/**\n * https://discord.com/developers/docs/events/webhook-events#event-types\n */\nvar ApplicationWebhookEventType;\n(function (ApplicationWebhookEventType) {\n    /**\n     * Sent when an app was authorized by a user to a server or their account\n     */\n    ApplicationWebhookEventType[\"ApplicationAuthorized\"] = \"APPLICATION_AUTHORIZED\";\n    /**\n     * Entitlement was created\n     */\n    ApplicationWebhookEventType[\"EntitlementCreate\"] = \"ENTITLEMENT_CREATE\";\n    /**\n     * User was added to a Quest (currently unavailable)\n     */\n    ApplicationWebhookEventType[\"QuestUserEnrollment\"] = \"QUEST_USER_ENROLLMENT\";\n})(ApplicationWebhookEventType || (exports.ApplicationWebhookEventType = ApplicationWebhookEventType = {}));\n/**\n * https://discord.com/developers/docs/resources/webhook#webhook-object-webhook-types\n */\nvar WebhookType;\n(function (WebhookType) {\n    /**\n     * Incoming Webhooks can post messages to channels with a generated token\n     */\n    WebhookType[WebhookType[\"Incoming\"] = 1] = \"Incoming\";\n    /**\n     * Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels\n     */\n    WebhookType[WebhookType[\"ChannelFollower\"] = 2] = \"ChannelFollower\";\n    /**\n     * Application webhooks are webhooks used with Interactions\n     */\n    WebhookType[WebhookType[\"Application\"] = 3] = \"Application\";\n})(WebhookType || (exports.WebhookType = WebhookType = {}));\n//# sourceMappingURL=webhook.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"../common\"), exports);\n__exportStar(require(\"./application\"), exports);\n__exportStar(require(\"./auditLog\"), exports);\n__exportStar(require(\"./autoModeration\"), exports);\n__exportStar(require(\"./channel\"), exports);\n__exportStar(require(\"./emoji\"), exports);\n__exportStar(require(\"./gateway\"), exports);\n__exportStar(require(\"./guild\"), exports);\n__exportStar(require(\"./guildScheduledEvent\"), exports);\n__exportStar(require(\"./interactions\"), exports);\n__exportStar(require(\"./invite\"), exports);\n__exportStar(require(\"./monetization\"), exports);\n__exportStar(require(\"./oauth2\"), exports);\n__exportStar(require(\"./permissions\"), exports);\n__exportStar(require(\"./poll\"), exports);\n__exportStar(require(\"./soundboard\"), exports);\n__exportStar(require(\"./stageInstance\"), exports);\n__exportStar(require(\"./sticker\"), exports);\n__exportStar(require(\"./teams\"), exports);\n__exportStar(require(\"./template\"), exports);\n__exportStar(require(\"./user\"), exports);\n__exportStar(require(\"./voice\"), exports);\n__exportStar(require(\"./webhook\"), exports);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.urlSafeCharacters = void 0;\n// eslint-disable-next-line unicorn/better-regex\nconst pattern = /^[\\d%A-Za-z-_]+$/g;\nexports.urlSafeCharacters = {\n    test(input) {\n        const result = pattern.test(input);\n        pattern.lastIndex = 0;\n        return result;\n    },\n};\n//# sourceMappingURL=internals.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Locale = exports.RESTJSONErrorCodes = void 0;\n/**\n * https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes\n */\nvar RESTJSONErrorCodes;\n(function (RESTJSONErrorCodes) {\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"GeneralError\"] = 0] = \"GeneralError\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownAccount\"] = 10001] = \"UnknownAccount\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownApplication\"] = 10002] = \"UnknownApplication\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownChannel\"] = 10003] = \"UnknownChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGuild\"] = 10004] = \"UnknownGuild\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownIntegration\"] = 10005] = \"UnknownIntegration\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownInvite\"] = 10006] = \"UnknownInvite\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownMember\"] = 10007] = \"UnknownMember\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownMessage\"] = 10008] = \"UnknownMessage\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownPermissionOverwrite\"] = 10009] = \"UnknownPermissionOverwrite\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownProvider\"] = 10010] = \"UnknownProvider\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownRole\"] = 10011] = \"UnknownRole\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownToken\"] = 10012] = \"UnknownToken\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownUser\"] = 10013] = \"UnknownUser\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownEmoji\"] = 10014] = \"UnknownEmoji\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownWebhook\"] = 10015] = \"UnknownWebhook\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownWebhookService\"] = 10016] = \"UnknownWebhookService\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownSession\"] = 10020] = \"UnknownSession\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownAsset\"] = 10021] = \"UnknownAsset\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownBan\"] = 10026] = \"UnknownBan\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownSKU\"] = 10027] = \"UnknownSKU\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownStoreListing\"] = 10028] = \"UnknownStoreListing\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownEntitlement\"] = 10029] = \"UnknownEntitlement\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownBuild\"] = 10030] = \"UnknownBuild\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownLobby\"] = 10031] = \"UnknownLobby\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownBranch\"] = 10032] = \"UnknownBranch\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownStoreDirectoryLayout\"] = 10033] = \"UnknownStoreDirectoryLayout\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownRedistributable\"] = 10036] = \"UnknownRedistributable\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGiftCode\"] = 10038] = \"UnknownGiftCode\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownStream\"] = 10049] = \"UnknownStream\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownPremiumServerSubscribeCooldown\"] = 10050] = \"UnknownPremiumServerSubscribeCooldown\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGuildTemplate\"] = 10057] = \"UnknownGuildTemplate\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownDiscoverableServerCategory\"] = 10059] = \"UnknownDiscoverableServerCategory\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownSticker\"] = 10060] = \"UnknownSticker\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownStickerPack\"] = 10061] = \"UnknownStickerPack\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownInteraction\"] = 10062] = \"UnknownInteraction\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownApplicationCommand\"] = 10063] = \"UnknownApplicationCommand\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownVoiceState\"] = 10065] = \"UnknownVoiceState\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownApplicationCommandPermissions\"] = 10066] = \"UnknownApplicationCommandPermissions\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownStageInstance\"] = 10067] = \"UnknownStageInstance\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGuildMemberVerificationForm\"] = 10068] = \"UnknownGuildMemberVerificationForm\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGuildWelcomeScreen\"] = 10069] = \"UnknownGuildWelcomeScreen\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGuildScheduledEvent\"] = 10070] = \"UnknownGuildScheduledEvent\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownGuildScheduledEventUser\"] = 10071] = \"UnknownGuildScheduledEventUser\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownTag\"] = 10087] = \"UnknownTag\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnknownSound\"] = 10097] = \"UnknownSound\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"BotsCannotUseThisEndpoint\"] = 20001] = \"BotsCannotUseThisEndpoint\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OnlyBotsCanUseThisEndpoint\"] = 20002] = \"OnlyBotsCanUseThisEndpoint\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ExplicitContentCannotBeSentToTheDesiredRecipient\"] = 20009] = \"ExplicitContentCannotBeSentToTheDesiredRecipient\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"NotAuthorizedToPerformThisActionOnThisApplication\"] = 20012] = \"NotAuthorizedToPerformThisActionOnThisApplication\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ActionCannotBePerformedDueToSlowmodeRateLimit\"] = 20016] = \"ActionCannotBePerformedDueToSlowmodeRateLimit\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TheMazeIsntMeantForYou\"] = 20017] = \"TheMazeIsntMeantForYou\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OnlyTheOwnerOfThisAccountCanPerformThisAction\"] = 20018] = \"OnlyTheOwnerOfThisAccountCanPerformThisAction\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"AnnouncementEditLimitExceeded\"] = 20022] = \"AnnouncementEditLimitExceeded\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UnderMinimumAge\"] = 20024] = \"UnderMinimumAge\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ChannelSendRateLimit\"] = 20028] = \"ChannelSendRateLimit\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ServerSendRateLimit\"] = 20029] = \"ServerSendRateLimit\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords\"] = 20031] = \"StageTopicServerNameServerDescriptionOrChannelNamesContainDisallowedWords\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"GuildPremiumSubscriptionLevelTooLow\"] = 20035] = \"GuildPremiumSubscriptionLevelTooLow\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfGuildsReached\"] = 30001] = \"MaximumNumberOfGuildsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfFriendsReached\"] = 30002] = \"MaximumNumberOfFriendsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfPinsReachedForTheChannel\"] = 30003] = \"MaximumNumberOfPinsReachedForTheChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfRecipientsReached\"] = 30004] = \"MaximumNumberOfRecipientsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfGuildRolesReached\"] = 30005] = \"MaximumNumberOfGuildRolesReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfWebhooksReached\"] = 30007] = \"MaximumNumberOfWebhooksReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfEmojisReached\"] = 30008] = \"MaximumNumberOfEmojisReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfReactionsReached\"] = 30010] = \"MaximumNumberOfReactionsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfGroupDMsReached\"] = 30011] = \"MaximumNumberOfGroupDMsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfGuildChannelsReached\"] = 30013] = \"MaximumNumberOfGuildChannelsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfAttachmentsInAMessageReached\"] = 30015] = \"MaximumNumberOfAttachmentsInAMessageReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfInvitesReached\"] = 30016] = \"MaximumNumberOfInvitesReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfAnimatedEmojisReached\"] = 30018] = \"MaximumNumberOfAnimatedEmojisReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfServerMembersReached\"] = 30019] = \"MaximumNumberOfServerMembersReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfServerCategoriesReached\"] = 30030] = \"MaximumNumberOfServerCategoriesReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"GuildAlreadyHasTemplate\"] = 30031] = \"GuildAlreadyHasTemplate\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfApplicationCommandsReached\"] = 30032] = \"MaximumNumberOfApplicationCommandsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumThreadParticipantsReached\"] = 30033] = \"MaximumThreadParticipantsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumDailyApplicationCommandCreatesReached\"] = 30034] = \"MaximumDailyApplicationCommandCreatesReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfNonGuildMemberBansHasBeenExceeded\"] = 30035] = \"MaximumNumberOfNonGuildMemberBansHasBeenExceeded\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfBanFetchesHasBeenReached\"] = 30037] = \"MaximumNumberOfBanFetchesHasBeenReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfUncompletedGuildScheduledEventsReached\"] = 30038] = \"MaximumNumberOfUncompletedGuildScheduledEventsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfStickersReached\"] = 30039] = \"MaximumNumberOfStickersReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfPruneRequestsHasBeenReached\"] = 30040] = \"MaximumNumberOfPruneRequestsHasBeenReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached\"] = 30042] = \"MaximumNumberOfGuildWidgetSettingsUpdatesHasBeenReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfSoundboardSoundsReached\"] = 30045] = \"MaximumNumberOfSoundboardSoundsReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfEditsToMessagesOlderThanOneHourReached\"] = 30046] = \"MaximumNumberOfEditsToMessagesOlderThanOneHourReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfPinnedThreadsInForumHasBeenReached\"] = 30047] = \"MaximumNumberOfPinnedThreadsInForumHasBeenReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfTagsInForumHasBeenReached\"] = 30048] = \"MaximumNumberOfTagsInForumHasBeenReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"BitrateIsTooHighForChannelOfThisType\"] = 30052] = \"BitrateIsTooHighForChannelOfThisType\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfPremiumEmojisReached\"] = 30056] = \"MaximumNumberOfPremiumEmojisReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfWebhooksPerGuildReached\"] = 30058] = \"MaximumNumberOfWebhooksPerGuildReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumNumberOfChannelPermissionOverwritesReached\"] = 30060] = \"MaximumNumberOfChannelPermissionOverwritesReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TheChannelsForThisGuildAreTooLarge\"] = 30061] = \"TheChannelsForThisGuildAreTooLarge\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"Unauthorized\"] = 40001] = \"Unauthorized\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"VerifyYourAccount\"] = 40002] = \"VerifyYourAccount\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OpeningDirectMessagesTooFast\"] = 40003] = \"OpeningDirectMessagesTooFast\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"SendMessagesHasBeenTemporarilyDisabled\"] = 40004] = \"SendMessagesHasBeenTemporarilyDisabled\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"RequestEntityTooLarge\"] = 40005] = \"RequestEntityTooLarge\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"FeatureTemporarilyDisabledServerSide\"] = 40006] = \"FeatureTemporarilyDisabledServerSide\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UserBannedFromThisGuild\"] = 40007] = \"UserBannedFromThisGuild\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ConnectionHasBeenRevoked\"] = 40012] = \"ConnectionHasBeenRevoked\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OnlyConsumableSKUsCanBeConsumed\"] = 40018] = \"OnlyConsumableSKUsCanBeConsumed\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"YouCanOnlyDeleteSandboxEntitlements\"] = 40019] = \"YouCanOnlyDeleteSandboxEntitlements\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TargetUserIsNotConnectedToVoice\"] = 40032] = \"TargetUserIsNotConnectedToVoice\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ThisMessageWasAlreadyCrossposted\"] = 40033] = \"ThisMessageWasAlreadyCrossposted\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ApplicationCommandWithThatNameAlreadyExists\"] = 40041] = \"ApplicationCommandWithThatNameAlreadyExists\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ApplicationInteractionFailedToSend\"] = 40043] = \"ApplicationInteractionFailedToSend\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotSendAMessageInAForumChannel\"] = 40058] = \"CannotSendAMessageInAForumChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InteractionHasAlreadyBeenAcknowledged\"] = 40060] = \"InteractionHasAlreadyBeenAcknowledged\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TagNamesMustBeUnique\"] = 40061] = \"TagNamesMustBeUnique\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ServiceResourceIsBeingRateLimited\"] = 40062] = \"ServiceResourceIsBeingRateLimited\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ThereAreNoTagsAvailableThatCanBeSetByNonModerators\"] = 40066] = \"ThereAreNoTagsAvailableThatCanBeSetByNonModerators\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TagRequiredToCreateAForumPostInThisChannel\"] = 40067] = \"TagRequiredToCreateAForumPostInThisChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"AnEntitlementHasAlreadyBeenGrantedForThisResource\"] = 40074] = \"AnEntitlementHasAlreadyBeenGrantedForThisResource\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ThisInteractionHasHitTheMaximumNumberOfFollowUpMessages\"] = 40094] = \"ThisInteractionHasHitTheMaximumNumberOfFollowUpMessages\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CloudflareIsBlockingYourRequest\"] = 40333] = \"CloudflareIsBlockingYourRequest\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MissingAccess\"] = 50001] = \"MissingAccess\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidAccountType\"] = 50002] = \"InvalidAccountType\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotExecuteActionOnDMChannel\"] = 50003] = \"CannotExecuteActionOnDMChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"GuildWidgetDisabled\"] = 50004] = \"GuildWidgetDisabled\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotEditMessageAuthoredByAnotherUser\"] = 50005] = \"CannotEditMessageAuthoredByAnotherUser\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotSendAnEmptyMessage\"] = 50006] = \"CannotSendAnEmptyMessage\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotSendMessagesToThisUser\"] = 50007] = \"CannotSendMessagesToThisUser\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotSendMessagesInNonTextChannel\"] = 50008] = \"CannotSendMessagesInNonTextChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ChannelVerificationLevelTooHighForYouToGainAccess\"] = 50009] = \"ChannelVerificationLevelTooHighForYouToGainAccess\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OAuth2ApplicationDoesNotHaveBot\"] = 50010] = \"OAuth2ApplicationDoesNotHaveBot\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OAuth2ApplicationLimitReached\"] = 50011] = \"OAuth2ApplicationLimitReached\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidOAuth2State\"] = 50012] = \"InvalidOAuth2State\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MissingPermissions\"] = 50013] = \"MissingPermissions\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidToken\"] = 50014] = \"InvalidToken\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"NoteWasTooLong\"] = 50015] = \"NoteWasTooLong\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ProvidedTooFewOrTooManyMessagesToDelete\"] = 50016] = \"ProvidedTooFewOrTooManyMessagesToDelete\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidMFALevel\"] = 50017] = \"InvalidMFALevel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MessageCanOnlyBePinnedInTheChannelItWasSentIn\"] = 50019] = \"MessageCanOnlyBePinnedInTheChannelItWasSentIn\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InviteCodeInvalidOrTaken\"] = 50020] = \"InviteCodeInvalidOrTaken\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotExecuteActionOnSystemMessage\"] = 50021] = \"CannotExecuteActionOnSystemMessage\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotExecuteActionOnThisChannelType\"] = 50024] = \"CannotExecuteActionOnThisChannelType\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidOAuth2AccessToken\"] = 50025] = \"InvalidOAuth2AccessToken\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MissingRequiredOAuth2Scope\"] = 50026] = \"MissingRequiredOAuth2Scope\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidWebhookToken\"] = 50027] = \"InvalidWebhookToken\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidRole\"] = 50028] = \"InvalidRole\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidRecipients\"] = 50033] = \"InvalidRecipients\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OneOfTheMessagesProvidedWasTooOldForBulkDelete\"] = 50034] = \"OneOfTheMessagesProvidedWasTooOldForBulkDelete\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidFormBodyOrContentType\"] = 50035] = \"InvalidFormBodyOrContentType\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InviteAcceptedToGuildWithoutTheBotBeingIn\"] = 50036] = \"InviteAcceptedToGuildWithoutTheBotBeingIn\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidActivityAction\"] = 50039] = \"InvalidActivityAction\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidAPIVersion\"] = 50041] = \"InvalidAPIVersion\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"FileUploadedExceedsMaximumSize\"] = 50045] = \"FileUploadedExceedsMaximumSize\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidFileUploaded\"] = 50046] = \"InvalidFileUploaded\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotSelfRedeemThisGift\"] = 50054] = \"CannotSelfRedeemThisGift\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidGuild\"] = 50055] = \"InvalidGuild\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidSKU\"] = 50057] = \"InvalidSKU\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidRequestOrigin\"] = 50067] = \"InvalidRequestOrigin\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidMessageType\"] = 50068] = \"InvalidMessageType\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"PaymentSourceRequiredToRedeemGift\"] = 50070] = \"PaymentSourceRequiredToRedeemGift\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotModifyASystemWebhook\"] = 50073] = \"CannotModifyASystemWebhook\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotDeleteChannelRequiredForCommunityGuilds\"] = 50074] = \"CannotDeleteChannelRequiredForCommunityGuilds\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotEditStickersWithinMessage\"] = 50080] = \"CannotEditStickersWithinMessage\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidStickerSent\"] = 50081] = \"InvalidStickerSent\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidActionOnArchivedThread\"] = 50083] = \"InvalidActionOnArchivedThread\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidThreadNotificationSettings\"] = 50084] = \"InvalidThreadNotificationSettings\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ParameterEarlierThanCreation\"] = 50085] = \"ParameterEarlierThanCreation\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CommunityServerChannelsMustBeTextChannels\"] = 50086] = \"CommunityServerChannelsMustBeTextChannels\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor\"] = 50091] = \"TheEntityTypeOfTheEventIsDifferentFromTheEntityYouAreTryingToStartTheEventFor\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ServerNotAvailableInYourLocation\"] = 50095] = \"ServerNotAvailableInYourLocation\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ServerNeedsMonetizationEnabledToPerformThisAction\"] = 50097] = \"ServerNeedsMonetizationEnabledToPerformThisAction\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ServerNeedsMoreBoostsToPerformThisAction\"] = 50101] = \"ServerNeedsMoreBoostsToPerformThisAction\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"RequestBodyContainsInvalidJSON\"] = 50109] = \"RequestBodyContainsInvalidJSON\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ProvidedFileIsInvalid\"] = 50110] = \"ProvidedFileIsInvalid\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ProvidedFileTypeIsInvalid\"] = 50123] = \"ProvidedFileTypeIsInvalid\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ProvidedFileDurationExceedsMaximumLength\"] = 50124] = \"ProvidedFileDurationExceedsMaximumLength\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OwnerCannotBePendingMember\"] = 50131] = \"OwnerCannotBePendingMember\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"OwnershipCannotBeMovedToABotUser\"] = 50132] = \"OwnershipCannotBeMovedToABotUser\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"FailedToResizeAssetBelowTheMinimumSize\"] = 50138] = \"FailedToResizeAssetBelowTheMinimumSize\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji\"] = 50144] = \"CannotMixSubscriptionAndNonSubscriptionRolesForAnEmoji\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotConvertBetweenPremiumEmojiAndNormalEmoji\"] = 50145] = \"CannotConvertBetweenPremiumEmojiAndNormalEmoji\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UploadedFileNotFound\"] = 50146] = \"UploadedFileNotFound\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"SpecifiedEmojiIsInvalid\"] = 50151] = \"SpecifiedEmojiIsInvalid\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"VoiceMessagesDoNotSupportAdditionalContent\"] = 50159] = \"VoiceMessagesDoNotSupportAdditionalContent\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"VoiceMessagesMustHaveASingleAudioAttachment\"] = 50160] = \"VoiceMessagesMustHaveASingleAudioAttachment\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"VoiceMessagesMustHaveSupportingMetadata\"] = 50161] = \"VoiceMessagesMustHaveSupportingMetadata\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"VoiceMessagesCannotBeEdited\"] = 50162] = \"VoiceMessagesCannotBeEdited\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotDeleteGuildSubscriptionIntegration\"] = 50163] = \"CannotDeleteGuildSubscriptionIntegration\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"YouCannotSendVoiceMessagesInThisChannel\"] = 50173] = \"YouCannotSendVoiceMessagesInThisChannel\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TheUserAccountMustFirstBeVerified\"] = 50178] = \"TheUserAccountMustFirstBeVerified\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ProvidedFileDoesNotHaveAValidDuration\"] = 50192] = \"ProvidedFileDoesNotHaveAValidDuration\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"YouDoNotHavePermissionToSendThisSticker\"] = 50600] = \"YouDoNotHavePermissionToSendThisSticker\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TwoFactorAuthenticationIsRequired\"] = 60003] = \"TwoFactorAuthenticationIsRequired\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"NoUsersWithDiscordTagExist\"] = 80004] = \"NoUsersWithDiscordTagExist\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ReactionWasBlocked\"] = 90001] = \"ReactionWasBlocked\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UserCannotUseBurstReactions\"] = 90002] = \"UserCannotUseBurstReactions\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ApplicationNotYetAvailable\"] = 110001] = \"ApplicationNotYetAvailable\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"APIResourceOverloaded\"] = 130000] = \"APIResourceOverloaded\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TheStageIsAlreadyOpen\"] = 150006] = \"TheStageIsAlreadyOpen\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotReplyWithoutPermissionToReadMessageHistory\"] = 160002] = \"CannotReplyWithoutPermissionToReadMessageHistory\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ThreadAlreadyCreatedForMessage\"] = 160004] = \"ThreadAlreadyCreatedForMessage\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"ThreadLocked\"] = 160005] = \"ThreadLocked\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumActiveThreads\"] = 160006] = \"MaximumActiveThreads\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MaximumActiveAnnouncementThreads\"] = 160007] = \"MaximumActiveAnnouncementThreads\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidJSONForUploadedLottieFile\"] = 170001] = \"InvalidJSONForUploadedLottieFile\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"UploadedLottiesCannotContainRasterizedImages\"] = 170002] = \"UploadedLottiesCannotContainRasterizedImages\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"StickerMaximumFramerateExceeded\"] = 170003] = \"StickerMaximumFramerateExceeded\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"StickerFrameCountExceedsMaximumOf1000Frames\"] = 170004] = \"StickerFrameCountExceedsMaximumOf1000Frames\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"LottieAnimationMaximumDimensionsExceeded\"] = 170005] = \"LottieAnimationMaximumDimensionsExceeded\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"StickerFramerateIsTooSmallOrTooLarge\"] = 170006] = \"StickerFramerateIsTooSmallOrTooLarge\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"StickerAnimationDurationExceedsMaximumOf5Seconds\"] = 170007] = \"StickerAnimationDurationExceedsMaximumOf5Seconds\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotUpdateAFinishedEvent\"] = 180000] = \"CannotUpdateAFinishedEvent\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"FailedToCreateStageNeededForStageEvent\"] = 180002] = \"FailedToCreateStageNeededForStageEvent\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MessageWasBlockedByAutomaticModeration\"] = 200000] = \"MessageWasBlockedByAutomaticModeration\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"TitleWasBlockedByAutomaticModeration\"] = 200001] = \"TitleWasBlockedByAutomaticModeration\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId\"] = 220001] = \"WebhooksPostedToForumChannelsMustHaveAThreadNameOrThreadId\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId\"] = 220002] = \"WebhooksPostedToForumChannelsCannotHaveBothAThreadNameAndThreadId\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"WebhooksCanOnlyCreateThreadsInForumChannels\"] = 220003] = \"WebhooksCanOnlyCreateThreadsInForumChannels\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"WebhookServicesCannotBeUsedInForumChannels\"] = 220004] = \"WebhookServicesCannotBeUsedInForumChannels\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"MessageBlockedByHarmfulLinksFilter\"] = 240000] = \"MessageBlockedByHarmfulLinksFilter\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotEnableOnboardingRequirementsAreNotMet\"] = 350000] = \"CannotEnableOnboardingRequirementsAreNotMet\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotUpdateOnboardingWhileBelowRequirements\"] = 350001] = \"CannotUpdateOnboardingWhileBelowRequirements\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"FailedToBanUsers\"] = 500000] = \"FailedToBanUsers\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"PollVotingBlocked\"] = 520000] = \"PollVotingBlocked\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"PollExpired\"] = 520001] = \"PollExpired\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"InvalidChannelTypeForPollCreation\"] = 520002] = \"InvalidChannelTypeForPollCreation\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotEditAPollMessage\"] = 520003] = \"CannotEditAPollMessage\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotUseAnEmojiIncludedWithThePoll\"] = 520004] = \"CannotUseAnEmojiIncludedWithThePoll\";\n    RESTJSONErrorCodes[RESTJSONErrorCodes[\"CannotExpireANonPollMessage\"] = 520006] = \"CannotExpireANonPollMessage\";\n})(RESTJSONErrorCodes || (exports.RESTJSONErrorCodes = RESTJSONErrorCodes = {}));\n/**\n * https://discord.com/developers/docs/reference#locales\n */\nvar Locale;\n(function (Locale) {\n    Locale[\"Indonesian\"] = \"id\";\n    Locale[\"EnglishUS\"] = \"en-US\";\n    Locale[\"EnglishGB\"] = \"en-GB\";\n    Locale[\"Bulgarian\"] = \"bg\";\n    Locale[\"ChineseCN\"] = \"zh-CN\";\n    Locale[\"ChineseTW\"] = \"zh-TW\";\n    Locale[\"Croatian\"] = \"hr\";\n    Locale[\"Czech\"] = \"cs\";\n    Locale[\"Danish\"] = \"da\";\n    Locale[\"Dutch\"] = \"nl\";\n    Locale[\"Finnish\"] = \"fi\";\n    Locale[\"French\"] = \"fr\";\n    Locale[\"German\"] = \"de\";\n    Locale[\"Greek\"] = \"el\";\n    Locale[\"Hindi\"] = \"hi\";\n    Locale[\"Hungarian\"] = \"hu\";\n    Locale[\"Italian\"] = \"it\";\n    Locale[\"Japanese\"] = \"ja\";\n    Locale[\"Korean\"] = \"ko\";\n    Locale[\"Lithuanian\"] = \"lt\";\n    Locale[\"Norwegian\"] = \"no\";\n    Locale[\"Polish\"] = \"pl\";\n    Locale[\"PortugueseBR\"] = \"pt-BR\";\n    Locale[\"Romanian\"] = \"ro\";\n    Locale[\"Russian\"] = \"ru\";\n    Locale[\"SpanishES\"] = \"es-ES\";\n    Locale[\"SpanishLATAM\"] = \"es-419\";\n    Locale[\"Swedish\"] = \"sv-SE\";\n    Locale[\"Thai\"] = \"th\";\n    Locale[\"Turkish\"] = \"tr\";\n    Locale[\"Ukrainian\"] = \"uk\";\n    Locale[\"Vietnamese\"] = \"vi\";\n})(Locale || (exports.Locale = Locale = {}));\n//# sourceMappingURL=common.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=application.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=auditLog.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=autoModeration.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ReactionType = void 0;\n/**\n * https://discord.com/developers/docs/resources/channel#get-reactions-reaction-types\n */\nvar ReactionType;\n(function (ReactionType) {\n    ReactionType[ReactionType[\"Normal\"] = 0] = \"Normal\";\n    ReactionType[ReactionType[\"Super\"] = 1] = \"Super\";\n})(ReactionType || (exports.ReactionType = ReactionType = {}));\n//# sourceMappingURL=channel.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=emoji.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=gateway.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=guild.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=guildScheduledEvent.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=interactions.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=invite.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EntitlementOwnerType = void 0;\n/**\n * https://discord.com/developers/docs/resources/entitlement#create-test-entitlement\n */\nvar EntitlementOwnerType;\n(function (EntitlementOwnerType) {\n    EntitlementOwnerType[EntitlementOwnerType[\"Guild\"] = 1] = \"Guild\";\n    EntitlementOwnerType[EntitlementOwnerType[\"User\"] = 2] = \"User\";\n})(EntitlementOwnerType || (exports.EntitlementOwnerType = EntitlementOwnerType = {}));\n//# sourceMappingURL=monetization.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=oauth2.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=poll.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=soundboard.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=stageInstance.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=sticker.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=template.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=user.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=voice.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=webhook.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OAuth2Routes = exports.RouteBases = exports.CDNRoutes = exports.ImageFormat = exports.StickerPackApplicationId = exports.Routes = exports.APIVersion = void 0;\nconst internals_1 = require(\"../../utils/internals\");\n__exportStar(require(\"../common\"), exports);\n__exportStar(require(\"./application\"), exports);\n__exportStar(require(\"./auditLog\"), exports);\n__exportStar(require(\"./autoModeration\"), exports);\n__exportStar(require(\"./channel\"), exports);\n__exportStar(require(\"./emoji\"), exports);\n__exportStar(require(\"./gateway\"), exports);\n__exportStar(require(\"./guild\"), exports);\n__exportStar(require(\"./guildScheduledEvent\"), exports);\n__exportStar(require(\"./interactions\"), exports);\n__exportStar(require(\"./invite\"), exports);\n__exportStar(require(\"./monetization\"), exports);\n__exportStar(require(\"./oauth2\"), exports);\n__exportStar(require(\"./poll\"), exports);\n__exportStar(require(\"./soundboard\"), exports);\n__exportStar(require(\"./stageInstance\"), exports);\n__exportStar(require(\"./sticker\"), exports);\n__exportStar(require(\"./template\"), exports);\n__exportStar(require(\"./user\"), exports);\n__exportStar(require(\"./voice\"), exports);\n__exportStar(require(\"./webhook\"), exports);\nexports.APIVersion = '10';\nexports.Routes = {\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/role-connections/metadata`\n     * - PUT `/applications/{application.id}/role-connections/metadata`\n     */\n    applicationRoleConnectionMetadata(applicationId) {\n        return `/applications/${applicationId}/role-connections/metadata`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/auto-moderation/rules`\n     * - POST `/guilds/{guild.id}/auto-moderation/rules`\n     */\n    guildAutoModerationRules(guildId) {\n        return `/guilds/${guildId}/auto-moderation/rules`;\n    },\n    /**\n     * Routes for:\n     * - GET    `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`\n     * - PATCH  `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`\n     * - DELETE `/guilds/{guild.id}/auto-moderation/rules/{rule.id}`\n     */\n    guildAutoModerationRule(guildId, ruleId) {\n        return `/guilds/${guildId}/auto-moderation/rules/${ruleId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/audit-logs`\n     */\n    guildAuditLog(guildId) {\n        return `/guilds/${guildId}/audit-logs`;\n    },\n    /**\n     * Route for:\n     * - GET    `/channels/{channel.id}`\n     * - PATCH  `/channels/{channel.id}`\n     * - DELETE `/channels/{channel.id}`\n     */\n    channel(channelId) {\n        return `/channels/${channelId}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/channels/{channel.id}/messages`\n     * - POST `/channels/{channel.id}/messages`\n     */\n    channelMessages(channelId) {\n        return `/channels/${channelId}/messages`;\n    },\n    /**\n     * Route for:\n     * - GET    `/channels/{channel.id}/messages/{message.id}`\n     * - PATCH  `/channels/{channel.id}/messages/{message.id}`\n     * - DELETE `/channels/{channel.id}/messages/{message.id}`\n     */\n    channelMessage(channelId, messageId) {\n        return `/channels/${channelId}/messages/${messageId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`\n     */\n    channelMessageCrosspost(channelId, messageId) {\n        return `/channels/${channelId}/messages/${messageId}/crosspost`;\n    },\n    /**\n     * Route for:\n     * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`\n     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`\n     *\n     * **Note**: You need to URL encode the emoji yourself\n     */\n    channelMessageOwnReaction(channelId, messageId, emoji) {\n        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;\n    },\n    /**\n     * Route for:\n     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`\n     *\n     * **Note**: You need to URL encode the emoji yourself\n     */\n    channelMessageUserReaction(channelId, messageId, emoji, userId) {\n        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;\n    },\n    /**\n     * Route for:\n     * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`\n     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`\n     *\n     * **Note**: You need to URL encode the emoji yourself\n     */\n    channelMessageReaction(channelId, messageId, emoji) {\n        return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;\n    },\n    /**\n     * Route for:\n     * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`\n     */\n    channelMessageAllReactions(channelId, messageId) {\n        return `/channels/${channelId}/messages/${messageId}/reactions`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/messages/bulk-delete`\n     */\n    channelBulkDelete(channelId) {\n        return `/channels/${channelId}/messages/bulk-delete`;\n    },\n    /**\n     * Route for:\n     * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`\n     * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`\n     */\n    channelPermission(channelId, overwriteId) {\n        return `/channels/${channelId}/permissions/${overwriteId}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/channels/{channel.id}/invites`\n     * - POST `/channels/{channel.id}/invites`\n     */\n    channelInvites(channelId) {\n        return `/channels/${channelId}/invites`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/followers`\n     */\n    channelFollowers(channelId) {\n        return `/channels/${channelId}/followers`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/typing`\n     */\n    channelTyping(channelId) {\n        return `/channels/${channelId}/typing`;\n    },\n    /**\n     * Route for:\n     * - GET `/channels/{channel.id}/pins`\n     */\n    channelPins(channelId) {\n        return `/channels/${channelId}/pins`;\n    },\n    /**\n     * Route for:\n     * - PUT    `/channels/{channel.id}/pins/{message.id}`\n     * - DELETE `/channels/{channel.id}/pins/{message.id}`\n     */\n    channelPin(channelId, messageId) {\n        return `/channels/${channelId}/pins/${messageId}`;\n    },\n    /**\n     * Route for:\n     * - PUT    `/channels/{channel.id}/recipients/{user.id}`\n     * - DELETE `/channels/{channel.id}/recipients/{user.id}`\n     */\n    channelRecipient(channelId, userId) {\n        return `/channels/${channelId}/recipients/${userId}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/emojis`\n     * - POST `/guilds/{guild.id}/emojis`\n     */\n    guildEmojis(guildId) {\n        return `/guilds/${guildId}/emojis`;\n    },\n    /**\n     * Route for:\n     * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`\n     * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`\n     * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`\n     */\n    guildEmoji(guildId, emojiId) {\n        return `/guilds/${guildId}/emojis/${emojiId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/guilds`\n     */\n    guilds() {\n        return '/guilds';\n    },\n    /**\n     * Route for:\n     * - GET    `/guilds/{guild.id}`\n     * - PATCH  `/guilds/{guild.id}`\n     * - DELETE `/guilds/{guild.id}`\n     */\n    guild(guildId) {\n        return `/guilds/${guildId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/preview`\n     */\n    guildPreview(guildId) {\n        return `/guilds/${guildId}/preview`;\n    },\n    /**\n     * Route for:\n     * - GET   `/guilds/{guild.id}/channels`\n     * - POST  `/guilds/{guild.id}/channels`\n     * - PATCH `/guilds/{guild.id}/channels`\n     */\n    guildChannels(guildId) {\n        return `/guilds/${guildId}/channels`;\n    },\n    /**\n     * Route for:\n     * - GET    `/guilds/{guild.id}/members/{user.id}`\n     * - PUT    `/guilds/{guild.id}/members/{user.id}`\n     * - PATCH  `/guilds/{guild.id}/members/@me`\n     * - PATCH  `/guilds/{guild.id}/members/{user.id}`\n     * - DELETE `/guilds/{guild.id}/members/{user.id}`\n     */\n    guildMember(guildId, userId = '@me') {\n        return `/guilds/${guildId}/members/${userId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/members`\n     */\n    guildMembers(guildId) {\n        return `/guilds/${guildId}/members`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/members/search`\n     */\n    guildMembersSearch(guildId) {\n        return `/guilds/${guildId}/members/search`;\n    },\n    /**\n     * Route for:\n     * - PATCH `/guilds/{guild.id}/members/@me/nick`\n     *\n     * @deprecated Use {@link Routes.guildMember} instead.\n     */\n    guildCurrentMemberNickname(guildId) {\n        return `/guilds/${guildId}/members/@me/nick`;\n    },\n    /**\n     * Route for:\n     * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`\n     * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`\n     */\n    guildMemberRole(guildId, memberId, roleId) {\n        return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/guilds/{guild.id}/mfa`\n     */\n    guildMFA(guildId) {\n        return `/guilds/${guildId}/mfa`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/bans`\n     */\n    guildBans(guildId) {\n        return `/guilds/${guildId}/bans`;\n    },\n    /**\n     * Route for:\n     * - GET    `/guilds/{guild.id}/bans/{user.id}`\n     * - PUT    `/guilds/{guild.id}/bans/{user.id}`\n     * - DELETE `/guilds/{guild.id}/bans/{user.id}`\n     */\n    guildBan(guildId, userId) {\n        return `/guilds/${guildId}/bans/${userId}`;\n    },\n    /**\n     * Route for:\n     * - GET   `/guilds/{guild.id}/roles`\n     * - POST  `/guilds/{guild.id}/roles`\n     * - PATCH `/guilds/{guild.id}/roles`\n     */\n    guildRoles(guildId) {\n        return `/guilds/${guildId}/roles`;\n    },\n    /**\n     * Route for:\n     * - GET    `/guilds/{guild.id}/roles/{role.id}`\n     * - PATCH  `/guilds/{guild.id}/roles/{role.id}`\n     * - DELETE `/guilds/{guild.id}/roles/{role.id}`\n     */\n    guildRole(guildId, roleId) {\n        return `/guilds/${guildId}/roles/${roleId}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/prune`\n     * - POST `/guilds/{guild.id}/prune`\n     */\n    guildPrune(guildId) {\n        return `/guilds/${guildId}/prune`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/regions`\n     */\n    guildVoiceRegions(guildId) {\n        return `/guilds/${guildId}/regions`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/invites`\n     */\n    guildInvites(guildId) {\n        return `/guilds/${guildId}/invites`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/integrations`\n     */\n    guildIntegrations(guildId) {\n        return `/guilds/${guildId}/integrations`;\n    },\n    /**\n     * Route for:\n     * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`\n     */\n    guildIntegration(guildId, integrationId) {\n        return `/guilds/${guildId}/integrations/${integrationId}`;\n    },\n    /**\n     * Route for:\n     * - GET   `/guilds/{guild.id}/widget`\n     * - PATCH `/guilds/{guild.id}/widget`\n     */\n    guildWidgetSettings(guildId) {\n        return `/guilds/${guildId}/widget`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/widget.json`\n     */\n    guildWidgetJSON(guildId) {\n        return `/guilds/${guildId}/widget.json`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/vanity-url`\n     */\n    guildVanityUrl(guildId) {\n        return `/guilds/${guildId}/vanity-url`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/widget.png`\n     */\n    guildWidgetImage(guildId) {\n        return `/guilds/${guildId}/widget.png`;\n    },\n    /**\n     * Route for:\n     * - GET    `/invites/{invite.code}`\n     * - DELETE `/invites/{invite.code}`\n     */\n    invite(code) {\n        return `/invites/${code}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/templates/{template.code}`\n     * - POST `/guilds/templates/{template.code}`\n     */\n    template(code) {\n        return `/guilds/templates/${code}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/templates`\n     * - POST `/guilds/{guild.id}/templates`\n     */\n    guildTemplates(guildId) {\n        return `/guilds/${guildId}/templates`;\n    },\n    /**\n     * Route for:\n     * - PUT    `/guilds/{guild.id}/templates/{template.code}`\n     * - PATCH  `/guilds/{guild.id}/templates/{template.code}`\n     * - DELETE `/guilds/{guild.id}/templates/{template.code}`\n     */\n    guildTemplate(guildId, code) {\n        return `/guilds/${guildId}/templates/${code}`;\n    },\n    /**\n     * Route for:\n     * - GET `/channels/{channel.id}/polls/{message.id}/answers/{answer_id}`\n     */\n    pollAnswerVoters(channelId, messageId, answerId) {\n        return `/channels/${channelId}/polls/${messageId}/answers/${answerId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/polls/{message.id}/expire`\n     */\n    expirePoll(channelId, messageId) {\n        return `/channels/${channelId}/polls/${messageId}/expire`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/threads`\n     * - POST `/channels/{channel.id}/messages/{message.id}/threads`\n     */\n    threads(parentId, messageId) {\n        const parts = ['', 'channels', parentId];\n        if (messageId)\n            parts.push('messages', messageId);\n        parts.push('threads');\n        return parts.join('/');\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/threads/active`\n     */\n    guildActiveThreads(guildId) {\n        return `/guilds/${guildId}/threads/active`;\n    },\n    /**\n     * Route for:\n     * - GET `/channels/{channel.id}/threads/archived/public`\n     * - GET `/channels/{channel.id}/threads/archived/private`\n     */\n    channelThreads(channelId, archivedStatus) {\n        return `/channels/${channelId}/threads/archived/${archivedStatus}`;\n    },\n    /**\n     * Route for:\n     * - GET `/channels/{channel.id}/users/@me/threads/archived/private`\n     */\n    channelJoinedArchivedThreads(channelId) {\n        return `/channels/${channelId}/users/@me/threads/archived/private`;\n    },\n    /**\n     * Route for:\n     * - GET    `/channels/{thread.id}/thread-members`\n     * - GET    `/channels/{thread.id}/thread-members/{user.id}`\n     * - PUT    `/channels/{thread.id}/thread-members/@me`\n     * - PUT    `/channels/{thread.id}/thread-members/{user.id}`\n     * - DELETE `/channels/{thread.id}/thread-members/@me`\n     * - DELETE `/channels/{thread.id}/thread-members/{user.id}`\n     */\n    threadMembers(threadId, userId) {\n        const parts = ['', 'channels', threadId, 'thread-members'];\n        if (userId)\n            parts.push(userId);\n        return parts.join('/');\n    },\n    /**\n     * Route for:\n     * - GET   `/users/@me`\n     * - GET   `/users/{user.id}`\n     * - PATCH `/users/@me`\n     *\n     * @param [userId] The user ID, defaulted to `@me`\n     */\n    user(userId = '@me') {\n        return `/users/${userId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/users/@me/applications/{application.id}/role-connection`\n     * - PUT `/users/@me/applications/{application.id}/role-connection`\n     */\n    userApplicationRoleConnection(applicationId) {\n        return `/users/@me/applications/${applicationId}/role-connection`;\n    },\n    /**\n     * Route for:\n     * - GET `/users/@me/guilds`\n     */\n    userGuilds() {\n        return `/users/@me/guilds`;\n    },\n    /**\n     * Route for:\n     * - GET `/users/@me/guilds/{guild.id}/member`\n     */\n    userGuildMember(guildId) {\n        return `/users/@me/guilds/${guildId}/member`;\n    },\n    /**\n     * Route for:\n     * - DELETE `/users/@me/guilds/{guild.id}`\n     */\n    userGuild(guildId) {\n        return `/users/@me/guilds/${guildId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/users/@me/channels`\n     */\n    userChannels() {\n        return `/users/@me/channels`;\n    },\n    /**\n     * Route for:\n     * - GET `/users/@me/connections`\n     */\n    userConnections() {\n        return `/users/@me/connections`;\n    },\n    /**\n     * Route for:\n     * - GET `/voice/regions`\n     */\n    voiceRegions() {\n        return `/voice/regions`;\n    },\n    /**\n     * Route for:\n     * - GET  `/channels/{channel.id}/webhooks`\n     * - POST `/channels/{channel.id}/webhooks`\n     */\n    channelWebhooks(channelId) {\n        return `/channels/${channelId}/webhooks`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/webhooks`\n     */\n    guildWebhooks(guildId) {\n        return `/guilds/${guildId}/webhooks`;\n    },\n    /**\n     * Route for:\n     * - GET    `/webhooks/{webhook.id}`\n     * - GET    `/webhooks/{webhook.id}/{webhook.token}`\n     * - PATCH  `/webhooks/{webhook.id}`\n     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`\n     * - DELETE `/webhooks/{webhook.id}`\n     * - DELETE `/webhooks/{webhook.id}/{webhook.token}`\n     * - POST   `/webhooks/{webhook.id}/{webhook.token}`\n     *\n     * - POST   `/webhooks/{application.id}/{interaction.token}`\n     */\n    webhook(webhookId, webhookToken) {\n        const parts = ['', 'webhooks', webhookId];\n        if (webhookToken)\n            parts.push(webhookToken);\n        return parts.join('/');\n    },\n    /**\n     * Route for:\n     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\n     * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\n     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\n     * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\n     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\n     * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\n     *\n     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`\n     * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`\n     * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`\n     */\n    webhookMessage(webhookId, webhookToken, messageId = '@original') {\n        return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/webhooks/{webhook.id}/{webhook.token}/github`\n     * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`\n     */\n    webhookPlatform(webhookId, webhookToken, platform) {\n        return `/webhooks/${webhookId}/${webhookToken}/${platform}`;\n    },\n    /**\n     * Route for:\n     * - GET `/gateway`\n     */\n    gateway() {\n        return `/gateway`;\n    },\n    /**\n     * Route for:\n     * - GET `/gateway/bot`\n     */\n    gatewayBot() {\n        return `/gateway/bot`;\n    },\n    /**\n     * Route for:\n     * - GET `/oauth2/applications/@me`\n     */\n    oauth2CurrentApplication() {\n        return `/oauth2/applications/@me`;\n    },\n    /**\n     * Route for:\n     * - GET `/oauth2/@me`\n     */\n    oauth2CurrentAuthorization() {\n        return `/oauth2/@me`;\n    },\n    /**\n     * Route for:\n     * - GET `/oauth2/authorize`\n     */\n    oauth2Authorization() {\n        return `/oauth2/authorize`;\n    },\n    /**\n     * Route for:\n     * - POST `/oauth2/token`\n     */\n    oauth2TokenExchange() {\n        return `/oauth2/token`;\n    },\n    /**\n     * Route for:\n     * - POST `/oauth2/token/revoke`\n     */\n    oauth2TokenRevocation() {\n        return `/oauth2/token/revoke`;\n    },\n    /**\n     * Route for:\n     * - GET  `/applications/{application.id}/commands`\n     * - PUT  `/applications/{application.id}/commands`\n     * - POST `/applications/{application.id}/commands`\n     */\n    applicationCommands(applicationId) {\n        return `/applications/${applicationId}/commands`;\n    },\n    /**\n     * Route for:\n     * - GET    `/applications/{application.id}/commands/{command.id}`\n     * - PATCH  `/applications/{application.id}/commands/{command.id}`\n     * - DELETE `/applications/{application.id}/commands/{command.id}`\n     */\n    applicationCommand(applicationId, commandId) {\n        return `/applications/${applicationId}/commands/${commandId}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`\n     * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`\n     * - POST `/applications/{application.id}/guilds/{guild.id}/commands`\n     */\n    applicationGuildCommands(applicationId, guildId) {\n        return `/applications/${applicationId}/guilds/${guildId}/commands`;\n    },\n    /**\n     * Route for:\n     * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\n     * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\n     * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\n     */\n    applicationGuildCommand(applicationId, guildId, commandId) {\n        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/interactions/{interaction.id}/{interaction.token}/callback`\n     */\n    interactionCallback(interactionId, interactionToken) {\n        return `/interactions/${interactionId}/${interactionToken}/callback`;\n    },\n    /**\n     * Route for:\n     * - GET   `/guilds/{guild.id}/member-verification`\n     * - PATCH `/guilds/{guild.id}/member-verification`\n     */\n    guildMemberVerification(guildId) {\n        return `/guilds/${guildId}/member-verification`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/voice-states/@me`\n     * - GET `/guilds/{guild.id}/voice-states/{user.id}`\n     * - PATCH `/guilds/{guild.id}/voice-states/@me`\n     * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`\n     */\n    guildVoiceState(guildId, userId = '@me') {\n        return `/guilds/${guildId}/voice-states/${userId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`\n     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`\n     */\n    guildApplicationCommandsPermissions(applicationId, guildId) {\n        return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`\n     * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`\n     */\n    applicationCommandPermissions(applicationId, guildId, commandId) {\n        return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;\n    },\n    /**\n     * Route for:\n     * - GET   `/guilds/{guild.id}/welcome-screen`\n     * - PATCH `/guilds/{guild.id}/welcome-screen`\n     */\n    guildWelcomeScreen(guildId) {\n        return `/guilds/${guildId}/welcome-screen`;\n    },\n    /**\n     * Route for:\n     * - POST `/stage-instances`\n     */\n    stageInstances() {\n        return `/stage-instances`;\n    },\n    /**\n     * Route for:\n     * - GET `/stage-instances/{channel.id}`\n     * - PATCH `/stage-instances/{channel.id}`\n     * - DELETE `/stage-instances/{channel.id}`\n     */\n    stageInstance(channelId) {\n        return `/stage-instances/${channelId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/stickers/{sticker.id}`\n     */\n    sticker(stickerId) {\n        return `/stickers/${stickerId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/sticker-packs`\n     */\n    stickerPacks() {\n        return '/sticker-packs';\n    },\n    /**\n     * Route for:\n     * - GET `/sticker-packs/{pack.id}`\n     */\n    stickerPack(packId) {\n        return `/sticker-packs/${packId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/sticker-packs`\n     *\n     * @deprecated Use {@link Routes.stickerPacks} instead.\n     */\n    nitroStickerPacks() {\n        return '/sticker-packs';\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/stickers`\n     * - POST `/guilds/{guild.id}/stickers`\n     */\n    guildStickers(guildId) {\n        return `/guilds/${guildId}/stickers`;\n    },\n    /**\n     * Route for:\n     * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`\n     * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`\n     * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`\n     */\n    guildSticker(guildId, stickerId) {\n        return `/guilds/${guildId}/stickers/${stickerId}`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/scheduled-events`\n     * - POST `/guilds/{guild.id}/scheduled-events`\n     */\n    guildScheduledEvents(guildId) {\n        return `/guilds/${guildId}/scheduled-events`;\n    },\n    /**\n     * Route for:\n     * - GET  `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`\n     * - PATCH `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`\n     * - DELETE `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}`\n     */\n    guildScheduledEvent(guildId, guildScheduledEventId) {\n        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/scheduled-events/{guildScheduledEvent.id}/users`\n     */\n    guildScheduledEventUsers(guildId, guildScheduledEventId) {\n        return `/guilds/${guildId}/scheduled-events/${guildScheduledEventId}/users`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/onboarding`\n     * - PUT `/guilds/{guild.id}/onboarding`\n     */\n    guildOnboarding(guildId) {\n        return `/guilds/${guildId}/onboarding`;\n    },\n    /**\n     * Route for:\n     * - PUT `/guilds/${guild.id}/incident-actions`\n     */\n    guildIncidentActions(guildId) {\n        return `/guilds/${guildId}/incident-actions`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/@me`\n     * - PATCH `/applications/@me`\n     */\n    currentApplication() {\n        return '/applications/@me';\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/entitlements`\n     * - POST `/applications/{application.id}/entitlements`\n     */\n    entitlements(applicationId) {\n        return `/applications/${applicationId}/entitlements`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/entitlements/{entitlement.id}`\n     * - DELETE `/applications/{application.id}/entitlements/{entitlement.id}`\n     */\n    entitlement(applicationId, entitlementId) {\n        return `/applications/${applicationId}/entitlements/${entitlementId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/skus`\n     */\n    skus(applicationId) {\n        return `/applications/${applicationId}/skus`;\n    },\n    /**\n     * Route for:\n     * - POST `/guilds/{guild.id}/bulk-ban`\n     */\n    guildBulkBan(guildId) {\n        return `/guilds/${guildId}/bulk-ban`;\n    },\n    /**\n     * Route for:\n     * - POST `/applications/{application.id}/entitlements/{entitlement.id}/consume`\n     */\n    consumeEntitlement(applicationId, entitlementId) {\n        return `/applications/${applicationId}/entitlements/${entitlementId}/consume`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/emojis`\n     * - POST `/applications/{application.id}/emojis`\n     */\n    applicationEmojis(applicationId) {\n        return `/applications/${applicationId}/emojis`;\n    },\n    /**\n     * Route for:\n     * - GET `/applications/{application.id}/emojis/{emoji.id}`\n     * - PATCH `/applications/{application.id}/emojis/{emoji.id}`\n     * - DELETE `/applications/{application.id}/emojis/{emoji.id}`\n     */\n    applicationEmoji(applicationId, emojiId) {\n        return `/applications/${applicationId}/emojis/${emojiId}`;\n    },\n    /**\n     * Route for:\n     * - GET `/skus/{sku.id}/subscriptions`\n     */\n    skuSubscriptions(skuId) {\n        return `/skus/${skuId}/subscriptions`;\n    },\n    /**\n     * Route for:\n     * - GET `/skus/{sku.id}/subscriptions/{subscription.id}`\n     */\n    skuSubscription(skuId, subscriptionId) {\n        return `/skus/${skuId}/subscriptions/${subscriptionId}`;\n    },\n    /**\n     * Route for:\n     * - POST `/channels/{channel.id}/send-soundboard-sound`\n     */\n    sendSoundboardSound(channelId) {\n        return `/channels/${channelId}/send-soundboard-sound`;\n    },\n    /**\n     * Route for:\n     * - GET `/soundboard-default-sounds`\n     */\n    soundboardDefaultSounds() {\n        return '/soundboard-default-sounds';\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/soundboard-sounds`\n     * - POST `/guilds/{guild.id}/soundboard-sounds`\n     */\n    guildSoundboardSounds(guildId) {\n        return `/guilds/${guildId}/soundboard-sounds`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/soundboard-sounds/{sound.id}`\n     * - PATCH `/guilds/{guild.id}/soundboard-sounds/{sound.id}`\n     * - DELETE `/guilds/{guild.id}/soundboard-sounds/{sound.id}`\n     */\n    guildSoundboardSound(guildId, soundId) {\n        return `/guilds/${guildId}/soundboard-sounds/${soundId}`;\n    },\n};\nfor (const [key, fn] of Object.entries(exports.Routes)) {\n    exports.Routes[key] = (...args) => {\n        const escaped = args.map((arg) => {\n            if (arg) {\n                // Skip already \"safe\" urls\n                if (internals_1.urlSafeCharacters.test(String(arg))) {\n                    return arg;\n                }\n                return encodeURIComponent(arg);\n            }\n            return arg;\n        });\n        // eslint-disable-next-line no-useless-call\n        return fn.call(null, ...escaped);\n    };\n}\n// Freeze the object so it can't be changed\nObject.freeze(exports.Routes);\nexports.StickerPackApplicationId = '710982414301790216';\nvar ImageFormat;\n(function (ImageFormat) {\n    ImageFormat[\"JPEG\"] = \"jpeg\";\n    ImageFormat[\"PNG\"] = \"png\";\n    ImageFormat[\"WebP\"] = \"webp\";\n    ImageFormat[\"GIF\"] = \"gif\";\n    ImageFormat[\"Lottie\"] = \"json\";\n})(ImageFormat || (exports.ImageFormat = ImageFormat = {}));\nexports.CDNRoutes = {\n    /**\n     * Route for:\n     * - GET `/emojis/{emoji.id}.{png|jpeg|webp|gif}`\n     *\n     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    emoji(emojiId, format) {\n        return `/emojis/${emojiId}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/icons/{guild.id}/{guild.icon}.{png|jpeg|webp|gif}`\n     *\n     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    guildIcon(guildId, guildIcon, format) {\n        return `/icons/${guildId}/${guildIcon}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/splashes/{guild.id}/{guild.splash}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    guildSplash(guildId, guildSplash, format) {\n        return `/splashes/${guildId}/${guildSplash}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/discovery-splashes/{guild.id}/{guild.discovery_splash}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    guildDiscoverySplash(guildId, guildDiscoverySplash, format) {\n        return `/discovery-splashes/${guildId}/${guildDiscoverySplash}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/banners/{guild.id}/{guild.banner}.{png|jpeg|webp|gif}`\n     *\n     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    guildBanner(guildId, guildBanner, format) {\n        return `/banners/${guildId}/${guildBanner}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/banners/{user.id}/{user.banner}.{png|jpeg|webp|gif}`\n     *\n     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    userBanner(userId, userBanner, format) {\n        return `/banners/${userId}/${userBanner}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/embed/avatars/{index}.png`\n     *\n     * The value for `index` parameter depends on whether the user is [migrated to the new username system](https://discord.com/developers/docs/change-log#unique-usernames-on-discord).\n     * For users on the new username system, `index` will be `(user.id >> 22) % 6`.\n     * For users on the legacy username system, `index` will be `user.discriminator % 5`.\n     *\n     * This route supports the extension: PNG\n     */\n    defaultUserAvatar(index) {\n        return `/embed/avatars/${index}.png`;\n    },\n    /**\n     * Route for:\n     * - GET `/avatars/{user.id}/{user.avatar}.{png|jpeg|webp|gif}`\n     *\n     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    userAvatar(userId, userAvatar, format) {\n        return `/avatars/${userId}/${userAvatar}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/{guild.id}/users/{user.id}/avatars/{guild_member.avatar}.{png|jpeg|webp|gif}`\n     *\n     * As this route supports GIFs, the hash will begin with `a_` if it is available in GIF format\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    guildMemberAvatar(guildId, userId, memberAvatar, format) {\n        return `/guilds/${guildId}/users/${userId}/avatars/${memberAvatar}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/avatar-decorations/{user.id}/{user.avatar_decoration}.png`\n     *\n     * This route supports the extension: PNG\n     *\n     * @deprecated Use {@link CDNRoutes.avatarDecoration} instead.\n     */\n    userAvatarDecoration(userId, userAvatarDecoration) {\n        return `/avatar-decorations/${userId}/${userAvatarDecoration}.png`;\n    },\n    /**\n     * Route for:\n     * - GET `/avatar-decoration-presets/{avatar_decoration_data_asset}.png`\n     *\n     * This route supports the extension: PNG\n     */\n    avatarDecoration(avatarDecorationDataAsset) {\n        return `/avatar-decoration-presets/${avatarDecorationDataAsset}.png`;\n    },\n    /**\n     * Route for:\n     * - GET `/app-icons/{application.id}/{application.icon}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    applicationIcon(applicationId, applicationIcon, format) {\n        return `/app-icons/${applicationId}/${applicationIcon}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/app-icons/{application.id}/{application.cover_image}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    applicationCover(applicationId, applicationCoverImage, format) {\n        return `/app-icons/${applicationId}/${applicationCoverImage}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/app-assets/{application.id}/{application.asset_id}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    applicationAsset(applicationId, applicationAssetId, format) {\n        return `/app-assets/${applicationId}/${applicationAssetId}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/app-assets/{application.id}/achievements/{achievement.id}/icons/{achievement.icon}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    achievementIcon(applicationId, achievementId, achievementIconHash, format) {\n        return `/app-assets/${applicationId}/achievements/${achievementId}/icons/${achievementIconHash}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/app-assets/710982414301790216/store/{sticker_pack.banner.asset_id}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    stickerPackBanner(stickerPackBannerAssetId, format) {\n        return `/app-assets/${exports.StickerPackApplicationId}/store/${stickerPackBannerAssetId}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/app-assets/${application.id}/store/${asset.id}.{png|jpeg|webp}}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    storePageAsset(applicationId, assetId, format = ImageFormat.PNG) {\n        return `/app-assets/${applicationId}/store/${assetId}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/team-icons/{team.id}/{team.icon}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    teamIcon(teamId, teamIcon, format) {\n        return `/team-icons/${teamId}/${teamIcon}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/stickers/{sticker.id}.{png|json}`\n     *\n     * This route supports the extensions: PNG, Lottie, GIF\n     */\n    sticker(stickerId, format) {\n        return `/stickers/${stickerId}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/role-icons/{role.id}/{role.icon}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    roleIcon(roleId, roleIcon, format) {\n        return `/role-icons/${roleId}/${roleIcon}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guild-events/{guild_scheduled_event.id}/{guild_scheduled_event.image}.{png|jpeg|webp}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP\n     */\n    guildScheduledEventCover(guildScheduledEventId, guildScheduledEventCoverImage, format) {\n        return `/guild-events/${guildScheduledEventId}/${guildScheduledEventCoverImage}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/guilds/${guild.id}/users/${user.id}/banners/${guild_member.banner}.{png|jpeg|webp|gif}`\n     *\n     * This route supports the extensions: PNG, JPEG, WebP, GIF\n     */\n    guildMemberBanner(guildId, userId, guildMemberBanner, format) {\n        return `/guilds/${guildId}/users/${userId}/banners/${guildMemberBanner}.${format}`;\n    },\n    /**\n     * Route for:\n     * - GET `/soundboard-sounds/${sound.id}`\n     */\n    soundboardSound(soundId) {\n        return `/soundboard-sounds/${soundId}`;\n    },\n};\nfor (const [key, fn] of Object.entries(exports.CDNRoutes)) {\n    exports.CDNRoutes[key] = (...args) => {\n        const escaped = args.map((arg) => {\n            if (arg) {\n                // Skip already \"safe\" urls\n                if (internals_1.urlSafeCharacters.test(String(arg))) {\n                    return arg;\n                }\n                return encodeURIComponent(arg);\n            }\n            return arg;\n        });\n        // eslint-disable-next-line no-useless-call\n        return fn.call(null, ...escaped);\n    };\n}\n// Freeze the object so it can't be changed\nObject.freeze(exports.CDNRoutes);\nexports.RouteBases = {\n    api: `https://discord.com/api/v${exports.APIVersion}`,\n    cdn: 'https://cdn.discordapp.com',\n    media: 'https://media.discordapp.net',\n    invite: 'https://discord.gg',\n    template: 'https://discord.new',\n    gift: 'https://discord.gift',\n    scheduledEvent: 'https://discord.com/events',\n};\n// Freeze bases object\nObject.freeze(exports.RouteBases);\nexports.OAuth2Routes = {\n    authorizationURL: `${exports.RouteBases.api}${exports.Routes.oauth2Authorization()}`,\n    tokenURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenExchange()}`,\n    /**\n     * See https://tools.ietf.org/html/rfc7009\n     */\n    tokenRevocationURL: `${exports.RouteBases.api}${exports.Routes.oauth2TokenRevocation()}`,\n};\n// Freeze OAuth2 route object\nObject.freeze(exports.OAuth2Routes);\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPCCloseEventCodes = exports.RPCErrorCodes = void 0;\n/**\n * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-error-codes\n */\nvar RPCErrorCodes;\n(function (RPCErrorCodes) {\n    RPCErrorCodes[RPCErrorCodes[\"UnknownError\"] = 1000] = \"UnknownError\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidPayload\"] = 4000] = \"InvalidPayload\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidCommand\"] = 4002] = \"InvalidCommand\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidGuild\"] = 4003] = \"InvalidGuild\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidEvent\"] = 4004] = \"InvalidEvent\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidChannel\"] = 4005] = \"InvalidChannel\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidPermissions\"] = 4006] = \"InvalidPermissions\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidClientId\"] = 4007] = \"InvalidClientId\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidOrigin\"] = 4008] = \"InvalidOrigin\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidToken\"] = 4009] = \"InvalidToken\";\n    RPCErrorCodes[RPCErrorCodes[\"InvalidUser\"] = 4010] = \"InvalidUser\";\n    RPCErrorCodes[RPCErrorCodes[\"OAuth2Error\"] = 5000] = \"OAuth2Error\";\n    RPCErrorCodes[RPCErrorCodes[\"SelectChannelTimedOut\"] = 5001] = \"SelectChannelTimedOut\";\n    RPCErrorCodes[RPCErrorCodes[\"GetGuildTimedOut\"] = 5002] = \"GetGuildTimedOut\";\n    RPCErrorCodes[RPCErrorCodes[\"SelectVoiceForceRequired\"] = 5003] = \"SelectVoiceForceRequired\";\n    RPCErrorCodes[RPCErrorCodes[\"CaptureShortcutAlreadyListening\"] = 5004] = \"CaptureShortcutAlreadyListening\";\n})(RPCErrorCodes || (exports.RPCErrorCodes = RPCErrorCodes = {}));\n/**\n * https://discord.com/developers/docs/topics/opcodes-and-status-codes#rpc-rpc-close-event-codes\n */\nvar RPCCloseEventCodes;\n(function (RPCCloseEventCodes) {\n    RPCCloseEventCodes[RPCCloseEventCodes[\"InvalidClientId\"] = 4000] = \"InvalidClientId\";\n    RPCCloseEventCodes[RPCCloseEventCodes[\"InvalidOrigin\"] = 4001] = \"InvalidOrigin\";\n    RPCCloseEventCodes[RPCCloseEventCodes[\"RateLimited\"] = 4002] = \"RateLimited\";\n    RPCCloseEventCodes[RPCCloseEventCodes[\"TokenRevoked\"] = 4003] = \"TokenRevoked\";\n    RPCCloseEventCodes[RPCCloseEventCodes[\"InvalidVersion\"] = 4004] = \"InvalidVersion\";\n    RPCCloseEventCodes[RPCCloseEventCodes[\"InvalidEncoding\"] = 4005] = \"InvalidEncoding\";\n})(RPCCloseEventCodes || (exports.RPCCloseEventCodes = RPCCloseEventCodes = {}));\n//# sourceMappingURL=common.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./common\"), exports);\n//# sourceMappingURL=v10.js.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isDMInteraction = isDMInteraction;\nexports.isGuildInteraction = isGuildInteraction;\nexports.isApplicationCommandDMInteraction = isApplicationCommandDMInteraction;\nexports.isApplicationCommandGuildInteraction = isApplicationCommandGuildInteraction;\nexports.isMessageComponentDMInteraction = isMessageComponentDMInteraction;\nexports.isMessageComponentGuildInteraction = isMessageComponentGuildInteraction;\nexports.isLinkButton = isLinkButton;\nexports.isInteractionButton = isInteractionButton;\nexports.isMessageComponentInteraction = isMessageComponentInteraction;\nexports.isMessageComponentButtonInteraction = isMessageComponentButtonInteraction;\nexports.isMessageComponentSelectMenuInteraction = isMessageComponentSelectMenuInteraction;\nexports.isChatInputApplicationCommandInteraction = isChatInputApplicationCommandInteraction;\nexports.isContextMenuApplicationCommandInteraction = isContextMenuApplicationCommandInteraction;\nconst index_1 = require(\"../payloads/v10/index\");\n// Interactions\n/**\n * A type-guard check for DM interactions\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the interaction was received in a DM channel\n */\nfunction isDMInteraction(interaction) {\n    return Reflect.has(interaction, 'user');\n}\n/**\n * A type-guard check for guild interactions\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the interaction was received in a guild\n */\nfunction isGuildInteraction(interaction) {\n    return Reflect.has(interaction, 'guild_id');\n}\n// ApplicationCommandInteractions\n/**\n * A type-guard check for DM application command interactions\n *\n * @param interaction The application command interaction to check against\n * @returns A boolean that indicates if the application command interaction was received in a DM channel\n */\nfunction isApplicationCommandDMInteraction(interaction) {\n    return isDMInteraction(interaction);\n}\n/**\n * A type-guard check for guild application command interactions\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the application command interaction was received in a guild\n */\nfunction isApplicationCommandGuildInteraction(interaction) {\n    return isGuildInteraction(interaction);\n}\n// MessageComponentInteractions\n/**\n * A type-guard check for DM message component interactions\n *\n * @param interaction The message component interaction to check against\n * @returns A boolean that indicates if the message component interaction was received in a DM channel\n */\nfunction isMessageComponentDMInteraction(interaction) {\n    return isDMInteraction(interaction);\n}\n/**\n * A type-guard check for guild message component interactions\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the message component interaction was received in a guild\n */\nfunction isMessageComponentGuildInteraction(interaction) {\n    return isGuildInteraction(interaction);\n}\n// Buttons\n/**\n * A type-guard check for buttons that have a `url` attached to them.\n *\n * @param component The button to check against\n * @returns A boolean that indicates if the button has a `url` attached to it\n */\nfunction isLinkButton(component) {\n    return component.style === index_1.ButtonStyle.Link;\n}\n/**\n * A type-guard check for buttons that have a `custom_id` attached to them.\n *\n * @param component The button to check against\n * @returns A boolean that indicates if the button has a `custom_id` attached to it\n */\nfunction isInteractionButton(component) {\n    return ![index_1.ButtonStyle.Link, index_1.ButtonStyle.Premium].includes(component.style);\n}\n// Message Components\n/**\n * A type-guard check for message component interactions\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the interaction is a message component\n */\nfunction isMessageComponentInteraction(interaction) {\n    return interaction.type === index_1.InteractionType.MessageComponent;\n}\n/**\n * A type-guard check for button message component interactions\n *\n * @param interaction The message component interaction to check against\n * @returns A boolean that indicates if the message component is a button\n */\nfunction isMessageComponentButtonInteraction(interaction) {\n    return interaction.data.component_type === index_1.ComponentType.Button;\n}\n/**\n * A type-guard check for select menu message component interactions\n *\n * @param interaction The message component interaction to check against\n * @returns A boolean that indicates if the message component is a select menu\n */\nfunction isMessageComponentSelectMenuInteraction(interaction) {\n    return [\n        index_1.ComponentType.StringSelect,\n        index_1.ComponentType.UserSelect,\n        index_1.ComponentType.RoleSelect,\n        index_1.ComponentType.MentionableSelect,\n        index_1.ComponentType.ChannelSelect,\n    ].includes(interaction.data.component_type);\n}\n// Application Commands\n/**\n * A type-guard check for chat input application commands.\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the interaction is a chat input application command\n */\nfunction isChatInputApplicationCommandInteraction(interaction) {\n    return interaction.data.type === index_1.ApplicationCommandType.ChatInput;\n}\n/**\n * A type-guard check for context menu application commands.\n *\n * @param interaction The interaction to check against\n * @returns A boolean that indicates if the interaction is a context menu application command\n */\nfunction isContextMenuApplicationCommandInteraction(interaction) {\n    return (interaction.data.type === index_1.ApplicationCommandType.Message ||\n        interaction.data.type === index_1.ApplicationCommandType.User);\n}\n//# sourceMappingURL=v10.js.map",
    "\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Utils = void 0;\n__exportStar(require(\"./gateway/v10\"), exports);\n__exportStar(require(\"./globals\"), exports);\n__exportStar(require(\"./payloads/v10/index\"), exports);\n__exportStar(require(\"./rest/v10/index\"), exports);\n__exportStar(require(\"./rpc/v10\"), exports);\nexports.Utils = require(\"./utils/v10\");\n//# sourceMappingURL=v10.js.map",
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Collection: () => Collection,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/collection.ts\nvar Collection = class _Collection extends Map {\n  static {\n    __name(this, \"Collection\");\n  }\n  /**\n   * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.\n   *\n   * @param key - The key to get if it exists, or set otherwise\n   * @param defaultValueGenerator - A function that generates the default value\n   * @example\n   * ```ts\n   * collection.ensure(guildId, () => defaultGuildConfig);\n   * ```\n   */\n  ensure(key, defaultValueGenerator) {\n    if (this.has(key)) return this.get(key);\n    if (typeof defaultValueGenerator !== \"function\") throw new TypeError(`${defaultValueGenerator} is not a function`);\n    const defaultValue = defaultValueGenerator(key, this);\n    this.set(key, defaultValue);\n    return defaultValue;\n  }\n  /**\n   * Checks if all of the elements exist in the collection.\n   *\n   * @param keys - The keys of the elements to check for\n   * @returns `true` if all of the elements exist, `false` if at least one does not exist.\n   */\n  hasAll(...keys) {\n    return keys.every((key) => super.has(key));\n  }\n  /**\n   * Checks if any of the elements exist in the collection.\n   *\n   * @param keys - The keys of the elements to check for\n   * @returns `true` if any of the elements exist, `false` if none exist.\n   */\n  hasAny(...keys) {\n    return keys.some((key) => super.has(key));\n  }\n  first(amount) {\n    if (amount === void 0) return this.values().next().value;\n    if (amount < 0) return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({ length: amount }, () => iter.next().value);\n  }\n  firstKey(amount) {\n    if (amount === void 0) return this.keys().next().value;\n    if (amount < 0) return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({ length: amount }, () => iter.next().value);\n  }\n  last(amount) {\n    const arr = [...this.values()];\n    if (amount === void 0) return arr[arr.length - 1];\n    if (amount < 0) return this.first(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  lastKey(amount) {\n    const arr = [...this.keys()];\n    if (amount === void 0) return arr[arr.length - 1];\n    if (amount < 0) return this.firstKey(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n   * Returns the item at a given index, allowing for positive and negative integers.\n   * Negative integers count back from the last item in the collection.\n   *\n   * @param index - The index of the element to obtain\n   */\n  at(index) {\n    index = Math.floor(index);\n    const arr = [...this.values()];\n    return arr.at(index);\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n   * Returns the key at a given index, allowing for positive and negative integers.\n   * Negative integers count back from the last item in the collection.\n   *\n   * @param index - The index of the key to obtain\n   */\n  keyAt(index) {\n    index = Math.floor(index);\n    const arr = [...this.keys()];\n    return arr.at(index);\n  }\n  random(amount) {\n    const arr = [...this.values()];\n    if (amount === void 0) return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from(\n      { length: Math.min(amount, arr.length) },\n      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]\n    );\n  }\n  randomKey(amount) {\n    const arr = [...this.keys()];\n    if (amount === void 0) return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from(\n      { length: Math.min(amount, arr.length) },\n      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]\n    );\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse | Array.reverse()}\n   * but returns a Collection instead of an Array.\n   */\n  reverse() {\n    const entries = [...this.entries()].reverse();\n    this.clear();\n    for (const [key, value] of entries) this.set(key, value);\n    return this;\n  }\n  find(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return val;\n    }\n    return void 0;\n  }\n  findKey(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return key;\n    }\n    return void 0;\n  }\n  findLast(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const entries = [...this.entries()];\n    for (let index = entries.length - 1; index >= 0; index--) {\n      const val = entries[index][1];\n      const key = entries[index][0];\n      if (fn(val, key, this)) return val;\n    }\n    return void 0;\n  }\n  findLastKey(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const entries = [...this.entries()];\n    for (let index = entries.length - 1; index >= 0; index--) {\n      const key = entries[index][0];\n      const val = entries[index][1];\n      if (fn(val, key, this)) return key;\n    }\n    return void 0;\n  }\n  sweep(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const previousSize = this.size;\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) this.delete(key);\n    }\n    return previousSize - this.size;\n  }\n  filter(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n    return results;\n  }\n  partition(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const results = [\n      new this.constructor[Symbol.species](),\n      new this.constructor[Symbol.species]()\n    ];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n    return results;\n  }\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n  map(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({ length: this.size }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n  mapValues(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) coll.set(key, fn(val, key, this));\n    return coll;\n  }\n  some(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n    return false;\n  }\n  every(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n    return true;\n  }\n  reduce(fn, initialValue) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    let accumulator;\n    const iterator = this.entries();\n    if (initialValue === void 0) {\n      if (this.size === 0) throw new TypeError(\"Reduce of empty collection with no initial value\");\n      accumulator = iterator.next().value[1];\n    } else {\n      accumulator = initialValue;\n    }\n    for (const [key, value] of iterator) {\n      accumulator = fn(accumulator, value, key, this);\n    }\n    return accumulator;\n  }\n  reduceRight(fn, initialValue) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    const entries = [...this.entries()];\n    let accumulator;\n    let index;\n    if (initialValue === void 0) {\n      if (entries.length === 0) throw new TypeError(\"Reduce of empty collection with no initial value\");\n      accumulator = entries[entries.length - 1][1];\n      index = entries.length - 1;\n    } else {\n      accumulator = initialValue;\n      index = entries.length;\n    }\n    while (--index >= 0) {\n      const key = entries[index][0];\n      const val = entries[index][1];\n      accumulator = fn(accumulator, val, key, this);\n    }\n    return accumulator;\n  }\n  each(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, value] of this) {\n      fn(value, key, this);\n    }\n    return this;\n  }\n  tap(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  /**\n   * Creates an identical shallow copy of this collection.\n   *\n   * @example\n   * ```ts\n   * const newColl = someColl.clone();\n   * ```\n   */\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   *\n   * @param collections - Collections to merge\n   * @example\n   * ```ts\n   * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   * ```\n   */\n  concat(...collections) {\n    const newColl = this.clone();\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n    return newColl;\n  }\n  /**\n   * Checks if this collection shares identical items with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   *\n   * @param collection - Collection to compare with\n   * @returns Whether the collections have identical contents\n   */\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * The sort method sorts the items of a collection in place and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   *\n   * @param compareFunction - Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.\n   * @example\n   * ```ts\n   * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   * ```\n   */\n  sort(compareFunction = _Collection.defaultSort) {\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));\n    super.clear();\n    for (const [key, value] of entries) {\n      super.set(key, value);\n    }\n    return this;\n  }\n  /**\n   * The intersection method returns a new collection containing the items where the key is present in both collections.\n   *\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['c', 3]]);\n   * const intersection = col1.intersection(col2);\n   * console.log(col1.intersection(col2));\n   * // => Collection { 'a' => 1 }\n   * ```\n   */\n  intersection(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (other.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Returns a new collection containing the items where the key is present in either of the collections.\n   *\n   * @remarks\n   *\n   * If the collections have any items with the same key, the value from the first collection will be used.\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['b', 3], ['c', 3]]);\n   * const union = col1.union(col2);\n   * console.log(union);\n   * // => Collection { 'a' => 1, 'b' => 2, 'c' => 3 }\n   * ```\n   */\n  union(other) {\n    const coll = new this.constructor[Symbol.species](this);\n    for (const [key, value] of other) {\n      if (!coll.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Returns a new collection containing the items where the key is present in this collection but not the other.\n   *\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['c', 3]]);\n   * console.log(col1.difference(col2));\n   * // => Collection { 'b' => 2 }\n   * console.log(col2.difference(col1));\n   * // => Collection { 'c' => 3 }\n   * ```\n   */\n  difference(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (!other.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Returns a new collection containing only the items where the keys are present in either collection, but not both.\n   *\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['c', 3]]);\n   * const symmetricDifference = col1.symmetricDifference(col2);\n   * console.log(col1.symmetricDifference(col2));\n   * // => Collection { 'b' => 2, 'c' => 3 }\n   * ```\n   */\n  symmetricDifference(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (!other.has(key)) coll.set(key, value);\n    }\n    for (const [key, value] of other) {\n      if (!this.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Merges two Collections together into a new Collection.\n   *\n   * @param other - The other Collection to merge with\n   * @param whenInSelf - Function getting the result if the entry only exists in this Collection\n   * @param whenInOther - Function getting the result if the entry only exists in the other Collection\n   * @param whenInBoth - Function getting the result if the entry exists in both Collections\n   * @example\n   * ```ts\n   * // Sums up the entries in two collections.\n   * coll.merge(\n   *  other,\n   *  x => ({ keep: true, value: x }),\n   *  y => ({ keep: true, value: y }),\n   *  (x, y) => ({ keep: true, value: x + y }),\n   * );\n   * ```\n   * @example\n   * ```ts\n   * // Intersects two collections in a left-biased manner.\n   * coll.merge(\n   *  other,\n   *  x => ({ keep: false }),\n   *  y => ({ keep: false }),\n   *  (x, _) => ({ keep: true, value: x }),\n   * );\n   * ```\n   */\n  merge(other, whenInSelf, whenInOther, whenInBoth) {\n    const coll = new this.constructor[Symbol.species]();\n    const keys = /* @__PURE__ */ new Set([...this.keys(), ...other.keys()]);\n    for (const key of keys) {\n      const hasInSelf = this.has(key);\n      const hasInOther = other.has(key);\n      if (hasInSelf && hasInOther) {\n        const result = whenInBoth(this.get(key), other.get(key), key);\n        if (result.keep) coll.set(key, result.value);\n      } else if (hasInSelf) {\n        const result = whenInSelf(this.get(key), key);\n        if (result.keep) coll.set(key, result.value);\n      } else if (hasInOther) {\n        const result = whenInOther(other.get(key), key);\n        if (result.keep) coll.set(key, result.value);\n      }\n    }\n    return coll;\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed | Array.toReversed()}\n   * but returns a Collection instead of an Array.\n   */\n  toReversed() {\n    return new this.constructor[Symbol.species](this).reverse();\n  }\n  /**\n   * The sorted method sorts the items of a collection and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   *\n   * @param compareFunction - Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @example\n   * ```ts\n   * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   * ```\n   */\n  toSorted(compareFunction = _Collection.defaultSort) {\n    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n  toJSON() {\n    return [...this.entries()];\n  }\n  static defaultSort(firstValue, secondValue) {\n    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n  }\n  /**\n   * Creates a Collection from a list of entries.\n   *\n   * @param entries - The list of entries\n   * @param combine - Function to combine an existing entry with a new one\n   * @example\n   * ```ts\n   * Collection.combineEntries([[\"a\", 1], [\"b\", 2], [\"a\", 2]], (x, y) => x + y);\n   * // returns Collection { \"a\" => 3, \"b\" => 2 }\n   * ```\n   */\n  static combineEntries(entries, combine) {\n    const coll = new _Collection();\n    for (const [key, value] of entries) {\n      if (coll.has(key)) {\n        coll.set(key, combine(coll.get(key), value, key));\n      } else {\n        coll.set(key, value);\n      }\n    }\n    return coll;\n  }\n};\n\n// src/index.ts\nvar version = \"2.1.1\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Collection,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/lib/Snowflake.ts\nvar IncrementSymbol = Symbol(\"@sapphire/snowflake.increment\");\nvar EpochSymbol = Symbol(\"@sapphire/snowflake.epoch\");\nvar ProcessIdSymbol = Symbol(\"@sapphire/snowflake.processId\");\nvar WorkerIdSymbol = Symbol(\"@sapphire/snowflake.workerId\");\nvar MaximumWorkerId = 0b11111n;\nvar MaximumProcessId = 0b11111n;\nvar MaximumIncrement = 0b111111111111n;\nvar _a, _b, _c, _d;\nvar _Snowflake = class _Snowflake {\n  /**\n   * @param epoch the epoch to use\n   */\n  constructor(epoch) {\n    /**\n     * Alias for {@link deconstruct}\n     */\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    __publicField(this, \"decode\", this.deconstruct);\n    /**\n     * Internal reference of the epoch passed in the constructor\n     * @internal\n     */\n    __publicField(this, _a);\n    /**\n     * Internal incrementor for generating snowflakes\n     * @internal\n     */\n    __publicField(this, _b, 0n);\n    /**\n     * The process ID that will be used by default in the generate method\n     * @internal\n     */\n    __publicField(this, _c, 1n);\n    /**\n     * The worker ID that will be used by default in the generate method\n     * @internal\n     */\n    __publicField(this, _d, 0n);\n    this[EpochSymbol] = BigInt(epoch instanceof Date ? epoch.getTime() : epoch);\n  }\n  /**\n   * The epoch for this snowflake\n   */\n  get epoch() {\n    return this[EpochSymbol];\n  }\n  /**\n   * Gets the configured process ID\n   */\n  get processId() {\n    return this[ProcessIdSymbol];\n  }\n  /**\n   * Sets the process ID that will be used by default for the {@link generate} method\n   * @param value The new value, will be coerced to BigInt and masked with `0b11111n`\n   */\n  set processId(value) {\n    this[ProcessIdSymbol] = BigInt(value) & MaximumProcessId;\n  }\n  /**\n   * Gets the configured worker ID\n   */\n  get workerId() {\n    return this[WorkerIdSymbol];\n  }\n  /**\n   * Sets the worker ID that will be used by default for the {@link generate} method\n   * @param value The new value, will be coerced to BigInt and masked with `0b11111n`\n   */\n  set workerId(value) {\n    this[WorkerIdSymbol] = BigInt(value) & MaximumWorkerId;\n  }\n  /**\n   * Generates a snowflake given an epoch and optionally a timestamp\n   * @param options options to pass into the generator, see {@link SnowflakeGenerateOptions}\n   *\n   * **note** when `increment` is not provided it defaults to the private `increment` of the instance\n   * @example\n   * ```typescript\n   * const epoch = new Date('2000-01-01T00:00:00.000Z');\n   * const snowflake = new Snowflake(epoch).generate();\n   * ```\n   * @returns A unique snowflake\n   */\n  generate({\n    increment,\n    timestamp = Date.now(),\n    workerId = this[WorkerIdSymbol],\n    processId = this[ProcessIdSymbol]\n  } = {}) {\n    if (timestamp instanceof Date)\n      timestamp = BigInt(timestamp.getTime());\n    else if (typeof timestamp === \"number\")\n      timestamp = BigInt(timestamp);\n    else if (typeof timestamp !== \"bigint\") {\n      throw new TypeError(`\"timestamp\" argument must be a number, bigint, or Date (received ${typeof timestamp})`);\n    }\n    if (typeof increment !== \"bigint\") {\n      increment = this[IncrementSymbol];\n      this[IncrementSymbol] = increment + 1n & MaximumIncrement;\n    }\n    return timestamp - this[EpochSymbol] << 22n | (workerId & MaximumWorkerId) << 17n | (processId & MaximumProcessId) << 12n | increment & MaximumIncrement;\n  }\n  /**\n   * Deconstructs a snowflake given a snowflake ID\n   * @param id the snowflake to deconstruct\n   * @returns a deconstructed snowflake\n   * @example\n   * ```typescript\n   * const epoch = new Date('2000-01-01T00:00:00.000Z');\n   * const snowflake = new Snowflake(epoch).deconstruct('3971046231244935168');\n   * ```\n   */\n  deconstruct(id) {\n    const bigIntId = BigInt(id);\n    const epoch = this[EpochSymbol];\n    return {\n      id: bigIntId,\n      timestamp: (bigIntId >> 22n) + epoch,\n      workerId: bigIntId >> 17n & MaximumWorkerId,\n      processId: bigIntId >> 12n & MaximumProcessId,\n      increment: bigIntId & MaximumIncrement,\n      epoch\n    };\n  }\n  /**\n   * Retrieves the timestamp field's value from a snowflake.\n   * @param id The snowflake to get the timestamp value from.\n   * @returns The UNIX timestamp that is stored in `id`.\n   */\n  timestampFrom(id) {\n    return Number((BigInt(id) >> 22n) + this[EpochSymbol]);\n  }\n  /**\n   * Returns a number indicating whether a reference snowflake comes before, or after, or is same as the given\n   * snowflake in sort order.\n   * @param a The first snowflake to compare.\n   * @param b The second snowflake to compare.\n   * @returns `-1` if `a` is older than `b`, `0` if `a` and `b` are equals, `1` if `a` is newer than `b`.\n   * @example Sort snowflakes in ascending order\n   * ```typescript\n   * const ids = ['737141877803057244', '1056191128120082432', '254360814063058944'];\n   * console.log(ids.sort((a, b) => Snowflake.compare(a, b)));\n   * // → ['254360814063058944', '737141877803057244', '1056191128120082432'];\n   * ```\n   * @example Sort snowflakes in descending order\n   * ```typescript\n   * const ids = ['737141877803057244', '1056191128120082432', '254360814063058944'];\n   * console.log(ids.sort((a, b) => -Snowflake.compare(a, b)));\n   * // → ['1056191128120082432', '737141877803057244', '254360814063058944'];\n   * ```\n   */\n  static compare(a, b) {\n    const typeA = typeof a;\n    return typeA === typeof b ? typeA === \"string\" ? cmpString(a, b) : cmpBigInt(a, b) : cmpBigInt(BigInt(a), BigInt(b));\n  }\n};\n_a = EpochSymbol, _b = IncrementSymbol, _c = ProcessIdSymbol, _d = WorkerIdSymbol;\n__name(_Snowflake, \"Snowflake\");\nvar Snowflake = _Snowflake;\nfunction cmpBigInt(a, b) {\n  return a === b ? 0 : a < b ? -1 : 1;\n}\n__name(cmpBigInt, \"cmpBigInt\");\nfunction cmpString(a, b) {\n  return a === b ? 0 : a.length < b.length ? -1 : a.length > b.length ? 1 : a < b ? -1 : 1;\n}\n__name(cmpString, \"cmpString\");\n\n// src/lib/DiscordSnowflake.ts\nvar DiscordSnowflake = new Snowflake(1420070400000n);\n\n// src/lib/TwitterSnowflake.ts\nvar TwitterSnowflake = new Snowflake(1288834974657n);\n\nexports.DiscordSnowflake = DiscordSnowflake;\nexports.MaximumIncrement = MaximumIncrement;\nexports.MaximumProcessId = MaximumProcessId;\nexports.MaximumWorkerId = MaximumWorkerId;\nexports.Snowflake = Snowflake;\nexports.TwitterSnowflake = TwitterSnowflake;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.cjs.map",
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  AbortError: () => AbortError,\n  AsyncEventEmitter: () => AsyncEventEmitter\n});\nmodule.exports = __toCommonJS(src_exports);\nfunction validateListener(input) {\n  if (typeof input !== \"function\") {\n    throw new TypeError(`The listener argument must be a function. Received ${typeof input}`);\n  }\n}\n__name(validateListener, \"validateListener\");\nfunction validateAbortSignal(input) {\n  if (input && !(input instanceof AbortSignal)) {\n    throw new TypeError(`The signal option must be an AbortSignal. Received ${input}`);\n  }\n}\n__name(validateAbortSignal, \"validateAbortSignal\");\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++) {\n    list[index] = list[index + 1];\n  }\n  list.pop();\n}\n__name(spliceOne, \"spliceOne\");\nfunction arrayClone(arr) {\n  switch (arr.length) {\n    case 2:\n      return [arr[0], arr[1]];\n    case 3:\n      return [arr[0], arr[1], arr[2]];\n    case 4:\n      return [arr[0], arr[1], arr[2], arr[3]];\n    case 5:\n      return [arr[0], arr[1], arr[2], arr[3], arr[4]];\n    case 6:\n      return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]];\n  }\n  return arr.slice();\n}\n__name(arrayClone, \"arrayClone\");\nfunction identicalSequenceRange(a, b) {\n  for (let i = 0; i < a.length - 3; i++) {\n    const pos = b.indexOf(a[i]);\n    if (pos !== -1) {\n      const rest = b.length - pos;\n      if (rest > 3) {\n        let len = 1;\n        const maxLen = Math.min(a.length - i, rest);\n        while (maxLen > len && a[i + len] === b[pos + len]) {\n          len++;\n        }\n        if (len > 3) {\n          return [len, i];\n        }\n      }\n    }\n  }\n  return [0, 0];\n}\n__name(identicalSequenceRange, \"identicalSequenceRange\");\nfunction enhanceStackTrace(err, own) {\n  let ctorInfo = \"\";\n  try {\n    const { name } = this.constructor;\n    if (name !== \"AsyncEventEmitter\") ctorInfo = ` on ${name} instance`;\n  } catch {\n  }\n  const sep = `\nEmitted 'error' event${ctorInfo} at:\n`;\n  const errStack = err.stack.split(\"\\n\").slice(1);\n  const ownStack = own.stack.split(\"\\n\").slice(1);\n  const { 0: len, 1: off } = identicalSequenceRange(ownStack, errStack);\n  if (len > 0) {\n    ownStack.splice(off + 1, len - 2, \"    [... lines matching original stack trace ...]\");\n  }\n  return err.stack + sep + ownStack.join(\"\\n\");\n}\n__name(enhanceStackTrace, \"enhanceStackTrace\");\nvar brandSymbol = Symbol.for(\"async-event-emitter.ts-brand\");\nbrandSymbol;\nvar _AsyncEventEmitter = class _AsyncEventEmitter {\n  constructor() {\n    this._events = {\n      __proto__: null\n    };\n    this._eventCount = 0;\n    this._maxListeners = 10;\n    this._internalPromiseMap = /* @__PURE__ */ new Map();\n    this._wrapperId = 0n;\n  }\n  addListener(eventName, listener) {\n    validateListener(listener);\n    const wrapped = this._wrapListener(eventName, listener, false);\n    this._addListener(eventName, wrapped, false);\n    return this;\n  }\n  on(eventName, listener) {\n    return this.addListener(eventName, listener);\n  }\n  once(eventName, listener) {\n    validateListener(listener);\n    const wrapped = this._wrapListener(eventName, listener, true);\n    this._addListener(eventName, wrapped, false);\n    return this;\n  }\n  removeListener(eventName, listener) {\n    validateListener(listener);\n    const events = this._events;\n    const eventList = events[eventName];\n    if (eventList === void 0) {\n      return this;\n    }\n    if (eventList === listener || eventList.listener === listener) {\n      if (--this._eventCount === 0) {\n        this._events = { __proto__: null };\n      } else {\n        delete events[eventName];\n        if (events.removeListener) {\n          this.emit(\n            \"removeListener\",\n            eventName,\n            eventList.listener ?? eventList\n          );\n        }\n      }\n    } else if (typeof eventList !== \"function\") {\n      let position = -1;\n      for (let i = eventList.length - 1; i >= 0; i--) {\n        if (eventList[i] === listener || eventList[i].listener === listener) {\n          position = i;\n          break;\n        }\n      }\n      if (position < 0) {\n        return this;\n      }\n      if (position === 0) {\n        eventList.shift();\n      } else {\n        spliceOne(eventList, position);\n      }\n      if (eventList.length === 0) {\n        delete events[eventName];\n        --this._eventCount;\n      }\n      if (events.removeListener !== void 0) {\n        this.emit(\"removeListener\", eventName, listener);\n      }\n    }\n    return this;\n  }\n  off(eventName, listener) {\n    return this.removeListener(eventName, listener);\n  }\n  removeAllListeners(event) {\n    const events = this._events;\n    if (events.removeListener === void 0) {\n      if (!event) {\n        this._events = { __proto__: null };\n        this._eventCount = 0;\n      } else if (events[event] !== void 0) {\n        if (--this._eventCount === 0) {\n          this._events = { __proto__: null };\n        } else {\n          delete events[event];\n        }\n      }\n      return this;\n    }\n    if (!event) {\n      for (const key of Reflect.ownKeys(events)) {\n        if (key === \"removeListener\") {\n          continue;\n        }\n        this.removeAllListeners(key);\n      }\n      this.removeAllListeners(\"removeListener\");\n      this._events = { __proto__: null };\n      this._eventCount = 0;\n      return this;\n    }\n    const listeners = events[event];\n    if (typeof listeners === \"function\") {\n      this.removeListener(event, listeners);\n    } else if (listeners !== void 0) {\n      for (let i = listeners.length - 1; i >= 0; i--) {\n        this.removeListener(event, listeners[i]);\n      }\n    }\n    return this;\n  }\n  setMaxListeners(n) {\n    if (typeof n !== \"number\" || n < 0 || Number.isNaN(n)) {\n      throw new RangeError(`Expected to get a non-negative number for \"setMaxListeners\", got ${n} instead`);\n    }\n    this._maxListeners = n;\n    return this;\n  }\n  getMaxListeners() {\n    return this._maxListeners;\n  }\n  listeners(eventName) {\n    const eventList = this._events[eventName];\n    if (eventList === void 0) {\n      return [];\n    }\n    if (typeof eventList === \"function\") {\n      return [eventList.listener ?? eventList];\n    }\n    const ret = arrayClone(eventList);\n    for (let i = 0; i < ret.length; ++i) {\n      const orig = ret[i].listener;\n      if (typeof orig === \"function\") {\n        ret[i] = orig;\n      }\n    }\n    return ret;\n  }\n  rawListeners(eventName) {\n    const eventList = this._events[eventName];\n    if (eventList === void 0) {\n      return [];\n    }\n    if (typeof eventList === \"function\") {\n      return [eventList];\n    }\n    return arrayClone(eventList);\n  }\n  emit(eventName, ...args) {\n    let doError = eventName === \"error\";\n    const events = this._events;\n    if (events !== void 0) {\n      doError = doError && events.error === void 0;\n    } else if (!doError) {\n      return false;\n    }\n    if (doError) {\n      let er;\n      if (args.length > 0) {\n        er = args[0];\n      }\n      if (er instanceof Error) {\n        try {\n          const capture = {};\n          Error.captureStackTrace(capture, _AsyncEventEmitter.prototype.emit);\n          Object.defineProperty(er, \"stack\", {\n            value: enhanceStackTrace.call(this, er, capture),\n            configurable: true\n          });\n        } catch {\n        }\n        throw er;\n      }\n      const stringifiedError = String(er);\n      const err = new Error(`Unhandled 'error' event emitted, received ${stringifiedError}`);\n      err.context = er;\n      throw err;\n    }\n    const handlers = events[eventName];\n    if (handlers === void 0) {\n      return false;\n    }\n    if (typeof handlers === \"function\") {\n      const result = handlers.apply(this, args);\n      if (result !== void 0 && result !== null) {\n        handleMaybeAsync(this, result);\n      }\n    } else {\n      const len = handlers.length;\n      const listeners = arrayClone(handlers);\n      for (let i = 0; i < len; ++i) {\n        const result = listeners[i].apply(this, args);\n        if (result !== void 0 && result !== null) {\n          handleMaybeAsync(this, result);\n        }\n      }\n    }\n    return true;\n  }\n  listenerCount(eventName) {\n    const events = this._events;\n    if (events === void 0) {\n      return 0;\n    }\n    const eventListeners = events[eventName];\n    if (typeof eventListeners === \"function\") {\n      return 1;\n    }\n    return eventListeners?.length ?? 0;\n  }\n  prependListener(eventName, listener) {\n    validateListener(listener);\n    const wrapped = this._wrapListener(eventName, listener, false);\n    this._addListener(eventName, wrapped, true);\n    return this;\n  }\n  prependOnceListener(eventName, listener) {\n    validateListener(listener);\n    const wrapped = this._wrapListener(eventName, listener, true);\n    this._addListener(eventName, wrapped, true);\n    return this;\n  }\n  eventNames() {\n    return this._eventCount > 0 ? Reflect.ownKeys(this._events) : [];\n  }\n  async waitForAllListenersToComplete() {\n    const promises = [...this._internalPromiseMap.values()];\n    if (promises.length === 0) {\n      return false;\n    }\n    await Promise.all(promises);\n    return true;\n  }\n  _addListener(eventName, wrappedListener, prepend) {\n    if (this._events.newListener !== void 0) {\n      this.emit(\n        \"newListener\",\n        eventName,\n        wrappedListener.listener ?? wrappedListener\n      );\n    }\n    let existing = this._events[eventName];\n    if (existing === void 0) {\n      existing = this._events[eventName] = wrappedListener;\n      ++this._eventCount;\n    } else if (typeof existing === \"function\") {\n      existing = this._events[eventName] = prepend ? [wrappedListener, existing] : [existing, wrappedListener];\n    } else if (prepend) {\n      existing.unshift(wrappedListener);\n    } else {\n      existing.push(wrappedListener);\n    }\n    const existingWarnedAboutMaxListeners = Reflect.get(existing, \"_hasWarnedAboutMaxListeners\");\n    if (this._maxListeners > 0 && existing.length > this._maxListeners && !existingWarnedAboutMaxListeners) {\n      Reflect.set(existing, \"_hasWarnedAboutMaxListeners\", true);\n      const warningMessage = [\n        `Possible AsyncEventEmitter memory leak detected. ${existing.length} ${String(\n          eventName\n        )} listeners added to ${this.constructor.name}.`,\n        `Use emitter.setMaxListeners() to increase the limit.`\n      ].join(\" \");\n      console.warn(warningMessage);\n    }\n  }\n  _wrapListener(eventName, listener, once) {\n    if (!once) {\n      return listener;\n    }\n    const state = {\n      fired: false,\n      wrapFn: void 0,\n      eventEmitter: this,\n      eventName,\n      listener\n    };\n    const aliased = onceWrapper;\n    const wrapped = aliased.bind(state);\n    wrapped.listener = listener;\n    state.wrapFn = wrapped;\n    return wrapped;\n  }\n  static listenerCount(emitter, eventName) {\n    return emitter.listenerCount(eventName);\n  }\n  static async once(emitter, eventName, options = {}) {\n    const signal = options?.signal;\n    validateAbortSignal(signal);\n    if (signal?.aborted) {\n      throw new AbortError(void 0, { cause: getReason(signal) });\n    }\n    return new Promise((resolve, reject) => {\n      const errorListener = /* @__PURE__ */ __name((err) => {\n        emitter.removeListener(eventName, resolver);\n        if (signal) {\n          eventTargetAgnosticRemoveListener(emitter, eventName, abortListener);\n        }\n        reject(err);\n      }, \"errorListener\");\n      const resolver = /* @__PURE__ */ __name((...args) => {\n        emitter.removeListener(\"error\", errorListener);\n        if (signal) {\n          eventTargetAgnosticRemoveListener(signal, \"abort\", abortListener);\n        }\n        resolve(args);\n      }, \"resolver\");\n      emitter.once(eventName, resolver);\n      if (eventName !== \"error\") {\n        emitter.once(\"error\", errorListener);\n      }\n      const abortListener = /* @__PURE__ */ __name(() => {\n        eventTargetAgnosticRemoveListener(emitter, eventName, resolver);\n        eventTargetAgnosticRemoveListener(emitter, \"error\", errorListener);\n        reject(new AbortError(void 0, { cause: getReason(signal) }));\n      }, \"abortListener\");\n      if (signal) {\n        eventTargetAgnosticAddListener(signal, \"abort\", abortListener, { once: true });\n      }\n    });\n  }\n  static on(emitter, eventName, options = {}) {\n    const signal = options?.signal;\n    validateAbortSignal(signal);\n    if (signal?.aborted) {\n      throw new AbortError(void 0, { cause: getReason(signal) });\n    }\n    const unconsumedEvents = [];\n    const unconsumedPromises = [];\n    let error = null;\n    let finished = false;\n    const abortListener = /* @__PURE__ */ __name(() => {\n      errorHandler(new AbortError(void 0, { cause: getReason(signal) }));\n    }, \"abortListener\");\n    const eventHandler = /* @__PURE__ */ __name((...args) => {\n      const promise = unconsumedPromises.shift();\n      if (promise) {\n        promise.resolve(createIterResult(args, false));\n      } else {\n        unconsumedEvents.push(args);\n      }\n    }, \"eventHandler\");\n    const errorHandler = /* @__PURE__ */ __name((err) => {\n      finished = true;\n      const toError = unconsumedPromises.shift();\n      if (toError) {\n        toError.reject(err);\n      } else {\n        error = err;\n      }\n      void iterator.return();\n    }, \"errorHandler\");\n    const iterator = Object.setPrototypeOf(\n      {\n        next() {\n          const value = unconsumedEvents.shift();\n          if (value) {\n            return Promise.resolve(createIterResult(value, false));\n          }\n          if (error) {\n            const p = Promise.reject(error);\n            error = null;\n            return p;\n          }\n          if (finished) {\n            return Promise.resolve(createIterResult(void 0, true));\n          }\n          return new Promise((resolve, reject) => {\n            unconsumedPromises.push({ resolve, reject });\n          });\n        },\n        return() {\n          emitter.off(eventName, eventHandler);\n          emitter.off(\"error\", errorHandler);\n          if (signal) {\n            eventTargetAgnosticRemoveListener(signal, \"abort\", abortListener);\n          }\n          finished = true;\n          const doneResult = createIterResult(void 0, true);\n          for (const promise of unconsumedPromises) {\n            promise.resolve(doneResult);\n          }\n          return Promise.resolve(doneResult);\n        },\n        throw(err) {\n          if (!err || !(err instanceof Error)) {\n            throw new TypeError(\n              `Expected Error instance to be thrown in AsyncEventEmitter.AsyncIterator. Got ${err}`\n            );\n          }\n          error = err;\n          emitter.off(eventName, eventHandler);\n          emitter.off(\"error\", errorHandler);\n        },\n        [Symbol.asyncIterator]() {\n          return this;\n        }\n      },\n      AsyncIteratorPrototype\n    );\n    emitter.on(eventName, eventHandler);\n    if (eventName !== \"error\") {\n      emitter.on(\"error\", errorHandler);\n    }\n    if (signal) {\n      eventTargetAgnosticAddListener(signal, \"abort\", abortListener);\n    }\n    return iterator;\n  }\n};\n__name(_AsyncEventEmitter, \"AsyncEventEmitter\");\nvar AsyncEventEmitter = _AsyncEventEmitter;\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.eventEmitter.removeListener(this.eventName, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0) {\n      return this.listener.call(this.eventEmitter);\n    }\n    return this.listener.apply(this.eventEmitter, arguments);\n  }\n}\n__name(onceWrapper, \"onceWrapper\");\nfunction getReason(signal) {\n  return signal?.reason;\n}\n__name(getReason, \"getReason\");\nfunction eventTargetAgnosticRemoveListener(emitter, name, listener, flags) {\n  if (typeof emitter.off === \"function\") {\n    emitter.off(name, listener);\n  } else if (typeof emitter.removeEventListener === \"function\") {\n    emitter.removeEventListener(name, listener, flags);\n  }\n}\n__name(eventTargetAgnosticRemoveListener, \"eventTargetAgnosticRemoveListener\");\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === \"function\") {\n    if (flags?.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === \"function\") {\n    emitter.addEventListener(name, listener, flags);\n  }\n}\n__name(eventTargetAgnosticAddListener, \"eventTargetAgnosticAddListener\");\nvar AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () {\n}).prototype);\nfunction createIterResult(value, done) {\n  return { value, done };\n}\n__name(createIterResult, \"createIterResult\");\nvar _AbortError = class _AbortError extends Error {\n  constructor(message = \"The operation was aborted\", options = void 0) {\n    if (options !== void 0 && typeof options !== \"object\") {\n      throw new TypeError(`Failed to create AbortError: options is not an object or undefined`);\n    }\n    super(message, options);\n    this.code = \"ABORT_ERR\";\n    this.name = \"AbortError\";\n  }\n};\n__name(_AbortError, \"AbortError\");\nvar AbortError = _AbortError;\nfunction handleMaybeAsync(emitter, result) {\n  try {\n    const the = result.then;\n    const fin = result.finally;\n    if (typeof the === \"function\") {\n      the.call(result, void 0, (error) => {\n        setTimeout(() => {\n          emitter.emit(\"error\", error);\n        }, 0);\n      });\n    }\n    if (typeof fin === \"function\") {\n      const promiseId = String(++emitter[\"_wrapperId\"]);\n      emitter[\"_internalPromiseMap\"].set(promiseId, result);\n      fin.call(result, /* @__PURE__ */ __name(function final() {\n        emitter[\"_internalPromiseMap\"].delete(promiseId);\n      }, \"final\"));\n    }\n  } catch (err) {\n    emitter.emit(\"error\", err);\n  }\n}\n__name(handleMaybeAsync, \"handleMaybeAsync\");\n//# sourceMappingURL=index.cjs.map",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromHex = exports.toHex = void 0;\nconst hex = (num) => new Number(num).toString(16).toLowerCase();\nconst toHex = (num) => `0x${hex(num).length === 1 ? \"0\" + hex(num) : hex(num)}`;\nexports.toHex = toHex;\nconst fromHex = (hex) => new Number(hex);\nexports.fromHex = fromHex;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createComplexNode = exports.createNode = exports.merge = void 0;\nconst createMatch = (leaf) => ({\n    typename: leaf.typename,\n    mime: leaf.info.mime,\n    extension: leaf.info.extension,\n});\nconst isMatchingNode = (tree, path) => tree && path.length === 0;\nconst head = (arr) => arr[0];\nconst tail = (arr) => arr.slice(1, arr.length);\nconst merge = (node, tree) => {\n    if (node.bytes.length === 0)\n        return tree;\n    const currentByte = head(node.bytes); // 0\n    const path = tail(node.bytes); // [1,2]\n    const currentTree = tree.bytes[currentByte];\n    // traversed to end. Just add key to leaf.\n    if (isMatchingNode(currentTree, path)) {\n        const matchingNode = tree.bytes[currentByte];\n        tree.bytes[currentByte] = {\n            ...matchingNode,\n            matches: [\n                ...(matchingNode.matches ? matchingNode.matches : []),\n                createMatch(node),\n            ],\n        };\n        return tree;\n    }\n    // Path exists already, Merge subtree\n    if (tree.bytes[currentByte]) {\n        tree.bytes[currentByte] = exports.merge(exports.createNode(node.typename, path, node.info), tree.bytes[currentByte]);\n        return tree;\n    }\n    // Tree did not exist before\n    if (!tree.bytes[currentByte]) {\n        tree.bytes[currentByte] = {\n            ...tree.bytes[currentByte],\n            ...exports.createComplexNode(node.typename, path, node.info),\n        };\n    }\n    return tree;\n};\nexports.merge = merge;\nconst createNode = (typename, bytes, info) => {\n    return { typename, bytes, info: info ? info : {} };\n};\nexports.createNode = createNode;\nconst createComplexNode = (typename, bytes, info) => {\n    let obj = {\n        bytes: {},\n        matches: undefined,\n    };\n    const currentKey = head(bytes); // 0\n    const path = tail(bytes); // [1,2]\n    if (bytes.length === 0) {\n        return {\n            matches: [\n                createMatch({\n                    typename: typename,\n                    info: info ? { extension: info.extension, mime: info.mime } : {},\n                }),\n            ],\n            bytes: {},\n        };\n    }\n    obj.bytes[currentKey] = exports.createComplexNode(typename, path, info);\n    return obj;\n};\nexports.createComplexNode = createComplexNode;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst toHex_1 = require(\"./toHex\");\nconst tree_1 = require(\"./tree\");\n// https://en.wikipedia.org/wiki/List_of_file_signatures\nlet tree = {\n    noOffset: null,\n    offset: {},\n};\nconst add = (typename, signature, additionalInfo, offset) => {\n    if (offset) {\n        const existing = tree.offset[toHex_1.toHex(offset)];\n        if (!existing) {\n            tree.offset[toHex_1.toHex(offset)] = tree_1.createComplexNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo);\n        }\n        else {\n            const merged = tree_1.merge(tree_1.createNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo), { ...existing });\n            tree.offset[toHex_1.toHex(offset)] = merged;\n        }\n    }\n    else {\n        if (tree.noOffset === null) {\n            tree.noOffset = tree_1.createComplexNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo);\n        }\n        else {\n            tree.noOffset = tree_1.merge(tree_1.createNode(typename, signature.map((e) => e.toLowerCase()), additionalInfo), tree.noOffset);\n        }\n    }\n};\nadd(\"gif\", [\"0x47\", \"0x49\", \"0x46\", \"0x38\", \"0x37\", \"0x61\"], {\n    mime: \"image/gif\",\n    extension: \"gif\",\n});\nadd(\"gif\", [\"0x47\", \"0x49\", \"0x46\", \"0x38\", \"0x39\", \"0x61\"], {\n    mime: \"image/gif\",\n    extension: \"gif\",\n});\nadd(\"jpg\", [\"0xFF\", \"0xD8\", \"0xFF\"], {\n    mime: \"image/jpeg\",\n    extension: \"jpeg\",\n});\nadd(\"webp\", [\n    \"0x52\",\n    \"0x49\",\n    \"0x46\",\n    \"0x46\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x57\",\n    \"0x45\",\n    \"0x42\",\n    \"0x50\",\n], { mime: \"image/webp\", extension: \"webp\" });\nadd(\"heif\", [\"0x66\", \"0x74\", \"0x79\", \"0x70\", \"0x6D\", \"0x69\", \"0x66\", \"0x31\"], { mime: \"image/heif\", extension: \"heif\" }, 4);\nadd(\"heif\", [\"0x66\", \"0x74\", \"0x79\", \"0x70\", \"0x68\", \"0x65\", \"0x69\", \"0x63\"], { mime: \"image/heif\", extension: \"heic\" }, 4);\nadd(\"rpm\", [\"0xed\", \"0xab\", \"0xee\", \"0xdb\"]);\nadd(\"bin\", [\"0x53\", \"0x50\", \"0x30\", \"0x31\"], {\n    mime: \"application/octet-stream\",\n    extension: \"bin\",\n});\nadd(\"pic\", [\"0x00\"]);\nadd(\"pif\", [\"0x00\"]);\nadd(\"sea\", [\"0x00\"]);\nadd(\"ytr\", [\"0x00\"]);\n// 66747970\n// 6D703432\nadd(\"mp4\", [\"0x66\", \"0x74\", \"0x79\", \"0x70\"], { mime: \"video/mp4\", extension: \"mp4\" }, 0x4);\nadd(\"ttf\", [\"0x00\", \"0x01\", \"0x00\", \"0x00\", \"0x00\"], {\n    mime: \"font/ttf\",\n    extension: \"ttf\",\n});\nadd(\"otf\", [\"0x4F\", \"0x54\", \"0x54\", \"0x4F\"], {\n    mime: \"font/otf\",\n    extension: \"otf\",\n});\nadd(\"eot\", [\"0x50\", \"0x4C\"], {\n    mime: \"application/vnd.ms-fontobject\",\n    extension: \"eot\",\n});\nadd(\"woff\", [\"0x77\", \"0x4F\", \"0x46\", \"0x46\"], {\n    mime: \"font/woff\",\n    extension: \"woff\",\n});\nadd(\"woff2\", [\"0x77\", \"0x4F\", \"0x46\", \"0x32\"], {\n    mime: \"font/woff2\",\n    extension: \"woff2\",\n});\nadd(\"pdb\", [\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n]);\nadd(\"dba\", [\"0xBE\", \"0xBA\", \"0xFE\", \"0xCA\"]);\nadd(\"dba2\", [\"0x00\", \"0x01\", \"0x42\", \"0x44\"]);\nadd(\"tda\", [\"0x00\", \"0x01\", \"0x44\", \"0x54\"]);\nadd(\"tda2\", [\"0x00\", \"0x01\", \"0x00\", \"0x00\"]);\nadd(\"ico\", [\"0x00\", \"0x00\", \"0x01\", \"0x00\"], {\n    mime: \"image/x-icon\",\n    extension: \"ico\",\n});\nadd(\"3gp\", [\"0x66\", \"0x74\", \"0x79\", \"0x70\", \"0x33\", \"0x67\"]);\nadd(\"z\", [\"0x1F\", \"0x9D\"]);\nadd(\"tar.z\", [\"0x1F\", \"0xA0\"]);\nadd(\"bac\", [\n    \"0x42\",\n    \"0x41\",\n    \"0x43\",\n    \"0x4B\",\n    \"0x4D\",\n    \"0x49\",\n    \"0x4B\",\n    \"0x45\",\n    \"0x44\",\n    \"0x49\",\n    \"0x53\",\n    \"0x4B\",\n]);\nadd(\"bz2\", [\"0x42\", \"0x5A\", \"0x68\"], {\n    mime: \"application/x-bzip2\",\n    extension: \"bz2\",\n});\nadd(\"tif\", [\"0x49\", \"0x49\", \"0x2A\", \"0x00\"], {\n    mime: \"image/tiff\",\n    extension: \"tif\",\n});\nadd(\"tiff\", [\"0x4D\", \"0x4D\", \"0x00\", \"0x2A\"], {\n    mime: \"image/tiff\",\n    extension: \"tiff\",\n});\nadd(\"cr2\", [\n    \"0x49\",\n    \"0x49\",\n    \"0x2A\",\n    \"0x00\",\n    \"0x10\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x43\",\n    \"0x52\",\n]);\nadd(\"cin\", [\"0x80\", \"0x2A\", \"0x5F\", \"0xD7\"]);\nadd(\"cin1\", [\"0x52\", \"0x4E\", \"0x43\", \"0x01\"]);\nadd(\"cin2\", [\"0x52\", \"0x4E\", \"0x43\", \"0x02\"]);\nadd(\"dpx\", [\"0x53\", \"0x44\", \"0x50\", \"0x58\"]);\nadd(\"dpx2\", [\"0x58\", \"0x50\", \"0x44\", \"0x53\"]);\nadd(\"exr\", [\"0x76\", \"0x2F\", \"0x31\", \"0x01\"]);\nadd(\"bpg\", [\"0x42\", \"0x50\", \"0x47\", \"0xFB\"]);\nadd(\"ilbm\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x49\",\n    \"0x4C\",\n    \"0x42\",\n    \"0x4D\",\n]);\nadd(\"8svx\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x38\",\n    \"0x53\",\n    \"0x56\",\n    \"0x58\",\n]);\nadd(\"acbm\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x41\",\n    \"0x43\",\n    \"0x42\",\n    \"0x4D\",\n]);\nadd(\"anbm\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x41\",\n    \"0x4E\",\n    \"0x42\",\n    \"0x4D\",\n]);\nadd(\"anim\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x41\",\n    \"0x4E\",\n    \"0x49\",\n    \"0x4D\",\n]);\nadd(\"faxx\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x46\",\n    \"0x41\",\n    \"0x58\",\n    \"0x58\",\n]);\nadd(\"ftxt\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x46\",\n    \"0x54\",\n    \"0x58\",\n    \"0x54\",\n]);\nadd(\"smus\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x53\",\n    \"0x4D\",\n    \"0x55\",\n    \"0x53\",\n]);\nadd(\"cmus\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x43\",\n    \"0x4D\",\n    \"0x55\",\n    \"0x53\",\n]);\nadd(\"yuvn\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x59\",\n    \"0x55\",\n    \"0x56\",\n    \"0x4E\",\n]);\nadd(\"iff\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x46\",\n    \"0x41\",\n    \"0x4E\",\n    \"0x54\",\n]);\nadd(\"aiff\", [\n    \"0x46\",\n    \"0x4F\",\n    \"0x52\",\n    \"0x4D\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x41\",\n    \"0x49\",\n    \"0x46\",\n    \"0x46\",\n], { mime: \"audio/x-aiff\", extension: \"aiff\" });\nadd(\"idx\", [\"0x49\", \"0x4E\", \"0x44\", \"0x58\"]);\nadd(\"lz\", [\"0x4C\", \"0x5A\", \"0x49\", \"0x50\"]);\nadd(\"exe\", [\"0x4D\", \"0x5A\"]);\nadd(\"zip\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/zip\",\n    extension: \"zip\",\n});\nadd(\"zip\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/zip\",\n    extension: \"zip\",\n});\nadd(\"zip\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/zip\",\n    extension: \"zip\",\n});\nadd(\"jar\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/java-archive\",\n    extension: \"jar\",\n});\nadd(\"jar\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/java-archive\",\n    extension: \"jar\",\n});\nadd(\"jar\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/java-archive\",\n    extension: \"jar\",\n});\nadd(\"odt\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.oasis.opendocument.text\",\n    extension: \"odt\",\n});\nadd(\"odt\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.oasis.opendocument.text\",\n    extension: \"odt\",\n});\nadd(\"odt\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.oasis.opendocument.text\",\n    extension: \"odt\",\n});\nadd(\"ods\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.oasis.opendocument.spreadsheet\",\n    extension: \"ods\",\n});\nadd(\"ods\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.oasis.opendocument.spreadsheet\",\n    extension: \"ods\",\n});\nadd(\"ods\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.oasis.opendocument.spreadsheet\",\n    extension: \"ods\",\n});\nadd(\"odp\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.oasis.opendocument.presentation\",\n    extension: \"odp\",\n});\nadd(\"odp\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.oasis.opendocument.presentation\",\n    extension: \"odp\",\n});\nadd(\"odp\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.oasis.opendocument.presentation\",\n    extension: \"odp\",\n});\nadd(\"docx\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    extension: \"docx\",\n});\nadd(\"docx\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    extension: \"docx\",\n});\nadd(\"docx\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\",\n    extension: \"docx\",\n});\nadd(\"xlsx\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    extension: \"xlsx\",\n});\nadd(\"xlsx\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    extension: \"xlsx\",\n});\nadd(\"xlsx\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n    extension: \"xlsx\",\n});\nadd(\"pptx\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n    extension: \"pptx\",\n});\nadd(\"pptx\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n    extension: \"pptx\",\n});\nadd(\"pptx\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.openxmlformats-officedocument.presentationml.presentation\",\n    extension: \"pptx\",\n});\nadd(\"vsdx\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.ms-visio.drawing\",\n    extension: \"vsdx\",\n});\nadd(\"vsdx\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.ms-visio.drawing\",\n    extension: \"vsdx\",\n});\nadd(\"vsdx\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.ms-visio.drawing\",\n    extension: \"vsdx\",\n});\nadd(\"apk\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.android.package-archive\",\n    extension: \"apk\",\n});\nadd(\"apk\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.android.package-archive\",\n    extension: \"apk\",\n});\nadd(\"apk\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.android.package-archive\",\n    extension: \"apk\",\n});\nadd(\"aar\", [\"0x50\", \"0x4B\", \"0x03\", \"0x04\"], {\n    mime: \"application/vnd.android.package-archive\",\n    extension: \"aar\",\n});\nadd(\"aar\", [\"0x50\", \"0x4B\", \"0x05\", \"0x06\"], {\n    mime: \"application/vnd.android.package-archive\",\n    extension: \"aar\",\n});\nadd(\"aar\", [\"0x50\", \"0x4B\", \"0x07\", \"0x08\"], {\n    mime: \"application/vnd.android.package-archive\",\n    extension: \"aar\",\n});\nadd(\"rar\", [\"0x52\", \"0x61\", \"0x72\", \"0x21\", \"0x1A\", \"0x07\", \"0x00\"], {\n    mime: \"application/vnd.rar\",\n    extension: \"rar\",\n});\nadd(\"rar\", [\"0x52\", \"0x61\", \"0x72\", \"0x21\", \"0x1A\", \"0x07\", \"0x01\", \"0x00\"], {\n    mime: \"application/vnd.rar\",\n    extension: \"rar\",\n});\nadd(\"rar\", [\"0x7F\", \"0x45\", \"0x4C\", \"0x46\"], {\n    mime: \"application/vnd.rar\",\n    extension: \"rar\",\n});\nadd(\"png\", [\"0x89\", \"0x50\", \"0x4E\", \"0x47\", \"0x0D\", \"0x0A\", \"0x1A\", \"0x0A\"], {\n    mime: \"image/png\",\n    extension: \"png\",\n});\nadd(\"apng\", [\"0x89\", \"0x50\", \"0x4E\", \"0x47\", \"0x0D\", \"0x0A\", \"0x1A\", \"0x0A\"], {\n    mime: \"image/apng\",\n    extension: \"apng\",\n});\nadd(\"class\", [\"0xCA\", \"0xFE\", \"0xBA\", \"0xBE\"]);\nadd(\"class\", [\"0xEF\", \"0xBB\", \"0xBF\"]);\nadd(\"class\", [\"0xFE\", \"0xed\", \"0xFA\", \"0xCE\"], undefined, 0x1000);\nadd(\"class\", [\"0xFE\", \"0xed\", \"0xFA\", \"0xCF\"], undefined, 0x1000);\nadd(\"class\", [\"0xCE\", \"0xFA\", \"0xed\", \"0xFE\"]);\nadd(\"class\", [\"0xCF\", \"0xFA\", \"0xed\", \"0xFE\"]);\nadd(\"class\", [\"0xFF\", \"0xFE\"]);\nadd(\"class\", [\"0xFF\", \"0xFE\"]);\nadd(\"class\", [\"0xFF\", \"0xFE\", \"0x00\", \"0x00\"]);\nadd(\"ps\", [\"0x25\", \"0x21\", \"0x50\", \"0x53\"], {\n    mime: \"application/postscript\",\n    extension: \".ps\"\n});\nadd(\"pdf\", [\"0x25\", \"0x50\", \"0x44\", \"0x46\"], {\n    mime: \"application/pdf\",\n    extension: \"pdf\",\n});\nadd(\"asf\", [\n    \"0x30\",\n    \"0x26\",\n    \"0xB2\",\n    \"0x75\",\n    \"0x8E\",\n    \"0x66\",\n    \"0xCF\",\n    \"0x11\",\n    \"0xA6\",\n    \"0xD9\",\n    \"0x00\",\n    \"0xAA\",\n    \"0x00\",\n    \"0x62\",\n    \"0xCE\",\n    \"0x6C\",\n]);\nadd(\"wma\", [\n    \"0x30\",\n    \"0x26\",\n    \"0xB2\",\n    \"0x75\",\n    \"0x8E\",\n    \"0x66\",\n    \"0xCF\",\n    \"0x11\",\n    \"0xA6\",\n    \"0xD9\",\n    \"0x00\",\n    \"0xAA\",\n    \"0x00\",\n    \"0x62\",\n    \"0xCE\",\n    \"0x6C\",\n]);\nadd(\"wmv\", [\n    \"0x30\",\n    \"0x26\",\n    \"0xB2\",\n    \"0x75\",\n    \"0x8E\",\n    \"0x66\",\n    \"0xCF\",\n    \"0x11\",\n    \"0xA6\",\n    \"0xD9\",\n    \"0x00\",\n    \"0xAA\",\n    \"0x00\",\n    \"0x62\",\n    \"0xCE\",\n    \"0x6C\",\n]);\nadd(\"deploymentimage\", [\n    \"0x24\",\n    \"0x53\",\n    \"0x44\",\n    \"0x49\",\n    \"0x30\",\n    \"0x30\",\n    \"0x30\",\n    \"0x31\",\n]);\n// ogg video ' theora'\nadd(\"ogv\", [\n    \"0x4F\",\n    \"0x67\",\n    \"0x67\",\n    \"0x53\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x80\",\n    \"0x74\",\n    \"0x68\",\n    \"0x65\",\n    \"0x6F\",\n    \"0x72\",\n    \"0x61\",\n], {\n    mime: \"video/ogg\",\n    extension: \"ogv\",\n});\n// ogg video '\\x01video'\nadd(\"ogm\", [\n    \"0x4F\",\n    \"0x67\",\n    \"0x67\",\n    \"0x53\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x01\",\n    \"0x76\",\n    \"0x69\",\n    \"0x64\",\n    \"0x65\",\n    \"0x6F\",\n    \"0x00\",\n], {\n    mime: \"video/ogg\",\n    extension: \"ogm\",\n});\n// ogg audio ' FLAC'\nadd(\"oga\", [\n    \"0x4F\",\n    \"0x67\",\n    \"0x67\",\n    \"0x53\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x7F\",\n    \"0x46\",\n    \"0x4C\",\n    \"0x41\",\n    \"0x43\",\n], {\n    mime: \"audio/ogg\",\n    extension: \"oga\",\n});\n// ogg audio 'Speex  '\nadd(\"spx\", [\n    \"0x4F\",\n    \"0x67\",\n    \"0x67\",\n    \"0x53\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x53\",\n    \"0x70\",\n    \"0x65\",\n    \"0x65\",\n    \"0x78\",\n    \"0x20\",\n    \"0x20\",\n], {\n    mime: \"audio/ogg\",\n    extension: \"spx\",\n});\n// ogg audio '\\x01vorbis '\nadd(\"ogg\", [\n    \"0x4F\",\n    \"0x67\",\n    \"0x67\",\n    \"0x53\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x01\",\n    \"0x76\",\n    \"0x6F\",\n    \"0x72\",\n    \"0x62\",\n    \"0x69\",\n    \"0x73\",\n], {\n    mime: \"audio/ogg\",\n    extension: \"ogg\",\n});\n// default OGG container\nadd(\"ogx\", [\"0x4F\", \"0x67\", \"0x67\", \"0x53\"], {\n    mime: \"application/ogg\",\n    extension: \"ogx\",\n});\nadd(\"psd\", [\"0x38\", \"0x42\", \"0x50\", \"0x53\"], {\n    mime: \"application/x-photoshop\",\n    extension: \"psd\",\n});\nadd(\"clip\", [\"0x43\", \"0x53\", \"0x46\", \"0x43\", \"0x48\", \"0x55\", \"0x4e\", \"0x4b\"]);\nadd(\"wav\", [\n    \"0x52\",\n    \"0x49\",\n    \"0x46\",\n    \"0x46\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x57\",\n    \"0x41\",\n    \"0x56\",\n    \"0x45\",\n], { mime: \"audio/x-wav\", extension: \"wav\" });\nadd(\"avi\", [\n    \"0x52\",\n    \"0x49\",\n    \"0x46\",\n    \"0x46\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"?\",\n    \"0x41\",\n    \"0x56\",\n    \"0x49\",\n    \"0x20\",\n], { mime: \"video/x-msvideo\", extension: \"avi\" });\nadd(\"mp3\", [\"0xFF\", \"0xFB\"], { mime: \"audio/mpeg\", extension: \"mp3\" });\nadd(\"mp3\", [\"0xFF\", \"0xF3\"], { mime: \"audio/mpeg\", extension: \"mp3\" });\nadd(\"mp3\", [\"0xFF\", \"0xF2\"], { mime: \"audio/mpeg\", extension: \"mp3\" });\nadd(\"mp3\", [\"0x49\", \"0x44\", \"0x33\"], { mime: \"audio/mpeg\", extension: \"mp3\" });\nadd(\"bmp\", [\"0x42\", \"0x4D\"], { mime: \"image/bmp\", extension: \"bmp\" });\nadd(\"iso\", [\"0x43\", \"0x44\", \"0x30\", \"0x30\", \"0x31\"]);\nadd(\"flac\", [\"0x66\", \"0x4C\", \"0x61\", \"0x43\"]);\nadd(\"mid\", [\"0x4D\", \"0x54\", \"0x68\", \"0x64\"], {\n    mime: \"audio/midi\",\n    extension: \"mid\",\n});\nadd(\"midi\", [\"0x4D\", \"0x54\", \"0x68\", \"0x64\"], {\n    mime: \"audio/midi\",\n    extension: \"midi\",\n});\nadd(\"doc\", [\"0xD0\", \"0xCF\", \"0x11\", \"0xE0\", \"0xA1\", \"0xB1\", \"0x1A\", \"0xE1\"], {\n    mime: \"application/msword\",\n    extension: \"doc\",\n});\nadd(\"xls\", [\"0xD0\", \"0xCF\", \"0x11\", \"0xE0\", \"0xA1\", \"0xB1\", \"0x1A\", \"0xE1\"], {\n    mime: \"application/vnd.ms-excel\",\n    extension: \"xls\",\n});\nadd(\"ppt\", [\"0xD0\", \"0xCF\", \"0x11\", \"0xE0\", \"0xA1\", \"0xB1\", \"0x1A\", \"0xE1\"], {\n    mime: \"application/vnd.ms-powerpoint\",\n    extension: \"ppt\",\n});\nadd(\"msg\", [\"0xD0\", \"0xCF\", \"0x11\", \"0xE0\", \"0xA1\", \"0xB1\", \"0x1A\", \"0xE1\"]);\nadd(\"dex\", [\"0x64\", \"0x65\", \"0x78\", \"0x0A\", \"0x30\", \"0x33\", \"0x35\", \"0x00\"]);\nadd(\"vmdk\", [\"0x4B\", \"0x44\", \"0x4D\"]);\nadd(\"crx\", [\"0x43\", \"0x72\", \"0x32\", \"0x34\"]);\nadd(\"fh8\", [\"0x41\", \"0x47\", \"0x44\", \"0x33\"]);\nadd(\"cwk\", [\n    \"0x05\",\n    \"0x07\",\n    \"0x00\",\n    \"0x00\",\n    \"0x42\",\n    \"0x4F\",\n    \"0x42\",\n    \"0x4F\",\n    \"0x05\",\n    \"0x07\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x01\",\n]);\nadd(\"cwk\", [\n    \"0x06\",\n    \"0x07\",\n    \"0xE1\",\n    \"0x00\",\n    \"0x42\",\n    \"0x4F\",\n    \"0x42\",\n    \"0x4F\",\n    \"0x06\",\n    \"0x07\",\n    \"0xE1\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x00\",\n    \"0x01\",\n]);\nadd(\"toast\", [\"0x45\", \"0x52\", \"0x02\", \"0x00\", \"0x00\", \"0x00\"]);\nadd(\"toast\", [\"0x8B\", \"0x45\", \"0x52\", \"0x02\", \"0x00\", \"0x00\", \"0x00\"]);\nadd(\"dmg\", [\"0x78\", \"0x01\", \"0x73\", \"0x0D\", \"0x62\", \"0x62\", \"0x60\"]);\nadd(\"xar\", [\"0x78\", \"0x61\", \"0x72\", \"0x21\"]);\nadd(\"dat\", [\"0x50\", \"0x4D\", \"0x4F\", \"0x43\", \"0x43\", \"0x4D\", \"0x4F\", \"0x43\"]);\nadd(\"nes\", [\"0x4E\", \"0x45\", \"0x53\", \"0x1A\"]);\nadd(\"tar\", [\"0x75\", \"0x73\", \"0x74\", \"0x61\", \"0x72\", \"0x00\", \"0x30\", \"0x30\"], {\n    // As per Mozilla documentation available at:\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types\n    // or wikipedia page:\n    // https://en.wikipedia.org/wiki/List_of_archive_formats\n    mime: \"application/x-tar\",\n    extension: \"tar\"\n}, 0x101);\nadd(\"tar\", [\"0x75\", \"0x73\", \"0x74\", \"0x61\", \"0x72\", \"0x20\", \"0x20\", \"0x00\"], {\n    mime: \"application/x-tar\",\n    extension: \"tar\"\n}, 0x101);\nadd(\"tox\", [\"0x74\", \"0x6F\", \"0x78\", \"0x33\"]);\nadd(\"mlv\", [\"0x4D\", \"0x4C\", \"0x56\", \"0x49\"]);\nadd(\"windowsupdate\", [\n    \"0x44\",\n    \"0x43\",\n    \"0x4D\",\n    \"0x01\",\n    \"0x50\",\n    \"0x41\",\n    \"0x33\",\n    \"0x30\",\n]);\nadd(\"7z\", [\"0x37\", \"0x7A\", \"0xBC\", \"0xAF\", \"0x27\", \"0x1C\"], {\n    mime: \"application/x-7z-compressed\",\n    extension: \"7z\",\n});\nadd(\"gz\", [\"0x1F\", \"0x8B\"], { mime: \"application/gzip\", extension: \"gz\" });\nadd(\"tar.gz\", [\"0x1F\", \"0x8B\"], {\n    mime: \"application/gzip\",\n    extension: \"tar.gz\",\n});\nadd(\"xz\", [\"0xFD\", \"0x37\", \"0x7A\", \"0x58\", \"0x5A\", \"0x00\", \"0x00\"], {\n    mime: \"application/gzip\",\n    extension: \"xz\",\n});\nadd(\"tar.xz\", [\"0xFD\", \"0x37\", \"0x7A\", \"0x58\", \"0x5A\", \"0x00\", \"0x00\"], {\n    mime: \"application/gzip\",\n    extension: \"tar.xz\",\n});\nadd(\"lz2\", [\"0x04\", \"0x22\", \"0x4D\", \"0x18\"]);\nadd(\"cab\", [\"0x4D\", \"0x53\", \"0x43\", \"0x46\"]);\nadd(\"mkv\", [\"0x1A\", \"0x45\", \"0xDF\", \"0xA3\"], {\n    mime: \"video/x-matroska\",\n    extension: \"mkv\",\n});\nadd(\"mka\", [\"0x1A\", \"0x45\", \"0xDF\", \"0xA3\"], {\n    mime: \"audio/x-matroska\",\n    extension: \"mka\",\n});\nadd(\"mks\", [\"0x1A\", \"0x45\", \"0xDF\", \"0xA3\"], {\n    mime: \"video/x-matroska\",\n    extension: \"mks\",\n});\nadd(\"mk3d\", [\"0x1A\", \"0x45\", \"0xDF\", \"0xA3\"]);\nadd(\"webm\", [\"0x1A\", \"0x45\", \"0xDF\", \"0xA3\"], {\n    mime: \"audio/webm\",\n    extension: \"webm\",\n});\nadd(\"dcm\", [\"0x44\", \"0x49\", \"0x43\", \"0x4D\"], undefined, 0x80);\nadd(\"xml\", [\"0x3C\", \"0x3f\", \"0x78\", \"0x6d\", \"0x6C\", \"0x20\"], {\n    mime: \"application/xml\",\n    extension: \"xml\",\n});\nadd(\"wasm\", [\"0x00\", \"0x61\", \"0x73\", \"0x6d\"], {\n    mime: \"application/wasm\",\n    extension: \"wasm\",\n});\nadd(\"lep\", [\"0xCF\", \"0x84\", \"0x01\"]);\nadd(\"swf\", [\"0x43\", \"0x57\", \"0x53\"], {\n    mime: \"application/x-shockwave-flash\",\n    extension: \"swf\",\n});\nadd(\"swf\", [\"0x46\", \"0x57\", \"0x53\"], {\n    mime: \"application/x-shockwave-flash\",\n    extension: \"swf\",\n});\nadd(\"deb\", [\"0x21\", \"0x3C\", \"0x61\", \"0x72\", \"0x63\", \"0x68\", \"0x3E\"]);\nadd(\"rtf\", [\"0x7B\", \"0x5C\", \"0x72\", \"0x74\", \"0x66\", \"0x31\"], {\n    mime: \"application/rtf\",\n    extension: \"rtf\",\n});\nadd(\"m2p\", [\"0x00\", \"0x00\", \"0x01\", \"0xBA\"]);\nadd(\"vob\", [\"0x00\", \"0x00\", \"0x01\", \"0xBA\"]);\nadd(\"mpg\", [\"0x00\", \"0x00\", \"0x01\", \"0xBA\"], {\n    mime: \"video/mpeg\",\n    extension: \"mpg\",\n});\nadd(\"mpeg\", [\"0x00\", \"0x00\", \"0x01\", \"0xBA\"], {\n    mime: \"video/mpeg\",\n    extension: \"mpeg\",\n});\nadd(\"mpeg\", [\"0x47\"], { mime: \"video/mpeg\", extension: \"mpeg\" });\nadd(\"mpeg\", [\"0x00\", \"0x00\", \"0x01\", \"0xB3\"], {\n    mime: \"video/mpeg\",\n    extension: \"mpeg\",\n});\n// mov 'free' TODO: find test file\nadd(\"mov\", [\"0x66\", \"0x72\", \"0x65\", \"0x65\"], {\n    mime: \"video/quicktime\",\n    extension: \"mov\",\n}, 0x4);\n// mov 'mdat'\nadd(\"mov\", [\"0x6D\", \"0x64\", \"0x61\", \"0x74\"], {\n    mime: \"video/quicktime\",\n    extension: \"mov\",\n}, 0x4);\n// mov 'moov' TODO: find test file\nadd(\"mov\", [\"0x6D\", \"0x6F\", \"0x6F\", \"0x76\"], {\n    mime: \"video/quicktime\",\n    extension: \"mov\",\n}, 0x4);\n// move 'wide' TODO: find test file\nadd(\"mov\", [\"0x77\", \"0x69\", \"0x64\", \"0x65\"], {\n    mime: \"video/quicktime\",\n    extension: \"mov\",\n}, 0x4);\n// mov 'ftypqt'\nadd(\"mov\", [\"0x66\", \"0x74\", \"0x79\", \"0x70\", \"0x71\", \"0x74\"], {\n    mime: \"video/quicktime\",\n    extension: \"mov\",\n}, 0x4);\nadd(\"hl2demo\", [\"0x48\", \"0x4C\", \"0x32\", \"0x44\", \"0x45\", \"0x4D\", \"0x4F\"]);\nadd(\"txt\", [\"0xEF\", \"0xBB\", \"0xBF\"], {\n    mime: \"text/plain; charset=UTF-8\",\n    extension: \"txt\",\n});\nadd(\"txt\", [\"0xFF\", \"0xFE\"], {\n    mime: \"text/plain; charset=UTF-16LE\",\n    extension: \"txt\",\n});\nadd(\"txt\", [\"0xFE\", \"0xFF\"], {\n    mime: \"text/plain; charset=UTF-16BE\",\n    extension: \"txt\",\n});\nadd(\"txt\", [\"0xFF\", \"0xFE\", \"0x00\", \"0x00\"], {\n    mime: \"text/plain; charset=UTF-32LE\",\n    extension: \"txt\",\n});\nadd(\"txt\", [\"0x00\", \"0x00\", \"0xFE\", \"0xFF\"], {\n    mime: \"text/plain; charset=UTF-32BE\",\n    extension: \"txt\",\n});\nadd(\"SubRip\", [\"0x31\", \"0x0D\", \"0x0A\", \"0x30\", \"0x30\", \"0x3A\"], {\n    mime: \"application/x-subrip\",\n    extension: \"srt\",\n});\nadd(\"WebVTT\", [\n    \"0xEF\",\n    \"0xBB\",\n    \"0xBF\",\n    \"0x57\",\n    \"0x45\",\n    \"0x42\",\n    \"0x56\",\n    \"0x54\",\n    \"0x54\",\n    \"0x0A\",\n], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\n    \"0xEF\",\n    \"0xBB\",\n    \"0xBF\",\n    \"0x57\",\n    \"0x45\",\n    \"0x42\",\n    \"0x56\",\n    \"0x54\",\n    \"0x54\",\n    \"0x0D\",\n], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\n    \"0xEF\",\n    \"0xBB\",\n    \"0xBF\",\n    \"0x57\",\n    \"0x45\",\n    \"0x42\",\n    \"0x56\",\n    \"0x54\",\n    \"0x54\",\n    \"0x20\",\n], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\n    \"0xEF\",\n    \"0xBB\",\n    \"0xBF\",\n    \"0x57\",\n    \"0x45\",\n    \"0x42\",\n    \"0x56\",\n    \"0x54\",\n    \"0x54\",\n    \"0x09\",\n], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\"0x57\", \"0x45\", \"0x42\", \"0x56\", \"0x54\", \"0x54\", \"0x0A\"], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\"0x57\", \"0x45\", \"0x42\", \"0x56\", \"0x54\", \"0x54\", \"0x0D\"], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\"0x57\", \"0x45\", \"0x42\", \"0x56\", \"0x54\", \"0x54\", \"0x20\"], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"WebVTT\", [\"0x57\", \"0x45\", \"0x42\", \"0x56\", \"0x54\", \"0x54\", \"0x09\"], {\n    mime: \"text/vtt\",\n    extension: \"vtt\",\n});\nadd(\"Json\", [\"0x7B\"], {\n    mime: \"application/json\",\n    extension: \".json\",\n});\nadd(\"Json\", [\"0x5B\"], {\n    mime: \"application/json\",\n    extension: \".json\",\n});\nadd(\"ELF\", [\"0x7F\", \"0x45\", \"0x4C\", \"0x46\"], {\n    mime: \"application/x-executable\",\n    extension: \".elf\",\n});\nadd(\"Mach-O\", [\"0xFE\", \"0xED\", \"0xFA\", \"0xC\"], {\n    mime: \"application/x-mach-binary\",\n    extension: \".o\",\n});\nadd(\"Mach-O\", [\"0xFE\", \"0xED\", \"0xFA\", \"0xCF\"], {\n    mime: \"application/x-executable\",\n    extension: \"elf\",\n});\nadd(\"EML\", [\"0x52\", \"0x65\", \"0x63\", \"0x65\", \"0x69\", \"0x76\", \"0x65\", \"0x64\", \"0x3A\"], {\n    mime: \"message/rfc822\",\n    extension: \".eml\",\n});\nadd(\"SVG\", [\"0x3c\", \"0x73\", \"0x76\", \"0x67\"], {\n    mime: \"image/svg+xml\",\n    extension: \"svg\",\n});\nexports.default = () => tree;\n",
    "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.filetypeextension = exports.filetypemime = exports.filetypename = exports.filetypeinfo = void 0;\nconst pattern_tree_1 = __importDefault(require(\"./model/pattern-tree\"));\nconst toHex_1 = require(\"./model/toHex\");\nconst patternTree = pattern_tree_1.default();\nconst filetypeinfo = (bytes) => {\n    let tree = patternTree;\n    for (const k of Object.keys(tree.offset)) {\n        const offset = toHex_1.fromHex(k);\n        const offsetExceedsFile = offset >= bytes.length;\n        if (offsetExceedsFile) {\n            continue;\n        }\n        const node = patternTree.offset[k];\n        const guessed = walkTree(offset, bytes, node);\n        if (guessed.length > 0) {\n            return guessed;\n        }\n    }\n    if (tree.noOffset === null) {\n        return [];\n    }\n    return walkTree(0, bytes, tree.noOffset);\n};\nexports.filetypeinfo = filetypeinfo;\nconst walkTree = (index, bytes, node) => {\n    let step = node;\n    let guessFile = [];\n    while (true) {\n        const currentByte = toHex_1.toHex(bytes[index]);\n        if (step.bytes[\"?\"] && !step.bytes[currentByte]) {\n            step = step.bytes[\"?\"];\n        }\n        else {\n            step = step.bytes[currentByte];\n        }\n        if (!step) {\n            return guessFile;\n        }\n        if (step && step.matches) {\n            guessFile = step.matches.slice(0);\n        }\n        index += 1;\n    }\n};\nexports.default = exports.filetypeinfo;\nconst filetypename = (bytes) => exports.filetypeinfo(bytes).map((e) => e.typename);\nexports.filetypename = filetypename;\nconst filetypemime = (bytes) => exports.filetypeinfo(bytes)\n    .map((e) => (e.mime ? e.mime : null))\n    .filter((x) => x !== null);\nexports.filetypemime = filetypemime;\nconst filetypeextension = (bytes) => exports.filetypeinfo(bytes)\n    .map((e) => (e.extension ? e.extension : null))\n    .filter((x) => x !== null);\nexports.filetypeextension = filetypeextension;\n",
    "'use strict';\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/lib/_AsyncQueueEntry.ts\nvar _AsyncQueueEntry = class _AsyncQueueEntry {\n  constructor(queue) {\n    __publicField(this, \"promise\");\n    __publicField(this, \"resolve\");\n    __publicField(this, \"reject\");\n    __publicField(this, \"queue\");\n    __publicField(this, \"signal\", null);\n    __publicField(this, \"signalListener\", null);\n    this.queue = queue;\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n  setSignal(signal) {\n    if (signal.aborted) return this;\n    this.signal = signal;\n    this.signalListener = () => {\n      const index = this.queue[\"promises\"].indexOf(this);\n      if (index !== -1) this.queue[\"promises\"].splice(index, 1);\n      this.reject(new Error(\"Request aborted manually\"));\n    };\n    this.signal.addEventListener(\"abort\", this.signalListener);\n    return this;\n  }\n  use() {\n    this.dispose();\n    this.resolve();\n    return this;\n  }\n  abort() {\n    this.dispose();\n    this.reject(new Error(\"Request aborted manually\"));\n    return this;\n  }\n  dispose() {\n    if (this.signal) {\n      this.signal.removeEventListener(\"abort\", this.signalListener);\n      this.signal = null;\n      this.signalListener = null;\n    }\n  }\n};\n__name(_AsyncQueueEntry, \"AsyncQueueEntry\");\nvar AsyncQueueEntry = _AsyncQueueEntry;\n\n// src/lib/AsyncQueue.ts\nvar _AsyncQueue = class _AsyncQueue {\n  constructor() {\n    /**\n     * The promises array\n     */\n    __publicField(this, \"promises\", []);\n  }\n  /**\n   * The amount of entries in the queue, including the head.\n   * @seealso {@link queued} for the queued count.\n   */\n  get remaining() {\n    return this.promises.length;\n  }\n  /**\n   * The amount of queued entries.\n   * @seealso {@link remaining} for the count with the head.\n   */\n  get queued() {\n    return this.remaining === 0 ? 0 : this.remaining - 1;\n  }\n  /**\n   * Waits for last promise and queues a new one\n   * @example\n   * ```typescript\n   * const queue = new AsyncQueue();\n   * async function request(url, options) {\n   *     await queue.wait({ signal: options.signal });\n   *     try {\n   *         const result = await fetch(url, options);\n   *         // Do some operations with 'result'\n   *     } finally {\n   *         // Remove first entry from the queue and resolve for the next entry\n   *         queue.shift();\n   *     }\n   * }\n   *\n   * request(someUrl1, someOptions1); // Will call fetch() immediately\n   * request(someUrl2, someOptions2); // Will call fetch() after the first finished\n   * request(someUrl3, someOptions3); // Will call fetch() after the second finished\n   * ```\n   */\n  wait(options) {\n    const entry = new AsyncQueueEntry(this);\n    if (this.promises.length === 0) {\n      this.promises.push(entry);\n      return Promise.resolve();\n    }\n    this.promises.push(entry);\n    if (options?.signal) entry.setSignal(options.signal);\n    return entry.promise;\n  }\n  /**\n   * Unlocks the head lock and transfers the next lock (if any) to the head.\n   */\n  shift() {\n    if (this.promises.length === 0) return;\n    if (this.promises.length === 1) {\n      this.promises.shift();\n      return;\n    }\n    this.promises.shift();\n    this.promises[0].use();\n  }\n  /**\n   * Aborts all the pending promises.\n   * @note To avoid race conditions, this does **not** unlock the head lock.\n   */\n  abortAll() {\n    if (this.queued === 0) return;\n    for (let i = 1; i < this.promises.length; ++i) {\n      this.promises[i].abort();\n    }\n    this.promises.length = 1;\n  }\n};\n__name(_AsyncQueue, \"AsyncQueue\");\nvar AsyncQueue = _AsyncQueue;\n\nexports.AsyncQueue = AsyncQueue;\n//# sourceMappingURL=index.cjs.map\n//# sourceMappingURL=index.cjs.map",
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ALLOWED_EXTENSIONS: () => ALLOWED_EXTENSIONS,\n  ALLOWED_SIZES: () => ALLOWED_SIZES,\n  ALLOWED_STICKER_EXTENSIONS: () => ALLOWED_STICKER_EXTENSIONS,\n  BurstHandlerMajorIdKey: () => BurstHandlerMajorIdKey,\n  CDN: () => CDN,\n  DEPRECATION_WARNING_PREFIX: () => DEPRECATION_WARNING_PREFIX,\n  DefaultRestOptions: () => DefaultRestOptions,\n  DefaultUserAgent: () => DefaultUserAgent,\n  DefaultUserAgentAppendix: () => DefaultUserAgentAppendix,\n  DiscordAPIError: () => DiscordAPIError,\n  HTTPError: () => HTTPError,\n  OverwrittenMimeTypes: () => OverwrittenMimeTypes,\n  REST: () => REST,\n  RESTEvents: () => RESTEvents,\n  RateLimitError: () => RateLimitError,\n  RequestMethod: () => RequestMethod,\n  calculateUserDefaultAvatarIndex: () => calculateUserDefaultAvatarIndex,\n  makeURLSearchParams: () => makeURLSearchParams,\n  parseResponse: () => parseResponse,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_node_buffer = require(\"buffer\");\nvar import_util2 = require(\"@discordjs/util\");\nvar import_undici2 = require(\"undici\");\n\n// src/environment.ts\nvar defaultStrategy;\nfunction setDefaultStrategy(newStrategy) {\n  defaultStrategy = newStrategy;\n}\n__name(setDefaultStrategy, \"setDefaultStrategy\");\nfunction getDefaultStrategy() {\n  return defaultStrategy;\n}\n__name(getDefaultStrategy, \"getDefaultStrategy\");\n\n// src/strategies/undiciRequest.ts\nvar import_node_http = require(\"http\");\nvar import_node_url = require(\"url\");\nvar import_node_util = require(\"util\");\nvar import_undici = require(\"undici\");\nasync function makeRequest(url, init) {\n  const options = {\n    ...init,\n    body: await resolveBody(init.body)\n  };\n  const res = await (0, import_undici.request)(url, options);\n  return {\n    body: res.body,\n    async arrayBuffer() {\n      return res.body.arrayBuffer();\n    },\n    async json() {\n      return res.body.json();\n    },\n    async text() {\n      return res.body.text();\n    },\n    get bodyUsed() {\n      return res.body.bodyUsed;\n    },\n    headers: new import_undici.Headers(res.headers),\n    status: res.statusCode,\n    statusText: import_node_http.STATUS_CODES[res.statusCode],\n    ok: res.statusCode >= 200 && res.statusCode < 300\n  };\n}\n__name(makeRequest, \"makeRequest\");\nasync function resolveBody(body) {\n  if (body == null) {\n    return null;\n  } else if (typeof body === \"string\") {\n    return body;\n  } else if (import_node_util.types.isUint8Array(body)) {\n    return body;\n  } else if (import_node_util.types.isArrayBuffer(body)) {\n    return new Uint8Array(body);\n  } else if (body instanceof import_node_url.URLSearchParams) {\n    return body.toString();\n  } else if (body instanceof DataView) {\n    return new Uint8Array(body.buffer);\n  } else if (body instanceof Blob) {\n    return new Uint8Array(await body.arrayBuffer());\n  } else if (body instanceof FormData) {\n    return body;\n  } else if (body[Symbol.iterator]) {\n    const chunks = [...body];\n    return Buffer.concat(chunks);\n  } else if (body[Symbol.asyncIterator]) {\n    const chunks = [];\n    for await (const chunk of body) {\n      chunks.push(chunk);\n    }\n    return Buffer.concat(chunks);\n  }\n  throw new TypeError(`Unable to resolve body.`);\n}\n__name(resolveBody, \"resolveBody\");\n\n// src/lib/utils/constants.ts\nvar import_util = require(\"@discordjs/util\");\nvar import_v10 = require(\"discord-api-types/v10\");\nvar DefaultUserAgent = `DiscordBot (https://discord.js.org, 2.4.3)`;\nvar DefaultUserAgentAppendix = (0, import_util.getUserAgentAppendix)();\nvar DefaultRestOptions = {\n  agent: null,\n  api: \"https://discord.com/api\",\n  authPrefix: \"Bot\",\n  cdn: \"https://cdn.discordapp.com\",\n  headers: {},\n  invalidRequestWarningInterval: 0,\n  globalRequestsPerSecond: 50,\n  offset: 50,\n  rejectOnRateLimit: null,\n  retries: 3,\n  timeout: 15e3,\n  userAgentAppendix: DefaultUserAgentAppendix,\n  version: import_v10.APIVersion,\n  hashSweepInterval: 144e5,\n  // 4 Hours\n  hashLifetime: 864e5,\n  // 24 Hours\n  handlerSweepInterval: 36e5,\n  // 1 Hour\n  async makeRequest(...args) {\n    return getDefaultStrategy()(...args);\n  },\n  mediaProxy: \"https://media.discordapp.net\"\n};\nvar RESTEvents = /* @__PURE__ */ ((RESTEvents2) => {\n  RESTEvents2[\"Debug\"] = \"restDebug\";\n  RESTEvents2[\"HandlerSweep\"] = \"handlerSweep\";\n  RESTEvents2[\"HashSweep\"] = \"hashSweep\";\n  RESTEvents2[\"InvalidRequestWarning\"] = \"invalidRequestWarning\";\n  RESTEvents2[\"RateLimited\"] = \"rateLimited\";\n  RESTEvents2[\"Response\"] = \"response\";\n  return RESTEvents2;\n})(RESTEvents || {});\nvar ALLOWED_EXTENSIONS = [\"webp\", \"png\", \"jpg\", \"jpeg\", \"gif\"];\nvar ALLOWED_STICKER_EXTENSIONS = [\"png\", \"json\", \"gif\"];\nvar ALLOWED_SIZES = [16, 32, 64, 128, 256, 512, 1024, 2048, 4096];\nvar OverwrittenMimeTypes = {\n  // https://github.com/discordjs/discord.js/issues/8557\n  \"image/apng\": \"image/png\"\n};\nvar BurstHandlerMajorIdKey = \"burst\";\nvar DEPRECATION_WARNING_PREFIX = \"DeprecationWarning\";\n\n// src/lib/errors/RateLimitError.ts\nvar RateLimitError = class _RateLimitError extends Error {\n  static {\n    __name(this, \"RateLimitError\");\n  }\n  timeToReset;\n  limit;\n  method;\n  hash;\n  url;\n  route;\n  majorParameter;\n  global;\n  retryAfter;\n  sublimitTimeout;\n  scope;\n  constructor({\n    timeToReset,\n    limit,\n    method,\n    hash,\n    url,\n    route,\n    majorParameter,\n    global,\n    retryAfter,\n    sublimitTimeout,\n    scope\n  }) {\n    super();\n    this.timeToReset = timeToReset;\n    this.limit = limit;\n    this.method = method;\n    this.hash = hash;\n    this.url = url;\n    this.route = route;\n    this.majorParameter = majorParameter;\n    this.global = global;\n    this.retryAfter = retryAfter;\n    this.sublimitTimeout = sublimitTimeout;\n    this.scope = scope;\n  }\n  /**\n   * The name of the error\n   */\n  get name() {\n    return `${_RateLimitError.name}[${this.route}]`;\n  }\n};\n\n// src/lib/utils/types.ts\nvar RequestMethod = /* @__PURE__ */ ((RequestMethod2) => {\n  RequestMethod2[\"Delete\"] = \"DELETE\";\n  RequestMethod2[\"Get\"] = \"GET\";\n  RequestMethod2[\"Patch\"] = \"PATCH\";\n  RequestMethod2[\"Post\"] = \"POST\";\n  RequestMethod2[\"Put\"] = \"PUT\";\n  return RequestMethod2;\n})(RequestMethod || {});\n\n// src/lib/utils/utils.ts\nfunction serializeSearchParam(value) {\n  switch (typeof value) {\n    case \"string\":\n      return value;\n    case \"number\":\n    case \"bigint\":\n    case \"boolean\":\n      return value.toString();\n    case \"object\":\n      if (value === null) return null;\n      if (value instanceof Date) {\n        return Number.isNaN(value.getTime()) ? null : value.toISOString();\n      }\n      if (typeof value.toString === \"function\" && value.toString !== Object.prototype.toString) return value.toString();\n      return null;\n    default:\n      return null;\n  }\n}\n__name(serializeSearchParam, \"serializeSearchParam\");\nfunction makeURLSearchParams(options) {\n  const params = new URLSearchParams();\n  if (!options) return params;\n  for (const [key, value] of Object.entries(options)) {\n    const serialized = serializeSearchParam(value);\n    if (serialized !== null) params.append(key, serialized);\n  }\n  return params;\n}\n__name(makeURLSearchParams, \"makeURLSearchParams\");\nasync function parseResponse(res) {\n  if (res.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n    return res.json();\n  }\n  return res.arrayBuffer();\n}\n__name(parseResponse, \"parseResponse\");\nfunction hasSublimit(bucketRoute, body, method) {\n  if (bucketRoute === \"/channels/:id\") {\n    if (typeof body !== \"object\" || body === null) return false;\n    if (method !== \"PATCH\" /* Patch */) return false;\n    const castedBody = body;\n    return [\"name\", \"topic\"].some((key) => Reflect.has(castedBody, key));\n  }\n  return true;\n}\n__name(hasSublimit, \"hasSublimit\");\nfunction shouldRetry(error) {\n  if (error.name === \"AbortError\") return true;\n  return \"code\" in error && error.code === \"ECONNRESET\" || error.message.includes(\"ECONNRESET\");\n}\n__name(shouldRetry, \"shouldRetry\");\nasync function onRateLimit(manager, rateLimitData) {\n  const { options } = manager;\n  if (!options.rejectOnRateLimit) return;\n  const shouldThrow = typeof options.rejectOnRateLimit === \"function\" ? await options.rejectOnRateLimit(rateLimitData) : options.rejectOnRateLimit.some((route) => rateLimitData.route.startsWith(route.toLowerCase()));\n  if (shouldThrow) {\n    throw new RateLimitError(rateLimitData);\n  }\n}\n__name(onRateLimit, \"onRateLimit\");\nfunction calculateUserDefaultAvatarIndex(userId) {\n  return Number(BigInt(userId) >> 22n) % 6;\n}\n__name(calculateUserDefaultAvatarIndex, \"calculateUserDefaultAvatarIndex\");\nasync function sleep(ms) {\n  return new Promise((resolve) => {\n    setTimeout(() => resolve(), ms);\n  });\n}\n__name(sleep, \"sleep\");\nfunction isBufferLike(value) {\n  return value instanceof ArrayBuffer || value instanceof Uint8Array || value instanceof Uint8ClampedArray;\n}\n__name(isBufferLike, \"isBufferLike\");\nfunction deprecationWarning(message) {\n  if (typeof globalThis.process === \"undefined\") {\n    console.warn(`${DEPRECATION_WARNING_PREFIX}: ${message}`);\n  } else {\n    process.emitWarning(message, DEPRECATION_WARNING_PREFIX);\n  }\n}\n__name(deprecationWarning, \"deprecationWarning\");\nfunction normalizeRateLimitOffset(offset, route) {\n  if (typeof offset === \"number\") {\n    return Math.max(0, offset);\n  }\n  const result = offset(route);\n  return Math.max(0, result);\n}\n__name(normalizeRateLimitOffset, \"normalizeRateLimitOffset\");\n\n// src/lib/CDN.ts\nvar deprecationEmittedForEmoji = false;\nvar CDN = class {\n  constructor(cdn = DefaultRestOptions.cdn, mediaProxy = DefaultRestOptions.mediaProxy) {\n    this.cdn = cdn;\n    this.mediaProxy = mediaProxy;\n  }\n  static {\n    __name(this, \"CDN\");\n  }\n  /**\n   * Generates an app asset URL for a client's asset.\n   *\n   * @param clientId - The client id that has the asset\n   * @param assetHash - The hash provided by Discord for this asset\n   * @param options - Optional options for the asset\n   */\n  appAsset(clientId, assetHash, options) {\n    return this.makeURL(`/app-assets/${clientId}/${assetHash}`, options);\n  }\n  /**\n   * Generates an app icon URL for a client's icon.\n   *\n   * @param clientId - The client id that has the icon\n   * @param iconHash - The hash provided by Discord for this icon\n   * @param options - Optional options for the icon\n   */\n  appIcon(clientId, iconHash, options) {\n    return this.makeURL(`/app-icons/${clientId}/${iconHash}`, options);\n  }\n  /**\n   * Generates an avatar URL, e.g. for a user or a webhook.\n   *\n   * @param id - The id that has the icon\n   * @param avatarHash - The hash provided by Discord for this avatar\n   * @param options - Optional options for the avatar\n   */\n  avatar(id, avatarHash, options) {\n    return this.dynamicMakeURL(`/avatars/${id}/${avatarHash}`, avatarHash, options);\n  }\n  avatarDecoration(userIdOrAsset, userAvatarDecoration, options) {\n    if (userAvatarDecoration) {\n      return this.makeURL(`/avatar-decorations/${userIdOrAsset}/${userAvatarDecoration}`, options);\n    }\n    return this.makeURL(`/avatar-decoration-presets/${userIdOrAsset}`, { extension: \"png\" });\n  }\n  /**\n   * Generates a banner URL, e.g. for a user or a guild.\n   *\n   * @param id - The id that has the banner splash\n   * @param bannerHash - The hash provided by Discord for this banner\n   * @param options - Optional options for the banner\n   */\n  banner(id, bannerHash, options) {\n    return this.dynamicMakeURL(`/banners/${id}/${bannerHash}`, bannerHash, options);\n  }\n  /**\n   * Generates an icon URL for a channel, e.g. a group DM.\n   *\n   * @param channelId - The channel id that has the icon\n   * @param iconHash - The hash provided by Discord for this channel\n   * @param options - Optional options for the icon\n   */\n  channelIcon(channelId, iconHash, options) {\n    return this.makeURL(`/channel-icons/${channelId}/${iconHash}`, options);\n  }\n  /**\n   * Generates a default avatar URL\n   *\n   * @param index - The default avatar index\n   * @remarks\n   * To calculate the index for a user do `(userId >> 22) % 6`,\n   * or `discriminator % 5` if they're using the legacy username system.\n   */\n  defaultAvatar(index) {\n    return this.makeURL(`/embed/avatars/${index}`, { extension: \"png\" });\n  }\n  /**\n   * Generates a discovery splash URL for a guild's discovery splash.\n   *\n   * @param guildId - The guild id that has the discovery splash\n   * @param splashHash - The hash provided by Discord for this splash\n   * @param options - Optional options for the splash\n   */\n  discoverySplash(guildId, splashHash, options) {\n    return this.makeURL(`/discovery-splashes/${guildId}/${splashHash}`, options);\n  }\n  emoji(emojiId, options) {\n    let resolvedOptions;\n    if (typeof options === \"string\") {\n      if (!deprecationEmittedForEmoji) {\n        deprecationWarning(\n          \"Passing a string for the second parameter of CDN#emoji() is deprecated. Use an object instead.\"\n        );\n        deprecationEmittedForEmoji = true;\n      }\n      resolvedOptions = { extension: options };\n    } else {\n      resolvedOptions = options;\n    }\n    return this.makeURL(`/emojis/${emojiId}`, resolvedOptions);\n  }\n  /**\n   * Generates a guild member avatar URL.\n   *\n   * @param guildId - The id of the guild\n   * @param userId - The id of the user\n   * @param avatarHash - The hash provided by Discord for this avatar\n   * @param options - Optional options for the avatar\n   */\n  guildMemberAvatar(guildId, userId, avatarHash, options) {\n    return this.dynamicMakeURL(`/guilds/${guildId}/users/${userId}/avatars/${avatarHash}`, avatarHash, options);\n  }\n  /**\n   * Generates a guild member banner URL.\n   *\n   * @param guildId - The id of the guild\n   * @param userId - The id of the user\n   * @param bannerHash - The hash provided by Discord for this banner\n   * @param options - Optional options for the banner\n   */\n  guildMemberBanner(guildId, userId, bannerHash, options) {\n    return this.dynamicMakeURL(`/guilds/${guildId}/users/${userId}/banners/${bannerHash}`, bannerHash, options);\n  }\n  /**\n   * Generates an icon URL, e.g. for a guild.\n   *\n   * @param id - The id that has the icon splash\n   * @param iconHash - The hash provided by Discord for this icon\n   * @param options - Optional options for the icon\n   */\n  icon(id, iconHash, options) {\n    return this.dynamicMakeURL(`/icons/${id}/${iconHash}`, iconHash, options);\n  }\n  /**\n   * Generates a URL for the icon of a role\n   *\n   * @param roleId - The id of the role that has the icon\n   * @param roleIconHash - The hash provided by Discord for this role icon\n   * @param options - Optional options for the role icon\n   */\n  roleIcon(roleId, roleIconHash, options) {\n    return this.makeURL(`/role-icons/${roleId}/${roleIconHash}`, options);\n  }\n  /**\n   * Generates a guild invite splash URL for a guild's invite splash.\n   *\n   * @param guildId - The guild id that has the invite splash\n   * @param splashHash - The hash provided by Discord for this splash\n   * @param options - Optional options for the splash\n   */\n  splash(guildId, splashHash, options) {\n    return this.makeURL(`/splashes/${guildId}/${splashHash}`, options);\n  }\n  /**\n   * Generates a sticker URL.\n   *\n   * @param stickerId - The sticker id\n   * @param extension - The extension of the sticker\n   * @privateRemarks\n   * Stickers cannot have a `.webp` extension, so we default to a `.png`.\n   * Sticker GIFs do not use the CDN base URL.\n   */\n  sticker(stickerId, extension = \"png\") {\n    return this.makeURL(`/stickers/${stickerId}`, {\n      allowedExtensions: ALLOWED_STICKER_EXTENSIONS,\n      base: extension === \"gif\" ? this.mediaProxy : this.cdn,\n      extension\n    });\n  }\n  /**\n   * Generates a sticker pack banner URL.\n   *\n   * @param bannerId - The banner id\n   * @param options - Optional options for the banner\n   */\n  stickerPackBanner(bannerId, options) {\n    return this.makeURL(`/app-assets/710982414301790216/store/${bannerId}`, options);\n  }\n  /**\n   * Generates a team icon URL for a team's icon.\n   *\n   * @param teamId - The team id that has the icon\n   * @param iconHash - The hash provided by Discord for this icon\n   * @param options - Optional options for the icon\n   */\n  teamIcon(teamId, iconHash, options) {\n    return this.makeURL(`/team-icons/${teamId}/${iconHash}`, options);\n  }\n  /**\n   * Generates a cover image for a guild scheduled event.\n   *\n   * @param scheduledEventId - The scheduled event id\n   * @param coverHash - The hash provided by discord for this cover image\n   * @param options - Optional options for the cover image\n   */\n  guildScheduledEventCover(scheduledEventId, coverHash, options) {\n    return this.makeURL(`/guild-events/${scheduledEventId}/${coverHash}`, options);\n  }\n  /**\n   * Constructs the URL for the resource, checking whether or not `hash` starts with `a_` if `dynamic` is set to `true`.\n   *\n   * @param route - The base cdn route\n   * @param hash - The hash provided by Discord for this icon\n   * @param options - Optional options for the link\n   */\n  dynamicMakeURL(route, hash, { forceStatic = false, ...options } = {}) {\n    return this.makeURL(route, !forceStatic && hash.startsWith(\"a_\") ? { ...options, extension: \"gif\" } : options);\n  }\n  /**\n   * Constructs the URL for the resource\n   *\n   * @param route - The base cdn route\n   * @param options - The extension/size options for the link\n   */\n  makeURL(route, {\n    allowedExtensions = ALLOWED_EXTENSIONS,\n    base = this.cdn,\n    extension = \"webp\",\n    size\n  } = {}) {\n    extension = String(extension).toLowerCase();\n    if (!allowedExtensions.includes(extension)) {\n      throw new RangeError(`Invalid extension provided: ${extension}\nMust be one of: ${allowedExtensions.join(\", \")}`);\n    }\n    if (size && !ALLOWED_SIZES.includes(size)) {\n      throw new RangeError(`Invalid size provided: ${size}\nMust be one of: ${ALLOWED_SIZES.join(\", \")}`);\n    }\n    const url = new URL(`${base}${route}.${extension}`);\n    if (size) {\n      url.searchParams.set(\"size\", String(size));\n    }\n    return url.toString();\n  }\n};\n\n// src/lib/errors/DiscordAPIError.ts\nfunction isErrorGroupWrapper(error) {\n  return Reflect.has(error, \"_errors\");\n}\n__name(isErrorGroupWrapper, \"isErrorGroupWrapper\");\nfunction isErrorResponse(error) {\n  return typeof Reflect.get(error, \"message\") === \"string\";\n}\n__name(isErrorResponse, \"isErrorResponse\");\nvar DiscordAPIError = class _DiscordAPIError extends Error {\n  /**\n   * @param rawError - The error reported by Discord\n   * @param code - The error code reported by Discord\n   * @param status - The status code of the response\n   * @param method - The method of the request that erred\n   * @param url - The url of the request that erred\n   * @param bodyData - The unparsed data for the request that errored\n   */\n  constructor(rawError, code, status, method, url, bodyData) {\n    super(_DiscordAPIError.getMessage(rawError));\n    this.rawError = rawError;\n    this.code = code;\n    this.status = status;\n    this.method = method;\n    this.url = url;\n    this.requestBody = { files: bodyData.files, json: bodyData.body };\n  }\n  static {\n    __name(this, \"DiscordAPIError\");\n  }\n  requestBody;\n  /**\n   * The name of the error\n   */\n  get name() {\n    return `${_DiscordAPIError.name}[${this.code}]`;\n  }\n  static getMessage(error) {\n    let flattened = \"\";\n    if (\"code\" in error) {\n      if (error.errors) {\n        flattened = [...this.flattenDiscordError(error.errors)].join(\"\\n\");\n      }\n      return error.message && flattened ? `${error.message}\n${flattened}` : error.message || flattened || \"Unknown Error\";\n    }\n    return error.error_description ?? \"No Description\";\n  }\n  static *flattenDiscordError(obj, key = \"\") {\n    if (isErrorResponse(obj)) {\n      return yield `${key.length ? `${key}[${obj.code}]` : `${obj.code}`}: ${obj.message}`.trim();\n    }\n    for (const [otherKey, val] of Object.entries(obj)) {\n      const nextKey = otherKey.startsWith(\"_\") ? key : key ? Number.isNaN(Number(otherKey)) ? `${key}.${otherKey}` : `${key}[${otherKey}]` : otherKey;\n      if (typeof val === \"string\") {\n        yield val;\n      } else if (isErrorGroupWrapper(val)) {\n        for (const error of val._errors) {\n          yield* this.flattenDiscordError(error, nextKey);\n        }\n      } else {\n        yield* this.flattenDiscordError(val, nextKey);\n      }\n    }\n  }\n};\n\n// src/lib/errors/HTTPError.ts\nvar HTTPError = class _HTTPError extends Error {\n  /**\n   * @param status - The status code of the response\n   * @param statusText - The status text of the response\n   * @param method - The method of the request that erred\n   * @param url - The url of the request that erred\n   * @param bodyData - The unparsed data for the request that errored\n   */\n  constructor(status, statusText, method, url, bodyData) {\n    super(statusText);\n    this.status = status;\n    this.method = method;\n    this.url = url;\n    this.requestBody = { files: bodyData.files, json: bodyData.body };\n  }\n  static {\n    __name(this, \"HTTPError\");\n  }\n  requestBody;\n  name = _HTTPError.name;\n};\n\n// src/lib/REST.ts\nvar import_collection = require(\"@discordjs/collection\");\nvar import_snowflake = require(\"@sapphire/snowflake\");\nvar import_async_event_emitter = require(\"@vladfrangu/async_event_emitter\");\nvar import_magic_bytes = require(\"magic-bytes.js\");\n\n// src/lib/handlers/Shared.ts\nvar invalidCount = 0;\nvar invalidCountResetTime = null;\nfunction incrementInvalidCount(manager) {\n  if (!invalidCountResetTime || invalidCountResetTime < Date.now()) {\n    invalidCountResetTime = Date.now() + 1e3 * 60 * 10;\n    invalidCount = 0;\n  }\n  invalidCount++;\n  const emitInvalid = manager.options.invalidRequestWarningInterval > 0 && invalidCount % manager.options.invalidRequestWarningInterval === 0;\n  if (emitInvalid) {\n    manager.emit(\"invalidRequestWarning\" /* InvalidRequestWarning */, {\n      count: invalidCount,\n      remainingTime: invalidCountResetTime - Date.now()\n    });\n  }\n}\n__name(incrementInvalidCount, \"incrementInvalidCount\");\nasync function makeNetworkRequest(manager, routeId, url, options, requestData, retries) {\n  const controller = new AbortController();\n  const timeout = setTimeout(() => controller.abort(), manager.options.timeout);\n  if (requestData.signal) {\n    if (requestData.signal.aborted) controller.abort();\n    else requestData.signal.addEventListener(\"abort\", () => controller.abort());\n  }\n  let res;\n  try {\n    res = await manager.options.makeRequest(url, { ...options, signal: controller.signal });\n  } catch (error) {\n    if (!(error instanceof Error)) throw error;\n    if (shouldRetry(error) && retries !== manager.options.retries) {\n      return null;\n    }\n    throw error;\n  } finally {\n    clearTimeout(timeout);\n  }\n  if (manager.listenerCount(\"response\" /* Response */)) {\n    manager.emit(\n      \"response\" /* Response */,\n      {\n        method: options.method ?? \"get\",\n        path: routeId.original,\n        route: routeId.bucketRoute,\n        options,\n        data: requestData,\n        retries\n      },\n      res instanceof Response ? res.clone() : { ...res }\n    );\n  }\n  return res;\n}\n__name(makeNetworkRequest, \"makeNetworkRequest\");\nasync function handleErrors(manager, res, method, url, requestData, retries) {\n  const status = res.status;\n  if (status >= 500 && status < 600) {\n    if (retries !== manager.options.retries) {\n      return null;\n    }\n    throw new HTTPError(status, res.statusText, method, url, requestData);\n  } else {\n    if (status >= 400 && status < 500) {\n      if (status === 401 && requestData.auth) {\n        manager.setToken(null);\n      }\n      const data = await parseResponse(res);\n      throw new DiscordAPIError(data, \"code\" in data ? data.code : data.error, status, method, url, requestData);\n    }\n    return res;\n  }\n}\n__name(handleErrors, \"handleErrors\");\n\n// src/lib/handlers/BurstHandler.ts\nvar BurstHandler = class {\n  /**\n   * @param manager - The request manager\n   * @param hash - The hash that this RequestHandler handles\n   * @param majorParameter - The major parameter for this handler\n   */\n  constructor(manager, hash, majorParameter) {\n    this.manager = manager;\n    this.hash = hash;\n    this.majorParameter = majorParameter;\n    this.id = `${hash}:${majorParameter}`;\n  }\n  static {\n    __name(this, \"BurstHandler\");\n  }\n  /**\n   * {@inheritdoc IHandler.id}\n   */\n  id;\n  /**\n   * {@inheritDoc IHandler.inactive}\n   */\n  inactive = false;\n  /**\n   * Emits a debug message\n   *\n   * @param message - The message to debug\n   */\n  debug(message) {\n    this.manager.emit(\"restDebug\" /* Debug */, `[REST ${this.id}] ${message}`);\n  }\n  /**\n   * {@inheritDoc IHandler.queueRequest}\n   */\n  async queueRequest(routeId, url, options, requestData) {\n    return this.runRequest(routeId, url, options, requestData);\n  }\n  /**\n   * The method that actually makes the request to the API, and updates info about the bucket accordingly\n   *\n   * @param routeId - The generalized API route with literal ids for major parameters\n   * @param url - The fully resolved URL to make the request to\n   * @param options - The fetch options needed to make the request\n   * @param requestData - Extra data from the user's request needed for errors and additional processing\n   * @param retries - The number of retries this request has already attempted (recursion)\n   */\n  async runRequest(routeId, url, options, requestData, retries = 0) {\n    const method = options.method ?? \"get\";\n    const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);\n    if (res === null) {\n      return this.runRequest(routeId, url, options, requestData, ++retries);\n    }\n    const status = res.status;\n    let retryAfter = 0;\n    const retry = res.headers.get(\"Retry-After\");\n    const offset = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);\n    if (retry) retryAfter = Number(retry) * 1e3 + offset;\n    if (status === 401 || status === 403 || status === 429) {\n      incrementInvalidCount(this.manager);\n    }\n    if (status >= 200 && status < 300) {\n      return res;\n    } else if (status === 429) {\n      const isGlobal = res.headers.has(\"X-RateLimit-Global\");\n      const scope = res.headers.get(\"X-RateLimit-Scope\") ?? \"user\";\n      await onRateLimit(this.manager, {\n        global: isGlobal,\n        method,\n        url,\n        route: routeId.bucketRoute,\n        majorParameter: this.majorParameter,\n        hash: this.hash,\n        limit: Number.POSITIVE_INFINITY,\n        timeToReset: retryAfter,\n        retryAfter,\n        sublimitTimeout: 0,\n        scope\n      });\n      this.debug(\n        [\n          \"Encountered unexpected 429 rate limit\",\n          `  Global         : ${isGlobal}`,\n          `  Method         : ${method}`,\n          `  URL            : ${url}`,\n          `  Bucket         : ${routeId.bucketRoute}`,\n          `  Major parameter: ${routeId.majorParameter}`,\n          `  Hash           : ${this.hash}`,\n          `  Limit          : ${Number.POSITIVE_INFINITY}`,\n          `  Retry After    : ${retryAfter}ms`,\n          `  Sublimit       : None`,\n          `  Scope          : ${scope}`\n        ].join(\"\\n\")\n      );\n      await sleep(retryAfter);\n      return this.runRequest(routeId, url, options, requestData, retries);\n    } else {\n      const handled = await handleErrors(this.manager, res, method, url, requestData, retries);\n      if (handled === null) {\n        return this.runRequest(routeId, url, options, requestData, ++retries);\n      }\n      return handled;\n    }\n  }\n};\n\n// src/lib/handlers/SequentialHandler.ts\nvar import_async_queue = require(\"@sapphire/async-queue\");\nvar SequentialHandler = class {\n  /**\n   * @param manager - The request manager\n   * @param hash - The hash that this RequestHandler handles\n   * @param majorParameter - The major parameter for this handler\n   */\n  constructor(manager, hash, majorParameter) {\n    this.manager = manager;\n    this.hash = hash;\n    this.majorParameter = majorParameter;\n    this.id = `${hash}:${majorParameter}`;\n  }\n  static {\n    __name(this, \"SequentialHandler\");\n  }\n  /**\n   * {@inheritDoc IHandler.id}\n   */\n  id;\n  /**\n   * The time this rate limit bucket will reset\n   */\n  reset = -1;\n  /**\n   * The remaining requests that can be made before we are rate limited\n   */\n  remaining = 1;\n  /**\n   * The total number of requests that can be made before we are rate limited\n   */\n  limit = Number.POSITIVE_INFINITY;\n  /**\n   * The interface used to sequence async requests sequentially\n   */\n  #asyncQueue = new import_async_queue.AsyncQueue();\n  /**\n   * The interface used to sequence sublimited async requests sequentially\n   */\n  #sublimitedQueue = null;\n  /**\n   * A promise wrapper for when the sublimited queue is finished being processed or null when not being processed\n   */\n  #sublimitPromise = null;\n  /**\n   * Whether the sublimit queue needs to be shifted in the finally block\n   */\n  #shiftSublimit = false;\n  /**\n   * {@inheritDoc IHandler.inactive}\n   */\n  get inactive() {\n    return this.#asyncQueue.remaining === 0 && (this.#sublimitedQueue === null || this.#sublimitedQueue.remaining === 0) && !this.limited;\n  }\n  /**\n   * If the rate limit bucket is currently limited by the global limit\n   */\n  get globalLimited() {\n    return this.manager.globalRemaining <= 0 && Date.now() < this.manager.globalReset;\n  }\n  /**\n   * If the rate limit bucket is currently limited by its limit\n   */\n  get localLimited() {\n    return this.remaining <= 0 && Date.now() < this.reset;\n  }\n  /**\n   * If the rate limit bucket is currently limited\n   */\n  get limited() {\n    return this.globalLimited || this.localLimited;\n  }\n  /**\n   * The time until queued requests can continue\n   */\n  getTimeToReset(routeId) {\n    const offset = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);\n    return this.reset + offset - Date.now();\n  }\n  /**\n   * Emits a debug message\n   *\n   * @param message - The message to debug\n   */\n  debug(message) {\n    this.manager.emit(\"restDebug\" /* Debug */, `[REST ${this.id}] ${message}`);\n  }\n  /**\n   * Delay all requests for the specified amount of time, handling global rate limits\n   *\n   * @param time - The amount of time to delay all requests for\n   */\n  async globalDelayFor(time) {\n    await sleep(time);\n    this.manager.globalDelay = null;\n  }\n  /**\n   * {@inheritDoc IHandler.queueRequest}\n   */\n  async queueRequest(routeId, url, options, requestData) {\n    let queue = this.#asyncQueue;\n    let queueType = 0 /* Standard */;\n    if (this.#sublimitedQueue && hasSublimit(routeId.bucketRoute, requestData.body, options.method)) {\n      queue = this.#sublimitedQueue;\n      queueType = 1 /* Sublimit */;\n    }\n    await queue.wait({ signal: requestData.signal });\n    if (queueType === 0 /* Standard */) {\n      if (this.#sublimitedQueue && hasSublimit(routeId.bucketRoute, requestData.body, options.method)) {\n        queue = this.#sublimitedQueue;\n        const wait = queue.wait();\n        this.#asyncQueue.shift();\n        await wait;\n      } else if (this.#sublimitPromise) {\n        await this.#sublimitPromise.promise;\n      }\n    }\n    try {\n      return await this.runRequest(routeId, url, options, requestData);\n    } finally {\n      queue.shift();\n      if (this.#shiftSublimit) {\n        this.#shiftSublimit = false;\n        this.#sublimitedQueue?.shift();\n      }\n      if (this.#sublimitedQueue?.remaining === 0) {\n        this.#sublimitPromise?.resolve();\n        this.#sublimitedQueue = null;\n      }\n    }\n  }\n  /**\n   * The method that actually makes the request to the api, and updates info about the bucket accordingly\n   *\n   * @param routeId - The generalized api route with literal ids for major parameters\n   * @param url - The fully resolved url to make the request to\n   * @param options - The fetch options needed to make the request\n   * @param requestData - Extra data from the user's request needed for errors and additional processing\n   * @param retries - The number of retries this request has already attempted (recursion)\n   */\n  async runRequest(routeId, url, options, requestData, retries = 0) {\n    while (this.limited) {\n      const isGlobal = this.globalLimited;\n      let limit2;\n      let timeout;\n      let delay;\n      if (isGlobal) {\n        const offset2 = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);\n        limit2 = this.manager.options.globalRequestsPerSecond;\n        timeout = this.manager.globalReset + offset2 - Date.now();\n        if (!this.manager.globalDelay) {\n          this.manager.globalDelay = this.globalDelayFor(timeout);\n        }\n        delay = this.manager.globalDelay;\n      } else {\n        limit2 = this.limit;\n        timeout = this.getTimeToReset(routeId);\n        delay = sleep(timeout);\n      }\n      const rateLimitData = {\n        global: isGlobal,\n        method: options.method ?? \"get\",\n        url,\n        route: routeId.bucketRoute,\n        majorParameter: this.majorParameter,\n        hash: this.hash,\n        limit: limit2,\n        timeToReset: timeout,\n        retryAfter: timeout,\n        sublimitTimeout: 0,\n        scope: \"user\"\n      };\n      this.manager.emit(\"rateLimited\" /* RateLimited */, rateLimitData);\n      await onRateLimit(this.manager, rateLimitData);\n      if (isGlobal) {\n        this.debug(`Global rate limit hit, blocking all requests for ${timeout}ms`);\n      } else {\n        this.debug(`Waiting ${timeout}ms for rate limit to pass`);\n      }\n      await delay;\n    }\n    if (!this.manager.globalReset || this.manager.globalReset < Date.now()) {\n      this.manager.globalReset = Date.now() + 1e3;\n      this.manager.globalRemaining = this.manager.options.globalRequestsPerSecond;\n    }\n    this.manager.globalRemaining--;\n    const method = options.method ?? \"get\";\n    const res = await makeNetworkRequest(this.manager, routeId, url, options, requestData, retries);\n    if (res === null) {\n      return this.runRequest(routeId, url, options, requestData, ++retries);\n    }\n    const status = res.status;\n    let retryAfter = 0;\n    const limit = res.headers.get(\"X-RateLimit-Limit\");\n    const remaining = res.headers.get(\"X-RateLimit-Remaining\");\n    const reset = res.headers.get(\"X-RateLimit-Reset-After\");\n    const hash = res.headers.get(\"X-RateLimit-Bucket\");\n    const retry = res.headers.get(\"Retry-After\");\n    const scope = res.headers.get(\"X-RateLimit-Scope\") ?? \"user\";\n    const offset = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);\n    this.limit = limit ? Number(limit) : Number.POSITIVE_INFINITY;\n    this.remaining = remaining ? Number(remaining) : 1;\n    this.reset = reset ? Number(reset) * 1e3 + Date.now() + offset : Date.now();\n    if (retry) retryAfter = Number(retry) * 1e3 + offset;\n    if (hash && hash !== this.hash) {\n      this.debug([\"Received bucket hash update\", `  Old Hash  : ${this.hash}`, `  New Hash  : ${hash}`].join(\"\\n\"));\n      this.manager.hashes.set(`${method}:${routeId.bucketRoute}`, { value: hash, lastAccess: Date.now() });\n    } else if (hash) {\n      const hashData = this.manager.hashes.get(`${method}:${routeId.bucketRoute}`);\n      if (hashData) {\n        hashData.lastAccess = Date.now();\n      }\n    }\n    let sublimitTimeout = null;\n    if (retryAfter > 0) {\n      if (res.headers.has(\"X-RateLimit-Global\")) {\n        this.manager.globalRemaining = 0;\n        this.manager.globalReset = Date.now() + retryAfter;\n      } else if (!this.localLimited) {\n        sublimitTimeout = retryAfter;\n      }\n    }\n    if (status === 401 || status === 403 || status === 429) {\n      incrementInvalidCount(this.manager);\n    }\n    if (res.ok) {\n      return res;\n    } else if (status === 429) {\n      const isGlobal = this.globalLimited;\n      let limit2;\n      let timeout;\n      if (isGlobal) {\n        const offset2 = normalizeRateLimitOffset(this.manager.options.offset, routeId.bucketRoute);\n        limit2 = this.manager.options.globalRequestsPerSecond;\n        timeout = this.manager.globalReset + offset2 - Date.now();\n      } else {\n        limit2 = this.limit;\n        timeout = this.getTimeToReset(routeId);\n      }\n      await onRateLimit(this.manager, {\n        global: isGlobal,\n        method,\n        url,\n        route: routeId.bucketRoute,\n        majorParameter: this.majorParameter,\n        hash: this.hash,\n        limit: limit2,\n        timeToReset: timeout,\n        retryAfter,\n        sublimitTimeout: sublimitTimeout ?? 0,\n        scope\n      });\n      this.debug(\n        [\n          \"Encountered unexpected 429 rate limit\",\n          `  Global         : ${isGlobal.toString()}`,\n          `  Method         : ${method}`,\n          `  URL            : ${url}`,\n          `  Bucket         : ${routeId.bucketRoute}`,\n          `  Major parameter: ${routeId.majorParameter}`,\n          `  Hash           : ${this.hash}`,\n          `  Limit          : ${limit2}`,\n          `  Retry After    : ${retryAfter}ms`,\n          `  Sublimit       : ${sublimitTimeout ? `${sublimitTimeout}ms` : \"None\"}`,\n          `  Scope          : ${scope}`\n        ].join(\"\\n\")\n      );\n      if (sublimitTimeout) {\n        const firstSublimit = !this.#sublimitedQueue;\n        if (firstSublimit) {\n          this.#sublimitedQueue = new import_async_queue.AsyncQueue();\n          void this.#sublimitedQueue.wait();\n          this.#asyncQueue.shift();\n        }\n        this.#sublimitPromise?.resolve();\n        this.#sublimitPromise = null;\n        await sleep(sublimitTimeout);\n        let resolve;\n        const promise = new Promise((res2) => resolve = res2);\n        this.#sublimitPromise = { promise, resolve };\n        if (firstSublimit) {\n          await this.#asyncQueue.wait();\n          this.#shiftSublimit = true;\n        }\n      }\n      return this.runRequest(routeId, url, options, requestData, retries);\n    } else {\n      const handled = await handleErrors(this.manager, res, method, url, requestData, retries);\n      if (handled === null) {\n        return this.runRequest(routeId, url, options, requestData, ++retries);\n      }\n      return handled;\n    }\n  }\n};\n\n// src/lib/REST.ts\nvar REST = class _REST extends import_async_event_emitter.AsyncEventEmitter {\n  static {\n    __name(this, \"REST\");\n  }\n  /**\n   * The {@link https://undici.nodejs.org/#/docs/api/Agent | Agent} for all requests\n   * performed by this manager.\n   */\n  agent = null;\n  cdn;\n  /**\n   * The number of requests remaining in the global bucket\n   */\n  globalRemaining;\n  /**\n   * The promise used to wait out the global rate limit\n   */\n  globalDelay = null;\n  /**\n   * The timestamp at which the global bucket resets\n   */\n  globalReset = -1;\n  /**\n   * API bucket hashes that are cached from provided routes\n   */\n  hashes = new import_collection.Collection();\n  /**\n   * Request handlers created from the bucket hash and the major parameters\n   */\n  handlers = new import_collection.Collection();\n  #token = null;\n  hashTimer;\n  handlerTimer;\n  options;\n  constructor(options = {}) {\n    super();\n    this.cdn = new CDN(options.cdn ?? DefaultRestOptions.cdn, options.mediaProxy ?? DefaultRestOptions.mediaProxy);\n    this.options = { ...DefaultRestOptions, ...options };\n    this.globalRemaining = Math.max(1, this.options.globalRequestsPerSecond);\n    this.agent = options.agent ?? null;\n    this.setupSweepers();\n  }\n  setupSweepers() {\n    const validateMaxInterval = /* @__PURE__ */ __name((interval) => {\n      if (interval > 144e5) {\n        throw new Error(\"Cannot set an interval greater than 4 hours\");\n      }\n    }, \"validateMaxInterval\");\n    if (this.options.hashSweepInterval !== 0 && this.options.hashSweepInterval !== Number.POSITIVE_INFINITY) {\n      validateMaxInterval(this.options.hashSweepInterval);\n      this.hashTimer = setInterval(() => {\n        const sweptHashes = new import_collection.Collection();\n        const currentDate = Date.now();\n        this.hashes.sweep((val, key) => {\n          if (val.lastAccess === -1) return false;\n          const shouldSweep = Math.floor(currentDate - val.lastAccess) > this.options.hashLifetime;\n          if (shouldSweep) {\n            sweptHashes.set(key, val);\n            this.emit(\"restDebug\" /* Debug */, `Hash ${val.value} for ${key} swept due to lifetime being exceeded`);\n          }\n          return shouldSweep;\n        });\n        this.emit(\"hashSweep\" /* HashSweep */, sweptHashes);\n      }, this.options.hashSweepInterval);\n      this.hashTimer.unref?.();\n    }\n    if (this.options.handlerSweepInterval !== 0 && this.options.handlerSweepInterval !== Number.POSITIVE_INFINITY) {\n      validateMaxInterval(this.options.handlerSweepInterval);\n      this.handlerTimer = setInterval(() => {\n        const sweptHandlers = new import_collection.Collection();\n        this.handlers.sweep((val, key) => {\n          const { inactive } = val;\n          if (inactive) {\n            sweptHandlers.set(key, val);\n            this.emit(\"restDebug\" /* Debug */, `Handler ${val.id} for ${key} swept due to being inactive`);\n          }\n          return inactive;\n        });\n        this.emit(\"handlerSweep\" /* HandlerSweep */, sweptHandlers);\n      }, this.options.handlerSweepInterval);\n      this.handlerTimer.unref?.();\n    }\n  }\n  /**\n   * Runs a get request from the api\n   *\n   * @param fullRoute - The full route to query\n   * @param options - Optional request options\n   */\n  async get(fullRoute, options = {}) {\n    return this.request({ ...options, fullRoute, method: \"GET\" /* Get */ });\n  }\n  /**\n   * Runs a delete request from the api\n   *\n   * @param fullRoute - The full route to query\n   * @param options - Optional request options\n   */\n  async delete(fullRoute, options = {}) {\n    return this.request({ ...options, fullRoute, method: \"DELETE\" /* Delete */ });\n  }\n  /**\n   * Runs a post request from the api\n   *\n   * @param fullRoute - The full route to query\n   * @param options - Optional request options\n   */\n  async post(fullRoute, options = {}) {\n    return this.request({ ...options, fullRoute, method: \"POST\" /* Post */ });\n  }\n  /**\n   * Runs a put request from the api\n   *\n   * @param fullRoute - The full route to query\n   * @param options - Optional request options\n   */\n  async put(fullRoute, options = {}) {\n    return this.request({ ...options, fullRoute, method: \"PUT\" /* Put */ });\n  }\n  /**\n   * Runs a patch request from the api\n   *\n   * @param fullRoute - The full route to query\n   * @param options - Optional request options\n   */\n  async patch(fullRoute, options = {}) {\n    return this.request({ ...options, fullRoute, method: \"PATCH\" /* Patch */ });\n  }\n  /**\n   * Runs a request from the api\n   *\n   * @param options - Request options\n   */\n  async request(options) {\n    const response = await this.queueRequest(options);\n    return parseResponse(response);\n  }\n  /**\n   * Sets the default agent to use for requests performed by this manager\n   *\n   * @param agent - The agent to use\n   */\n  setAgent(agent) {\n    this.agent = agent;\n    return this;\n  }\n  /**\n   * Sets the authorization token that should be used for requests\n   *\n   * @param token - The authorization token to use\n   */\n  setToken(token) {\n    this.#token = token;\n    return this;\n  }\n  /**\n   * Queues a request to be sent\n   *\n   * @param request - All the information needed to make a request\n   * @returns The response from the api request\n   */\n  async queueRequest(request2) {\n    const routeId = _REST.generateRouteData(request2.fullRoute, request2.method);\n    const hash = this.hashes.get(`${request2.method}:${routeId.bucketRoute}`) ?? {\n      value: `Global(${request2.method}:${routeId.bucketRoute})`,\n      lastAccess: -1\n    };\n    const handler = this.handlers.get(`${hash.value}:${routeId.majorParameter}`) ?? this.createHandler(hash.value, routeId.majorParameter);\n    const { url, fetchOptions } = await this.resolveRequest(request2);\n    return handler.queueRequest(routeId, url, fetchOptions, {\n      body: request2.body,\n      files: request2.files,\n      auth: request2.auth !== false,\n      signal: request2.signal\n    });\n  }\n  /**\n   * Creates a new rate limit handler from a hash, based on the hash and the major parameter\n   *\n   * @param hash - The hash for the route\n   * @param majorParameter - The major parameter for this handler\n   * @internal\n   */\n  createHandler(hash, majorParameter) {\n    const queue = majorParameter === BurstHandlerMajorIdKey ? new BurstHandler(this, hash, majorParameter) : new SequentialHandler(this, hash, majorParameter);\n    this.handlers.set(queue.id, queue);\n    return queue;\n  }\n  /**\n   * Formats the request data to a usable format for fetch\n   *\n   * @param request - The request data\n   */\n  async resolveRequest(request2) {\n    const { options } = this;\n    let query = \"\";\n    if (request2.query) {\n      const resolvedQuery = request2.query.toString();\n      if (resolvedQuery !== \"\") {\n        query = `?${resolvedQuery}`;\n      }\n    }\n    const headers = {\n      ...this.options.headers,\n      \"User-Agent\": `${DefaultUserAgent} ${options.userAgentAppendix}`.trim()\n    };\n    if (request2.auth !== false) {\n      if (!this.#token) {\n        throw new Error(\"Expected token to be set for this request, but none was present\");\n      }\n      headers.Authorization = `${request2.authPrefix ?? this.options.authPrefix} ${this.#token}`;\n    }\n    if (request2.reason?.length) {\n      headers[\"X-Audit-Log-Reason\"] = encodeURIComponent(request2.reason);\n    }\n    const url = `${options.api}${request2.versioned === false ? \"\" : `/v${options.version}`}${request2.fullRoute}${query}`;\n    let finalBody;\n    let additionalHeaders = {};\n    if (request2.files?.length) {\n      const formData = new FormData();\n      for (const [index, file] of request2.files.entries()) {\n        const fileKey = file.key ?? `files[${index}]`;\n        if (isBufferLike(file.data)) {\n          let contentType = file.contentType;\n          if (!contentType) {\n            const [parsedType] = (0, import_magic_bytes.filetypeinfo)(file.data);\n            if (parsedType) {\n              contentType = OverwrittenMimeTypes[parsedType.mime] ?? parsedType.mime ?? \"application/octet-stream\";\n            }\n          }\n          formData.append(fileKey, new Blob([file.data], { type: contentType }), file.name);\n        } else {\n          formData.append(fileKey, new Blob([`${file.data}`], { type: file.contentType }), file.name);\n        }\n      }\n      if (request2.body != null) {\n        if (request2.appendToFormData) {\n          for (const [key, value] of Object.entries(request2.body)) {\n            formData.append(key, value);\n          }\n        } else {\n          formData.append(\"payload_json\", JSON.stringify(request2.body));\n        }\n      }\n      finalBody = formData;\n    } else if (request2.body != null) {\n      if (request2.passThroughBody) {\n        finalBody = request2.body;\n      } else {\n        finalBody = JSON.stringify(request2.body);\n        additionalHeaders = { \"Content-Type\": \"application/json\" };\n      }\n    }\n    const method = request2.method.toUpperCase();\n    const fetchOptions = {\n      // Set body to null on get / head requests. This does not follow fetch spec (likely because it causes subtle bugs) but is aligned with what request was doing\n      body: [\"GET\", \"HEAD\"].includes(method) ? null : finalBody,\n      headers: { ...request2.headers, ...additionalHeaders, ...headers },\n      method,\n      // Prioritize setting an agent per request, use the agent for this instance otherwise.\n      dispatcher: request2.dispatcher ?? this.agent ?? void 0\n    };\n    return { url, fetchOptions };\n  }\n  /**\n   * Stops the hash sweeping interval\n   */\n  clearHashSweeper() {\n    clearInterval(this.hashTimer);\n  }\n  /**\n   * Stops the request handler sweeping interval\n   */\n  clearHandlerSweeper() {\n    clearInterval(this.handlerTimer);\n  }\n  /**\n   * Generates route data for an endpoint:method\n   *\n   * @param endpoint - The raw endpoint to generalize\n   * @param method - The HTTP method this endpoint is called without\n   * @internal\n   */\n  static generateRouteData(endpoint, method) {\n    if (endpoint.startsWith(\"/interactions/\") && endpoint.endsWith(\"/callback\")) {\n      return {\n        majorParameter: BurstHandlerMajorIdKey,\n        bucketRoute: \"/interactions/:id/:token/callback\",\n        original: endpoint\n      };\n    }\n    const majorIdMatch = /(?:^\\/webhooks\\/(\\d{17,19}\\/[^/?]+))|(?:^\\/(?:channels|guilds|webhooks)\\/(\\d{17,19}))/.exec(\n      endpoint\n    );\n    const majorId = majorIdMatch?.[2] ?? majorIdMatch?.[1] ?? \"global\";\n    const baseRoute = endpoint.replaceAll(/\\d{17,19}/g, \":id\").replace(/\\/reactions\\/(.*)/, \"/reactions/:reaction\").replace(/\\/webhooks\\/:id\\/[^/?]+/, \"/webhooks/:id/:token\");\n    let exceptions = \"\";\n    if (method === \"DELETE\" /* Delete */ && baseRoute === \"/channels/:id/messages/:id\") {\n      const id = /\\d{17,19}$/.exec(endpoint)[0];\n      const timestamp = import_snowflake.DiscordSnowflake.timestampFrom(id);\n      if (Date.now() - timestamp > 1e3 * 60 * 60 * 24 * 14) {\n        exceptions += \"/Delete Old Message\";\n      }\n    }\n    return {\n      majorParameter: majorId,\n      bucketRoute: baseRoute + exceptions,\n      original: endpoint\n    };\n  }\n};\n\n// src/shared.ts\nvar version = \"2.4.3\";\n\n// src/index.ts\nglobalThis.FormData ??= import_undici2.FormData;\nglobalThis.Blob ??= import_node_buffer.Blob;\nsetDefaultStrategy((0, import_util2.shouldUseGlobalFetchAndWebSocket)() ? fetch : makeRequest);\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ALLOWED_EXTENSIONS,\n  ALLOWED_SIZES,\n  ALLOWED_STICKER_EXTENSIONS,\n  BurstHandlerMajorIdKey,\n  CDN,\n  DEPRECATION_WARNING_PREFIX,\n  DefaultRestOptions,\n  DefaultUserAgent,\n  DefaultUserAgentAppendix,\n  DiscordAPIError,\n  HTTPError,\n  OverwrittenMimeTypes,\n  REST,\n  RESTEvents,\n  RateLimitError,\n  RequestMethod,\n  calculateUserDefaultAvatarIndex,\n  makeURLSearchParams,\n  parseResponse,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\n/**\n * @typedef {Object} DiscordjsErrorCodes\n\n * @property {'ClientInvalidOption'} ClientInvalidOption\n * @property {'ClientInvalidProvidedShards'} ClientInvalidProvidedShards\n * @property {'ClientMissingIntents'} ClientMissingIntents\n * @property {'ClientNotReady'} ClientNotReady\n\n * @property {'TokenInvalid'} TokenInvalid\n * @property {'TokenMissing'} TokenMissing\n * @property {'ApplicationCommandPermissionsTokenMissing'} ApplicationCommandPermissionsTokenMissing\n\n * @property {'WSCloseRequested'} WSCloseRequested\n * <warn>This property is deprecated.</warn>\n * @property {'WSConnectionExists'} WSConnectionExists\n * <warn>This property is deprecated.</warn>\n * @property {'WSNotOpen'} WSNotOpen\n * <warn>This property is deprecated.</warn>\n * @property {'ManagerDestroyed'} ManagerDestroyed\n * <warn>This property is deprecated.</warn>\n\n * @property {'BitFieldInvalid'} BitFieldInvalid\n\n * @property {'ShardingInvalid'} ShardingInvalid\n * <warn>This property is deprecated.</warn>\n * @property {'ShardingRequired'} ShardingRequired\n * <warn>This property is deprecated.</warn>\n * @property {'InvalidIntents'} InvalidIntents\n * <warn>This property is deprecated.</warn>\n * @property {'DisallowedIntents'} DisallowedIntents\n * <warn>This property is deprecated.</warn>\n * @property {'ShardingNoShards'} ShardingNoShards\n * @property {'ShardingInProcess'} ShardingInProcess\n * @property {'ShardingInvalidEvalBroadcast'} ShardingInvalidEvalBroadcast\n * @property {'ShardingShardNotFound'} ShardingShardNotFound\n * @property {'ShardingAlreadySpawned'} ShardingAlreadySpawned\n * @property {'ShardingProcessExists'} ShardingProcessExists\n * @property {'ShardingWorkerExists'} ShardingWorkerExists\n * @property {'ShardingReadyTimeout'} ShardingReadyTimeout\n * @property {'ShardingReadyDisconnected'} ShardingReadyDisconnected\n * @property {'ShardingReadyDied'} ShardingReadyDied\n * @property {'ShardingNoChildExists'} ShardingNoChildExists\n * @property {'ShardingShardMiscalculation'} ShardingShardMiscalculation\n\n * @property {'ColorRange'} ColorRange\n * @property {'ColorConvert'} ColorConvert\n\n * @property {'InviteOptionsMissingChannel'} InviteOptionsMissingChannel\n\n * @property {'ButtonLabel'} ButtonLabel\n * <warn>This property is deprecated.</warn>\n * @property {'ButtonURL'} ButtonURL\n * <warn>This property is deprecated.</warn>\n * @property {'ButtonCustomId'} ButtonCustomId\n * <warn>This property is deprecated.</warn>\n\n * @property {'SelectMenuCustomId'} SelectMenuCustomId\n * <warn>This property is deprecated.</warn>\n * @property {'SelectMenuPlaceholder'} SelectMenuPlaceholder\n * <warn>This property is deprecated.</warn>\n * @property {'SelectOptionLabel'} SelectOptionLabel\n * <warn>This property is deprecated.</warn>\n * @property {'SelectOptionValue'} SelectOptionValue\n * <warn>This property is deprecated.</warn>\n * @property {'SelectOptionDescription'} SelectOptionDescription\n * <warn>This property is deprecated.</warn>\n\n * @property {'InteractionCollectorError'} InteractionCollectorError\n\n * @property {'FileNotFound'} FileNotFound\n\n * @property {'UserBannerNotFetched'} UserBannerNotFetched\n * <warn>This property is deprecated.</warn>\n * @property {'UserNoDMChannel'} UserNoDMChannel\n\n * @property {'VoiceNotStageChannel'} VoiceNotStageChannel\n\n * @property {'VoiceStateNotOwn'} VoiceStateNotOwn\n * @property {'VoiceStateInvalidType'} VoiceStateInvalidType\n\n * @property {'ReqResourceType'} ReqResourceType\n\n * @property {'ImageFormat'} ImageFormat\n * <warn>This property is deprecated.</warn>\n * @property {'ImageSize'} ImageSize\n * <warn>This property is deprecated.</warn>\n\n * @property {'MessageBulkDeleteType'} MessageBulkDeleteType\n * @property {'MessageContentType'} MessageContentType\n * @property {'MessageNonceRequired'} MessageNonceRequired\n * @property {'MessageNonceType'} MessageNonceType\n\n * @property {'SplitMaxLen'} SplitMaxLen\n * <warn>This property is deprecated.</warn>\n\n * @property {'BanResolveId'} BanResolveId\n * @property {'FetchBanResolveId'} FetchBanResolveId\n\n * @property {'PruneDaysType'} PruneDaysType\n\n * @property {'GuildChannelResolve'} GuildChannelResolve\n * @property {'GuildVoiceChannelResolve'} GuildVoiceChannelResolve\n * @property {'GuildChannelOrphan'} GuildChannelOrphan\n * @property {'GuildChannelUnowned'} GuildChannelUnowned\n * @property {'GuildOwned'} GuildOwned\n * @property {'GuildMembersTimeout'} GuildMembersTimeout\n * @property {'GuildUncachedMe'} GuildUncachedMe\n * @property {'ChannelNotCached'} ChannelNotCached\n * @property {'StageChannelResolve'} StageChannelResolve\n * @property {'GuildScheduledEventResolve'} GuildScheduledEventResolve\n * @property {'FetchOwnerId'} FetchOwnerId\n\n * @property {'InvalidType'} InvalidType\n * @property {'InvalidElement'} InvalidElement\n\n * @property {'MessageThreadParent'} MessageThreadParent\n * @property {'MessageExistingThread'} MessageExistingThread\n * @property {'ThreadInvitableType'} ThreadInvitableType\n\n * @property {'WebhookMessage'} WebhookMessage\n * @property {'WebhookTokenUnavailable'} WebhookTokenUnavailable\n * @property {'WebhookURLInvalid'} WebhookURLInvalid\n * @property {'WebhookApplication'} WebhookApplication\n * @property {'MessageReferenceMissing'} MessageReferenceMissing\n\n * @property {'EmojiType'} EmojiType\n * @property {'EmojiManaged'} EmojiManaged\n * @property {'MissingManageGuildExpressionsPermission'} MissingManageGuildExpressionsPermission\n * @property {'MissingManageEmojisAndStickersPermission'} MissingManageEmojisAndStickersPermission\n * <warn>This property is deprecated. Use `MissingManageGuildExpressionsPermission` instead.</warn>\n *\n * @property {'NotGuildSticker'} NotGuildSticker\n\n * @property {'ReactionResolveUser'} ReactionResolveUser\n\n * @property {'VanityURL'} VanityURL\n * <warn>This property is deprecated.</warn>\n\n * @property {'InviteResolveCode'} InviteResolveCode\n\n * @property {'InviteNotFound'} InviteNotFound\n\n * @property {'DeleteGroupDMChannel'} DeleteGroupDMChannel\n * @property {'FetchGroupDMChannel'} FetchGroupDMChannel\n\n * @property {'MemberFetchNonceLength'} MemberFetchNonceLength\n\n * @property {'GlobalCommandPermissions'} GlobalCommandPermissions\n * @property {'GuildUncachedEntityResolve'} GuildUncachedEntityResolve\n\n * @property {'InteractionAlreadyReplied'} InteractionAlreadyReplied\n * @property {'InteractionNotReplied'} InteractionNotReplied\n * @property {'InteractionEphemeralReplied'} InteractionEphemeralReplied\n * <warn>This property is deprecated.</warn>\n\n * @property {'CommandInteractionOptionNotFound'} CommandInteractionOptionNotFound\n * @property {'CommandInteractionOptionType'} CommandInteractionOptionType\n * @property {'CommandInteractionOptionEmpty'} CommandInteractionOptionEmpty\n * @property {'CommandInteractionOptionNoSubcommand'} CommandInteractionOptionNoSubcommand\n * @property {'CommandInteractionOptionNoSubcommandGroup'} CommandInteractionOptionNoSubcommandGroup\n * @property {'CommandInteractionOptionInvalidChannelType'} CommandInteractionOptionInvalidChannelType\n * @property {'AutocompleteInteractionOptionNoFocusedOption'} AutocompleteInteractionOptionNoFocusedOption\n\n * @property {'ModalSubmitInteractionFieldNotFound'} ModalSubmitInteractionFieldNotFound\n * @property {'ModalSubmitInteractionFieldType'} ModalSubmitInteractionFieldType\n\n * @property {'InvalidMissingScopes'} InvalidMissingScopes\n * @property {'InvalidScopesWithPermissions'} InvalidScopesWithPermissions\n\n * @property {'NotImplemented'} NotImplemented\n\n * @property {'GuildForumMessageRequired'} GuildForumMessageRequired\n\n * @property {'SweepFilterReturn'} SweepFilterReturn\n\n * @property {'EntitlementCreateInvalidOwner'} EntitlementCreateInvalidOwner\n\n * @property {'BulkBanUsersOptionEmpty'} BulkBanUsersOptionEmpty\n\n * @property {'PollAlreadyExpired'} PollAlreadyExpired\n */\n\nconst keys = [\n  'ClientInvalidOption',\n  'ClientInvalidProvidedShards',\n  'ClientMissingIntents',\n  'ClientNotReady',\n\n  'TokenInvalid',\n  'TokenMissing',\n  'ApplicationCommandPermissionsTokenMissing',\n\n  'WSCloseRequested',\n  'WSConnectionExists',\n  'WSNotOpen',\n  'ManagerDestroyed',\n\n  'BitFieldInvalid',\n\n  'ShardingInvalid',\n  'ShardingRequired',\n  'InvalidIntents',\n  'DisallowedIntents',\n  'ShardingNoShards',\n  'ShardingInProcess',\n  'ShardingInvalidEvalBroadcast',\n  'ShardingShardNotFound',\n  'ShardingAlreadySpawned',\n  'ShardingProcessExists',\n  'ShardingWorkerExists',\n  'ShardingReadyTimeout',\n  'ShardingReadyDisconnected',\n  'ShardingReadyDied',\n  'ShardingNoChildExists',\n  'ShardingShardMiscalculation',\n\n  'ColorRange',\n  'ColorConvert',\n\n  'InviteOptionsMissingChannel',\n\n  'ButtonLabel',\n  'ButtonURL',\n  'ButtonCustomId',\n\n  'SelectMenuCustomId',\n  'SelectMenuPlaceholder',\n  'SelectOptionLabel',\n  'SelectOptionValue',\n  'SelectOptionDescription',\n\n  'InteractionCollectorError',\n\n  'FileNotFound',\n\n  'UserBannerNotFetched',\n  'UserNoDMChannel',\n\n  'VoiceNotStageChannel',\n\n  'VoiceStateNotOwn',\n  'VoiceStateInvalidType',\n\n  'ReqResourceType',\n\n  'ImageFormat',\n  'ImageSize',\n\n  'MessageBulkDeleteType',\n  'MessageContentType',\n  'MessageNonceRequired',\n  'MessageNonceType',\n\n  'SplitMaxLen',\n\n  'BanResolveId',\n  'FetchBanResolveId',\n\n  'PruneDaysType',\n\n  'GuildChannelResolve',\n  'GuildVoiceChannelResolve',\n  'GuildChannelOrphan',\n  'GuildChannelUnowned',\n  'GuildOwned',\n  'GuildMembersTimeout',\n  'GuildUncachedMe',\n  'ChannelNotCached',\n  'StageChannelResolve',\n  'GuildScheduledEventResolve',\n  'FetchOwnerId',\n\n  'InvalidType',\n  'InvalidElement',\n\n  'MessageThreadParent',\n  'MessageExistingThread',\n  'ThreadInvitableType',\n\n  'WebhookMessage',\n  'WebhookTokenUnavailable',\n  'WebhookURLInvalid',\n  'WebhookApplication',\n  'MessageReferenceMissing',\n\n  'EmojiType',\n  'EmojiManaged',\n  'MissingManageGuildExpressionsPermission',\n  'MissingManageEmojisAndStickersPermission',\n\n  'NotGuildSticker',\n\n  'ReactionResolveUser',\n\n  'VanityURL',\n\n  'InviteResolveCode',\n\n  'InviteNotFound',\n\n  'DeleteGroupDMChannel',\n  'FetchGroupDMChannel',\n\n  'MemberFetchNonceLength',\n\n  'GlobalCommandPermissions',\n  'GuildUncachedEntityResolve',\n\n  'InteractionAlreadyReplied',\n  'InteractionNotReplied',\n  'InteractionEphemeralReplied',\n\n  'CommandInteractionOptionNotFound',\n  'CommandInteractionOptionType',\n  'CommandInteractionOptionEmpty',\n  'CommandInteractionOptionNoSubcommand',\n  'CommandInteractionOptionNoSubcommandGroup',\n  'CommandInteractionOptionInvalidChannelType',\n  'AutocompleteInteractionOptionNoFocusedOption',\n\n  'ModalSubmitInteractionFieldNotFound',\n  'ModalSubmitInteractionFieldType',\n\n  'InvalidMissingScopes',\n  'InvalidScopesWithPermissions',\n\n  'NotImplemented',\n\n  'SweepFilterReturn',\n\n  'GuildForumMessageRequired',\n\n  'EntitlementCreateInvalidOwner',\n\n  'BulkBanUsersOptionEmpty',\n\n  'PollAlreadyExpired',\n];\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {DiscordjsErrorCodes}\n * @ignore\n */\nmodule.exports = Object.fromEntries(keys.map(key => [key, key]));\n",
    "'use strict';\n\nconst DjsErrorCodes = require('./ErrorCodes');\n\nconst Messages = {\n  [DjsErrorCodes.ClientInvalidOption]: (prop, must) => `The ${prop} option must be ${must}`,\n  [DjsErrorCodes.ClientInvalidProvidedShards]: 'None of the provided shards were valid.',\n  [DjsErrorCodes.ClientMissingIntents]: 'Valid intents must be provided for the Client.',\n  [DjsErrorCodes.ClientNotReady]: action => `The client needs to be logged in to ${action}.`,\n\n  [DjsErrorCodes.TokenInvalid]: 'An invalid token was provided.',\n  [DjsErrorCodes.TokenMissing]: 'Request to use token, but token was unavailable to the client.',\n  [DjsErrorCodes.ApplicationCommandPermissionsTokenMissing]:\n    'Editing application command permissions requires an OAuth2 bearer token, but none was provided.',\n\n  [DjsErrorCodes.WSCloseRequested]: 'WebSocket closed due to user request.',\n  [DjsErrorCodes.WSConnectionExists]: 'There is already an existing WebSocket connection.',\n  [DjsErrorCodes.WSNotOpen]: (data = 'data') => `WebSocket not open to send ${data}`,\n  [DjsErrorCodes.ManagerDestroyed]: 'Manager was destroyed.',\n\n  [DjsErrorCodes.BitFieldInvalid]: bit => `Invalid bitfield flag or number: ${bit}.`,\n\n  [DjsErrorCodes.ShardingInvalid]: 'Invalid shard settings were provided.',\n  [DjsErrorCodes.ShardingRequired]: 'This session would have handled too many guilds - Sharding is required.',\n  [DjsErrorCodes.InvalidIntents]: 'Invalid intent provided for WebSocket intents.',\n  [DjsErrorCodes.DisallowedIntents]: 'Privileged intent provided is not enabled or whitelisted.',\n  [DjsErrorCodes.ShardingNoShards]: 'No shards have been spawned.',\n  [DjsErrorCodes.ShardingInProcess]: 'Shards are still being spawned.',\n  [DjsErrorCodes.ShardingInvalidEvalBroadcast]: 'Script to evaluate must be a function',\n  [DjsErrorCodes.ShardingShardNotFound]: id => `Shard ${id} could not be found.`,\n  [DjsErrorCodes.ShardingAlreadySpawned]: count => `Already spawned ${count} shards.`,\n  [DjsErrorCodes.ShardingProcessExists]: id => `Shard ${id} already has an active process.`,\n  [DjsErrorCodes.ShardingWorkerExists]: id => `Shard ${id} already has an active worker.`,\n  [DjsErrorCodes.ShardingReadyTimeout]: id => `Shard ${id}'s Client took too long to become ready.`,\n  [DjsErrorCodes.ShardingReadyDisconnected]: id => `Shard ${id}'s Client disconnected before becoming ready.`,\n  [DjsErrorCodes.ShardingReadyDied]: id => `Shard ${id}'s process exited before its Client became ready.`,\n  [DjsErrorCodes.ShardingNoChildExists]: id => `Shard ${id} has no active process or worker.`,\n  [DjsErrorCodes.ShardingShardMiscalculation]: (shard, guild, count) =>\n    `Calculated invalid shard ${shard} for guild ${guild} with ${count} shards.`,\n\n  [DjsErrorCodes.ColorRange]: 'Color must be within the range 0 - 16777215 (0xFFFFFF).',\n  [DjsErrorCodes.ColorConvert]: color => `Unable to convert \"${color}\" to a number.`,\n\n  [DjsErrorCodes.InviteOptionsMissingChannel]:\n    'A valid guild channel must be provided when GuildScheduledEvent is EXTERNAL.',\n\n  [DjsErrorCodes.ButtonLabel]: 'MessageButton label must be a string',\n  [DjsErrorCodes.ButtonURL]: 'MessageButton URL must be a string',\n  [DjsErrorCodes.ButtonCustomId]: 'MessageButton customId must be a string',\n\n  [DjsErrorCodes.SelectMenuCustomId]: 'MessageSelectMenu customId must be a string',\n  [DjsErrorCodes.SelectMenuPlaceholder]: 'MessageSelectMenu placeholder must be a string',\n  [DjsErrorCodes.SelectOptionLabel]: 'MessageSelectOption label must be a string',\n  [DjsErrorCodes.SelectOptionValue]: 'MessageSelectOption value must be a string',\n  [DjsErrorCodes.SelectOptionDescription]: 'MessageSelectOption description must be a string',\n\n  [DjsErrorCodes.InteractionCollectorError]: reason =>\n    `Collector received no interactions before ending with reason: ${reason}`,\n\n  [DjsErrorCodes.FileNotFound]: file => `File could not be found: ${file}`,\n\n  [DjsErrorCodes.UserBannerNotFetched]: \"You must fetch this user's banner before trying to generate its URL!\",\n  [DjsErrorCodes.UserNoDMChannel]: 'No DM Channel exists!',\n\n  [DjsErrorCodes.VoiceNotStageChannel]: 'You are only allowed to do this in stage channels.',\n\n  [DjsErrorCodes.VoiceStateNotOwn]:\n    'You cannot self-deafen/mute/request to speak on VoiceStates that do not belong to the ClientUser.',\n  [DjsErrorCodes.VoiceStateInvalidType]: name => `${name} must be a boolean.`,\n\n  [DjsErrorCodes.ReqResourceType]: 'The resource must be a string, Buffer or a valid file stream.',\n\n  [DjsErrorCodes.ImageFormat]: format => `Invalid image format: ${format}`,\n  [DjsErrorCodes.ImageSize]: size => `Invalid image size: ${size}`,\n\n  [DjsErrorCodes.MessageBulkDeleteType]: 'The messages must be an Array, Collection, or number.',\n  [DjsErrorCodes.MessageContentType]: 'Message content must be a string.',\n  [DjsErrorCodes.MessageNonceRequired]: 'Message nonce is required when enforceNonce is true.',\n  [DjsErrorCodes.MessageNonceType]: 'Message nonce must be an integer or a string.',\n\n  [DjsErrorCodes.SplitMaxLen]: 'Chunk exceeds the max length and contains no split characters.',\n\n  [DjsErrorCodes.BanResolveId]: (ban = false) => `Couldn't resolve the user id to ${ban ? 'ban' : 'unban'}.`,\n  [DjsErrorCodes.FetchBanResolveId]: \"Couldn't resolve the user id to fetch the ban.\",\n\n  [DjsErrorCodes.PruneDaysType]: 'Days must be a number',\n\n  [DjsErrorCodes.GuildChannelResolve]: 'Could not resolve channel to a guild channel.',\n  [DjsErrorCodes.GuildVoiceChannelResolve]: 'Could not resolve channel to a guild voice channel.',\n  [DjsErrorCodes.GuildChannelOrphan]: 'Could not find a parent to this guild channel.',\n  [DjsErrorCodes.GuildChannelUnowned]: \"The fetched channel does not belong to this manager's guild.\",\n  [DjsErrorCodes.GuildOwned]: 'Guild is owned by the client.',\n  [DjsErrorCodes.GuildMembersTimeout]: \"Members didn't arrive in time.\",\n  [DjsErrorCodes.GuildUncachedMe]: 'The client user as a member of this guild is uncached.',\n  [DjsErrorCodes.ChannelNotCached]: 'Could not find the channel where this message came from in the cache!',\n  [DjsErrorCodes.StageChannelResolve]: 'Could not resolve channel to a stage channel.',\n  [DjsErrorCodes.GuildScheduledEventResolve]: 'Could not resolve the guild scheduled event.',\n  [DjsErrorCodes.FetchOwnerId]: type =>\n    `Couldn't resolve the ${type} ownerId to fetch the ${type} ${type === 'group DM' ? 'owner' : 'member'}.`,\n\n  [DjsErrorCodes.InvalidType]: (name, expected, an = false) => `Supplied ${name} is not a${an ? 'n' : ''} ${expected}.`,\n  [DjsErrorCodes.InvalidElement]: (type, name, elem) => `Supplied ${type} ${name} includes an invalid element: ${elem}`,\n\n  [DjsErrorCodes.MessageThreadParent]: 'The message was not sent in a guild text or news channel',\n  [DjsErrorCodes.MessageExistingThread]: 'The message already has a thread',\n  [DjsErrorCodes.ThreadInvitableType]: type => `Invitable cannot be edited on ${type}`,\n\n  [DjsErrorCodes.WebhookMessage]: 'The message was not sent by a webhook.',\n  [DjsErrorCodes.WebhookTokenUnavailable]: 'This action requires a webhook token, but none is available.',\n  [DjsErrorCodes.WebhookURLInvalid]: 'The provided webhook URL is not valid.',\n  [DjsErrorCodes.WebhookApplication]: 'This message webhook belongs to an application and cannot be fetched.',\n  [DjsErrorCodes.MessageReferenceMissing]: 'The message does not reference another message',\n\n  [DjsErrorCodes.EmojiType]: 'Emoji must be a string or GuildEmoji/ReactionEmoji',\n  [DjsErrorCodes.EmojiManaged]: 'Emoji is managed and has no Author.',\n  [DjsErrorCodes.MissingManageGuildExpressionsPermission]: guild =>\n    `Client must have Manage Guild Expressions permission in guild ${guild} to see emoji authors.`,\n  [DjsErrorCodes.MissingManageEmojisAndStickersPermission]: guild =>\n    `Client must have Manage Emojis and Stickers permission in guild ${guild} to see emoji authors.`,\n\n  [DjsErrorCodes.NotGuildSticker]: 'Sticker is a standard (non-guild) sticker and has no author.',\n\n  [DjsErrorCodes.ReactionResolveUser]: \"Couldn't resolve the user id to remove from the reaction.\",\n\n  [DjsErrorCodes.VanityURL]: 'This guild does not have the vanity URL feature enabled.',\n\n  [DjsErrorCodes.InviteResolveCode]: 'Could not resolve the code to fetch the invite.',\n\n  [DjsErrorCodes.InviteNotFound]: 'Could not find the requested invite.',\n\n  [DjsErrorCodes.DeleteGroupDMChannel]: \"Bots don't have access to Group DM Channels and cannot delete them\",\n  [DjsErrorCodes.FetchGroupDMChannel]: \"Bots don't have access to Group DM Channels and cannot fetch them\",\n\n  [DjsErrorCodes.MemberFetchNonceLength]: 'Nonce length must not exceed 32 characters.',\n\n  [DjsErrorCodes.GlobalCommandPermissions]:\n    'Permissions for global commands may only be fetched or modified by providing a GuildResolvable ' +\n    \"or from a guild's application command manager.\",\n  [DjsErrorCodes.GuildUncachedEntityResolve]: type =>\n    `Cannot resolve ${type} from an arbitrary guild, provide an id instead`,\n\n  [DjsErrorCodes.InteractionAlreadyReplied]: 'The reply to this interaction has already been sent or deferred.',\n  [DjsErrorCodes.InteractionNotReplied]: 'The reply to this interaction has not been sent or deferred.',\n  [DjsErrorCodes.InteractionEphemeralReplied]: 'Ephemeral responses cannot be deleted.',\n\n  [DjsErrorCodes.CommandInteractionOptionNotFound]: name => `Required option \"${name}\" not found.`,\n  [DjsErrorCodes.CommandInteractionOptionType]: (name, type, expected) =>\n    `Option \"${name}\" is of type: ${type}; expected ${expected}.`,\n  [DjsErrorCodes.CommandInteractionOptionEmpty]: (name, type) =>\n    `Required option \"${name}\" is of type: ${type}; expected a non-empty value.`,\n  [DjsErrorCodes.CommandInteractionOptionNoSubcommand]: 'No subcommand specified for interaction.',\n  [DjsErrorCodes.CommandInteractionOptionNoSubcommandGroup]: 'No subcommand group specified for interaction.',\n  [DjsErrorCodes.CommandInteractionOptionInvalidChannelType]: (name, type, expected) =>\n    `The type of channel of the option \"${name}\" is: ${type}; expected ${expected}.`,\n  [DjsErrorCodes.AutocompleteInteractionOptionNoFocusedOption]: 'No focused option for autocomplete interaction.',\n\n  [DjsErrorCodes.ModalSubmitInteractionFieldNotFound]: customId =>\n    `Required field with custom id \"${customId}\" not found.`,\n  [DjsErrorCodes.ModalSubmitInteractionFieldType]: (customId, type, expected) =>\n    `Field with custom id \"${customId}\" is of type: ${type}; expected ${expected}.`,\n\n  [DjsErrorCodes.InvalidMissingScopes]: 'At least one valid scope must be provided for the invite',\n  [DjsErrorCodes.InvalidScopesWithPermissions]: 'Permissions cannot be set without the bot scope.',\n\n  [DjsErrorCodes.NotImplemented]: (what, name) => `Method ${what} not implemented on ${name}.`,\n\n  [DjsErrorCodes.SweepFilterReturn]: 'The return value of the sweepFilter function was not false or a Function',\n\n  [DjsErrorCodes.GuildForumMessageRequired]: 'You must provide a message to create a guild forum thread',\n\n  [DjsErrorCodes.EntitlementCreateInvalidOwner]:\n    'You must provide either a guild or a user to create an entitlement, but not both',\n\n  [DjsErrorCodes.BulkBanUsersOptionEmpty]: 'Option \"users\" array or collection is empty',\n\n  [DjsErrorCodes.PollAlreadyExpired]: 'This poll has already expired.',\n};\n\nmodule.exports = Messages;\n",
    "'use strict';\n\n// Heavily inspired by node's `internal/errors` module\nconst ErrorCodes = require('./ErrorCodes');\nconst Messages = require('./Messages');\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n * @ignore\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(code, ...args) {\n      super(message(code, args));\n      this.code = code;\n      Error.captureStackTrace?.(this, DiscordjsError);\n    }\n\n    get name() {\n      return `${super.name} [${this.code}]`;\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} code The error code\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n * @ignore\n */\nfunction message(code, args) {\n  if (!(code in ErrorCodes)) throw new Error('Error code must be a valid DiscordjsErrorCodes');\n  const msg = Messages[code];\n  if (!msg) throw new Error(`No message associated with error code: ${code}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (!args?.length) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n\nmodule.exports = {\n  DiscordjsError: makeDiscordjsError(Error),\n  DiscordjsTypeError: makeDiscordjsError(TypeError),\n  DiscordjsRangeError: makeDiscordjsError(RangeError),\n};\n",
    "'use strict';\n\nmodule.exports = require('./DJSError');\nmodule.exports.ErrorCodes = require('./ErrorCodes');\nmodule.exports.Messages = require('./Messages');\n",
    "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n    rsDingbatRange = '\\\\u2700-\\\\u27bf',\n    rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n    rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n    rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n    rsPunctuationRange = '\\\\u2000-\\\\u206f',\n    rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n    rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n    rsVarRange = '\\\\ufe0e\\\\ufe0f',\n    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n    rsBreak = '[' + rsBreakRange + ']',\n    rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n    rsDigits = '\\\\d+',\n    rsDingbat = '[' + rsDingbatRange + ']',\n    rsLower = '[' + rsLowerRange + ']',\n    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsUpper = '[' + rsUpperRange + ']',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n    rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n    rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n    rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n    reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([\n  rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',\n  rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')',\n  rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr,\n  rsUpper + '+' + rsOptUpperContr,\n  rsDigits,\n  rsEmoji\n].join('|'), 'g');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',  '\\xc1': 'A', '\\xc2': 'A', '\\xc3': 'A', '\\xc4': 'A', '\\xc5': 'A',\n  '\\xe0': 'a',  '\\xe1': 'a', '\\xe2': 'a', '\\xe3': 'a', '\\xe4': 'a', '\\xe5': 'a',\n  '\\xc7': 'C',  '\\xe7': 'c',\n  '\\xd0': 'D',  '\\xf0': 'd',\n  '\\xc8': 'E',  '\\xc9': 'E', '\\xca': 'E', '\\xcb': 'E',\n  '\\xe8': 'e',  '\\xe9': 'e', '\\xea': 'e', '\\xeb': 'e',\n  '\\xcc': 'I',  '\\xcd': 'I', '\\xce': 'I', '\\xcf': 'I',\n  '\\xec': 'i',  '\\xed': 'i', '\\xee': 'i', '\\xef': 'i',\n  '\\xd1': 'N',  '\\xf1': 'n',\n  '\\xd2': 'O',  '\\xd3': 'O', '\\xd4': 'O', '\\xd5': 'O', '\\xd6': 'O', '\\xd8': 'O',\n  '\\xf2': 'o',  '\\xf3': 'o', '\\xf4': 'o', '\\xf5': 'o', '\\xf6': 'o', '\\xf8': 'o',\n  '\\xd9': 'U',  '\\xda': 'U', '\\xdb': 'U', '\\xdc': 'U',\n  '\\xf9': 'u',  '\\xfa': 'u', '\\xfb': 'u', '\\xfc': 'u',\n  '\\xdd': 'Y',  '\\xfd': 'y', '\\xff': 'y',\n  '\\xc6': 'Ae', '\\xe6': 'ae',\n  '\\xde': 'Th', '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',  '\\u0102': 'A', '\\u0104': 'A',\n  '\\u0101': 'a',  '\\u0103': 'a', '\\u0105': 'a',\n  '\\u0106': 'C',  '\\u0108': 'C', '\\u010a': 'C', '\\u010c': 'C',\n  '\\u0107': 'c',  '\\u0109': 'c', '\\u010b': 'c', '\\u010d': 'c',\n  '\\u010e': 'D',  '\\u0110': 'D', '\\u010f': 'd', '\\u0111': 'd',\n  '\\u0112': 'E',  '\\u0114': 'E', '\\u0116': 'E', '\\u0118': 'E', '\\u011a': 'E',\n  '\\u0113': 'e',  '\\u0115': 'e', '\\u0117': 'e', '\\u0119': 'e', '\\u011b': 'e',\n  '\\u011c': 'G',  '\\u011e': 'G', '\\u0120': 'G', '\\u0122': 'G',\n  '\\u011d': 'g',  '\\u011f': 'g', '\\u0121': 'g', '\\u0123': 'g',\n  '\\u0124': 'H',  '\\u0126': 'H', '\\u0125': 'h', '\\u0127': 'h',\n  '\\u0128': 'I',  '\\u012a': 'I', '\\u012c': 'I', '\\u012e': 'I', '\\u0130': 'I',\n  '\\u0129': 'i',  '\\u012b': 'i', '\\u012d': 'i', '\\u012f': 'i', '\\u0131': 'i',\n  '\\u0134': 'J',  '\\u0135': 'j',\n  '\\u0136': 'K',  '\\u0137': 'k', '\\u0138': 'k',\n  '\\u0139': 'L',  '\\u013b': 'L', '\\u013d': 'L', '\\u013f': 'L', '\\u0141': 'L',\n  '\\u013a': 'l',  '\\u013c': 'l', '\\u013e': 'l', '\\u0140': 'l', '\\u0142': 'l',\n  '\\u0143': 'N',  '\\u0145': 'N', '\\u0147': 'N', '\\u014a': 'N',\n  '\\u0144': 'n',  '\\u0146': 'n', '\\u0148': 'n', '\\u014b': 'n',\n  '\\u014c': 'O',  '\\u014e': 'O', '\\u0150': 'O',\n  '\\u014d': 'o',  '\\u014f': 'o', '\\u0151': 'o',\n  '\\u0154': 'R',  '\\u0156': 'R', '\\u0158': 'R',\n  '\\u0155': 'r',  '\\u0157': 'r', '\\u0159': 'r',\n  '\\u015a': 'S',  '\\u015c': 'S', '\\u015e': 'S', '\\u0160': 'S',\n  '\\u015b': 's',  '\\u015d': 's', '\\u015f': 's', '\\u0161': 's',\n  '\\u0162': 'T',  '\\u0164': 'T', '\\u0166': 'T',\n  '\\u0163': 't',  '\\u0165': 't', '\\u0167': 't',\n  '\\u0168': 'U',  '\\u016a': 'U', '\\u016c': 'U', '\\u016e': 'U', '\\u0170': 'U', '\\u0172': 'U',\n  '\\u0169': 'u',  '\\u016b': 'u', '\\u016d': 'u', '\\u016f': 'u', '\\u0171': 'u', '\\u0173': 'u',\n  '\\u0174': 'W',  '\\u0175': 'w',\n  '\\u0176': 'Y',  '\\u0177': 'y', '\\u0178': 'Y',\n  '\\u0179': 'Z',  '\\u017b': 'Z', '\\u017d': 'Z',\n  '\\u017a': 'z',  '\\u017c': 'z', '\\u017e': 'z',\n  '\\u0132': 'IJ', '\\u0133': 'ij',\n  '\\u0152': 'Oe', '\\u0153': 'oe',\n  '\\u0149': \"'n\", '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function(key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function(string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts `string` to\n * [snake case](https://en.wikipedia.org/wiki/Snake_case).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the snake cased string.\n * @example\n *\n * _.snakeCase('Foo Bar');\n * // => 'foo_bar'\n *\n * _.snakeCase('fooBar');\n * // => 'foo_bar'\n *\n * _.snakeCase('--FOO-BAR--');\n * // => 'foo_bar'\n */\nvar snakeCase = createCompounder(function(result, word, index) {\n  return result + (index ? '_' : '') + word.toLowerCase();\n});\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\n\nmodule.exports = snakeCase;\n",
    "'use strict';\n\nconst { isJSONEncodable } = require('@discordjs/util');\nconst snakeCase = require('lodash.snakecase');\n\n/**\n * Transforms camel-cased keys into snake cased keys\n * @param {*} obj The object to transform\n * @returns {*}\n */\nfunction toSnakeCase(obj) {\n  if (typeof obj !== 'object' || !obj) return obj;\n  if (obj instanceof Date) return obj;\n  if (isJSONEncodable(obj)) return toSnakeCase(obj.toJSON());\n  if (Array.isArray(obj)) return obj.map(toSnakeCase);\n  return Object.fromEntries(Object.entries(obj).map(([key, value]) => [snakeCase(key), toSnakeCase(value)]));\n}\n\n/**\n * Transforms an API auto moderation action object to a camel-cased variant.\n * @param {APIAutoModerationAction} autoModerationAction The action to transform\n * @returns {AutoModerationAction}\n * @ignore\n */\nfunction _transformAPIAutoModerationAction(autoModerationAction) {\n  return {\n    type: autoModerationAction.type,\n    metadata: {\n      durationSeconds: autoModerationAction.metadata.duration_seconds ?? null,\n      channelId: autoModerationAction.metadata.channel_id ?? null,\n      customMessage: autoModerationAction.metadata.custom_message ?? null,\n    },\n  };\n}\n\n/**\n * Transforms an API message interaction metadata object to a camel-cased variant.\n * @param {Client} client The client\n * @param {APIMessageInteractionMetadata} messageInteractionMetadata The metadata to transform\n * @returns {MessageInteractionMetadata}\n * @ignore\n */\nfunction _transformAPIMessageInteractionMetadata(client, messageInteractionMetadata) {\n  return {\n    id: messageInteractionMetadata.id,\n    type: messageInteractionMetadata.type,\n    user: client.users._add(messageInteractionMetadata.user),\n    authorizingIntegrationOwners: messageInteractionMetadata.authorizing_integration_owners,\n    originalResponseMessageId: messageInteractionMetadata.original_response_message_id ?? null,\n    interactedMessageId: messageInteractionMetadata.interacted_message_id ?? null,\n    triggeringInteractionMetadata: messageInteractionMetadata.triggering_interaction_metadata\n      ? _transformAPIMessageInteractionMetadata(client, messageInteractionMetadata.triggering_interaction_metadata)\n      : null,\n  };\n}\n\n/**\n * Transforms a guild scheduled event recurrence rule object to a snake-cased variant.\n * @param {GuildScheduledEventRecurrenceRuleOptions} recurrenceRule The recurrence rule to transform\n * @returns {APIGuildScheduledEventRecurrenceRule}\n * @ignore\n */\nfunction _transformGuildScheduledEventRecurrenceRule(recurrenceRule) {\n  return {\n    start: new Date(recurrenceRule.startAt).toISOString(),\n    frequency: recurrenceRule.frequency,\n    interval: recurrenceRule.interval,\n    by_weekday: recurrenceRule.byWeekday,\n    by_n_weekday: recurrenceRule.byNWeekday,\n    by_month: recurrenceRule.byMonth,\n    by_month_day: recurrenceRule.byMonthDay,\n  };\n}\n\n/**\n * Transforms API incidents data to a camel-cased variant.\n * @param {APIIncidentsData} data The incidents data to transform\n * @returns {IncidentActions}\n * @ignore\n */\nfunction _transformAPIIncidentsData(data) {\n  return {\n    invitesDisabledUntil: data.invites_disabled_until ? new Date(data.invites_disabled_until) : null,\n    dmsDisabledUntil: data.dms_disabled_until ? new Date(data.dms_disabled_until) : null,\n    dmSpamDetectedAt: data.dm_spam_detected_at ? new Date(data.dm_spam_detected_at) : null,\n    raidDetectedAt: data.raid_detected_at ? new Date(data.raid_detected_at) : null,\n  };\n}\n\nmodule.exports = {\n  toSnakeCase,\n  _transformAPIAutoModerationAction,\n  _transformAPIMessageInteractionMetadata,\n  _transformGuildScheduledEventRecurrenceRule,\n  _transformAPIIncidentsData,\n};\n",
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Collection: () => Collection,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/collection.ts\nvar Collection = class _Collection extends Map {\n  static {\n    __name(this, \"Collection\");\n  }\n  /**\n   * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.\n   *\n   * @param key - The key to get if it exists, or set otherwise\n   * @param defaultValueGenerator - A function that generates the default value\n   * @example\n   * ```ts\n   * collection.ensure(guildId, () => defaultGuildConfig);\n   * ```\n   */\n  ensure(key, defaultValueGenerator) {\n    if (this.has(key))\n      return this.get(key);\n    if (typeof defaultValueGenerator !== \"function\")\n      throw new TypeError(`${defaultValueGenerator} is not a function`);\n    const defaultValue = defaultValueGenerator(key, this);\n    this.set(key, defaultValue);\n    return defaultValue;\n  }\n  /**\n   * Checks if all of the elements exist in the collection.\n   *\n   * @param keys - The keys of the elements to check for\n   * @returns `true` if all of the elements exist, `false` if at least one does not exist.\n   */\n  hasAll(...keys) {\n    return keys.every((key) => super.has(key));\n  }\n  /**\n   * Checks if any of the elements exist in the collection.\n   *\n   * @param keys - The keys of the elements to check for\n   * @returns `true` if any of the elements exist, `false` if none exist.\n   */\n  hasAny(...keys) {\n    return keys.some((key) => super.has(key));\n  }\n  first(amount) {\n    if (amount === void 0)\n      return this.values().next().value;\n    if (amount < 0)\n      return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({ length: amount }, () => iter.next().value);\n  }\n  firstKey(amount) {\n    if (amount === void 0)\n      return this.keys().next().value;\n    if (amount < 0)\n      return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({ length: amount }, () => iter.next().value);\n  }\n  last(amount) {\n    const arr = [...this.values()];\n    if (amount === void 0)\n      return arr[arr.length - 1];\n    if (amount < 0)\n      return this.first(amount * -1);\n    if (!amount)\n      return [];\n    return arr.slice(-amount);\n  }\n  lastKey(amount) {\n    const arr = [...this.keys()];\n    if (amount === void 0)\n      return arr[arr.length - 1];\n    if (amount < 0)\n      return this.firstKey(amount * -1);\n    if (!amount)\n      return [];\n    return arr.slice(-amount);\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n   * Returns the item at a given index, allowing for positive and negative integers.\n   * Negative integers count back from the last item in the collection.\n   *\n   * @param index - The index of the element to obtain\n   */\n  at(index) {\n    index = Math.floor(index);\n    const arr = [...this.values()];\n    return arr.at(index);\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n   * Returns the key at a given index, allowing for positive and negative integers.\n   * Negative integers count back from the last item in the collection.\n   *\n   * @param index - The index of the key to obtain\n   */\n  keyAt(index) {\n    index = Math.floor(index);\n    const arr = [...this.keys()];\n    return arr.at(index);\n  }\n  random(amount) {\n    const arr = [...this.values()];\n    if (amount === void 0)\n      return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount)\n      return [];\n    return Array.from(\n      { length: Math.min(amount, arr.length) },\n      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]\n    );\n  }\n  randomKey(amount) {\n    const arr = [...this.keys()];\n    if (amount === void 0)\n      return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount)\n      return [];\n    return Array.from(\n      { length: Math.min(amount, arr.length) },\n      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]\n    );\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse | Array.reverse()}\n   * but returns a Collection instead of an Array.\n   */\n  reverse() {\n    const entries = [...this.entries()].reverse();\n    this.clear();\n    for (const [key, value] of entries)\n      this.set(key, value);\n    return this;\n  }\n  find(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this))\n        return val;\n    }\n    return void 0;\n  }\n  findKey(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this))\n        return key;\n    }\n    return void 0;\n  }\n  sweep(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    const previousSize = this.size;\n    for (const [key, val] of this) {\n      if (fn(val, key, this))\n        this.delete(key);\n    }\n    return previousSize - this.size;\n  }\n  filter(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) {\n      if (fn(val, key, this))\n        results.set(key, val);\n    }\n    return results;\n  }\n  partition(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    const results = [\n      new this.constructor[Symbol.species](),\n      new this.constructor[Symbol.species]()\n    ];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n    return results;\n  }\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n  map(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({ length: this.size }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n  mapValues(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, val] of this)\n      coll.set(key, fn(val, key, this));\n    return coll;\n  }\n  some(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this))\n        return true;\n    }\n    return false;\n  }\n  every(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this))\n        return false;\n    }\n    return true;\n  }\n  /**\n   * Applies a function to produce a single value. Identical in behavior to\n   * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce | Array.reduce()}.\n   *\n   * @param fn - Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n   * and `collection`\n   * @param initialValue - Starting value for the accumulator\n   * @example\n   * ```ts\n   * collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n   * ```\n   */\n  reduce(fn, initialValue) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    let accumulator;\n    const iterator = this.entries();\n    if (initialValue === void 0) {\n      if (this.size === 0)\n        throw new TypeError(\"Reduce of empty collection with no initial value\");\n      accumulator = iterator.next().value[1];\n    } else {\n      accumulator = initialValue;\n    }\n    for (const [key, value] of iterator) {\n      accumulator = fn(accumulator, value, key, this);\n    }\n    return accumulator;\n  }\n  each(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    for (const [key, value] of this) {\n      fn(value, key, this);\n    }\n    return this;\n  }\n  tap(fn, thisArg) {\n    if (typeof fn !== \"function\")\n      throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0)\n      fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  /**\n   * Creates an identical shallow copy of this collection.\n   *\n   * @example\n   * ```ts\n   * const newColl = someColl.clone();\n   * ```\n   */\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   *\n   * @param collections - Collections to merge\n   * @example\n   * ```ts\n   * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   * ```\n   */\n  concat(...collections) {\n    const newColl = this.clone();\n    for (const coll of collections) {\n      for (const [key, val] of coll)\n        newColl.set(key, val);\n    }\n    return newColl;\n  }\n  /**\n   * Checks if this collection shares identical items with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   *\n   * @param collection - Collection to compare with\n   * @returns Whether the collections have identical contents\n   */\n  equals(collection) {\n    if (!collection)\n      return false;\n    if (this === collection)\n      return true;\n    if (this.size !== collection.size)\n      return false;\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * The sort method sorts the items of a collection in place and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   *\n   * @param compareFunction - Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.\n   * @example\n   * ```ts\n   * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   * ```\n   */\n  sort(compareFunction = _Collection.defaultSort) {\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));\n    super.clear();\n    for (const [key, value] of entries) {\n      super.set(key, value);\n    }\n    return this;\n  }\n  /**\n   * The intersect method returns a new structure containing items where the keys and values are present in both original structures.\n   *\n   * @param other - The other Collection to filter against\n   */\n  intersect(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of other) {\n      if (this.has(key) && Object.is(value, this.get(key))) {\n        coll.set(key, value);\n      }\n    }\n    return coll;\n  }\n  /**\n   * The subtract method returns a new structure containing items where the keys and values of the original structure are not present in the other.\n   *\n   * @param other - The other Collection to filter against\n   */\n  subtract(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (!other.has(key) || !Object.is(value, other.get(key))) {\n        coll.set(key, value);\n      }\n    }\n    return coll;\n  }\n  /**\n   * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n   *\n   * @param other - The other Collection to filter against\n   */\n  difference(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of other) {\n      if (!this.has(key))\n        coll.set(key, value);\n    }\n    for (const [key, value] of this) {\n      if (!other.has(key))\n        coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Merges two Collections together into a new Collection.\n   *\n   * @param other - The other Collection to merge with\n   * @param whenInSelf - Function getting the result if the entry only exists in this Collection\n   * @param whenInOther - Function getting the result if the entry only exists in the other Collection\n   * @param whenInBoth - Function getting the result if the entry exists in both Collections\n   * @example\n   * ```ts\n   * // Sums up the entries in two collections.\n   * coll.merge(\n   *  other,\n   *  x => ({ keep: true, value: x }),\n   *  y => ({ keep: true, value: y }),\n   *  (x, y) => ({ keep: true, value: x + y }),\n   * );\n   * ```\n   * @example\n   * ```ts\n   * // Intersects two collections in a left-biased manner.\n   * coll.merge(\n   *  other,\n   *  x => ({ keep: false }),\n   *  y => ({ keep: false }),\n   *  (x, _) => ({ keep: true, value: x }),\n   * );\n   * ```\n   */\n  merge(other, whenInSelf, whenInOther, whenInBoth) {\n    const coll = new this.constructor[Symbol.species]();\n    const keys = /* @__PURE__ */ new Set([...this.keys(), ...other.keys()]);\n    for (const key of keys) {\n      const hasInSelf = this.has(key);\n      const hasInOther = other.has(key);\n      if (hasInSelf && hasInOther) {\n        const result = whenInBoth(this.get(key), other.get(key), key);\n        if (result.keep)\n          coll.set(key, result.value);\n      } else if (hasInSelf) {\n        const result = whenInSelf(this.get(key), key);\n        if (result.keep)\n          coll.set(key, result.value);\n      } else if (hasInOther) {\n        const result = whenInOther(other.get(key), key);\n        if (result.keep)\n          coll.set(key, result.value);\n      }\n    }\n    return coll;\n  }\n  /**\n   * The sorted method sorts the items of a collection and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   *\n   * @param compareFunction - Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @example\n   * ```ts\n   * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   * ```\n   */\n  sorted(compareFunction = _Collection.defaultSort) {\n    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n  toJSON() {\n    return [...this.values()];\n  }\n  static defaultSort(firstValue, secondValue) {\n    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n  }\n  /**\n   * Creates a Collection from a list of entries.\n   *\n   * @param entries - The list of entries\n   * @param combine - Function to combine an existing entry with a new one\n   * @example\n   * ```ts\n   * Collection.combineEntries([[\"a\", 1], [\"b\", 2], [\"a\", 2]], (x, y) => x + y);\n   * // returns Collection { \"a\" => 3, \"b\" => 2 }\n   * ```\n   */\n  static combineEntries(entries, combine) {\n    const coll = new _Collection();\n    for (const [key, value] of entries) {\n      if (coll.has(key)) {\n        coll.set(key, combine(coll.get(key), value, key));\n      } else {\n        coll.set(key, value);\n      }\n    }\n    return coll;\n  }\n};\n\n// src/index.ts\nvar version = \"1.5.3\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Collection,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Options for defining the behavior of a LimitedCollection\n * @typedef {Object} LimitedCollectionOptions\n * @property {?number} [maxSize=Infinity] The maximum size of the Collection\n * @property {?Function} [keepOverLimit=null] A function, which is passed the value and key of an entry, ran to decide\n * to keep an entry past the maximum size\n */\n\n/**\n * A Collection which holds a max amount of entries.\n * @extends {Collection}\n * @param {LimitedCollectionOptions} [options={}] Options for constructing the Collection.\n * @param {Iterable} [iterable=null] Optional entries passed to the Map constructor.\n */\nclass LimitedCollection extends Collection {\n  constructor(options = {}, iterable) {\n    if (typeof options !== 'object' || options === null) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    }\n    const { maxSize = Infinity, keepOverLimit = null } = options;\n\n    if (typeof maxSize !== 'number') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'maxSize', 'number');\n    }\n    if (keepOverLimit !== null && typeof keepOverLimit !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'keepOverLimit', 'function');\n    }\n\n    super(iterable);\n\n    /**\n     * The max size of the Collection.\n     * @type {number}\n     */\n    this.maxSize = maxSize;\n\n    /**\n     * A function called to check if an entry should be kept when the Collection is at max size.\n     * @type {?Function}\n     */\n    this.keepOverLimit = keepOverLimit;\n  }\n\n  set(key, value) {\n    if (this.maxSize === 0 && !this.keepOverLimit?.(value, key, this)) return this;\n    if (this.size >= this.maxSize && !this.has(key)) {\n      for (const [k, v] of this.entries()) {\n        const keep = this.keepOverLimit?.(v, k, this) ?? false;\n        if (!keep) {\n          this.delete(k);\n          break;\n        }\n      }\n    }\n    return super.set(key, value);\n  }\n\n  static get [Symbol.species]() {\n    return Collection;\n  }\n}\n\nmodule.exports = LimitedCollection;\n",
    "'use strict';\n\nconst { DefaultRestOptions, DefaultUserAgentAppendix } = require('@discordjs/rest');\nconst { toSnakeCase } = require('./Transformers');\nconst { version } = require('../../package.json');\n\n// TODO(ckohen): switch order of params so full manager is first and \"type\" is optional\n/**\n * @typedef {Function} CacheFactory\n * @param {Function} managerType The base manager class the cache is being requested from.\n * @param {Function} holds The class that the cache will hold.\n * @param {Function} manager The fully extended manager class the cache is being requested from.\n * @returns {Collection} A Collection used to store the cache of the manager.\n */\n\n/**\n * Options for a client.\n * @typedef {Object} ClientOptions\n * @property {number|number[]|string} [shards] The shard's id to run, or an array of shard ids. If not specified,\n * the client will spawn {@link ClientOptions#shardCount} shards. If set to `auto`, it will fetch the\n * recommended amount of shards from Discord and spawn that amount\n * @property {number} [closeTimeout=5_000] The amount of time in milliseconds to wait for the close frame to be received\n * from the WebSocket. Don't have this too high/low. It's best to have it between 2_000-6_000 ms.\n * @property {number} [shardCount=1] The total amount of shards used by all processes of this bot\n * (e.g. recommended shard count, shard count of the ShardingManager)\n * @property {CacheFactory} [makeCache] Function to create a cache.\n * You can use your own function, or the {@link Options} class to customize the Collection used for the cache.\n * <warn>Overriding the cache used in `GuildManager`, `ChannelManager`, `GuildChannelManager`, `RoleManager`,\n * and `PermissionOverwriteManager` is unsupported and **will** break functionality</warn>\n * @property {MessageMentionOptions} [allowedMentions] The default value for {@link BaseMessageOptions#allowedMentions}\n * @property {Partials[]} [partials] Structures allowed to be partial. This means events can be emitted even when\n * they're missing all the data for a particular structure. See the \"Partial Structures\" topic on the\n * {@link https://discordjs.guide/popular-topics/partials.html guide} for some\n * important usage information, as partials require you to put checks in place when handling data.\n * @property {boolean} [failIfNotExists=true] The default value for {@link MessageReplyOptions#failIfNotExists}\n * @property {PresenceData} [presence={}] Presence data to use upon login\n * @property {IntentsResolvable} intents Intents to enable for this connection\n * @property {number} [waitGuildTimeout=15_000] Time in milliseconds that clients with the\n * {@link GatewayIntentBits.Guilds} gateway intent should wait for missing guilds to be received before being ready.\n * @property {SweeperOptions} [sweepers=this.DefaultSweeperSettings] Options for cache sweeping\n * @property {WebsocketOptions} [ws] Options for the WebSocket\n * @property {RESTOptions} [rest] Options for the REST manager\n * @property {Function} [jsonTransformer] A function used to transform outgoing json data\n * @property {boolean} [enforceNonce=false] The default value for {@link MessageCreateOptions#enforceNonce}\n */\n\n/**\n * Options for {@link Sweepers} defining the behavior of cache sweeping\n * @typedef {Object<SweeperKey, SweepOptions>} SweeperOptions\n */\n\n/**\n * Options for sweeping a single type of item from cache\n * @typedef {Object} SweepOptions\n * @property {number} interval The interval (in seconds) at which to perform sweeping of the item\n * @property {number} [lifetime] How long an item should stay in cache until it is considered sweepable.\n * <warn>This property is only valid for the `invites`, `messages`, and `threads` keys. The `filter` property\n * is mutually exclusive to this property and takes priority</warn>\n * @property {GlobalSweepFilter} filter The function used to determine the function passed to the sweep method\n * <info>This property is optional when the key is `invites`, `messages`, or `threads` and `lifetime` is set</info>\n */\n\n/**\n * A function to determine what strategy to use for sharding internally.\n * ```js\n * (manager) => new WorkerShardingStrategy(manager, { shardsPerWorker: 2 })\n * ```\n * @typedef {Function} BuildStrategyFunction\n * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding\n * @returns {IShardingStrategy} The strategy to use for sharding\n */\n\n/**\n * A function to change the concurrency handling for shard identifies of this manager\n * ```js\n * async (manager) => {\n *   const gateway = await manager.fetchGatewayInformation();\n *   return new SimpleIdentifyThrottler(gateway.session_start_limit.max_concurrency);\n * }\n * ```\n * @typedef {Function} IdentifyThrottlerFunction\n * @param {WSWebSocketManager} manager The WebSocketManager that is going to initiate the sharding\n * @returns {Awaitable<IIdentifyThrottler>} The identify throttler that this ws manager will use\n */\n\n/**\n * WebSocket options (these are left as snake_case to match the API)\n * @typedef {Object} WebsocketOptions\n * @property {number} [large_threshold=50] Number of members in a guild after which offline users will no longer be\n * sent in the initial guild member list, must be between 50 and 250\n * @property {number} [version=10] The Discord gateway version to use <warn>Changing this can break the library;\n * only set this if you know what you are doing</warn>\n * @property {BuildStrategyFunction} [buildStrategy] Builds the strategy to use for sharding\n * @property {IdentifyThrottlerFunction} [buildIdentifyThrottler] Builds the identify throttler to use for sharding\n */\n\n/**\n * Contains various utilities for client options.\n */\nclass Options extends null {\n  /**\n   * The default user agent appendix.\n   * @type {string}\n   * @memberof Options\n   * @private\n   */\n  static userAgentAppendix = `discord.js/${version} ${DefaultUserAgentAppendix}`.trimEnd();\n\n  /**\n   * The default client options.\n   * @returns {ClientOptions}\n   */\n  static createDefault() {\n    return {\n      closeTimeout: 5_000,\n      waitGuildTimeout: 15_000,\n      shardCount: 1,\n      makeCache: this.cacheWithLimits(this.DefaultMakeCacheSettings),\n      partials: [],\n      failIfNotExists: true,\n      enforceNonce: false,\n      presence: {},\n      sweepers: this.DefaultSweeperSettings,\n      ws: {\n        large_threshold: 50,\n        version: 10,\n      },\n      rest: {\n        ...DefaultRestOptions,\n        userAgentAppendix: this.userAgentAppendix,\n      },\n      jsonTransformer: toSnakeCase,\n    };\n  }\n\n  /**\n   * Create a cache factory using predefined settings to sweep or limit.\n   * @param {Object<string, LimitedCollectionOptions|number>} [settings={}] Settings passed to the relevant constructor.\n   * If no setting is provided for a manager, it uses Collection.\n   * If a number is provided for a manager, it uses that number as the max size for a LimitedCollection.\n   * If LimitedCollectionOptions are provided for a manager, it uses those settings to form a LimitedCollection.\n   * @returns {CacheFactory}\n   * @example\n   * // Store up to 200 messages per channel and 200 members per guild, always keeping the client member.\n   * Options.cacheWithLimits({\n   *    MessageManager: 200,\n   *    GuildMemberManager: {\n   *      maxSize: 200,\n   *      keepOverLimit: (member) => member.id === client.user.id,\n   *    },\n   *  });\n   */\n  static cacheWithLimits(settings = {}) {\n    const { Collection } = require('@discordjs/collection');\n    const LimitedCollection = require('./LimitedCollection');\n\n    return (managerType, _, manager) => {\n      const setting = settings[manager.name] ?? settings[managerType.name];\n      /* eslint-disable-next-line eqeqeq */\n      if (setting == null) {\n        return new Collection();\n      }\n      if (typeof setting === 'number') {\n        if (setting === Infinity) {\n          return new Collection();\n        }\n        return new LimitedCollection({ maxSize: setting });\n      }\n      /* eslint-disable-next-line eqeqeq */\n      const noLimit = setting.maxSize == null || setting.maxSize === Infinity;\n      if (noLimit) {\n        return new Collection();\n      }\n      return new LimitedCollection(setting);\n    };\n  }\n\n  /**\n   * Create a cache factory that always caches everything.\n   * @returns {CacheFactory}\n   */\n  static cacheEverything() {\n    const { Collection } = require('@discordjs/collection');\n    return () => new Collection();\n  }\n\n  /**\n   * The default settings passed to {@link ClientOptions.makeCache}.\n   * The caches that this changes are:\n   * * `MessageManager` - Limit to 200 messages\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `makeCache: Options.cacheWithLimits({ ...Options.DefaultMakeCacheSettings, ReactionManager: 0 })`</info>\n   * @type {Object<string, LimitedCollectionOptions|number>}\n   */\n  static get DefaultMakeCacheSettings() {\n    return {\n      MessageManager: 200,\n    };\n  }\n\n  /**\n   * The default settings passed to {@link ClientOptions.sweepers}.\n   * The sweepers that this changes are:\n   * * `threads` - Sweep archived threads every hour, removing those archived more than 4 hours ago\n   * <info>If you want to keep default behavior and add on top of it you can use this object and add on to it, e.g.\n   * `sweepers: { ...Options.DefaultSweeperSettings, messages: { interval: 300, lifetime: 600 } }`</info>\n   * @type {SweeperOptions}\n   */\n  static get DefaultSweeperSettings() {\n    return {\n      threads: {\n        interval: 3600,\n        lifetime: 14400,\n      },\n    };\n  }\n}\n\nmodule.exports = Options;\n\n/**\n * @external RESTOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/RESTOptions:Interface}\n */\n\n/**\n * @external WSWebSocketManager\n * @see {@link https://discord.js.org/docs/packages/ws/stable/WebSocketManager:Class}\n */\n\n/**\n * @external IShardingStrategy\n * @see {@link https://discord.js.org/docs/packages/ws/stable/IShardingStrategy:Interface}\n */\n\n/**\n * @external IIdentifyThrottler\n * @see {@link https://discord.js.org/docs/packages/ws/stable/IIdentifyThrottler:Interface}\n */\n",
    "'use strict';\n\n/**\n * @typedef {Object} Colors\n * @property {number} Default 0x000000 | rgb(0,0,0)\n * @property {number} White 0xFFFFFF | rgb(255,255,255)\n * @property {number} Aqua 0x1ABC9C | rgb(26,188,156)\n * @property {number} Green 0x57F287 | rgb(87,242,135)\n * @property {number} Blue 0x3498DB | rgb(52,152,219)\n * @property {number} Yellow 0xFEE75C | rgb(254,231,92)\n * @property {number} Purple 0x9B59B6 | rgb(155,89,182)\n * @property {number} LuminousVividPink 0xE91E63 | rgb(233,30,99)\n * @property {number} Fuchsia 0xEB459E | rgb(235,69,158)\n * @property {number} Gold 0xF1C40F | rgb(241,196,15)\n * @property {number} Orange 0xE67E22 | rgb(230,126,34)\n * @property {number} Red 0xED4245 | rgb(237,66,69)\n * @property {number} Grey 0x95A5A6 | rgb(149,165,166)\n * @property {number} Navy 0x34495E | rgb(52,73,94)\n * @property {number} DarkAqua 0x11806A | rgb(17,128,106)\n * @property {number} DarkGreen 0x1F8B4C | rgb(31,139,76)\n * @property {number} DarkBlue 0x206694 | rgb(32,102,148)\n * @property {number} DarkPurple 0x71368A | rgb(113,54,138)\n * @property {number} DarkVividPink 0xAD1457 | rgb(173,20,87)\n * @property {number} DarkGold 0xC27C0E | rgb(194,124,14)\n * @property {number} DarkOrange 0xA84300 | rgb(168,67,0)\n * @property {number} DarkRed 0x992D22 | rgb(153,45,34)\n * @property {number} DarkGrey 0x979C9F | rgb(151,156,159)\n * @property {number} DarkerGrey 0x7F8C8D | rgb(127,140,141)\n * @property {number} LightGrey 0xBCC0C0 | rgb(188,192,192)\n * @property {number} DarkNavy 0x2C3E50 | rgb(44,62,80)\n * @property {number} Blurple 0x5865F2 | rgb(88,101,242)\n * @property {number} Greyple 0x99AAb5 | rgb(153,170,181)\n * @property {number} DarkButNotBlack 0x2C2F33 | rgb(44,47,51)\n * @property {number} NotQuiteBlack 0x23272A | rgb(35,39,42)\n */\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {Colors}\n * @ignore\n */\nmodule.exports = {\n  Default: 0x000000,\n  White: 0xffffff,\n  Aqua: 0x1abc9c,\n  Green: 0x57f287,\n  Blue: 0x3498db,\n  Yellow: 0xfee75c,\n  Purple: 0x9b59b6,\n  LuminousVividPink: 0xe91e63,\n  Fuchsia: 0xeb459e,\n  Gold: 0xf1c40f,\n  Orange: 0xe67e22,\n  Red: 0xed4245,\n  Grey: 0x95a5a6,\n  Navy: 0x34495e,\n  DarkAqua: 0x11806a,\n  DarkGreen: 0x1f8b4c,\n  DarkBlue: 0x206694,\n  DarkPurple: 0x71368a,\n  DarkVividPink: 0xad1457,\n  DarkGold: 0xc27c0e,\n  DarkOrange: 0xa84300,\n  DarkRed: 0x992d22,\n  DarkGrey: 0x979c9f,\n  DarkerGrey: 0x7f8c8d,\n  LightGrey: 0xbcc0c0,\n  DarkNavy: 0x2c3e50,\n  Blurple: 0x5865f2,\n  Greyple: 0x99aab5,\n  DarkButNotBlack: 0x2c2f33,\n  NotQuiteBlack: 0x23272a,\n};\n",
    "'use strict';\n\nconst { DiscordjsRangeError, ErrorCodes } = require('../errors');\n\n/**\n * Data structure that makes it easy to interact with a bitfield.\n */\nclass BitField {\n  /**\n   * Numeric bitfield flags.\n   * <info>Defined in extension classes</info>\n   * @type {Object}\n   * @memberof BitField\n   * @abstract\n   */\n  static Flags = {};\n\n  /**\n   * @type {number|bigint}\n   * @memberof BitField\n   * @private\n   */\n  static DefaultBit = 0;\n\n  /**\n   * @param {BitFieldResolvable} [bits=this.constructor.DefaultBit] Bit(s) to read from\n   */\n  constructor(bits = this.constructor.DefaultBit) {\n    /**\n     * Bitfield of the packed bits\n     * @type {number|bigint}\n     */\n    this.bitfield = this.constructor.resolve(bits);\n  }\n\n  /**\n   * Checks whether the bitfield has a bit, or any of multiple bits.\n   * @param {BitFieldResolvable} bit Bit(s) to check for\n   * @returns {boolean}\n   */\n  any(bit) {\n    return (this.bitfield & this.constructor.resolve(bit)) !== this.constructor.DefaultBit;\n  }\n\n  /**\n   * Checks if this bitfield equals another\n   * @param {BitFieldResolvable} bit Bit(s) to check for\n   * @returns {boolean}\n   */\n  equals(bit) {\n    return this.bitfield === this.constructor.resolve(bit);\n  }\n\n  /**\n   * Checks whether the bitfield has a bit, or multiple bits.\n   * @param {BitFieldResolvable} bit Bit(s) to check for\n   * @returns {boolean}\n   */\n  has(bit) {\n    bit = this.constructor.resolve(bit);\n    return (this.bitfield & bit) === bit;\n  }\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {...*} hasParams Additional parameters for the has method, if any\n   * @returns {string[]}\n   */\n  missing(bits, ...hasParams) {\n    return new this.constructor(bits).remove(this).toArray(...hasParams);\n  }\n\n  /**\n   * Freezes these bits, making them immutable.\n   * @returns {Readonly<BitField>}\n   */\n  freeze() {\n    return Object.freeze(this);\n  }\n\n  /**\n   * Adds bits to these ones.\n   * @param {...BitFieldResolvable} [bits] Bits to add\n   * @returns {BitField} These bits or new BitField if the instance is frozen.\n   */\n  add(...bits) {\n    let total = this.constructor.DefaultBit;\n    for (const bit of bits) {\n      total |= this.constructor.resolve(bit);\n    }\n    if (Object.isFrozen(this)) return new this.constructor(this.bitfield | total);\n    this.bitfield |= total;\n    return this;\n  }\n\n  /**\n   * Removes bits from these.\n   * @param {...BitFieldResolvable} [bits] Bits to remove\n   * @returns {BitField} These bits or new BitField if the instance is frozen.\n   */\n  remove(...bits) {\n    let total = this.constructor.DefaultBit;\n    for (const bit of bits) {\n      total |= this.constructor.resolve(bit);\n    }\n    if (Object.isFrozen(this)) return new this.constructor(this.bitfield & ~total);\n    this.bitfield &= ~total;\n    return this;\n  }\n\n  /**\n   * Gets an object mapping field names to a {@link boolean} indicating whether the\n   * bit is available.\n   * @param {...*} hasParams Additional parameters for the has method, if any\n   * @returns {Object}\n   */\n  serialize(...hasParams) {\n    const serialized = {};\n    for (const [flag, bit] of Object.entries(this.constructor.Flags)) {\n      if (isNaN(flag)) serialized[flag] = this.has(bit, ...hasParams);\n    }\n    return serialized;\n  }\n\n  /**\n   * Gets an {@link Array} of bitfield names based on the bits available.\n   * @param {...*} hasParams Additional parameters for the has method, if any\n   * @returns {string[]}\n   */\n  toArray(...hasParams) {\n    return [...this[Symbol.iterator](...hasParams)];\n  }\n\n  toJSON() {\n    return typeof this.bitfield === 'number' ? this.bitfield : this.bitfield.toString();\n  }\n\n  valueOf() {\n    return this.bitfield;\n  }\n\n  *[Symbol.iterator](...hasParams) {\n    for (const bitName of Object.keys(this.constructor.Flags)) {\n      if (isNaN(bitName) && this.has(bitName, ...hasParams)) yield bitName;\n    }\n  }\n\n  /**\n   * Data that can be resolved to give a bitfield. This can be:\n   * * A bit number (this can be a number literal or a value taken from {@link BitField.Flags})\n   * * A string bit number\n   * * An instance of BitField\n   * * An Array of BitFieldResolvable\n   * @typedef {number|string|bigint|BitField|BitFieldResolvable[]} BitFieldResolvable\n   */\n\n  /**\n   * Resolves bitfields to their numeric form.\n   * @param {BitFieldResolvable} [bit] bit(s) to resolve\n   * @returns {number|bigint}\n   */\n  static resolve(bit) {\n    const { DefaultBit } = this;\n    if (typeof DefaultBit === typeof bit && bit >= DefaultBit) return bit;\n    if (bit instanceof BitField) return bit.bitfield;\n    if (Array.isArray(bit)) {\n      return bit.map(bit_ => this.resolve(bit_)).reduce((prev, bit_) => prev | bit_, DefaultBit);\n    }\n    if (typeof bit === 'string') {\n      if (!isNaN(bit)) return typeof DefaultBit === 'bigint' ? BigInt(bit) : Number(bit);\n      if (this.Flags[bit] !== undefined) return this.Flags[bit];\n    }\n    throw new DiscordjsRangeError(ErrorCodes.BitFieldInvalid, bit);\n  }\n}\n\nmodule.exports = BitField;\n",
    "'use strict';\n\nconst { AttachmentFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with an {@link Attachment#flags} bitfield.\n * @extends {BitField}\n */\nclass AttachmentFlagsBitField extends BitField {\n  /**\n   * Numeric attachment flags.\n   * @type {AttachmentFlags}\n   * @memberof AttachmentFlagsBitField\n   */\n  static Flags = AttachmentFlags;\n}\n\n/**\n * @name AttachmentFlagsBitField\n * @kind constructor\n * @memberof AttachmentFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\nmodule.exports = AttachmentFlagsBitField;\n",
    "'use strict';\n\nconst AttachmentFlagsBitField = require('../util/AttachmentFlagsBitField.js');\nconst { basename, flatten } = require('../util/Util');\n\n/**\n * @typedef {Object} AttachmentPayload\n * @property {?string} name The name of the attachment\n * @property {Stream|BufferResolvable} attachment The attachment in this payload\n * @property {?string} description The description of the attachment\n */\n\n/**\n * Represents an attachment\n */\nclass Attachment {\n  constructor(data) {\n    this.attachment = data.url;\n    /**\n     * The name of this attachment\n     * @type {string}\n     */\n    this.name = data.filename;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The attachment's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('size' in data) {\n      /**\n       * The size of this attachment in bytes\n       * @type {number}\n       */\n      this.size = data.size;\n    }\n\n    if ('url' in data) {\n      /**\n       * The URL to this attachment\n       * @type {string}\n       */\n      this.url = data.url;\n    }\n\n    if ('proxy_url' in data) {\n      /**\n       * The Proxy URL to this attachment\n       * @type {string}\n       */\n      this.proxyURL = data.proxy_url;\n    }\n\n    if ('height' in data) {\n      /**\n       * The height of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.height = data.height;\n    } else {\n      this.height ??= null;\n    }\n\n    if ('width' in data) {\n      /**\n       * The width of this attachment (if an image or video)\n       * @type {?number}\n       */\n      this.width = data.width;\n    } else {\n      this.width ??= null;\n    }\n\n    if ('content_type' in data) {\n      /**\n       * The media (MIME) type of this attachment\n       * @type {?string}\n       * @see {@link https://developer.mozilla.org/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types}\n       */\n      this.contentType = data.content_type;\n    } else {\n      this.contentType ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description (alt text) of this attachment\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    /**\n     * Whether this attachment is ephemeral\n     * @type {boolean}\n     */\n    this.ephemeral = data.ephemeral ?? false;\n\n    if ('duration_secs' in data) {\n      /**\n       * The duration of this attachment in seconds\n       * <info>This will only be available if the attachment is an audio file.</info>\n       * @type {?number}\n       */\n      this.duration = data.duration_secs;\n    } else {\n      this.duration ??= null;\n    }\n\n    if ('waveform' in data) {\n      /**\n       * The base64 encoded byte array representing a sampled waveform\n       * <info>This will only be available if the attachment is an audio file.</info>\n       * @type {?string}\n       */\n      this.waveform = data.waveform;\n    } else {\n      this.waveform ??= null;\n    }\n\n    if ('flags' in data) {\n      /**\n       * The flags of this attachment\n       * @type {Readonly<AttachmentFlagsBitField>}\n       */\n      this.flags = new AttachmentFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new AttachmentFlagsBitField().freeze();\n    }\n\n    if ('title' in data) {\n      /**\n       * The title of this attachment\n       * <info>This will only be available if the attachment name contains special characters.</info>\n       * @type {?string}\n       */\n      this.title = data.title;\n    } else {\n      this.title ??= null;\n    }\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return basename(this.url ?? this.name).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\nmodule.exports = Attachment;\n",
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Faces: () => Faces,\n  GuildNavigationMentions: () => GuildNavigationMentions,\n  HeadingLevel: () => HeadingLevel,\n  TimestampStyles: () => TimestampStyles,\n  applicationDirectory: () => applicationDirectory,\n  blockQuote: () => blockQuote,\n  bold: () => bold,\n  channelLink: () => channelLink,\n  channelMention: () => channelMention,\n  chatInputApplicationCommandMention: () => chatInputApplicationCommandMention,\n  codeBlock: () => codeBlock,\n  escapeBold: () => escapeBold,\n  escapeBulletedList: () => escapeBulletedList,\n  escapeCodeBlock: () => escapeCodeBlock,\n  escapeEscape: () => escapeEscape,\n  escapeHeading: () => escapeHeading,\n  escapeInlineCode: () => escapeInlineCode,\n  escapeItalic: () => escapeItalic,\n  escapeMarkdown: () => escapeMarkdown,\n  escapeMaskedLink: () => escapeMaskedLink,\n  escapeNumberedList: () => escapeNumberedList,\n  escapeSpoiler: () => escapeSpoiler,\n  escapeStrikethrough: () => escapeStrikethrough,\n  escapeUnderline: () => escapeUnderline,\n  formatEmoji: () => formatEmoji,\n  heading: () => heading,\n  hideLinkEmbed: () => hideLinkEmbed,\n  hyperlink: () => hyperlink,\n  inlineCode: () => inlineCode,\n  italic: () => italic,\n  messageLink: () => messageLink,\n  orderedList: () => orderedList,\n  quote: () => quote,\n  roleMention: () => roleMention,\n  spoiler: () => spoiler,\n  strikethrough: () => strikethrough,\n  subtext: () => subtext,\n  time: () => time,\n  underline: () => underline,\n  underscore: () => underscore,\n  unorderedList: () => unorderedList,\n  userMention: () => userMention,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/escapers.ts\nfunction escapeMarkdown(text, options = {}) {\n  const {\n    codeBlock: codeBlock2 = true,\n    inlineCode: inlineCode2 = true,\n    bold: bold2 = true,\n    italic: italic2 = true,\n    underline: underline2 = true,\n    strikethrough: strikethrough2 = true,\n    spoiler: spoiler2 = true,\n    codeBlockContent = true,\n    inlineCodeContent = true,\n    escape = true,\n    heading: heading2 = false,\n    bulletedList = false,\n    numberedList = false,\n    maskedLink = false\n  } = options;\n  if (!codeBlockContent) {\n    return text.split(\"```\").map((subString, index, array) => {\n      if (index % 2 && index !== array.length - 1) return subString;\n      return escapeMarkdown(subString, {\n        inlineCode: inlineCode2,\n        bold: bold2,\n        italic: italic2,\n        underline: underline2,\n        strikethrough: strikethrough2,\n        spoiler: spoiler2,\n        inlineCodeContent,\n        escape,\n        heading: heading2,\n        bulletedList,\n        numberedList,\n        maskedLink\n      });\n    }).join(codeBlock2 ? \"\\\\`\\\\`\\\\`\" : \"```\");\n  }\n  if (!inlineCodeContent) {\n    return text.split(/(?<=^|[^`])`(?=[^`]|$)/g).map((subString, index, array) => {\n      if (index % 2 && index !== array.length - 1) return subString;\n      return escapeMarkdown(subString, {\n        codeBlock: codeBlock2,\n        bold: bold2,\n        italic: italic2,\n        underline: underline2,\n        strikethrough: strikethrough2,\n        spoiler: spoiler2,\n        escape,\n        heading: heading2,\n        bulletedList,\n        numberedList,\n        maskedLink\n      });\n    }).join(inlineCode2 ? \"\\\\`\" : \"`\");\n  }\n  let res = text;\n  if (escape) res = escapeEscape(res);\n  if (inlineCode2) res = escapeInlineCode(res);\n  if (codeBlock2) res = escapeCodeBlock(res);\n  if (italic2) res = escapeItalic(res);\n  if (bold2) res = escapeBold(res);\n  if (underline2) res = escapeUnderline(res);\n  if (strikethrough2) res = escapeStrikethrough(res);\n  if (spoiler2) res = escapeSpoiler(res);\n  if (heading2) res = escapeHeading(res);\n  if (bulletedList) res = escapeBulletedList(res);\n  if (numberedList) res = escapeNumberedList(res);\n  if (maskedLink) res = escapeMaskedLink(res);\n  return res;\n}\n__name(escapeMarkdown, \"escapeMarkdown\");\nfunction escapeCodeBlock(text) {\n  return text.replaceAll(\"```\", \"\\\\`\\\\`\\\\`\");\n}\n__name(escapeCodeBlock, \"escapeCodeBlock\");\nfunction escapeInlineCode(text) {\n  return text.replaceAll(/(?<=^|[^`])``?(?=[^`]|$)/g, (match) => match.length === 2 ? \"\\\\`\\\\`\" : \"\\\\`\");\n}\n__name(escapeInlineCode, \"escapeInlineCode\");\nfunction escapeItalic(text) {\n  let idx = 0;\n  const newText = text.replaceAll(/(?<=^|[^*])\\*([^*]|\\*\\*|$)/g, (_, match) => {\n    if (match === \"**\") return ++idx % 2 ? `\\\\*${match}` : `${match}\\\\*`;\n    return `\\\\*${match}`;\n  });\n  idx = 0;\n  return newText.replaceAll(/(?<=^|[^_])(?<!<a?:.+|https?:\\/\\/\\S+)_(?!:\\d+>)([^_]|__|$)/g, (_, match) => {\n    if (match === \"__\") return ++idx % 2 ? `\\\\_${match}` : `${match}\\\\_`;\n    return `\\\\_${match}`;\n  });\n}\n__name(escapeItalic, \"escapeItalic\");\nfunction escapeBold(text) {\n  let idx = 0;\n  return text.replaceAll(/\\*\\*(\\*)?/g, (_, match) => {\n    if (match) return ++idx % 2 ? `${match}\\\\*\\\\*` : `\\\\*\\\\*${match}`;\n    return \"\\\\*\\\\*\";\n  });\n}\n__name(escapeBold, \"escapeBold\");\nfunction escapeUnderline(text) {\n  let idx = 0;\n  return text.replaceAll(/(?<!<a?:.+|https?:\\/\\/\\S+)__(_)?(?!:\\d+>)/g, (_, match) => {\n    if (match) return ++idx % 2 ? `${match}\\\\_\\\\_` : `\\\\_\\\\_${match}`;\n    return \"\\\\_\\\\_\";\n  });\n}\n__name(escapeUnderline, \"escapeUnderline\");\nfunction escapeStrikethrough(text) {\n  return text.replaceAll(\"~~\", \"\\\\~\\\\~\");\n}\n__name(escapeStrikethrough, \"escapeStrikethrough\");\nfunction escapeSpoiler(text) {\n  return text.replaceAll(\"||\", \"\\\\|\\\\|\");\n}\n__name(escapeSpoiler, \"escapeSpoiler\");\nfunction escapeEscape(text) {\n  return text.replaceAll(\"\\\\\", \"\\\\\\\\\");\n}\n__name(escapeEscape, \"escapeEscape\");\nfunction escapeHeading(text) {\n  return text.replaceAll(/^( {0,2})([*-] )?( *)(#{1,3} )/gm, \"$1$2$3\\\\$4\");\n}\n__name(escapeHeading, \"escapeHeading\");\nfunction escapeBulletedList(text) {\n  return text.replaceAll(/^( *)([*-])( +)/gm, \"$1\\\\$2$3\");\n}\n__name(escapeBulletedList, \"escapeBulletedList\");\nfunction escapeNumberedList(text) {\n  return text.replaceAll(/^( *\\d+)\\./gm, \"$1\\\\.\");\n}\n__name(escapeNumberedList, \"escapeNumberedList\");\nfunction escapeMaskedLink(text) {\n  return text.replaceAll(/\\[.+]\\(.+\\)/gm, \"\\\\$&\");\n}\n__name(escapeMaskedLink, \"escapeMaskedLink\");\n\n// src/formatters.ts\nfunction codeBlock(language, content) {\n  return content === void 0 ? `\\`\\`\\`\n${language}\n\\`\\`\\`` : `\\`\\`\\`${language}\n${content}\n\\`\\`\\``;\n}\n__name(codeBlock, \"codeBlock\");\nfunction inlineCode(content) {\n  return `\\`${content}\\``;\n}\n__name(inlineCode, \"inlineCode\");\nfunction italic(content) {\n  return `_${content}_`;\n}\n__name(italic, \"italic\");\nfunction bold(content) {\n  return `**${content}**`;\n}\n__name(bold, \"bold\");\nfunction underscore(content) {\n  return underline(content);\n}\n__name(underscore, \"underscore\");\nfunction underline(content) {\n  return `__${content}__`;\n}\n__name(underline, \"underline\");\nfunction strikethrough(content) {\n  return `~~${content}~~`;\n}\n__name(strikethrough, \"strikethrough\");\nfunction quote(content) {\n  return `> ${content}`;\n}\n__name(quote, \"quote\");\nfunction blockQuote(content) {\n  return `>>> ${content}`;\n}\n__name(blockQuote, \"blockQuote\");\nfunction hideLinkEmbed(url) {\n  return `<${url}>`;\n}\n__name(hideLinkEmbed, \"hideLinkEmbed\");\nfunction hyperlink(content, url, title) {\n  return title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n__name(hyperlink, \"hyperlink\");\nfunction spoiler(content) {\n  return `||${content}||`;\n}\n__name(spoiler, \"spoiler\");\nfunction userMention(userId) {\n  return `<@${userId}>`;\n}\n__name(userMention, \"userMention\");\nfunction channelMention(channelId) {\n  return `<#${channelId}>`;\n}\n__name(channelMention, \"channelMention\");\nfunction roleMention(roleId) {\n  return `<@&${roleId}>`;\n}\n__name(roleMention, \"roleMention\");\nfunction chatInputApplicationCommandMention(commandName, subcommandGroupName, subcommandName, commandId) {\n  if (commandId !== void 0) {\n    return `</${commandName} ${subcommandGroupName} ${subcommandName}:${commandId}>`;\n  }\n  if (subcommandName !== void 0) {\n    return `</${commandName} ${subcommandGroupName}:${subcommandName}>`;\n  }\n  return `</${commandName}:${subcommandGroupName}>`;\n}\n__name(chatInputApplicationCommandMention, \"chatInputApplicationCommandMention\");\nfunction formatEmoji(emojiIdOrOptions, animated) {\n  const options = typeof emojiIdOrOptions === \"string\" ? {\n    id: emojiIdOrOptions,\n    animated: animated ?? false\n  } : emojiIdOrOptions;\n  const { id, animated: isAnimated, name: emojiName } = options;\n  return `<${isAnimated ? \"a\" : \"\"}:${emojiName ?? \"_\"}:${id}>`;\n}\n__name(formatEmoji, \"formatEmoji\");\nfunction channelLink(channelId, guildId) {\n  return `https://discord.com/channels/${guildId ?? \"@me\"}/${channelId}`;\n}\n__name(channelLink, \"channelLink\");\nfunction messageLink(channelId, messageId, guildId) {\n  return `${guildId === void 0 ? channelLink(channelId) : channelLink(channelId, guildId)}/${messageId}`;\n}\n__name(messageLink, \"messageLink\");\nvar HeadingLevel = /* @__PURE__ */ ((HeadingLevel2) => {\n  HeadingLevel2[HeadingLevel2[\"One\"] = 1] = \"One\";\n  HeadingLevel2[HeadingLevel2[\"Two\"] = 2] = \"Two\";\n  HeadingLevel2[HeadingLevel2[\"Three\"] = 3] = \"Three\";\n  return HeadingLevel2;\n})(HeadingLevel || {});\nfunction heading(content, level) {\n  switch (level) {\n    case 3 /* Three */:\n      return `### ${content}`;\n    case 2 /* Two */:\n      return `## ${content}`;\n    default:\n      return `# ${content}`;\n  }\n}\n__name(heading, \"heading\");\nfunction listCallback(element, startNumber, depth = 0) {\n  if (Array.isArray(element)) {\n    return element.map((element2) => listCallback(element2, startNumber, depth + 1)).join(\"\\n\");\n  }\n  return `${\"  \".repeat(depth - 1)}${startNumber ? `${startNumber}.` : \"-\"} ${element}`;\n}\n__name(listCallback, \"listCallback\");\nfunction orderedList(list, startNumber = 1) {\n  return listCallback(list, Math.max(startNumber, 1));\n}\n__name(orderedList, \"orderedList\");\nfunction unorderedList(list) {\n  return listCallback(list);\n}\n__name(unorderedList, \"unorderedList\");\nfunction subtext(content) {\n  return `-# ${content}`;\n}\n__name(subtext, \"subtext\");\nfunction time(timeOrSeconds, style) {\n  if (typeof timeOrSeconds !== \"number\") {\n    timeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1e3);\n  }\n  return typeof style === \"string\" ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n__name(time, \"time\");\nfunction applicationDirectory(applicationId, skuId) {\n  const url = `https://discord.com/application-directory/${applicationId}/store`;\n  return skuId ? `${url}/${skuId}` : url;\n}\n__name(applicationDirectory, \"applicationDirectory\");\nvar TimestampStyles = {\n  /**\n   * Short time format, consisting of hours and minutes.\n   *\n   * @example `16:20`\n   */\n  ShortTime: \"t\",\n  /**\n   * Long time format, consisting of hours, minutes, and seconds.\n   *\n   * @example `16:20:30`\n   */\n  LongTime: \"T\",\n  /**\n   * Short date format, consisting of day, month, and year.\n   *\n   * @example `20/04/2021`\n   */\n  ShortDate: \"d\",\n  /**\n   * Long date format, consisting of day, month, and year.\n   *\n   * @example `20 April 2021`\n   */\n  LongDate: \"D\",\n  /**\n   * Short date-time format, consisting of short date and short time formats.\n   *\n   * @example `20 April 2021 16:20`\n   */\n  ShortDateTime: \"f\",\n  /**\n   * Long date-time format, consisting of long date and short time formats.\n   *\n   * @example `Tuesday, 20 April 2021 16:20`\n   */\n  LongDateTime: \"F\",\n  /**\n   * Relative time format, consisting of a relative duration format.\n   *\n   * @example `2 months ago`\n   */\n  RelativeTime: \"R\"\n};\nvar Faces = /* @__PURE__ */ ((Faces2) => {\n  Faces2[\"Shrug\"] = \"\\xAF\\\\_(\\u30C4)_/\\xAF\";\n  Faces2[\"Tableflip\"] = \"(\\u256F\\xB0\\u25A1\\xB0)\\u256F\\uFE35 \\u253B\\u2501\\u253B\";\n  Faces2[\"Unflip\"] = \"\\u252C\\u2500\\u252C\\u30CE( \\xBA _ \\xBA\\u30CE)\";\n  return Faces2;\n})(Faces || {});\nvar GuildNavigationMentions = /* @__PURE__ */ ((GuildNavigationMentions2) => {\n  GuildNavigationMentions2[\"Browse\"] = \"<id:browse>\";\n  GuildNavigationMentions2[\"Customize\"] = \"<id:customize>\";\n  GuildNavigationMentions2[\"Guide\"] = \"<id:guide>\";\n  return GuildNavigationMentions2;\n})(GuildNavigationMentions || {});\n\n// src/index.ts\nvar version = \"0.6.0\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Faces,\n  GuildNavigationMentions,\n  HeadingLevel,\n  TimestampStyles,\n  applicationDirectory,\n  blockQuote,\n  bold,\n  channelLink,\n  channelMention,\n  chatInputApplicationCommandMention,\n  codeBlock,\n  escapeBold,\n  escapeBulletedList,\n  escapeCodeBlock,\n  escapeEscape,\n  escapeHeading,\n  escapeInlineCode,\n  escapeItalic,\n  escapeMarkdown,\n  escapeMaskedLink,\n  escapeNumberedList,\n  escapeSpoiler,\n  escapeStrikethrough,\n  escapeUnderline,\n  formatEmoji,\n  heading,\n  hideLinkEmbed,\n  hyperlink,\n  inlineCode,\n  italic,\n  messageLink,\n  orderedList,\n  quote,\n  roleMention,\n  spoiler,\n  strikethrough,\n  subtext,\n  time,\n  underline,\n  underscore,\n  unorderedList,\n  userMention,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\nconst { flatten } = require('../util/Util');\n\n/**\n * Represents a data model that is identifiable by a Snowflake (i.e. Discord API data models).\n * @abstract\n */\nclass Base {\n  constructor(client) {\n    /**\n     * The client that instantiated this\n     * @name Base#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n\n  _patch(data) {\n    return data;\n  }\n\n  _update(data) {\n    const clone = this._clone();\n    this._patch(data);\n    return clone;\n  }\n\n  toJSON(...props) {\n    return flatten(this, ...props);\n  }\n\n  valueOf() {\n    return this.id;\n  }\n}\n\nmodule.exports = Base;\n",
    "'use strict';\n\nconst { ChannelFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link BaseChannel#flags} bitfield.\n * @extends {BitField}\n */\nclass ChannelFlagsBitField extends BitField {\n  /**\n   * Numeric guild channel flags.\n   * @type {ChannelFlags}\n   * @memberof ChannelFlagsBitField\n   */\n  static Flags = ChannelFlags;\n}\n\n/**\n * @name ChannelFlagsBitField\n * @kind constructor\n * @memberof ChannelFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name ChannelFlagsBitField#bitfield\n */\n\n/**\n * Data that can be resolved to give a channel flag bitfield. This can be:\n * * A string (see {@link ChannelFlagsBitField.Flags})\n * * A channel flag\n * * An instance of ChannelFlagsBitField\n * * An Array of ChannelFlagsResolvable\n * @typedef {string|number|ChannelFlagsBitField|ChannelFlagsResolvable[]} ChannelFlagsResolvable\n */\n\nmodule.exports = ChannelFlagsBitField;\n",
    "'use strict';\n\nconst { ChannelType, MessageType, ComponentType, ImageFormat, StickerFormatType } = require('discord-api-types/v10');\n\n/**\n * Max bulk deletable message age\n * @typedef {number} MaxBulkDeletableMessageAge\n */\nexports.MaxBulkDeletableMessageAge = 1_209_600_000;\n\n/**\n * The name of an item to be swept in Sweepers\n * * `autoModerationRules`\n * * `applicationCommands` - both global and guild commands\n * * `bans`\n * * `emojis`\n * * `entitlements`\n * * `invites` - accepts the `lifetime` property, using it will sweep based on expires timestamp\n * * `guildMembers`\n * * `messages` - accepts the `lifetime` property, using it will sweep based on edited or created timestamp\n * * `presences`\n * * `reactions`\n * * `stageInstances`\n * * `stickers`\n * * `threadMembers`\n * * `threads` - accepts the `lifetime` property, using it will sweep archived threads based on archived timestamp\n * * `users`\n * * `voiceStates`\n * @typedef {string} SweeperKey\n */\nexports.SweeperKeys = [\n  'autoModerationRules',\n  'applicationCommands',\n  'bans',\n  'emojis',\n  'entitlements',\n  'invites',\n  'guildMembers',\n  'messages',\n  'presences',\n  'reactions',\n  'stageInstances',\n  'stickers',\n  'threadMembers',\n  'threads',\n  'users',\n  'voiceStates',\n];\n\n/**\n * The types of messages that are not `System`. The available types are:\n * * {@link MessageType.Default}\n * * {@link MessageType.Reply}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * @typedef {MessageType[]} NonSystemMessageTypes\n */\nexports.NonSystemMessageTypes = [\n  MessageType.Default,\n  MessageType.Reply,\n  MessageType.ChatInputCommand,\n  MessageType.ContextMenuCommand,\n];\n\n/**\n * The guild channels that are text-based.\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * * VoiceChannel\n * * StageChannel\n * @typedef {TextChannel|NewsChannel|ThreadChannel|VoiceChannel|StageChannel} GuildTextBasedChannel\n */\n\n/**\n * The types of guild channels that are text-based. The available types are:\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} GuildTextBasedChannelTypes\n */\nexports.GuildTextBasedChannelTypes = [\n  ChannelType.GuildText,\n  ChannelType.GuildAnnouncement,\n  ChannelType.AnnouncementThread,\n  ChannelType.PublicThread,\n  ChannelType.PrivateThread,\n  ChannelType.GuildVoice,\n  ChannelType.GuildStageVoice,\n];\n\n/**\n * The channels that are text-based.\n * * {@link DMChannel}\n * * {@link GuildTextBasedChannel}\n * @typedef {DMChannel|GuildTextBasedChannel} TextBasedChannels\n */\n\n/**\n * Data that resolves to give a text-based channel. This can be:\n * * A {@link TextBasedChannel}\n * * A {@link Snowflake}\n * @typedef {TextBasedChannels|Snowflake} TextBasedChannelsResolvable\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * {@link ChannelType.DM}\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * * {@link ChannelType.GroupDM}\n * @typedef {ChannelType[]} TextBasedChannelTypes\n */\nexports.TextBasedChannelTypes = [...exports.GuildTextBasedChannelTypes, ChannelType.DM, ChannelType.GroupDM];\n\n/**\n * The types of channels that are text-based and can have messages sent into. The available types are:\n * * {@link ChannelType.DM}\n * * {@link ChannelType.GuildText}\n * * {@link ChannelType.GuildAnnouncement}\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} SendableChannels\n */\nexports.SendableChannels = [...exports.GuildTextBasedChannelTypes, ChannelType.DM];\n\n/**\n * The types of channels that are threads. The available types are:\n * * {@link ChannelType.AnnouncementThread}\n * * {@link ChannelType.PublicThread}\n * * {@link ChannelType.PrivateThread}\n * @typedef {ChannelType[]} ThreadChannelTypes\n */\nexports.ThreadChannelTypes = [ChannelType.AnnouncementThread, ChannelType.PublicThread, ChannelType.PrivateThread];\n\n/**\n * The types of channels that are voice-based. The available types are:\n * * {@link ChannelType.GuildVoice}\n * * {@link ChannelType.GuildStageVoice}\n * @typedef {ChannelType[]} VoiceBasedChannelTypes\n */\nexports.VoiceBasedChannelTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\n\n/**\n * The types of select menus. The available types are:\n * * {@link ComponentType.StringSelect}\n * * {@link ComponentType.UserSelect}\n * * {@link ComponentType.RoleSelect}\n * * {@link ComponentType.MentionableSelect}\n * * {@link ComponentType.ChannelSelect}\n * @typedef {ComponentType[]} SelectMenuTypes\n */\nexports.SelectMenuTypes = [\n  ComponentType.StringSelect,\n  ComponentType.UserSelect,\n  ComponentType.RoleSelect,\n  ComponentType.MentionableSelect,\n  ComponentType.ChannelSelect,\n];\n\n/**\n * The types of messages that cannot be deleted. The available types are:\n * * {@link MessageType.RecipientAdd}\n * * {@link MessageType.RecipientRemove}\n * * {@link MessageType.Call}\n * * {@link MessageType.ChannelNameChange}\n * * {@link MessageType.ChannelIconChange}\n * * {@link MessageType.ThreadStarterMessage}\n * @typedef {MessageType[]} UndeletableMessageTypes\n */\nexports.UndeletableMessageTypes = [\n  MessageType.RecipientAdd,\n  MessageType.RecipientRemove,\n  MessageType.Call,\n  MessageType.ChannelNameChange,\n  MessageType.ChannelIconChange,\n  MessageType.ThreadStarterMessage,\n];\n\n/**\n * The types of messages that can be deleted. The available types are:\n * * {@link MessageType.AutoModerationAction}\n * * {@link MessageType.ChannelFollowAdd}\n * * {@link MessageType.ChannelPinnedMessage}\n * * {@link MessageType.ChatInputCommand}\n * * {@link MessageType.ContextMenuCommand}\n * * {@link MessageType.Default}\n * * {@link MessageType.GuildBoost}\n * * {@link MessageType.GuildBoostTier1}\n * * {@link MessageType.GuildBoostTier2}\n * * {@link MessageType.GuildBoostTier3}\n * * {@link MessageType.GuildInviteReminder}\n * * {@link MessageType.InteractionPremiumUpsell}\n * * {@link MessageType.Reply}\n * * {@link MessageType.RoleSubscriptionPurchase}\n * * {@link MessageType.StageEnd}\n * * {@link MessageType.StageRaiseHand}\n * * {@link MessageType.StageSpeaker}\n * * {@link MessageType.StageStart}\n * * {@link MessageType.StageTopic}\n * * {@link MessageType.ThreadCreated}\n * * {@link MessageType.UserJoin}\n * @typedef {MessageType[]} DeletableMessageTypes\n * @deprecated This list will no longer be updated. Use {@link UndeletableMessageTypes} instead.\n */\nexports.DeletableMessageTypes = [\n  MessageType.AutoModerationAction,\n  MessageType.ChannelFollowAdd,\n  MessageType.ChannelPinnedMessage,\n  MessageType.ChatInputCommand,\n  MessageType.ContextMenuCommand,\n  MessageType.Default,\n  MessageType.GuildBoost,\n  MessageType.GuildBoostTier1,\n  MessageType.GuildBoostTier2,\n  MessageType.GuildBoostTier3,\n  MessageType.GuildInviteReminder,\n  MessageType.InteractionPremiumUpsell,\n  MessageType.Reply,\n  MessageType.RoleSubscriptionPurchase,\n  MessageType.StageEnd,\n  MessageType.StageRaiseHand,\n  MessageType.StageSpeaker,\n  MessageType.StageStart,\n  MessageType.StageTopic,\n  MessageType.ThreadCreated,\n  MessageType.UserJoin,\n];\n\n/**\n * A mapping between sticker formats and their respective image formats.\n * * {@link StickerFormatType.PNG} -> {@link ImageFormat.PNG}\n * * {@link StickerFormatType.APNG} -> {@link ImageFormat.PNG}\n * * {@link StickerFormatType.Lottie} -> {@link ImageFormat.Lottie}\n * * {@link StickerFormatType.GIF} -> {@link ImageFormat.GIF}\n * @typedef {Object} StickerFormatExtensionMap\n */\nexports.StickerFormatExtensionMap = {\n  [StickerFormatType.PNG]: ImageFormat.PNG,\n  [StickerFormatType.APNG]: ImageFormat.PNG,\n  [StickerFormatType.Lottie]: ImageFormat.Lottie,\n  [StickerFormatType.GIF]: ImageFormat.GIF,\n};\n\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {number} MaxBulkDeletableMessageAge Max bulk deletable message age\n * @property {SweeperKey[]} SweeperKeys The possible names of items that can be swept in sweepers\n * @property {NonSystemMessageTypes} NonSystemMessageTypes The types of messages that are not deemed a system type\n * @property {TextBasedChannelTypes} TextBasedChannelTypes The types of channels that are text-based\n * @property {ThreadChannelTypes} ThreadChannelTypes The types of channels that are threads\n * @property {VoiceBasedChannelTypes} VoiceBasedChannelTypes The types of channels that are voice-based\n * @property {SelectMenuTypes} SelectMenuTypes The types of components that are select menus.\n * @property {Object} StickerFormatExtensionMap A mapping between sticker formats and their respective image formats.\n */\n",
    "'use strict';\n\nconst { channelLink, channelMention } = require('@discordjs/formatters');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst ChannelFlagsBitField = require('../util/ChannelFlagsBitField');\nconst { ThreadChannelTypes } = require('../util/Constants');\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\nclass BaseChannel extends Base {\n  constructor(client, data, immediatePatch = true) {\n    super(client);\n\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n    this.type = data.type;\n\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('flags' in data) {\n      /**\n       * The flags that are applied to the channel.\n       * <info>This is only `null` in a {@link PartialGroupDMChannel}. In all other cases, it is not `null`.</info>\n       * @type {?Readonly<ChannelFlagsBitField>}\n       */\n      this.flags = new ChannelFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new ChannelFlagsBitField().freeze();\n    }\n\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to the channel\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.isDMBased() ? channelLink(this.id) : channelLink(this.id, this.guildId);\n  }\n\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return false;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return channelMention(this.id);\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<BaseChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.channel(this.id));\n    return this;\n  }\n\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<BaseChannel>}\n   */\n  fetch(force = true) {\n    return this.client.channels.fetch(this.id, { force });\n  }\n\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n  isTextBased() {\n    return 'messages' in this;\n  }\n\n  /**\n   * Indicates whether this channel is DM-based (either a {@link DMChannel} or a {@link PartialGroupDMChannel}).\n   * @returns {boolean}\n   */\n  isDMBased() {\n    return [ChannelType.DM, ChannelType.GroupDM].includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is {@link BaseGuildVoiceChannel voice-based}.\n   * @returns {boolean}\n   */\n  isVoiceBased() {\n    return 'bitrate' in this;\n  }\n\n  /**\n   * Indicates whether this channel is {@link ThreadOnlyChannel thread-only}.\n   * @returns {boolean}\n   */\n  isThreadOnly() {\n    return 'availableTags' in this;\n  }\n\n  /**\n   * Indicates whether this channel is sendable.\n   * @returns {boolean}\n   */\n  isSendable() {\n    return 'send' in this;\n  }\n\n  toJSON(...props) {\n    return super.toJSON({ createdTimestamp: true }, ...props);\n  }\n}\n\nexports.BaseChannel = BaseChannel;\n",
    "'use strict';\n\n/**\n * Manages the API methods of a data model.\n * @abstract\n */\nclass BaseManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n  }\n}\n\nmodule.exports = BaseManager;\n",
    "'use strict';\n\nconst BaseManager = require('./BaseManager');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Manages the API methods of a data model along with a collection of instances.\n * @extends {BaseManager}\n * @abstract\n */\nclass DataManager extends BaseManager {\n  constructor(client, holds) {\n    super(client);\n\n    /**\n     * The data structure belonging to this manager.\n     * @name DataManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n    Object.defineProperty(this, 'holds', { value: holds });\n  }\n\n  /**\n   * The cache of items for this manager.\n   * @type {Collection}\n   * @abstract\n   */\n  get cache() {\n    throw new DiscordjsError(ErrorCodes.NotImplemented, 'get cache', this.constructor.name);\n  }\n\n  /**\n   * Resolves a data entry to a data Object.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Object} An instance from this Manager\n   */\n  resolve(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance;\n    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) ?? null;\n    return null;\n  }\n\n  /**\n   * Resolves a data entry to an instance id.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Snowflake}\n   */\n  resolveId(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance.id;\n    if (typeof idOrInstance === 'string') return idOrInstance;\n    return null;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = DataManager;\n",
    "'use strict';\n\nexports.MakeCacheOverrideSymbol = Symbol('djs.managers.makeCacheOverride');\n",
    "'use strict';\n\nconst DataManager = require('./DataManager');\nconst { MakeCacheOverrideSymbol } = require('../util/Symbols');\n\n/**\n * Manages the API methods of a data model with a mutable cache of instances.\n * @extends {DataManager}\n * @abstract\n */\nclass CachedManager extends DataManager {\n  constructor(client, holds, iterable) {\n    super(client, holds);\n\n    /**\n     * The private cache of items for this manager.\n     * @type {Collection}\n     * @private\n     * @readonly\n     * @name CachedManager#_cache\n     */\n    Object.defineProperty(this, '_cache', {\n      value: this.client.options.makeCache(\n        this.constructor[MakeCacheOverrideSymbol] ?? this.constructor,\n        this.holds,\n        this.constructor,\n      ),\n    });\n\n    if (iterable) {\n      for (const item of iterable) {\n        this._add(item);\n      }\n    }\n  }\n\n  /**\n   * The cache of items for this manager.\n   * @type {Collection}\n   * @abstract\n   */\n  get cache() {\n    return this._cache;\n  }\n\n  _add(data, cache = true, { id, extras = [] } = {}) {\n    const existing = this.cache.get(id ?? data.id);\n    if (existing) {\n      if (cache) {\n        existing._patch(data);\n        return existing;\n      }\n      const clone = existing._clone();\n      clone._patch(data);\n      return clone;\n    }\n\n    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;\n    if (cache) this.cache.set(id ?? entry.id, entry);\n    return entry;\n  }\n}\n\nmodule.exports = CachedManager;\n",
    "'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\nclass PermissionsBitField extends BitField {\n  /**\n   * Numeric permission flags.\n   * @type {PermissionFlagsBits}\n   * @memberof PermissionsBitField\n   * @see {@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}\n   */\n  static Flags = PermissionFlagsBits;\n\n  /**\n   * Bitfield representing every permission combined\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static All = Object.values(PermissionFlagsBits).reduce((all, p) => all | p, 0n);\n\n  /**\n   * Bitfield representing the default permissions for users\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static Default = BigInt(104324673);\n\n  /**\n   * Bitfield representing the permissions required for moderators of stage channels\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   */\n  static StageModerator =\n    PermissionFlagsBits.ManageChannels | PermissionFlagsBits.MuteMembers | PermissionFlagsBits.MoveMembers;\n\n  /**\n   * @type {bigint}\n   * @memberof PermissionsBitField\n   * @private\n   */\n  static DefaultBit = BigInt(0);\n\n  /**\n   * Bitfield of the packed bits\n   * @type {bigint}\n   * @name PermissionsBitField#bitfield\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link PermissionsBitField.Flags})\n   * * A permission number\n   * * An instance of {@link PermissionsBitField}\n   * * An Array of PermissionResolvable\n   * @typedef {string|bigint|PermissionsBitField|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {string[]}\n   */\n  missing(bits, checkAdmin = true) {\n    return checkAdmin && this.has(PermissionFlagsBits.Administrator) ? [] : super.missing(bits);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(PermissionFlagsBits.Administrator)) || super.any(permission);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(PermissionFlagsBits.Administrator)) || super.has(permission);\n  }\n\n  /**\n   * Gets an {@link Array} of bitfield names based on the permissions available.\n   * @returns {string[]}\n   */\n  toArray() {\n    return super.toArray(false);\n  }\n}\n\nmodule.exports = PermissionsBitField;\n",
    "'use strict';\n\nconst { RoleFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link Role#flags} bitfield.\n * @extends {BitField}\n */\nclass RoleFlagsBitField extends BitField {\n  /**\n   * Numeric role flags.\n   * @type {RoleFlags}\n   * @memberof RoleFlagsBitField\n   */\n  static Flags = RoleFlags;\n}\n\n/**\n * @name RoleFlagsBitField\n * @kind constructor\n * @memberof RoleFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\nmodule.exports = RoleFlagsBitField;\n",
    "'use strict';\n\nconst { roleMention } = require('@discordjs/formatters');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst RoleFlagsBitField = require('../util/RoleFlagsBitField');\n\n/**\n * Represents a role on Discord.\n * @extends {Base}\n */\nclass Role extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that the role belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The icon hash of the role\n     * @type {?string}\n     */\n    this.icon = null;\n\n    /**\n     * The unicode emoji for the role\n     * @type {?string}\n     */\n    this.unicodeEmoji = null;\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The role's id (unique to the guild it is part of)\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    if ('name' in data) {\n      /**\n       * The name of the role\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('color' in data) {\n      /**\n       * The base 10 color of the role\n       * @type {number}\n       */\n      this.color = data.color;\n    }\n\n    if ('hoist' in data) {\n      /**\n       * If true, users that are part of this role will appear in a separate category in the users list\n       * @type {boolean}\n       */\n      this.hoist = data.hoist;\n    }\n\n    if ('position' in data) {\n      /**\n       * The raw position of the role from the API\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n\n    if ('permissions' in data) {\n      /**\n       * The permissions of the role\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.permissions = new PermissionsBitField(BigInt(data.permissions)).freeze();\n    }\n\n    if ('managed' in data) {\n      /**\n       * Whether or not the role is managed by an external service\n       * @type {boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('mentionable' in data) {\n      /**\n       * Whether or not the role can be mentioned by anyone\n       * @type {boolean}\n       */\n      this.mentionable = data.mentionable;\n    }\n\n    if ('icon' in data) this.icon = data.icon;\n\n    if ('unicode_emoji' in data) this.unicodeEmoji = data.unicode_emoji;\n\n    if ('flags' in data) {\n      /**\n       * The flags of this role\n       * @type {Readonly<RoleFlagsBitField>}\n       */\n      this.flags = new RoleFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new RoleFlagsBitField().freeze();\n    }\n\n    /**\n     * The tags this role has\n     * @type {?Object}\n     * @property {Snowflake} [botId] The id of the bot this role belongs to\n     * @property {Snowflake|string} [integrationId] The id of the integration this role belongs to\n     * @property {true} [premiumSubscriberRole] Whether this is the guild's premium subscription role\n     * @property {Snowflake} [subscriptionListingId] The id of this role's subscription SKU and listing\n     * @property {true} [availableForPurchase] Whether this role is available for purchase\n     * @property {true} [guildConnections] Whether this role is a guild's linked role\n     */\n    this.tags = data.tags ? {} : null;\n    if (data.tags) {\n      if ('bot_id' in data.tags) {\n        this.tags.botId = data.tags.bot_id;\n      }\n      if ('integration_id' in data.tags) {\n        this.tags.integrationId = data.tags.integration_id;\n      }\n      if ('premium_subscriber' in data.tags) {\n        this.tags.premiumSubscriberRole = true;\n      }\n      if ('subscription_listing_id' in data.tags) {\n        this.tags.subscriptionListingId = data.tags.subscription_listing_id;\n      }\n      if ('available_for_purchase' in data.tags) {\n        this.tags.availableForPurchase = true;\n      }\n      if ('guild_connections' in data.tags) {\n        this.tags.guildConnections = true;\n      }\n    }\n  }\n\n  /**\n   * The timestamp the role was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the role was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The hexadecimal version of the role color, with a leading hashtag\n   * @type {string}\n   * @readonly\n   */\n  get hexColor() {\n    return `#${this.color.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * The cached guild members that have this role\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.id === this.guild.id\n      ? this.guild.members.cache.clone()\n      : this.guild.members.cache.filter(member => member._roles.includes(this.id));\n  }\n\n  /**\n   * Whether the role is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    if (this.managed) return false;\n    const clientMember = this.guild.members.resolve(this.client.user);\n    if (!clientMember.permissions.has(PermissionFlagsBits.ManageRoles)) return false;\n    return clientMember.roles.highest.comparePositionTo(this) > 0;\n  }\n\n  /**\n   * The position of the role in the role manager\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    return this.guild.roles.cache.reduce(\n      (acc, role) =>\n        acc +\n        (this.rawPosition === role.rawPosition\n          ? BigInt(this.id) < BigInt(role.id)\n          : this.rawPosition > role.rawPosition),\n      0,\n    );\n  }\n\n  /**\n   * Compares this role's position to another role's.\n   * @param {RoleResolvable} role Role to compare to this one\n   * @returns {number} Negative number if this role's position is lower (other role's is higher),\n   * positive number if this one is higher (other's is lower), 0 if equal\n   * @example\n   * // Compare the position of a role to another\n   * const roleCompare = role.comparePositionTo(otherRole);\n   * if (roleCompare >= 1) console.log(`${role.name} is higher than ${otherRole.name}`);\n   */\n  comparePositionTo(role) {\n    return this.guild.roles.comparePositions(this, role);\n  }\n\n  /**\n   * The data for a role.\n   * @typedef {Object} RoleData\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether or not the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether or not the role should be mentionable\n   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @property {?string} [unicodeEmoji] The unicode emoji for the role\n   */\n\n  /**\n   * Edits the role.\n   * @param {RoleEditOptions} options The options to provide\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * role.edit({ name: 'new role' })\n   *   .then(updated => console.log(`Edited role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.roles.edit(this, options);\n  }\n\n  /**\n   * Returns `channel.permissionsFor(role)`. Returns permissions for a role in a guild channel,\n   * taking into account permission overwrites.\n   * @param {GuildChannel|Snowflake} channel The guild channel to use as context\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   */\n  permissionsIn(channel, checkAdmin = true) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    return channel.rolePermissions(this, checkAdmin);\n  }\n\n  /**\n   * Sets a new name for the role.\n   * @param {string} name The new name of the role\n   * @param {string} [reason] Reason for changing the role's name\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the name of the role\n   * role.setName('new role')\n   *   .then(updated => console.log(`Updated role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets a new color for the role.\n   * @param {ColorResolvable} color The color of the role\n   * @param {string} [reason] Reason for changing the role's color\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the color of a role\n   * role.setColor('#FF0000')\n   *   .then(updated => console.log(`Set color of role to ${updated.color}`))\n   *   .catch(console.error);\n   */\n  setColor(color, reason) {\n    return this.edit({ color, reason });\n  }\n\n  /**\n   * Sets whether or not the role should be hoisted.\n   * @param {boolean} [hoist=true] Whether or not to hoist the role\n   * @param {string} [reason] Reason for setting whether or not the role should be hoisted\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the hoist of the role\n   * role.setHoist(true)\n   *   .then(updated => console.log(`Role hoisted: ${updated.hoist}`))\n   *   .catch(console.error);\n   */\n  setHoist(hoist = true, reason) {\n    return this.edit({ hoist, reason });\n  }\n\n  /**\n   * Sets the permissions of the role.\n   * @param {PermissionResolvable} permissions The permissions of the role\n   * @param {string} [reason] Reason for changing the role's permissions\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the permissions of the role\n   * role.setPermissions([PermissionFlagsBits.KickMembers, PermissionFlagsBits.BanMembers])\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove all permissions from a role\n   * role.setPermissions(0n)\n   *   .then(updated => console.log(`Updated permissions to ${updated.permissions.bitfield}`))\n   *   .catch(console.error);\n   */\n  setPermissions(permissions, reason) {\n    return this.edit({ permissions, reason });\n  }\n\n  /**\n   * Sets whether this role is mentionable.\n   * @param {boolean} [mentionable=true] Whether this role should be mentionable\n   * @param {string} [reason] Reason for setting whether or not this role should be mentionable\n   * @returns {Promise<Role>}\n   * @example\n   * // Make the role mentionable\n   * role.setMentionable(true)\n   *   .then(updated => console.log(`Role updated ${updated.name}`))\n   *   .catch(console.error);\n   */\n  setMentionable(mentionable = true, reason) {\n    return this.edit({ mentionable, reason });\n  }\n\n  /**\n   * Sets a new icon for the role.\n   * @param {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} icon The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @param {string} [reason] Reason for changing the role's icon\n   * @returns {Promise<Role>}\n   */\n  setIcon(icon, reason) {\n    return this.edit({ icon, reason });\n  }\n\n  /**\n   * Sets a new unicode emoji for the role.\n   * @param {?string} unicodeEmoji The new unicode emoji for the role\n   * @param {string} [reason] Reason for changing the role's unicode emoji\n   * @returns {Promise<Role>}\n   * @example\n   * // Set a new unicode emoji for the role\n   * role.setUnicodeEmoji('🤖')\n   *   .then(updated => console.log(`Set unicode emoji for the role to ${updated.unicodeEmoji}`))\n   *   .catch(console.error);\n   */\n  setUnicodeEmoji(unicodeEmoji, reason) {\n    return this.edit({ unicodeEmoji, reason });\n  }\n\n  /**\n   * Options used to set the position of a role.\n   * @typedef {Object} SetRolePositionOptions\n   * @property {boolean} [relative=false] Whether to change the position relative to its current value or not\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets the new position of the role.\n   * @param {number} position The new position for the role\n   * @param {SetRolePositionOptions} [options] Options for setting the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * role.setPosition(1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, options = {}) {\n    return this.guild.roles.setPosition(this, position, options);\n  }\n\n  /**\n   * Deletes the role.\n   * @param {string} [reason] Reason for deleting this role\n   * @returns {Promise<Role>}\n   * @example\n   * // Delete a role\n   * role.delete('The role needed to go')\n   *   .then(deleted => console.log(`Deleted role ${deleted.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.roles.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * A link to the role's icon\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.roleIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * Whether this role equals another role. It compares all properties, so for most operations\n   * it is advisable to just compare `role.id === role2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Role} role Role to compare with\n   * @returns {boolean}\n   */\n  equals(role) {\n    return (\n      role &&\n      this.id === role.id &&\n      this.name === role.name &&\n      this.color === role.color &&\n      this.hoist === role.hoist &&\n      this.position === role.position &&\n      this.permissions.bitfield === role.permissions.bitfield &&\n      this.managed === role.managed &&\n      this.icon === role.icon &&\n      this.unicodeEmoji === role.unicodeEmoji\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the role's mention instead of the Role object.\n   * @returns {string}\n   * @example\n   * // Logs: Role: <@&123456789012345678>\n   * console.log(`Role: ${role}`);\n   */\n  toString() {\n    if (this.id === this.guild.id) return '@everyone';\n    return roleMention(this.id);\n  }\n\n  toJSON() {\n    return {\n      ...super.toJSON({ createdTimestamp: true }),\n      permissions: this.permissions.toJSON(),\n    };\n  }\n}\n\nexports.Role = Role;\n",
    "'use strict';\n\nconst { OverwriteType } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { Role } = require('./Role');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n * @extends {Base}\n */\nclass PermissionOverwrites extends Base {\n  constructor(client, data, channel) {\n    super(client);\n\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: channel });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The overwrite's id, either a {@link User} or a {@link Role} id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('type' in data) {\n      /**\n       * The type of this overwrite\n       * @type {OverwriteType}\n       */\n      this.type = data.type;\n    }\n\n    if ('deny' in data) {\n      /**\n       * The permissions that are denied for the user or role.\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.deny = new PermissionsBitField(BigInt(data.deny)).freeze();\n    }\n\n    if ('allow' in data) {\n      /**\n       * The permissions that are allowed for the user or role.\n       * @type {Readonly<PermissionsBitField>}\n       */\n      this.allow = new PermissionsBitField(BigInt(data.allow)).freeze();\n    }\n  }\n\n  /**\n   * Edits this Permission Overwrite.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.edit({\n   *   SendMessages: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  async edit(options, reason) {\n    await this.channel.permissionOverwrites.upsert(this.id, options, { type: this.type, reason }, this);\n    return this;\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  async delete(reason) {\n    await this.channel.permissionOverwrites.delete(this.id, reason);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      type: this.type,\n      allow: this.allow,\n      deny: this.deny,\n    };\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SendMessages': true,\n   *  'EmbedLinks': null,\n   *  'AttachFiles': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {Object} ResolvedOverwriteOptions\n   * @property {PermissionsBitField} allow The allowed permissions\n   * @property {PermissionsBitField} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {ResolvedOverwriteOptions} initialPermissions The initial permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options, { allow, deny } = {}) {\n    allow = new PermissionsBitField(allow);\n    deny = new PermissionsBitField(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(perm);\n        deny.remove(perm);\n      } else if (value === false) {\n        allow.remove(perm);\n        deny.add(perm);\n      } else if (value === null) {\n        allow.remove(perm);\n        deny.remove(perm);\n      }\n    }\n\n    return { allow, deny };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the {@link Role} or {@link User} this overwrite belongs to\n   * @property {string} allow The permissions to allow\n   * @property {string} deny The permissions to deny\n   * @property {number} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link APIOverwrite}. This can be:\n   * * PermissionOverwrites\n   * * OverwriteData\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link APIOverwrite}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} [guild] The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && overwrite.type in OverwriteType) {\n      return {\n        id: overwrite.id,\n        type: overwrite.type,\n        allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),\n        deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString(),\n      };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) ?? guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'cached User or Role');\n    }\n\n    const type = userOrRole instanceof Role ? OverwriteType.Role : OverwriteType.Member;\n\n    return {\n      id: userOrRole.id,\n      type,\n      allow: PermissionsBitField.resolve(overwrite.allow ?? PermissionsBitField.DefaultBit).toString(),\n      deny: PermissionsBitField.resolve(overwrite.deny ?? PermissionsBitField.DefaultBit).toString(),\n    };\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { OverwriteType, Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst PermissionOverwrites = require('../structures/PermissionOverwrites');\nconst { Role } = require('../structures/Role');\n\nlet cacheWarningEmitted = false;\n\n/**\n * Manages API methods for guild channel permission overwrites and stores their cache.\n * @extends {CachedManager}\n */\nclass PermissionOverwriteManager extends CachedManager {\n  constructor(channel, iterable) {\n    super(channel.client, PermissionOverwrites);\n    if (!cacheWarningEmitted && this._cache.constructor.name !== 'Collection') {\n      cacheWarningEmitted = true;\n      process.emitWarning(\n        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,\n        'UnsupportedCacheOverwriteWarning',\n      );\n    }\n\n    /**\n     * The channel of the permission overwrite this manager belongs to\n     * @type {GuildChannel}\n     */\n    this.channel = channel;\n\n    if (iterable) {\n      for (const item of iterable) {\n        this._add(item);\n      }\n    }\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, PermissionOverwrites>}\n   * @name PermissionOverwriteManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.channel] });\n  }\n\n  /**\n   * Replaces the permission overwrites in this channel.\n   * @param {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} overwrites\n   * Permission overwrites the channel gets updated with\n   * @param {string} [reason] Reason for updating the channel overwrites\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * message.channel.permissionOverwrites.set([\n   *   {\n   *      id: message.author.id,\n   *      deny: [PermissionFlagsBits.ViewChannel],\n   *   },\n   * ], 'Needed to change permissions');\n   */\n  async set(overwrites, reason) {\n    if (!Array.isArray(overwrites) && !(overwrites instanceof Collection)) {\n      throw new DiscordjsTypeError(\n        ErrorCodes.InvalidType,\n        'overwrites',\n        'Array or Collection of Permission Overwrites',\n        true,\n      );\n    }\n    return this.channel.edit({ permissionOverwrites: overwrites, reason });\n  }\n\n  /**\n   * Extra information about the overwrite.\n   * @typedef {Object} GuildChannelOverwriteOptions\n   * @property {string} [reason] The reason for creating/editing this overwrite\n   * @property {OverwriteType} [type] The type of overwrite. Use this to bypass automatic resolution of `type`\n   * that results in an error for an uncached structure\n   */\n\n  /**\n   * Creates or edits permission overwrites for a user or role in this channel.\n   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {GuildChannelOverwriteOptions} [overwriteOptions] The extra information for the update\n   * @param {PermissionOverwrites} [existing] The existing overwrites to merge with this update\n   * @returns {Promise<GuildChannel>}\n   * @private\n   */\n  async upsert(userOrRole, options, overwriteOptions = {}, existing) {\n    let userOrRoleId = this.channel.guild.roles.resolveId(userOrRole) ?? this.client.users.resolveId(userOrRole);\n    let { type, reason } = overwriteOptions;\n    if (typeof type !== 'number') {\n      userOrRole = this.channel.guild.roles.resolve(userOrRole) ?? this.client.users.resolve(userOrRole);\n      if (!userOrRole) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');\n      type = userOrRole instanceof Role ? OverwriteType.Role : OverwriteType.Member;\n    }\n\n    const { allow, deny } = PermissionOverwrites.resolveOverwriteOptions(options, existing);\n\n    await this.client.rest.put(Routes.channelPermission(this.channel.id, userOrRoleId), {\n      body: { id: userOrRoleId, type, allow, deny },\n      reason,\n    });\n    return this.channel;\n  }\n\n  /**\n   * Creates permission overwrites for a user or role in this channel, or replaces them if already present.\n   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {GuildChannelOverwriteOptions} [overwriteOptions] The extra information for the update\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create or Replace permission overwrites for a message author\n   * message.channel.permissionOverwrites.create(message.author, {\n   *   SendMessages: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.cache.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  create(userOrRole, options, overwriteOptions) {\n    return this.upsert(userOrRole, options, overwriteOptions);\n  }\n\n  /**\n   * Edits permission overwrites for a user or role in this channel, or creates an entry if not already present.\n   * @param {RoleResolvable|UserResolvable} userOrRole The user or role to update\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {GuildChannelOverwriteOptions} [overwriteOptions] The extra information for the update\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit or Create permission overwrites for a message author\n   * message.channel.permissionOverwrites.edit(message.author, {\n   *   SendMessages: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.cache.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  edit(userOrRole, options, overwriteOptions) {\n    const existing = this.cache.get(\n      this.channel.guild.roles.resolveId(userOrRole) ?? this.client.users.resolveId(userOrRole),\n    );\n    return this.upsert(userOrRole, options, overwriteOptions, existing);\n  }\n\n  /**\n   * Deletes permission overwrites for a user or role in this channel.\n   * @param {UserResolvable|RoleResolvable} userOrRole The user or role to delete\n   * @param {string} [reason] The reason for deleting the overwrite\n   * @returns {Promise<GuildChannel>}\n   */\n  async delete(userOrRole, reason) {\n    const userOrRoleId = this.channel.guild.roles.resolveId(userOrRole) ?? this.client.users.resolveId(userOrRole);\n    if (!userOrRoleId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'parameter', 'User nor a Role');\n\n    await this.client.rest.delete(Routes.channelPermission(this.channel.id, userOrRoleId), { reason });\n    return this.channel;\n  }\n}\n\nmodule.exports = PermissionOverwriteManager;\n",
    "'use strict';\n\nconst { Snowflake } = require('@sapphire/snowflake');\nconst { PermissionFlagsBits, ChannelType } = require('discord-api-types/v10');\nconst { BaseChannel } = require('./BaseChannel');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst PermissionOverwriteManager = require('../managers/PermissionOverwriteManager');\nconst { VoiceBasedChannelTypes } = require('../util/Constants');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst { getSortableGroupTypes } = require('../util/Util');\n\n/**\n * Represents a guild channel from any of the following:\n * - {@link TextChannel}\n * - {@link VoiceChannel}\n * - {@link CategoryChannel}\n * - {@link NewsChannel}\n * - {@link StageChannel}\n * - {@link ForumChannel}\n * - {@link MediaChannel}\n * @extends {BaseChannel}\n * @abstract\n */\nclass GuildChannel extends BaseChannel {\n  constructor(guild, data, client, immediatePatch = true) {\n    super(client, data, false);\n\n    /**\n     * The guild the channel is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The id of the guild the channel is in\n     * @type {Snowflake}\n     */\n    this.guildId = guild?.id ?? data.guild_id;\n    /**\n     * A manager of permission overwrites that belong to this channel\n     * @type {PermissionOverwriteManager}\n     */\n    this.permissionOverwrites = new PermissionOverwriteManager(this);\n\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('name' in data) {\n      /**\n       * The name of the guild channel\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('position' in data) {\n      /**\n       * The raw position of the channel from Discord\n       * @type {number}\n       */\n      this.rawPosition = data.position;\n    }\n\n    if ('guild_id' in data) {\n      this.guildId = data.guild_id;\n    }\n\n    if ('parent_id' in data) {\n      /**\n       * The id of the category parent of this channel\n       * @type {?Snowflake}\n       */\n      this.parentId = data.parent_id;\n    } else {\n      this.parentId ??= null;\n    }\n\n    if ('permission_overwrites' in data) {\n      this.permissionOverwrites.cache.clear();\n      for (const overwrite of data.permission_overwrites) {\n        this.permissionOverwrites._add(overwrite);\n      }\n    }\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone.permissionOverwrites = new PermissionOverwriteManager(clone, this.permissionOverwrites.cache.values());\n    return clone;\n  }\n\n  /**\n   * The category parent of this channel\n   * @type {?CategoryChannel}\n   * @readonly\n   */\n  get parent() {\n    return this.guild.channels.resolve(this.parentId);\n  }\n\n  /**\n   * If the permissionOverwrites match the parent channel, null if no parent\n   * @type {?boolean}\n   * @readonly\n   */\n  get permissionsLocked() {\n    if (!this.parent) return null;\n\n    // Get all overwrites\n    const overwriteIds = new Set([\n      ...this.permissionOverwrites.cache.keys(),\n      ...this.parent.permissionOverwrites.cache.keys(),\n    ]);\n\n    // Compare all overwrites\n    return [...overwriteIds].every(key => {\n      const channelVal = this.permissionOverwrites.cache.get(key);\n      const parentVal = this.parent.permissionOverwrites.cache.get(key);\n\n      // Handle empty overwrite\n      if (\n        (!channelVal &&\n          parentVal.deny.bitfield === PermissionsBitField.DefaultBit &&\n          parentVal.allow.bitfield === PermissionsBitField.DefaultBit) ||\n        (!parentVal &&\n          channelVal.deny.bitfield === PermissionsBitField.DefaultBit &&\n          channelVal.allow.bitfield === PermissionsBitField.DefaultBit)\n      ) {\n        return true;\n      }\n\n      // Compare overwrites\n      return (\n        channelVal !== undefined &&\n        parentVal !== undefined &&\n        channelVal.deny.bitfield === parentVal.deny.bitfield &&\n        channelVal.allow.bitfield === parentVal.allow.bitfield\n      );\n    });\n  }\n\n  /**\n   * The position of the channel\n   * @type {number}\n   * @readonly\n   */\n  get position() {\n    const selfIsCategory = this.type === ChannelType.GuildCategory;\n    const types = getSortableGroupTypes(this.type);\n\n    let count = 0;\n    for (const channel of this.guild.channels.cache.values()) {\n      if (!types.includes(channel.type)) continue;\n      if (!selfIsCategory && channel.parentId !== this.parentId) continue;\n      if (this.rawPosition === channel.rawPosition) {\n        if (Snowflake.compare(channel.id, this.id) === -1) count++;\n      } else if (this.rawPosition > channel.rawPosition) {\n        count++;\n      }\n    }\n\n    return count;\n  }\n\n  /**\n   * Gets the overall set of permissions for a member or role in this channel, taking into account channel overwrites.\n   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {?Readonly<PermissionsBitField>}\n   */\n  permissionsFor(memberOrRole, checkAdmin = true) {\n    const member = this.guild.members.resolve(memberOrRole);\n    if (member) return this.memberPermissions(member, checkAdmin);\n    const role = this.guild.roles.resolve(memberOrRole);\n    return role && this.rolePermissions(role, checkAdmin);\n  }\n\n  overwritesFor(member, verified = false, roles = null) {\n    if (!verified) member = this.guild.members.resolve(member);\n    if (!member) return [];\n\n    roles ??= member.roles.cache;\n    const roleOverwrites = [];\n    let memberOverwrites;\n    let everyoneOverwrites;\n\n    for (const overwrite of this.permissionOverwrites.cache.values()) {\n      if (overwrite.id === this.guild.id) {\n        everyoneOverwrites = overwrite;\n      } else if (roles.has(overwrite.id)) {\n        roleOverwrites.push(overwrite);\n      } else if (overwrite.id === member.id) {\n        memberOverwrites = overwrite;\n      }\n    }\n\n    return {\n      everyone: everyoneOverwrites,\n      roles: roleOverwrites,\n      member: memberOverwrites,\n    };\n  }\n\n  /**\n   * Gets the overall set of permissions for a member in this channel, taking into account channel overwrites.\n   * @param {GuildMember} member The member to obtain the overall permissions for\n   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   * @private\n   */\n  memberPermissions(member, checkAdmin) {\n    if (checkAdmin && member.id === this.guild.ownerId) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n\n    const roles = member.roles.cache;\n    const permissions = new PermissionsBitField(roles.map(role => role.permissions));\n\n    if (checkAdmin && permissions.has(PermissionFlagsBits.Administrator)) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n\n    const overwrites = this.overwritesFor(member, true, roles);\n\n    return permissions\n      .remove(overwrites.everyone?.deny ?? PermissionsBitField.DefaultBit)\n      .add(overwrites.everyone?.allow ?? PermissionsBitField.DefaultBit)\n      .remove(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.deny) : PermissionsBitField.DefaultBit)\n      .add(overwrites.roles.length > 0 ? overwrites.roles.map(role => role.allow) : PermissionsBitField.DefaultBit)\n      .remove(overwrites.member?.deny ?? PermissionsBitField.DefaultBit)\n      .add(overwrites.member?.allow ?? PermissionsBitField.DefaultBit)\n      .freeze();\n  }\n\n  /**\n   * Gets the overall set of permissions for a role in this channel, taking into account channel overwrites.\n   * @param {Role} role The role to obtain the overall permissions for\n   * @param {boolean} checkAdmin Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {Readonly<PermissionsBitField>}\n   * @private\n   */\n  rolePermissions(role, checkAdmin) {\n    if (checkAdmin && role.permissions.has(PermissionFlagsBits.Administrator)) {\n      return new PermissionsBitField(PermissionsBitField.All).freeze();\n    }\n\n    const everyoneOverwrites = this.permissionOverwrites.cache.get(this.guild.id);\n    const roleOverwrites = this.permissionOverwrites.cache.get(role.id);\n\n    return role.permissions\n      .remove(everyoneOverwrites?.deny ?? PermissionsBitField.DefaultBit)\n      .add(everyoneOverwrites?.allow ?? PermissionsBitField.DefaultBit)\n      .remove(roleOverwrites?.deny ?? PermissionsBitField.DefaultBit)\n      .add(roleOverwrites?.allow ?? PermissionsBitField.DefaultBit)\n      .freeze();\n  }\n\n  /**\n   * Locks in the permission overwrites from the parent channel.\n   * @returns {Promise<GuildChannel>}\n   */\n  async lockPermissions() {\n    if (!this.parent) throw new DiscordjsError(ErrorCodes.GuildChannelOrphan);\n    const permissionOverwrites = this.parent.permissionOverwrites.cache.map(overwrite => overwrite.toJSON());\n    return this.edit({ permissionOverwrites });\n  }\n\n  /**\n   * A collection of cached members of this channel, mapped by their ids.\n   * Members that can view this channel, if the channel is text-based.\n   * Members in the channel, if the channel is voice-based.\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    return this.guild.members.cache.filter(member =>\n      this.permissionsFor(member).has(PermissionFlagsBits.ViewChannel, false),\n    );\n  }\n\n  /**\n   * Edits the channel.\n   * @param {GuildChannelEditOptions} options The options to provide\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit a channel\n   * channel.edit({ name: 'new-channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.channels.edit(this, options);\n  }\n\n  /**\n   * Sets a new name for the guild channel.\n   * @param {string} name The new name for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's name\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel name\n   * channel.setName('not_general')\n   *   .then(newChannel => console.log(`Channel's new name is ${newChannel.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Options used to set the parent of a channel.\n   * @typedef {Object} SetParentOptions\n   * @property {boolean} [lockPermissions=true] Whether to lock the permissions to what the parent's permissions are\n   * @property {string} [reason] The reason for modifying the parent of the channel\n   */\n\n  /**\n   * Sets the parent of this channel.\n   * @param {?CategoryChannelResolvable} channel The category channel to set as the parent\n   * @param {SetParentOptions} [options={}] The options for setting the parent\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Add a parent to a channel\n   * message.channel.setParent('355908108431917066', { lockPermissions: false })\n   *   .then(channel => console.log(`New parent of ${message.channel.name}: ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setParent(channel, { lockPermissions = true, reason } = {}) {\n    return this.edit({\n      parent: channel ?? null,\n      lockPermissions,\n      reason,\n    });\n  }\n\n  /**\n   * Options used to set the position of a channel.\n   * @typedef {Object} SetChannelPositionOptions\n   * @property {boolean} [relative=false] Whether or not to change the position relative to its current value\n   * @property {string} [reason] The reason for changing the position\n   */\n\n  /**\n   * Sets a new position for the guild channel.\n   * @param {number} position The new position for the guild channel\n   * @param {SetChannelPositionOptions} [options] Options for setting position\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel position\n   * channel.setPosition(2)\n   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *   .catch(console.error);\n   */\n  setPosition(position, options = {}) {\n    return this.guild.channels.setPosition(this, position, options);\n  }\n\n  /**\n   * Options used to clone a guild channel.\n   * @typedef {GuildChannelCreateOptions} GuildChannelCloneOptions\n   * @property {string} [name=this.name] Name of the new channel\n   */\n\n  /**\n   * Clones this channel.\n   * @param {GuildChannelCloneOptions} [options] The options for cloning this channel\n   * @returns {Promise<GuildChannel>}\n   */\n  clone(options = {}) {\n    return this.guild.channels.create({\n      name: options.name ?? this.name,\n      permissionOverwrites: this.permissionOverwrites.cache,\n      topic: this.topic,\n      type: this.type,\n      nsfw: this.nsfw,\n      parent: this.parent,\n      bitrate: this.bitrate,\n      userLimit: this.userLimit,\n      rateLimitPerUser: this.rateLimitPerUser,\n      position: this.rawPosition,\n      reason: null,\n      ...options,\n    });\n  }\n\n  /**\n   * Checks if this channel has the same type, topic, position, name, overwrites, and id as another channel.\n   * In most cases, a simple `channel.id === channel2.id` will do, and is much faster too.\n   * @param {GuildChannel} channel Channel to compare with\n   * @returns {boolean}\n   */\n  equals(channel) {\n    let equal =\n      channel &&\n      this.id === channel.id &&\n      this.type === channel.type &&\n      this.topic === channel.topic &&\n      this.position === channel.position &&\n      this.name === channel.name;\n\n    if (equal) {\n      if (this.permissionOverwrites && channel.permissionOverwrites) {\n        equal = this.permissionOverwrites.cache.equals(channel.permissionOverwrites.cache);\n      } else {\n        equal = !this.permissionOverwrites && !channel.permissionOverwrites;\n      }\n    }\n\n    return equal;\n  }\n\n  /**\n   * Whether the channel is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    return this.manageable && this.guild.rulesChannelId !== this.id && this.guild.publicUpdatesChannelId !== this.id;\n  }\n\n  /**\n   * Whether the channel is manageable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows managing even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n    if (this.guild.members.me.communicationDisabledUntilTimestamp > Date.now()) return false;\n\n    const bitfield = VoiceBasedChannelTypes.includes(this.type)\n      ? PermissionFlagsBits.ManageChannels | PermissionFlagsBits.Connect\n      : PermissionFlagsBits.ViewChannel | PermissionFlagsBits.ManageChannels;\n    return permissions.has(bitfield, false);\n  }\n\n  /**\n   * Whether the channel is viewable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get viewable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    return permissions.has(PermissionFlagsBits.ViewChannel, false);\n  }\n\n  /**\n   * Deletes this channel.\n   * @param {string} [reason] Reason for deleting this channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Delete the channel\n   * channel.delete('making room for new channels')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.channels.delete(this.id, reason);\n    return this;\n  }\n}\n\nmodule.exports = GuildChannel;\n",
    "'use strict';\n\nconst { SKUFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with an {@link SKU#flags} bitfield.\n * @extends {BitField}\n */\nclass SKUFlagsBitField extends BitField {\n  /**\n   * Numeric SKU flags.\n   * @type {SKUFlags}\n   * @memberof SKUFlagsBitField\n   */\n  static Flags = SKUFlags;\n}\n\n/**\n * @name SKUFlagsBitField\n * @kind constructor\n * @memberof SKUFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\nexports.SKUFlagsBitField = SKUFlagsBitField;\n",
    "'use strict';\n\nconst Base = require('./Base');\nconst { SKUFlagsBitField } = require('../util/SKUFlagsBitField');\n\n/**\n * Represents a premium application SKU.\n * @extends {Base}\n */\nclass SKU extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the SKU\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of the SKU\n     * @type {SKUType}\n     */\n    this.type = data.type;\n\n    /**\n     * The id of the parent application\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The customer-facing name of the premium offering\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The system-generated URL slug based on this SKU's name\n     * @type {string}\n     */\n    this.slug = data.slug;\n\n    /**\n     * Flags that describe the SKU\n     * @type {Readonly<SKUFlagsBitField>}\n     */\n    this.flags = new SKUFlagsBitField(data.flags).freeze();\n  }\n}\n\nexports.SKU = SKU;\n",
    "'use strict';\n\nconst { parse } = require('node:path');\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { ChannelType, RouteBases, Routes } = require('discord-api-types/v10');\nconst { fetch } = require('undici');\nconst Colors = require('./Colors');\nconst { DiscordjsError, DiscordjsRangeError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst isObject = d => typeof d === 'object' && d !== null;\n\nlet deprecationEmittedForUserFetchFlags = false;\nlet deprecationEmittedForRemoveThreadMember = false;\n\n/**\n * Flatten an object. Any properties that are collections will get converted to an array of keys.\n * @param {Object} obj The object to flatten.\n * @param {...Object<string, boolean|string>} [props] Specific properties to include/exclude.\n * @returns {Object}\n */\nfunction flatten(obj, ...props) {\n  if (!isObject(obj)) return obj;\n\n  const objProps = Object.keys(obj)\n    .filter(key => !key.startsWith('_'))\n    .map(key => ({ [key]: true }));\n\n  props = objProps.length ? Object.assign(...objProps, ...props) : Object.assign({}, ...props);\n\n  const out = {};\n\n  for (let [prop, newProp] of Object.entries(props)) {\n    if (!newProp) continue;\n    newProp = newProp === true ? prop : newProp;\n\n    const element = obj[prop];\n    const elemIsObj = isObject(element);\n    const valueOf = elemIsObj && typeof element.valueOf === 'function' ? element.valueOf() : null;\n    const hasToJSON = elemIsObj && typeof element.toJSON === 'function';\n\n    // If it's a Collection, make the array of keys\n    if (element instanceof Collection) out[newProp] = Array.from(element.keys());\n    // If the valueOf is a Collection, use its array of keys\n    else if (valueOf instanceof Collection) out[newProp] = Array.from(valueOf.keys());\n    // If it's an array, call toJSON function on each element if present, otherwise flatten each element\n    else if (Array.isArray(element)) out[newProp] = element.map(elm => elm.toJSON?.() ?? flatten(elm));\n    // If it's an object with a primitive `valueOf`, use that value\n    else if (typeof valueOf !== 'object') out[newProp] = valueOf;\n    // If it's an object with a toJSON function, use the return value of it\n    else if (hasToJSON) out[newProp] = element.toJSON();\n    // If element is an object, use the flattened version of it\n    else if (typeof element === 'object') out[newProp] = flatten(element);\n    // If it's a primitive\n    else if (!elemIsObj) out[newProp] = element;\n  }\n\n  return out;\n}\n\n/**\n * @typedef {Object} FetchRecommendedShardCountOptions\n * @property {number} [guildsPerShard=1000] Number of guilds assigned per shard\n * @property {number} [multipleOf=1] The multiple the shard count should round up to. (16 for large bot sharding)\n */\n\n/**\n * Gets the recommended shard count from Discord.\n * @param {string} token Discord auth token\n * @param {FetchRecommendedShardCountOptions} [options] Options for fetching the recommended shard count\n * @returns {Promise<number>} The recommended number of shards\n */\nasync function fetchRecommendedShardCount(token, { guildsPerShard = 1_000, multipleOf = 1 } = {}) {\n  if (!token) throw new DiscordjsError(ErrorCodes.TokenMissing);\n  const response = await fetch(RouteBases.api + Routes.gatewayBot(), {\n    method: 'GET',\n    headers: { Authorization: `Bot ${token.replace(/^Bot\\s*/i, '')}` },\n  });\n  if (!response.ok) {\n    if (response.status === 401) throw new DiscordjsError(ErrorCodes.TokenInvalid);\n    throw response;\n  }\n  const { shards } = await response.json();\n  return Math.ceil((shards * (1_000 / guildsPerShard)) / multipleOf) * multipleOf;\n}\n\n/**\n * A partial emoji object.\n * @typedef {Object} PartialEmoji\n * @property {boolean} animated Whether the emoji is animated\n * @property {Snowflake|undefined} id The id of the emoji\n * @property {string} name The name of the emoji\n */\n\n/**\n * Parses emoji info out of a string. The string must be one of:\n * * A UTF-8 emoji (no id)\n * * A URL-encoded UTF-8 emoji (no id)\n * * A Discord custom emoji (`<:name:id>` or `<a:name:id>`)\n * @param {string} text Emoji string to parse\n * @returns {?PartialEmoji}\n */\nfunction parseEmoji(text) {\n  if (text.includes('%')) text = decodeURIComponent(text);\n  if (!text.includes(':')) return { animated: false, name: text, id: undefined };\n  const match = text.match(/<?(?:(a):)?(\\w{2,32}):(\\d{17,19})?>?/);\n  return match && { animated: Boolean(match[1]), name: match[2], id: match[3] };\n}\n\n/**\n * A partial emoji object with only an id.\n * @typedef {Object} PartialEmojiOnlyId\n * @property {Snowflake} id The id of the emoji\n */\n\n/**\n * Resolves a partial emoji object from an {@link EmojiIdentifierResolvable}, without checking a Client.\n * @param {Emoji|EmojiIdentifierResolvable} emoji Emoji identifier to resolve\n * @returns {?(PartialEmoji|PartialEmojiOnlyId)} Supplying a snowflake yields `PartialEmojiOnlyId`.\n * @private\n */\nfunction resolvePartialEmoji(emoji) {\n  if (!emoji) return null;\n  if (typeof emoji === 'string') return /^\\d{17,19}$/.test(emoji) ? { id: emoji } : parseEmoji(emoji);\n  const { id, name, animated } = emoji;\n  if (!id && !name) return null;\n  return { id, name, animated: Boolean(animated) };\n}\n\n/**\n * Options used to make an error object.\n * @typedef {Object} MakeErrorOptions\n * @property {string} name Error type\n * @property {string} message Message for the error\n * @property {string} stack Stack for the error\n * @private\n */\n\n/**\n * Makes an Error from a plain info object.\n * @param {MakeErrorOptions} obj Error info\n * @returns {Error}\n * @private\n */\nfunction makeError(obj) {\n  const err = new Error(obj.message);\n  err.name = obj.name;\n  err.stack = obj.stack;\n  return err;\n}\n\n/**\n * Makes a plain error info object from an Error.\n * @param {Error} err Error to get info from\n * @returns {MakeErrorOptions}\n * @private\n */\nfunction makePlainError(err) {\n  return {\n    name: err.name,\n    message: err.message,\n    stack: err.stack,\n  };\n}\n\nconst TextSortableGroupTypes = [\n  ChannelType.GuildText,\n  ChannelType.GuildAnnouncement,\n  ChannelType.GuildForum,\n  ChannelType.GuildMedia,\n];\n\nconst VoiceSortableGroupTypes = [ChannelType.GuildVoice, ChannelType.GuildStageVoice];\nconst CategorySortableGroupTypes = [ChannelType.GuildCategory];\n\n/**\n * Gets an array of the channel types that can be moved in the channel group. For example, a GuildText channel would\n * return an array containing the types that can be ordered within the text channels (always at the top), and a voice\n * channel would return an array containing the types that can be ordered within the voice channels (always at the\n * bottom).\n * @param {ChannelType} type The type of the channel\n * @returns {ChannelType[]}\n * @private\n */\nfunction getSortableGroupTypes(type) {\n  switch (type) {\n    case ChannelType.GuildText:\n    case ChannelType.GuildAnnouncement:\n    case ChannelType.GuildForum:\n    case ChannelType.GuildMedia:\n      return TextSortableGroupTypes;\n    case ChannelType.GuildVoice:\n    case ChannelType.GuildStageVoice:\n      return VoiceSortableGroupTypes;\n    case ChannelType.GuildCategory:\n      return CategorySortableGroupTypes;\n    default:\n      return [type];\n  }\n}\n\n/**\n * Moves an element in an array *in place*.\n * @param {Array<*>} array Array to modify\n * @param {*} element Element to move\n * @param {number} newIndex Index or offset to move the element to\n * @param {boolean} [offset=false] Move the element by an offset amount rather than to a set index\n * @returns {number}\n * @private\n */\nfunction moveElementInArray(array, element, newIndex, offset = false) {\n  const index = array.indexOf(element);\n  newIndex = (offset ? index : 0) + newIndex;\n  if (newIndex > -1 && newIndex < array.length) {\n    const removedElement = array.splice(index, 1)[0];\n    array.splice(newIndex, 0, removedElement);\n  }\n  return array.indexOf(element);\n}\n\n/**\n * Verifies the provided data is a string, otherwise throws provided error.\n * @param {string} data The string resolvable to resolve\n * @param {Function} [error] The Error constructor to instantiate. Defaults to Error\n * @param {string} [errorMessage] The error message to throw with. Defaults to \"Expected string, got <data> instead.\"\n * @param {boolean} [allowEmpty=true] Whether an empty string should be allowed\n * @returns {string}\n */\nfunction verifyString(\n  data,\n  error = Error,\n  errorMessage = `Expected a string, got ${data} instead.`,\n  allowEmpty = true,\n) {\n  if (typeof data !== 'string') throw new error(errorMessage);\n  if (!allowEmpty && data.length === 0) throw new error(errorMessage);\n  return data;\n}\n\n/**\n * Can be a number, hex string, an RGB array like:\n * ```js\n * [255, 0, 255] // purple\n * ```\n * or one of the following strings:\n * - `Default`\n * - `White`\n * - `Aqua`\n * - `Green`\n * - `Blue`\n * - `Yellow`\n * - `Purple`\n * - `LuminousVividPink`\n * - `Fuchsia`\n * - `Gold`\n * - `Orange`\n * - `Red`\n * - `Grey`\n * - `Navy`\n * - `DarkAqua`\n * - `DarkGreen`\n * - `DarkBlue`\n * - `DarkPurple`\n * - `DarkVividPink`\n * - `DarkGold`\n * - `DarkOrange`\n * - `DarkRed`\n * - `DarkGrey`\n * - `DarkerGrey`\n * - `LightGrey`\n * - `DarkNavy`\n * - `Blurple`\n * - `Greyple`\n * - `DarkButNotBlack`\n * - `NotQuiteBlack`\n * - `Random`\n * @typedef {string|number|number[]} ColorResolvable\n */\n\n/**\n * Resolves a ColorResolvable into a color number.\n * @param {ColorResolvable} color Color to resolve\n * @returns {number} A color\n */\nfunction resolveColor(color) {\n  let resolvedColor;\n\n  if (typeof color === 'string') {\n    if (color === 'Random') return Math.floor(Math.random() * (0xffffff + 1));\n    if (color === 'Default') return 0;\n    if (/^#?[\\da-f]{6}$/i.test(color)) return parseInt(color.replace('#', ''), 16);\n    resolvedColor = Colors[color];\n  } else if (Array.isArray(color)) {\n    resolvedColor = (color[0] << 16) + (color[1] << 8) + color[2];\n  } else {\n    resolvedColor = color;\n  }\n\n  if (!Number.isInteger(resolvedColor)) {\n    throw new DiscordjsTypeError(ErrorCodes.ColorConvert, color);\n  }\n\n  if (resolvedColor < 0 || resolvedColor > 0xffffff) {\n    throw new DiscordjsRangeError(ErrorCodes.ColorRange);\n  }\n\n  return resolvedColor;\n}\n\n/**\n * Sorts by Discord's position and id.\n * @param {Collection} collection Collection of objects to sort\n * @returns {Collection}\n */\nfunction discordSort(collection) {\n  const isGuildChannel = collection.first() instanceof GuildChannel;\n  return collection.sorted(\n    isGuildChannel\n      ? (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(a.id) - BigInt(b.id))\n      : (a, b) => a.rawPosition - b.rawPosition || Number(BigInt(b.id) - BigInt(a.id)),\n  );\n}\n\n/**\n * Sets the position of a Channel or Role.\n * @param {BaseChannel|Role} item Object to set the position of\n * @param {number} position New position for the object\n * @param {boolean} relative Whether `position` is relative to its current position\n * @param {Collection<string, BaseChannel|Role>} sorted A collection of the objects sorted properly\n * @param {Client} client The client to use to patch the data\n * @param {string} route Route to call PATCH on\n * @param {string} [reason] Reason for the change\n * @returns {Promise<BaseChannel[]|Role[]>} Updated item list, with `id` and `position` properties\n * @private\n */\nasync function setPosition(item, position, relative, sorted, client, route, reason) {\n  let updatedItems = [...sorted.values()];\n  moveElementInArray(updatedItems, item, position, relative);\n  updatedItems = updatedItems.map((r, i) => ({ id: r.id, position: i }));\n  await client.rest.patch(route, { body: updatedItems, reason });\n  return updatedItems;\n}\n\n/**\n * Alternative to Node's `path.basename`, removing query string after the extension if it exists.\n * @param {string} path Path to get the basename of\n * @param {string} [ext] File extension to remove\n * @returns {string} Basename of the path\n * @private\n */\nfunction basename(path, ext) {\n  const res = parse(path);\n  return ext && res.ext.startsWith(ext) ? res.name : res.base.split('?')[0];\n}\n\n/**\n * The content to have all mentions replaced by the equivalent text.\n * @param {string} str The string to be converted\n * @param {TextBasedChannels} channel The channel the string was sent in\n * @returns {string}\n */\nfunction cleanContent(str, channel) {\n  return str.replaceAll(\n    /* eslint-disable max-len */\n    /<(?:(?<type>@[!&]?|#)|(?:\\/(?<commandName>[-_\\p{L}\\p{N}\\p{sc=Deva}\\p{sc=Thai} ]+):)|(?:a?:(?<emojiName>[\\w]+):))(?<id>\\d{17,19})>/gu,\n    (match, type, commandName, emojiName, id) => {\n      if (commandName) return `/${commandName}`;\n\n      if (emojiName) return `:${emojiName}:`;\n\n      switch (type) {\n        case '@':\n        case '@!': {\n          const member = channel.guild?.members.cache.get(id);\n          if (member) {\n            return `@${member.displayName}`;\n          }\n\n          const user = channel.client.users.cache.get(id);\n          return user ? `@${user.displayName}` : match;\n        }\n        case '@&': {\n          if (channel.type === ChannelType.DM) return match;\n          const role = channel.guild.roles.cache.get(id);\n          return role ? `@${role.name}` : match;\n        }\n        case '#': {\n          const mentionedChannel = channel.client.channels.cache.get(id);\n          return mentionedChannel ? `#${mentionedChannel.name}` : match;\n        }\n        default: {\n          return match;\n        }\n      }\n    },\n  );\n}\n\n/**\n * The content to put in a code block with all code block fences replaced by the equivalent backticks.\n * @param {string} text The string to be converted\n * @returns {string}\n */\nfunction cleanCodeBlockContent(text) {\n  return text.replaceAll('```', '`\\u200b``');\n}\n\n/**\n * Parses a webhook URL for the id and token.\n * @param {string} url The URL to parse\n * @returns {?WebhookClientDataIdWithToken} `null` if the URL is invalid, otherwise the id and the token\n */\nfunction parseWebhookURL(url) {\n  const matches = url.match(\n    /https?:\\/\\/(?:ptb\\.|canary\\.)?discord\\.com\\/api(?:\\/v\\d{1,2})?\\/webhooks\\/(\\d{17,19})\\/([\\w-]{68})/i,\n  );\n\n  if (!matches || matches.length <= 2) return null;\n\n  const [, id, token] = matches;\n  return {\n    id,\n    token,\n  };\n}\n\n/**\n * Supportive data for interaction resolved data.\n * @typedef {Object} SupportingInteractionResolvedData\n * @property {Client} client The client\n * @property {Guild} [guild] A guild\n * @property {GuildTextBasedChannel} [channel] A channel\n * @private\n */\n\n/**\n * Transforms the resolved data received from the API.\n * @param {SupportingInteractionResolvedData} supportingData Data to support the transformation\n * @param {APIInteractionDataResolved} [data] The received resolved objects\n * @returns {CommandInteractionResolvedData}\n * @private\n */\nfunction transformResolved(\n  { client, guild, channel },\n  { members, users, channels, roles, messages, attachments } = {},\n) {\n  const result = {};\n\n  if (members) {\n    result.members = new Collection();\n    for (const [id, member] of Object.entries(members)) {\n      const user = users[id];\n      result.members.set(id, guild?.members._add({ user, ...member }) ?? member);\n    }\n  }\n\n  if (users) {\n    result.users = new Collection();\n    for (const user of Object.values(users)) {\n      result.users.set(user.id, client.users._add(user));\n    }\n  }\n\n  if (roles) {\n    result.roles = new Collection();\n    for (const role of Object.values(roles)) {\n      result.roles.set(role.id, guild?.roles._add(role) ?? role);\n    }\n  }\n\n  if (channels) {\n    result.channels = new Collection();\n    for (const apiChannel of Object.values(channels)) {\n      result.channels.set(apiChannel.id, client.channels._add(apiChannel, guild) ?? apiChannel);\n    }\n  }\n\n  if (messages) {\n    result.messages = new Collection();\n    for (const message of Object.values(messages)) {\n      result.messages.set(message.id, channel?.messages?._add(message) ?? message);\n    }\n  }\n\n  if (attachments) {\n    result.attachments = new Collection();\n    for (const attachment of Object.values(attachments)) {\n      const patched = new Attachment(attachment);\n      result.attachments.set(attachment.id, patched);\n    }\n  }\n\n  return result;\n}\n\n/**\n * Resolves a SKU id from a SKU resolvable.\n * @param {SKUResolvable} resolvable The SKU resolvable to resolve\n * @returns {?Snowflake} The resolved SKU id, or `null` if the resolvable was invalid\n */\nfunction resolveSKUId(resolvable) {\n  if (typeof resolvable === 'string') return resolvable;\n  if (resolvable instanceof SKU) return resolvable.id;\n  return null;\n}\n\n/**\n * Deprecation function for fetching user flags.\n * @param {string} name Name of the class\n * @private\n */\nfunction emitDeprecationWarningForUserFetchFlags(name) {\n  if (deprecationEmittedForUserFetchFlags) return;\n  process.emitWarning(`${name}#fetchFlags() is deprecated. Use ${name}#fetch() instead.`);\n  deprecationEmittedForUserFetchFlags = true;\n}\n\n/**\n * Deprecation function for the reason parameter of removing thread members.\n * @param {string} name Name of the class\n * @private\n */\nfunction emitDeprecationWarningForRemoveThreadMember(name) {\n  if (deprecationEmittedForRemoveThreadMember) return;\n\n  process.emitWarning(\n    `The reason parameter of ${name}#remove() is deprecated as Discord does not parse them. It will be removed in the next major version.`,\n  );\n\n  deprecationEmittedForRemoveThreadMember = true;\n}\n\nmodule.exports = {\n  flatten,\n  fetchRecommendedShardCount,\n  parseEmoji,\n  resolvePartialEmoji,\n  makeError,\n  makePlainError,\n  getSortableGroupTypes,\n  moveElementInArray,\n  verifyString,\n  resolveColor,\n  discordSort,\n  setPosition,\n  basename,\n  cleanContent,\n  cleanCodeBlockContent,\n  parseWebhookURL,\n  transformResolved,\n  resolveSKUId,\n  emitDeprecationWarningForUserFetchFlags,\n  emitDeprecationWarningForRemoveThreadMember,\n};\n\n// Fixes Circular\nconst Attachment = require('../structures/Attachment');\nconst GuildChannel = require('../structures/GuildChannel');\nconst { SKU } = require('../structures/SKU.js');\n",
    "'use strict';\n\nconst EventEmitter = require('node:events');\nconst { REST } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst Options = require('../util/Options');\nconst { flatten } = require('../util/Util');\n\n/**\n * The base class for all clients.\n * @extends {EventEmitter}\n */\nclass BaseClient extends EventEmitter {\n  constructor(options = {}) {\n    super({ captureRejections: true });\n\n    if (typeof options !== 'object' || options === null) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    }\n\n    const defaultOptions = Options.createDefault();\n    /**\n     * The options the client was instantiated with\n     * @type {ClientOptions}\n     */\n    this.options = {\n      ...defaultOptions,\n      ...options,\n      presence: {\n        ...defaultOptions.presence,\n        ...options.presence,\n      },\n      sweepers: {\n        ...defaultOptions.sweepers,\n        ...options.sweepers,\n      },\n      ws: {\n        ...defaultOptions.ws,\n        ...options.ws,\n      },\n      rest: {\n        ...defaultOptions.rest,\n        ...options.rest,\n        userAgentAppendix: options.rest?.userAgentAppendix\n          ? `${Options.userAgentAppendix} ${options.rest.userAgentAppendix}`\n          : Options.userAgentAppendix,\n      },\n    };\n\n    /**\n     * The REST manager of the client\n     * @type {REST}\n     */\n    this.rest = new REST(this.options.rest);\n  }\n\n  /**\n   * Destroys all assets used by the base client.\n   * @returns {void}\n   */\n  destroy() {\n    this.rest.clearHashSweeper();\n    this.rest.clearHandlerSweeper();\n  }\n\n  /**\n   * Options used for deleting a webhook.\n   * @typedef {Object} WebhookDeleteOptions\n   * @property {string} [token] Token of the webhook\n   * @property {string} [reason] The reason for deleting the webhook\n   */\n\n  /**\n   * Deletes a webhook.\n   * @param {Snowflake} id The webhook's id\n   * @param {WebhookDeleteOptions} [options] Options for deleting the webhook\n   * @returns {Promise<void>}\n   */\n  async deleteWebhook(id, { token, reason } = {}) {\n    await this.rest.delete(Routes.webhook(id, token), { auth: !token, reason });\n  }\n\n  /**\n   * Increments max listeners by one, if they are not zero.\n   * @private\n   */\n  incrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one, if they are not zero.\n   * @private\n   */\n  decrementMaxListeners() {\n    const maxListeners = this.getMaxListeners();\n    if (maxListeners !== 0) {\n      this.setMaxListeners(maxListeners - 1);\n    }\n  }\n\n  toJSON(...props) {\n    return flatten(this, ...props);\n  }\n\n  async [Symbol.asyncDispose]() {\n    await this.destroy();\n  }\n}\n\nmodule.exports = BaseClient;\n\n/**\n * @external REST\n * @see {@link https://discord.js.org/docs/packages/rest/stable/REST:Class}\n */\n",
    "'use strict';\n\nfunction createEnum(keys) {\n  const obj = {};\n  for (const [index, key] of keys.entries()) {\n    if (key === null) continue;\n    obj[key] = index;\n    obj[index] = key;\n  }\n  return obj;\n}\n\nmodule.exports = { createEnum };\n",
    "'use strict';\n\nconst { createEnum } = require('./Enums');\n\n/**\n * The enumeration for partials.\n * ```js\n * import { Client, Partials } from 'discord.js';\n *\n * const client = new Client({\n *   intents: [\n *     // Intents...\n *   ],\n *   partials: [\n *     Partials.User, // We want to receive uncached users!\n *     Partials.Message // We want to receive uncached messages!\n *   ]\n * });\n * ```\n * @typedef {Object} Partials\n * @property {number} User The partial to receive uncached users.\n * @property {number} Channel The partial to receive uncached channels.\n * <info>This is required to receive direct messages!</info>\n * @property {number} GuildMember The partial to receive uncached guild members.\n * @property {number} Message The partial to receive uncached messages.\n * @property {number} Reaction The partial to receive uncached reactions.\n * @property {number} GuildScheduledEvent The partial to receive uncached guild scheduled events.\n * @property {number} ThreadMember The partial to receive uncached thread members.\n */\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {Partials}\n * @ignore\n */\nmodule.exports = createEnum([\n  'User',\n  'Channel',\n  'GuildMember',\n  'Message',\n  'Reaction',\n  'GuildScheduledEvent',\n  'ThreadMember',\n]);\n",
    "'use strict';\n\nconst Partials = require('../../util/Partials');\n\n/*\n\nABOUT ACTIONS\n\nActions are similar to WebSocket Packet Handlers, but since introducing\nthe REST API methods, in order to prevent rewriting code to handle data,\n\"actions\" have been introduced. They're basically what Packet Handlers\nused to be but they're strictly for manipulating data and making sure\nthat WebSocket events don't clash with REST methods.\n\n*/\n\nclass GenericAction {\n  constructor(client) {\n    this.client = client;\n  }\n\n  handle(data) {\n    return data;\n  }\n\n  getPayload(data, manager, id, partialType, cache) {\n    return this.client.options.partials.includes(partialType) ? manager._add(data, cache) : manager.cache.get(id);\n  }\n\n  getChannel(data) {\n    const payloadData = {};\n    const id = data.channel_id ?? data.id;\n\n    if (!('recipients' in data)) {\n      // Try to resolve the recipient, but do not add the client user.\n      const recipient = data.author ?? data.user ?? { id: data.user_id };\n      if (recipient.id !== this.client.user.id) payloadData.recipients = [recipient];\n    }\n\n    if (id !== undefined) payloadData.id = id;\n\n    return (\n      data[this.client.actions.injectedChannel] ??\n      this.getPayload({ ...data, ...payloadData }, this.client.channels, id, Partials.Channel)\n    );\n  }\n\n  getMessage(data, channel, cache) {\n    const id = data.message_id ?? data.id;\n    return (\n      data[this.client.actions.injectedMessage] ??\n      this.getPayload(\n        {\n          id,\n          channel_id: channel.id,\n          guild_id: data.guild_id ?? channel.guild?.id,\n        },\n        channel.messages,\n        id,\n        Partials.Message,\n        cache,\n      )\n    );\n  }\n\n  getReaction(data, message, user) {\n    const id = data.emoji.id ?? decodeURIComponent(data.emoji.name);\n    return this.getPayload(\n      {\n        emoji: data.emoji,\n        count: message.partial ? null : 0,\n        me: user?.id === this.client.user.id,\n      },\n      message.reactions,\n      id,\n      Partials.Reaction,\n    );\n  }\n\n  getMember(data, guild) {\n    return this.getPayload(data, guild.members, data.user.id, Partials.GuildMember);\n  }\n\n  getUser(data) {\n    const id = data.user_id;\n    return data[this.client.actions.injectedUser] ?? this.getPayload({ id }, this.client.users, id, Partials.User);\n  }\n\n  getUserFromMember(data) {\n    if (data.guild_id && data.member?.user) {\n      const guild = this.client.guilds.cache.get(data.guild_id);\n      if (guild) {\n        return guild.members._add(data.member).user;\n      } else {\n        return this.client.users._add(data.member.user);\n      }\n    }\n    return this.getUser(data);\n  }\n\n  getScheduledEvent(data, guild) {\n    const id = data.guild_scheduled_event_id ?? data.id;\n    return this.getPayload(\n      { id, guild_id: data.guild_id ?? guild.id },\n      guild.scheduledEvents,\n      id,\n      Partials.GuildScheduledEvent,\n    );\n  }\n\n  getThreadMember(id, manager) {\n    return this.getPayload({ user_id: id }, manager, id, Partials.ThreadMember, false);\n  }\n\n  spreadInjectedData(data) {\n    return Object.fromEntries(Object.getOwnPropertySymbols(data).map(symbol => [symbol, data[symbol]]));\n  }\n}\n\nmodule.exports = GenericAction;\n",
    "'use strict';\n\n/**\n * @typedef {Object} Events\n * @property {string} ApplicationCommandPermissionsUpdate applicationCommandPermissionsUpdate\n * @property {string} AutoModerationActionExecution autoModerationActionExecution\n * @property {string} AutoModerationRuleCreate autoModerationRuleCreate\n * @property {string} AutoModerationRuleDelete autoModerationRuleDelete\n * @property {string} AutoModerationRuleUpdate autoModerationRuleUpdate\n * @property {string} CacheSweep cacheSweep\n * @property {string} ChannelCreate channelCreate\n * @property {string} ChannelDelete channelDelete\n * @property {string} ChannelPinsUpdate channelPinsUpdate\n * @property {string} ChannelUpdate channelUpdate\n * @property {string} ClientReady ready\n * @property {string} Debug debug\n * @property {string} EntitlementCreate entitlementCreate\n * @property {string} EntitlementUpdate entitlementUpdate\n * @property {string} EntitlementDelete entitlementDelete\n * @property {string} Error error\n * @property {string} GuildAuditLogEntryCreate guildAuditLogEntryCreate\n * @property {string} GuildAvailable guildAvailable\n * @property {string} GuildBanAdd guildBanAdd\n * @property {string} GuildBanRemove guildBanRemove\n * @property {string} GuildCreate guildCreate\n * @property {string} GuildDelete guildDelete\n * @property {string} GuildEmojiCreate emojiCreate\n * @property {string} GuildEmojiDelete emojiDelete\n * @property {string} GuildEmojiUpdate emojiUpdate\n * @property {string} GuildIntegrationsUpdate guildIntegrationsUpdate\n * @property {string} GuildMemberAdd guildMemberAdd\n * @property {string} GuildMemberAvailable guildMemberAvailable\n * @property {string} GuildMemberRemove guildMemberRemove\n * @property {string} GuildMembersChunk guildMembersChunk\n * @property {string} GuildMemberUpdate guildMemberUpdate\n * @property {string} GuildRoleCreate roleCreate\n * @property {string} GuildRoleDelete roleDelete\n * @property {string} GuildRoleUpdate roleUpdate\n * @property {string} GuildScheduledEventCreate guildScheduledEventCreate\n * @property {string} GuildScheduledEventDelete guildScheduledEventDelete\n * @property {string} GuildScheduledEventUpdate guildScheduledEventUpdate\n * @property {string} GuildScheduledEventUserAdd guildScheduledEventUserAdd\n * @property {string} GuildScheduledEventUserRemove guildScheduledEventUserRemove\n * @property {string} GuildStickerCreate stickerCreate\n * @property {string} GuildStickerDelete stickerDelete\n * @property {string} GuildStickerUpdate stickerUpdate\n * @property {string} GuildUnavailable guildUnavailable\n * @property {string} GuildUpdate guildUpdate\n * @property {string} InteractionCreate interactionCreate\n * @property {string} Invalidated invalidated\n * @property {string} InviteCreate inviteCreate\n * @property {string} InviteDelete inviteDelete\n * @property {string} MessageBulkDelete messageDeleteBulk\n * @property {string} MessageCreate messageCreate\n * @property {string} MessageDelete messageDelete\n * @property {string} MessagePollVoteAdd messagePollVoteAdd\n * @property {string} MessagePollVoteRemove messagePollVoteRemove\n * @property {string} MessageReactionAdd messageReactionAdd\n * @property {string} MessageReactionRemove messageReactionRemove\n * @property {string} MessageReactionRemoveAll messageReactionRemoveAll\n * @property {string} MessageReactionRemoveEmoji messageReactionRemoveEmoji\n * @property {string} MessageUpdate messageUpdate\n * @property {string} PresenceUpdate presenceUpdate\n * @property {string} ShardDisconnect shardDisconnect\n * @property {string} ShardError shardError\n * @property {string} ShardReady shardReady\n * @property {string} ShardReconnecting shardReconnecting\n * @property {string} ShardResume shardResume\n * @property {string} StageInstanceCreate stageInstanceCreate\n * @property {string} StageInstanceDelete stageInstanceDelete\n * @property {string} StageInstanceUpdate stageInstanceUpdate\n * @property {string} SubscriptionCreate subscriptionCreate\n * @property {string} SubscriptionUpdate subscriptionUpdate\n * @property {string} SubscriptionDelete subscriptionDelete\n * @property {string} ThreadCreate threadCreate\n * @property {string} ThreadDelete threadDelete\n * @property {string} ThreadListSync threadListSync\n * @property {string} ThreadMembersUpdate threadMembersUpdate\n * @property {string} ThreadMemberUpdate threadMemberUpdate\n * @property {string} ThreadUpdate threadUpdate\n * @property {string} TypingStart typingStart\n * @property {string} UserUpdate userUpdate\n * @property {string} VoiceChannelEffectSend voiceChannelEffectSend\n * @property {string} VoiceServerUpdate voiceServerUpdate\n * @property {string} VoiceStateUpdate voiceStateUpdate\n * @property {string} Warn warn\n * @property {string} WebhooksUpdate webhookUpdate\n */\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {Events}\n * @ignore\n */\nmodule.exports = {\n  ApplicationCommandPermissionsUpdate: 'applicationCommandPermissionsUpdate',\n  AutoModerationActionExecution: 'autoModerationActionExecution',\n  AutoModerationRuleCreate: 'autoModerationRuleCreate',\n  AutoModerationRuleDelete: 'autoModerationRuleDelete',\n  AutoModerationRuleUpdate: 'autoModerationRuleUpdate',\n  CacheSweep: 'cacheSweep',\n  ChannelCreate: 'channelCreate',\n  ChannelDelete: 'channelDelete',\n  ChannelPinsUpdate: 'channelPinsUpdate',\n  ChannelUpdate: 'channelUpdate',\n  ClientReady: 'ready',\n  Debug: 'debug',\n  EntitlementCreate: 'entitlementCreate',\n  EntitlementUpdate: 'entitlementUpdate',\n  EntitlementDelete: 'entitlementDelete',\n  Error: 'error',\n  GuildAuditLogEntryCreate: 'guildAuditLogEntryCreate',\n  GuildAvailable: 'guildAvailable',\n  GuildBanAdd: 'guildBanAdd',\n  GuildBanRemove: 'guildBanRemove',\n  GuildCreate: 'guildCreate',\n  GuildDelete: 'guildDelete',\n  GuildEmojiCreate: 'emojiCreate',\n  GuildEmojiDelete: 'emojiDelete',\n  GuildEmojiUpdate: 'emojiUpdate',\n  GuildIntegrationsUpdate: 'guildIntegrationsUpdate',\n  GuildMemberAdd: 'guildMemberAdd',\n  GuildMemberAvailable: 'guildMemberAvailable',\n  GuildMemberRemove: 'guildMemberRemove',\n  GuildMembersChunk: 'guildMembersChunk',\n  GuildMemberUpdate: 'guildMemberUpdate',\n  GuildRoleCreate: 'roleCreate',\n  GuildRoleDelete: 'roleDelete',\n  GuildRoleUpdate: 'roleUpdate',\n  GuildScheduledEventCreate: 'guildScheduledEventCreate',\n  GuildScheduledEventDelete: 'guildScheduledEventDelete',\n  GuildScheduledEventUpdate: 'guildScheduledEventUpdate',\n  GuildScheduledEventUserAdd: 'guildScheduledEventUserAdd',\n  GuildScheduledEventUserRemove: 'guildScheduledEventUserRemove',\n  GuildStickerCreate: 'stickerCreate',\n  GuildStickerDelete: 'stickerDelete',\n  GuildStickerUpdate: 'stickerUpdate',\n  GuildUnavailable: 'guildUnavailable',\n  GuildUpdate: 'guildUpdate',\n  InteractionCreate: 'interactionCreate',\n  Invalidated: 'invalidated',\n  InviteCreate: 'inviteCreate',\n  InviteDelete: 'inviteDelete',\n  MessageBulkDelete: 'messageDeleteBulk',\n  MessageCreate: 'messageCreate',\n  MessageDelete: 'messageDelete',\n  MessagePollVoteAdd: 'messagePollVoteAdd',\n  MessagePollVoteRemove: 'messagePollVoteRemove',\n  MessageReactionAdd: 'messageReactionAdd',\n  MessageReactionRemove: 'messageReactionRemove',\n  MessageReactionRemoveAll: 'messageReactionRemoveAll',\n  MessageReactionRemoveEmoji: 'messageReactionRemoveEmoji',\n  MessageUpdate: 'messageUpdate',\n  PresenceUpdate: 'presenceUpdate',\n  Raw: 'raw',\n  ShardDisconnect: 'shardDisconnect',\n  ShardError: 'shardError',\n  ShardReady: 'shardReady',\n  ShardReconnecting: 'shardReconnecting',\n  ShardResume: 'shardResume',\n  StageInstanceCreate: 'stageInstanceCreate',\n  StageInstanceDelete: 'stageInstanceDelete',\n  StageInstanceUpdate: 'stageInstanceUpdate',\n  SubscriptionCreate: 'subscriptionCreate',\n  SubscriptionUpdate: 'subscriptionUpdate',\n  SubscriptionDelete: 'subscriptionDelete',\n  ThreadCreate: 'threadCreate',\n  ThreadDelete: 'threadDelete',\n  ThreadListSync: 'threadListSync',\n  ThreadMembersUpdate: 'threadMembersUpdate',\n  ThreadMemberUpdate: 'threadMemberUpdate',\n  ThreadUpdate: 'threadUpdate',\n  TypingStart: 'typingStart',\n  UserUpdate: 'userUpdate',\n  VoiceChannelEffectSend: 'voiceChannelEffectSend',\n  VoiceServerUpdate: 'voiceServerUpdate',\n  VoiceStateUpdate: 'voiceStateUpdate',\n  Warn: 'warn',\n  WebhooksUpdate: 'webhookUpdate',\n};\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\n/**\n * The data received in the {@link Client#event:applicationCommandPermissionsUpdate} event\n * @typedef {Object} ApplicationCommandPermissionsUpdateData\n * @property {Snowflake} id The id of the command or global entity that was updated\n * @property {Snowflake} guildId The id of the guild in which permissions were updated\n * @property {Snowflake} applicationId The id of the application that owns the command or entity being updated\n * @property {ApplicationCommandPermissions[]} permissions The updated permissions\n */\n\nclass ApplicationCommandPermissionsUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    /**\n     * Emitted whenever permissions for an application command in a guild were updated.\n     * <warn>This includes permission updates for other applications in addition to the logged in client,\n     * check `data.applicationId` to verify which application the update is for</warn>\n     * @event Client#applicationCommandPermissionsUpdate\n     * @param {ApplicationCommandPermissionsUpdateData} data The updated permissions\n     */\n    client.emit(Events.ApplicationCommandPermissionsUpdate, {\n      permissions: data.permissions,\n      id: data.id,\n      guildId: data.guild_id,\n      applicationId: data.application_id,\n    });\n  }\n}\n\nmodule.exports = ApplicationCommandPermissionsUpdateAction;\n",
    "'use strict';\n\nconst { _transformAPIAutoModerationAction } = require('../util/Transformers');\n\n/**\n * Represents the structure of an executed action when an {@link AutoModerationRule} is triggered.\n */\nclass AutoModerationActionExecution {\n  constructor(data, guild) {\n    /**\n     * The guild where this action was executed from.\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The action that was executed.\n     * @type {AutoModerationAction}\n     */\n    this.action = _transformAPIAutoModerationAction(data.action);\n\n    /**\n     * The id of the auto moderation rule this action belongs to.\n     * @type {Snowflake}\n     */\n    this.ruleId = data.rule_id;\n\n    /**\n     * The trigger type of the auto moderation rule which was triggered.\n     * @type {AutoModerationRuleTriggerType}\n     */\n    this.ruleTriggerType = data.rule_trigger_type;\n\n    /**\n     * The id of the user that triggered this action.\n     * @type {Snowflake}\n     */\n    this.userId = data.user_id;\n\n    /**\n     * The id of the channel where this action was triggered from.\n     * @type {?Snowflake}\n     */\n    this.channelId = data.channel_id ?? null;\n\n    /**\n     * The id of the message that triggered this action.\n     * <info>This will not be present if the message was blocked or the content was not part of any message.</info>\n     * @type {?Snowflake}\n     */\n    this.messageId = data.message_id ?? null;\n\n    /**\n     * The id of any system auto moderation messages posted as a result of this action.\n     * @type {?Snowflake}\n     */\n    this.alertSystemMessageId = data.alert_system_message_id ?? null;\n\n    /**\n     * The content that triggered this action.\n     * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged gateway intent.</info>\n     * @type {string}\n     */\n    this.content = data.content;\n\n    /**\n     * The word or phrase configured in the rule that triggered this action.\n     * @type {?string}\n     */\n    this.matchedKeyword = data.matched_keyword ?? null;\n\n    /**\n     * The substring in content that triggered this action.\n     * @type {?string}\n     */\n    this.matchedContent = data.matched_content ?? null;\n  }\n\n  /**\n   * The auto moderation rule this action belongs to.\n   * @type {?AutoModerationRule}\n   * @readonly\n   */\n  get autoModerationRule() {\n    return this.guild.autoModerationRules.cache.get(this.ruleId) ?? null;\n  }\n\n  /**\n   * The channel where this action was triggered from.\n   * @type {?(GuildTextBasedChannel|ForumChannel|MediaChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * The user that triggered this action.\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.guild.client.users.cache.get(this.userId) ?? null;\n  }\n\n  /**\n   * The guild member that triggered this action.\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.userId) ?? null;\n  }\n}\n\nmodule.exports = AutoModerationActionExecution;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst AutoModerationActionExecution = require('../../structures/AutoModerationActionExecution');\nconst Events = require('../../util/Events');\n\nclass AutoModerationActionExecutionAction extends Action {\n  handle(data) {\n    const { client } = this;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      /**\n       * Emitted whenever an auto moderation rule is triggered.\n       * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>\n       * @event Client#autoModerationActionExecution\n       * @param {AutoModerationActionExecution} autoModerationActionExecution The data of the execution\n       */\n      client.emit(Events.AutoModerationActionExecution, new AutoModerationActionExecution(data, guild));\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = AutoModerationActionExecutionAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass AutoModerationRuleCreateAction extends Action {\n  handle(data) {\n    const { client } = this;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const autoModerationRule = guild.autoModerationRules._add(data);\n\n      /**\n       * Emitted whenever an auto moderation rule is created.\n       * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>\n       * @event Client#autoModerationRuleCreate\n       * @param {AutoModerationRule} autoModerationRule The created auto moderation rule\n       */\n      client.emit(Events.AutoModerationRuleCreate, autoModerationRule);\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = AutoModerationRuleCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass AutoModerationRuleDeleteAction extends Action {\n  handle(data) {\n    const { client } = this;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const autoModerationRule = guild.autoModerationRules.cache.get(data.id);\n\n      if (autoModerationRule) {\n        guild.autoModerationRules.cache.delete(autoModerationRule.id);\n\n        /**\n         * Emitted whenever an auto moderation rule is deleted.\n         * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>\n         * @event Client#autoModerationRuleDelete\n         * @param {AutoModerationRule} autoModerationRule The deleted auto moderation rule\n         */\n        client.emit(Events.AutoModerationRuleDelete, autoModerationRule);\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = AutoModerationRuleDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass AutoModerationRuleUpdateAction extends Action {\n  handle(data) {\n    const { client } = this;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const oldAutoModerationRule = guild.autoModerationRules.cache.get(data.id)?._clone() ?? null;\n      const newAutoModerationRule = guild.autoModerationRules._add(data);\n\n      /**\n       * Emitted whenever an auto moderation rule gets updated.\n       * <info>This event requires the {@link PermissionFlagsBits.ManageGuild} permission.</info>\n       * @event Client#autoModerationRuleUpdate\n       * @param {?AutoModerationRule} oldAutoModerationRule The auto moderation rule before the update\n       * @param {AutoModerationRule} newAutoModerationRule The auto moderation rule after the update\n       */\n      client.emit(Events.AutoModerationRuleUpdate, oldAutoModerationRule, newAutoModerationRule);\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = AutoModerationRuleUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ChannelCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const existing = client.channels.cache.has(data.id);\n    const channel = client.channels._add(data);\n    if (!existing && channel) {\n      /**\n       * Emitted whenever a guild channel is created.\n       * @event Client#channelCreate\n       * @param {GuildChannel} channel The channel that was created\n       */\n      client.emit(Events.ChannelCreate, channel);\n    }\n    return { channel };\n  }\n}\n\nmodule.exports = ChannelCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ChannelDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      client.channels._remove(channel.id);\n      /**\n       * Emitted whenever a channel is deleted.\n       * @event Client#channelDelete\n       * @param {DMChannel|GuildChannel} channel The channel that was deleted\n       */\n      client.emit(Events.ChannelDelete, channel);\n    }\n  }\n}\n\nmodule.exports = ChannelDeleteAction;\n",
    "'use strict';\n\nconst DataManager = require('./DataManager');\nconst GuildChannel = require('../structures/GuildChannel');\n\n/**\n * Manages API methods for CategoryChannels' children.\n * @extends {DataManager}\n */\nclass CategoryChannelChildManager extends DataManager {\n  constructor(channel) {\n    super(channel.client, GuildChannel);\n    /**\n     * The category channel this manager belongs to\n     * @type {CategoryChannel}\n     */\n    this.channel = channel;\n  }\n\n  /**\n   * The channels that are a part of this category\n   * @type {Collection<Snowflake, GuildChannel>}\n   * @readonly\n   */\n  get cache() {\n    return this.guild.channels.cache.filter(channel => channel.parentId === this.channel.id);\n  }\n\n  /**\n   * The guild this manager belongs to\n   * @type {Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.channel.guild;\n  }\n\n  /**\n   * Options for creating a channel using {@link CategoryChannelChildManager#create}.\n   * @typedef {Object} CategoryCreateChannelOptions\n   * @property {string} name The name for the new channel\n   * @property {ChannelType} [type=ChannelType.GuildText] The type of the new channel.\n   * @property {string} [topic] The topic for the new channel\n   * @property {boolean} [nsfw] Whether the new channel is NSFW\n   * @property {number} [bitrate] Bitrate of the new channel in bits (only voice)\n   * @property {number} [userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @property {number} [position] Position of the new channel\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the new channel in seconds\n   * @property {string} [rtcRegion] The specific region of the new channel.\n   * @property {VideoQualityMode} [videoQualityMode] The camera video quality mode of the voice channel\n   * @property {number} [defaultThreadRateLimitPerUser] The initial rate limit per user (slowmode)\n   * to set on newly created threads in a channel.\n   * @property {GuildForumTagData[]} [availableTags] The tags that can be used in this channel (forum only).\n   * @property {DefaultReactionEmoji} [defaultReactionEmoji]\n   * The emoji to show in the add reaction button on a thread in a guild forum channel.\n   * @property {ThreadAutoArchiveDuration} [defaultAutoArchiveDuration]\n   * The default auto archive duration for all new threads in this channel\n   * @property {SortOrderType} [defaultSortOrder] The default sort order mode used to order posts (forum only).\n   * @property {ForumLayoutType} [defaultForumLayout] The default layout used to display posts (forum only).\n   * @property {string} [reason] Reason for creating the new channel\n   */\n\n  /**\n   * Creates a new channel within this category.\n   * <info>You cannot create a channel of type {@link ChannelType.GuildCategory} inside a CategoryChannel.</info>\n   * @param {CategoryCreateChannelOptions} options Options for creating the new channel\n   * @returns {Promise<GuildChannel>}\n   */\n  create(options) {\n    return this.guild.channels.create({\n      ...options,\n      parent: this.channel.id,\n    });\n  }\n}\n\nmodule.exports = CategoryChannelChildManager;\n",
    "'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst CategoryChannelChildManager = require('../managers/CategoryChannelChildManager');\n\n/**\n * Represents a guild category channel on Discord.\n * @extends {GuildChannel}\n */\nclass CategoryChannel extends GuildChannel {\n  /**\n   * The id of the parent of this channel.\n   * @name CategoryChannel#parentId\n   * @type {null}\n   */\n\n  /**\n   * The parent of this channel.\n   * @name CategoryChannel#parent\n   * @type {null}\n   * @readonly\n   */\n\n  /**\n   * Sets the category parent of this channel.\n   * <warn>It is not possible to set the parent of a CategoryChannel.</warn>\n   * @method setParent\n   * @memberof CategoryChannel\n   * @instance\n   * @param {?CategoryChannelResolvable} channel The channel to set as parent\n   * @param {SetParentOptions} [options={}] The options for setting the parent\n   * @returns {Promise<GuildChannel>}\n   */\n\n  /**\n   * A manager of the channels belonging to this category\n   * @type {CategoryChannelChildManager}\n   * @readonly\n   */\n  get children() {\n    return new CategoryChannelChildManager(this);\n  }\n}\n\nmodule.exports = CategoryChannel;\n",
    "'use strict';\n\nconst EventEmitter = require('node:events');\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordjsTypeError, ErrorCodes } = require('../../errors');\nconst { flatten } = require('../../util/Util');\n\n/**\n * Filter to be applied to the collector.\n * @typedef {Function} CollectorFilter\n * @param {...*} args Any arguments received by the listener\n * @param {Collection} collection The items collected by this collector\n * @returns {boolean|Promise<boolean>}\n */\n\n/**\n * Options to be applied to the collector.\n * @typedef {Object} CollectorOptions\n * @property {CollectorFilter} [filter] The filter applied to this collector\n * @property {number} [time] How long to run the collector for in milliseconds\n * @property {number} [idle] How long to stop the collector after inactivity in milliseconds\n * @property {boolean} [dispose=false] Whether to dispose data when it's deleted\n */\n\n/**\n * Abstract class for defining a new Collector.\n * @extends {EventEmitter}\n * @abstract\n */\nclass Collector extends EventEmitter {\n  constructor(client, options = {}) {\n    super();\n\n    /**\n     * The client that instantiated this Collector\n     * @name Collector#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The filter applied to this collector\n     * @type {CollectorFilter}\n     * @returns {boolean|Promise<boolean>}\n     */\n    this.filter = options.filter ?? (() => true);\n\n    /**\n     * The options of this collector\n     * @type {CollectorOptions}\n     */\n    this.options = options;\n\n    /**\n     * The items collected by this collector\n     * @type {Collection}\n     */\n    this.collected = new Collection();\n\n    /**\n     * Whether this collector has finished collecting\n     * @type {boolean}\n     */\n    this.ended = false;\n\n    /**\n     * Timeout for cleanup\n     * @type {?Timeout}\n     * @private\n     */\n    this._timeout = null;\n\n    /**\n     * Timeout for cleanup due to inactivity\n     * @type {?Timeout}\n     * @private\n     */\n    this._idletimeout = null;\n\n    /**\n     * The reason the collector ended\n     * @type {?string}\n     * @private\n     */\n    this._endReason = null;\n\n    if (typeof this.filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.filter', 'function');\n    }\n\n    this.handleCollect = this.handleCollect.bind(this);\n    this.handleDispose = this.handleDispose.bind(this);\n\n    if (options.time) this._timeout = setTimeout(() => this.stop('time'), options.time).unref();\n    if (options.idle) this._idletimeout = setTimeout(() => this.stop('idle'), options.idle).unref();\n\n    /**\n     * The timestamp at which this collector last collected an item\n     * @type {?number}\n     */\n    this.lastCollectedTimestamp = null;\n  }\n\n  /**\n   * The Date at which this collector last collected an item\n   * @type {?Date}\n   */\n  get lastCollectedAt() {\n    return this.lastCollectedTimestamp && new Date(this.lastCollectedTimestamp);\n  }\n\n  /**\n   * Call this to handle an event as a collectable element. Accepts any event data as parameters.\n   * @param {...*} args The arguments emitted by the listener\n   * @returns {Promise<void>}\n   * @emits Collector#collect\n   */\n  async handleCollect(...args) {\n    const collectedId = await this.collect(...args);\n\n    if (collectedId) {\n      const filterResult = await this.filter(...args, this.collected);\n      if (filterResult) {\n        this.collected.set(collectedId, args[0]);\n\n        /**\n         * Emitted whenever an element is collected.\n         * @event Collector#collect\n         * @param {...*} args The arguments emitted by the listener\n         */\n        this.emit('collect', ...args);\n\n        this.lastCollectedTimestamp = Date.now();\n        if (this._idletimeout) {\n          clearTimeout(this._idletimeout);\n          this._idletimeout = setTimeout(() => this.stop('idle'), this.options.idle).unref();\n        }\n      } else {\n        /**\n         * Emitted whenever an element is not collected by the collector.\n         * @event Collector#ignore\n         * @param {...*} args The arguments emitted by the listener\n         */\n        this.emit('ignore', ...args);\n      }\n    }\n    this.checkEnd();\n  }\n\n  /**\n   * Call this to remove an element from the collection. Accepts any event data as parameters.\n   * @param {...*} args The arguments emitted by the listener\n   * @returns {Promise<void>}\n   * @emits Collector#dispose\n   */\n  async handleDispose(...args) {\n    if (!this.options.dispose) return;\n\n    const dispose = this.dispose(...args);\n    if (!dispose || !(await this.filter(...args)) || !this.collected.has(dispose)) return;\n    this.collected.delete(dispose);\n\n    /**\n     * Emitted whenever an element is disposed of.\n     * @event Collector#dispose\n     * @param {...*} args The arguments emitted by the listener\n     */\n    this.emit('dispose', ...args);\n    this.checkEnd();\n  }\n\n  /**\n   * Returns a promise that resolves with the next collected element;\n   * rejects with collected elements if the collector finishes without receiving a next element\n   * @type {Promise}\n   * @readonly\n   */\n  get next() {\n    return new Promise((resolve, reject) => {\n      if (this.ended) {\n        reject(this.collected);\n        return;\n      }\n\n      const cleanup = () => {\n        this.removeListener('collect', onCollect);\n        this.removeListener('end', onEnd);\n      };\n\n      const onCollect = item => {\n        cleanup();\n        resolve(item);\n      };\n\n      const onEnd = () => {\n        cleanup();\n        reject(this.collected);\n      };\n\n      this.on('collect', onCollect);\n      this.on('end', onEnd);\n    });\n  }\n\n  /**\n   * Stops this collector and emits the `end` event.\n   * @param {string} [reason='user'] The reason this collector is ending\n   * @emits Collector#end\n   */\n  stop(reason = 'user') {\n    if (this.ended) return;\n\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this._timeout = null;\n    }\n    if (this._idletimeout) {\n      clearTimeout(this._idletimeout);\n      this._idletimeout = null;\n    }\n\n    this._endReason = reason;\n    this.ended = true;\n\n    /**\n     * Emitted when the collector is finished collecting.\n     * @event Collector#end\n     * @param {Collection} collected The elements collected by the collector\n     * @param {string} reason The reason the collector ended\n     */\n    this.emit('end', this.collected, reason);\n  }\n\n  /**\n   * Options used to reset the timeout and idle timer of a {@link Collector}.\n   * @typedef {Object} CollectorResetTimerOptions\n   * @property {number} [time] How long to run the collector for (in milliseconds)\n   * @property {number} [idle] How long to wait to stop the collector after inactivity (in milliseconds)\n   */\n\n  /**\n   * Resets the collector's timeout and idle timer.\n   * @param {CollectorResetTimerOptions} [options] Options for resetting\n   */\n  resetTimer({ time, idle } = {}) {\n    if (this._timeout) {\n      clearTimeout(this._timeout);\n      this._timeout = setTimeout(() => this.stop('time'), time ?? this.options.time).unref();\n    }\n    if (this._idletimeout) {\n      clearTimeout(this._idletimeout);\n      this._idletimeout = setTimeout(() => this.stop('idle'), idle ?? this.options.idle).unref();\n    }\n  }\n\n  /**\n   * Checks whether the collector should end, and if so, ends it.\n   * @returns {boolean} Whether the collector ended or not\n   */\n  checkEnd() {\n    const reason = this.endReason;\n    if (reason) this.stop(reason);\n    return Boolean(reason);\n  }\n\n  /**\n   * Allows collectors to be consumed with for-await-of loops\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of}\n   */\n  async *[Symbol.asyncIterator]() {\n    const queue = [];\n    const onCollect = (...item) => queue.push(item);\n    this.on('collect', onCollect);\n\n    try {\n      while (queue.length || !this.ended) {\n        if (queue.length) {\n          yield queue.shift();\n        } else {\n          // eslint-disable-next-line no-await-in-loop\n          await new Promise(resolve => {\n            const tick = () => {\n              this.removeListener('collect', tick);\n              this.removeListener('end', tick);\n              return resolve();\n            };\n            this.on('collect', tick);\n            this.on('end', tick);\n          });\n        }\n      }\n    } finally {\n      this.removeListener('collect', onCollect);\n    }\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n\n  /* eslint-disable no-empty-function */\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    return this._endReason;\n  }\n\n  /**\n   * Handles incoming events from the `handleCollect` function. Returns null if the event should not\n   * be collected, or returns an object describing the data that should be stored.\n   * @see Collector#handleCollect\n   * @param {...*} args Any args the event listener emits\n   * @returns {?(*|Promise<?*>)} Data to insert into collection, if any\n   * @abstract\n   */\n  collect() {}\n\n  /**\n   * Handles incoming events from the `handleDispose`. Returns null if the event should not\n   * be disposed, or returns the key that should be removed.\n   * @see Collector#handleDispose\n   * @param {...*} args Any args the event listener emits\n   * @returns {?*} Key to remove from the collection, if any\n   * @abstract\n   */\n  dispose() {}\n  /* eslint-enable no-empty-function */\n}\n\nmodule.exports = Collector;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} InteractionCollectorOptions\n * @property {TextBasedChannelsResolvable} [channel] The channel to listen to interactions from\n * @property {ComponentType} [componentType] The type of component to listen for\n * @property {GuildResolvable} [guild] The guild to listen to interactions from\n * @property {InteractionType} [interactionType] The type of interaction to listen for\n * @property {number} [max] The maximum total amount of interactions to collect\n * @property {number} [maxComponents] The maximum number of components to collect\n * @property {number} [maxUsers] The maximum number of users to interact\n * @property {Message|APIMessage} [message] The message to listen to interactions from\n * @property {InteractionResponse} [interactionResponse] The interaction response to listen\n * to message component interactions from\n */\n\n/**\n * Collects interactions.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * <info>Interaction collectors that do not specify `time` or `idle` may be prone to always running.\n * Ensure your interaction collectors end via either of these options or manual cancellation.</info>\n * @extends {Collector}\n */\nclass InteractionCollector extends Collector {\n  /**\n   * @param {Client} client The client on which to collect interactions\n   * @param {InteractionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(client, options = {}) {\n    super(client, options);\n\n    /**\n     * The message from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.messageId = options.message?.id ?? options.interactionResponse?.interaction.message?.id ?? null;\n\n    /**\n     * The message interaction id from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.messageInteractionId = options.interactionResponse?.id ?? null;\n\n    /**\n     * The channel from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.channelId =\n      options.interactionResponse?.interaction.channelId ??\n      options.message?.channelId ??\n      options.message?.channel_id ??\n      this.client.channels.resolveId(options.channel);\n\n    /**\n     * The guild from which to collect interactions, if provided\n     * @type {?Snowflake}\n     */\n    this.guildId =\n      options.interactionResponse?.interaction.guildId ??\n      options.message?.guildId ??\n      options.message?.guild_id ??\n      this.client.guilds.resolveId(options.channel?.guild) ??\n      this.client.guilds.resolveId(options.guild);\n\n    /**\n     * The type of interaction to collect\n     * @type {?InteractionType}\n     */\n    this.interactionType = options.interactionType ?? null;\n\n    /**\n     * The type of component to collect\n     * @type {?ComponentType}\n     */\n    this.componentType = options.componentType ?? null;\n\n    /**\n     * The users that have interacted with this collector\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of interactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.client.incrementMaxListeners();\n\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.messageId)) this.stop('messageDelete');\n    };\n\n    if (this.messageId || this.messageInteractionId) {\n      this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n      this.client.on(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    }\n\n    if (this.channelId) {\n      this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n      this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n      this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    }\n\n    if (this.guildId) {\n      this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n      this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n    }\n\n    this.client.on(Events.InteractionCreate, this.handleCollect);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.InteractionCreate, this.handleCollect);\n      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', interaction => {\n      this.total++;\n      this.users.set(interaction.user.id, interaction.user);\n    });\n  }\n\n  /**\n   * Handles an incoming interaction for possible collection.\n   * @param {BaseInteraction} interaction The interaction to possibly collect\n   * @returns {?Snowflake}\n   * @private\n   */\n  collect(interaction) {\n    /**\n     * Emitted whenever an interaction is collected.\n     * @event InteractionCollector#collect\n     * @param {BaseInteraction} interaction The interaction that was collected\n     */\n\n    if (this.interactionType && interaction.type !== this.interactionType) return null;\n    if (this.componentType && interaction.componentType !== this.componentType) return null;\n    if (this.messageId && interaction.message?.id !== this.messageId) return null;\n    if (\n      this.messageInteractionId &&\n      interaction.message?.interactionMetadata?.id &&\n      interaction.message.interactionMetadata.id !== this.messageInteractionId\n    ) {\n      return null;\n    }\n    if (this.channelId && interaction.channelId !== this.channelId) return null;\n    if (this.guildId && interaction.guildId !== this.guildId) return null;\n\n    return interaction.id;\n  }\n\n  /**\n   * Handles an interaction for possible disposal.\n   * @param {BaseInteraction} interaction The interaction that could be disposed of\n   * @returns {?Snowflake}\n   */\n  dispose(interaction) {\n    /**\n     * Emitted whenever an interaction is disposed of.\n     * @event InteractionCollector#dispose\n     * @param {BaseInteraction} interaction The interaction that was disposed of\n     */\n    if (this.type && interaction.type !== this.type) return null;\n    if (this.componentType && interaction.componentType !== this.componentType) return null;\n    if (this.messageId && interaction.message?.id !== this.messageId) return null;\n    if (\n      this.messageInteractionId &&\n      interaction.message?.interactionMetadata?.id &&\n      interaction.message.interactionMetadata.id !== this.messageInteractionId\n    ) {\n      return null;\n    }\n    if (this.channelId && interaction.channelId !== this.channelId) return null;\n    if (this.guildId && interaction.guildId !== this.guildId) return null;\n\n    return interaction.id;\n  }\n\n  /**\n   * Empties this interaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxComponents && this.collected.size >= this.options.maxComponents) return 'componentLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.messageId) {\n      this.stop('messageDelete');\n    }\n\n    if (message.interactionMetadata?.id === this.messageInteractionId) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.channelId || channel.threads?.cache.has(this.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.guildId) {\n      this.stop('guildDelete');\n    }\n  }\n}\n\nmodule.exports = InteractionCollector;\n",
    "'use strict';\n\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} MessageCollectorOptions\n * @property {number} max The maximum amount of messages to collect\n * @property {number} maxProcessed The maximum amount of messages to process\n */\n\n/**\n * Collects messages on a channel.\n * Will automatically stop if the channel ({@link Client#event:channelDelete channelDelete}),\n * thread ({@link Client#event:threadDelete threadDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * @extends {Collector}\n */\nclass MessageCollector extends Collector {\n  /**\n   * @param {TextBasedChannels} channel The channel\n   * @param {MessageCollectorOptions} options The options to be applied to this collector\n   * @emits MessageCollector#message\n   */\n  constructor(channel, options = {}) {\n    super(channel.client, options);\n\n    /**\n     * The channel\n     * @type {TextBasedChannels}\n     */\n    this.channel = channel;\n\n    /**\n     * Total number of messages that were received in the channel during message collection\n     * @type {number}\n     */\n    this.received = 0;\n\n    const bulkDeleteListener = messages => {\n      for (const message of messages.values()) this.handleDispose(message);\n    };\n\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MessageCreate, this.handleCollect);\n    this.client.on(Events.MessageDelete, this.handleDispose);\n    this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n    this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MessageCreate, this.handleCollect);\n      this.client.removeListener(Events.MessageDelete, this.handleDispose);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n  }\n\n  /**\n   * Handles a message for possible collection.\n   * @param {Message} message The message that could be collected\n   * @returns {?Snowflake}\n   * @private\n   */\n  collect(message) {\n    /**\n     * Emitted whenever a message is collected.\n     * @event MessageCollector#collect\n     * @param {Message} message The message that was collected\n     */\n    if (message.channelId !== this.channel.id) return null;\n    this.received++;\n    return message.id;\n  }\n\n  /**\n   * Handles a message for possible disposal.\n   * @param {Message} message The message that could be disposed of\n   * @returns {?Snowflake}\n   */\n  dispose(message) {\n    /**\n     * Emitted whenever a message is disposed of.\n     * @event MessageCollector#dispose\n     * @param {Message} message The message that was disposed of\n     */\n    return message.channelId === this.channel.id ? message.id : null;\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.collected.size >= this.options.max) return 'limit';\n    if (this.options.maxProcessed && this.received === this.options.maxProcessed) return 'processedLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.channel.id || channel.id === this.channel.parentId) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.channel.id) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.channel.guild?.id) {\n      this.stop('guildDelete');\n    }\n  }\n}\n\nmodule.exports = MessageCollector;\n",
    "/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n",
    "/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n",
    "var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n",
    "var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n",
    "var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n",
    "/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n",
    "var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n",
    "/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n",
    "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n",
    "var isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n",
    "/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n",
    "var baseGetTag = require('./_baseGetTag'),\n    isObject = require('./isObject');\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n",
    "var root = require('./_root');\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n",
    "var coreJsData = require('./_coreJsData');\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n",
    "/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n",
    "var isFunction = require('./isFunction'),\n    isMasked = require('./_isMasked'),\n    isObject = require('./isObject'),\n    toSource = require('./_toSource');\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n",
    "/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n",
    "var baseIsNative = require('./_baseIsNative'),\n    getValue = require('./_getValue');\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n",
    "var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n",
    "var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n",
    "/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n",
    "var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n",
    "var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n",
    "var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n",
    "var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n",
    "/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n",
    "/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n",
    "var eq = require('./eq');\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n",
    "var assocIndexOf = require('./_assocIndexOf');\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n",
    "var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n",
    "var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n",
    "var assocIndexOf = require('./_assocIndexOf');\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n",
    "var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n",
    "var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n",
    "var Hash = require('./_Hash'),\n    ListCache = require('./_ListCache'),\n    Map = require('./_Map');\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n",
    "/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n",
    "var isKeyable = require('./_isKeyable');\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n",
    "var getMapData = require('./_getMapData');\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n",
    "var getMapData = require('./_getMapData');\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n",
    "var getMapData = require('./_getMapData');\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n",
    "var getMapData = require('./_getMapData');\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n",
    "var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n",
    "var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n",
    "var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n",
    "var memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (string.charCodeAt(0) === 46 /* . */) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, subString) {\n    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n",
    "/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n",
    "var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n",
    "var baseToString = require('./_baseToString');\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n",
    "var isArray = require('./isArray'),\n    isKey = require('./_isKey'),\n    stringToPath = require('./_stringToPath'),\n    toString = require('./toString');\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n",
    "var isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n",
    "var castPath = require('./_castPath'),\n    toKey = require('./_toKey');\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n",
    "var baseGet = require('./_baseGet');\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n",
    "'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n  var envHasBigInt64Array = typeof BigInt64Array !== 'undefined';\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n    if ((a instanceof Map) && (b instanceof Map)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      for (i of a.entries())\n        if (!equal(i[1], b.get(i[0]))) return false;\n      return true;\n    }\n\n    if ((a instanceof Set) && (b instanceof Set)) {\n      if (a.size !== b.size) return false;\n      for (i of a.entries())\n        if (!b.has(i[0])) return false;\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (a[i] !== b[i]) return false;\n      return true;\n    }\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n",
    "/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n",
    "/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n",
    "var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n",
    "/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n",
    "/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n",
    "/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n",
    "var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n",
    "var baseIndexOf = require('./_baseIndexOf');\n\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludes(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nmodule.exports = arrayIncludes;\n",
    "/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\nfunction arrayIncludesWith(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = arrayIncludesWith;\n",
    "/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nmodule.exports = cacheHas;\n",
    "var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n",
    "/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n",
    "/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nmodule.exports = setToArray;\n",
    "var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n",
    "var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n",
    "var baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `comparator` which\n * is invoked to compare elements of `array`. The order of result values is\n * determined by the order they occur in the array.The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.uniqWith(objects, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n */\nfunction uniqWith(array, comparator) {\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  return (array && array.length) ? baseUniq(array, undefined, comparator) : [];\n}\n\nmodule.exports = uniqWith;\n",
    "'use strict';\n\nvar get = require('lodash/get.js');\nvar fastDeepEqual = require('fast-deep-equal/es6/index.js');\nvar uniqWith = require('lodash/uniqWith.js');\n\nfunction _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }\n\nvar get__default = /*#__PURE__*/_interopDefault(get);\nvar fastDeepEqual__default = /*#__PURE__*/_interopDefault(fastDeepEqual);\nvar uniqWith__default = /*#__PURE__*/_interopDefault(uniqWith);\n\nvar __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// node_modules/@jspm/core/nodelibs/browser/chunk-5decc758.js\nvar e;\nvar t;\nvar n;\nvar r = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof self ? self : globalThis;\nvar o = e = {};\nfunction i() {\n  throw new Error(\"setTimeout has not been defined\");\n}\n__name(i, \"i\");\nfunction u() {\n  throw new Error(\"clearTimeout has not been defined\");\n}\n__name(u, \"u\");\nfunction c(e3) {\n  if (t === setTimeout)\n    return setTimeout(e3, 0);\n  if ((t === i || !t) && setTimeout)\n    return t = setTimeout, setTimeout(e3, 0);\n  try {\n    return t(e3, 0);\n  } catch (n3) {\n    try {\n      return t.call(null, e3, 0);\n    } catch (n4) {\n      return t.call(this || r, e3, 0);\n    }\n  }\n}\n__name(c, \"c\");\n!function() {\n  try {\n    t = \"function\" == typeof setTimeout ? setTimeout : i;\n  } catch (e3) {\n    t = i;\n  }\n  try {\n    n = \"function\" == typeof clearTimeout ? clearTimeout : u;\n  } catch (e3) {\n    n = u;\n  }\n}();\nvar l;\nvar s = [];\nvar f = false;\nvar a = -1;\nfunction h() {\n  f && l && (f = false, l.length ? s = l.concat(s) : a = -1, s.length && d());\n}\n__name(h, \"h\");\nfunction d() {\n  if (!f) {\n    var e3 = c(h);\n    f = true;\n    for (var t3 = s.length; t3; ) {\n      for (l = s, s = []; ++a < t3; )\n        l && l[a].run();\n      a = -1, t3 = s.length;\n    }\n    l = null, f = false, function(e4) {\n      if (n === clearTimeout)\n        return clearTimeout(e4);\n      if ((n === u || !n) && clearTimeout)\n        return n = clearTimeout, clearTimeout(e4);\n      try {\n        n(e4);\n      } catch (t4) {\n        try {\n          return n.call(null, e4);\n        } catch (t5) {\n          return n.call(this || r, e4);\n        }\n      }\n    }(e3);\n  }\n}\n__name(d, \"d\");\nfunction m(e3, t3) {\n  (this || r).fun = e3, (this || r).array = t3;\n}\n__name(m, \"m\");\nfunction p() {\n}\n__name(p, \"p\");\no.nextTick = function(e3) {\n  var t3 = new Array(arguments.length - 1);\n  if (arguments.length > 1)\n    for (var n3 = 1; n3 < arguments.length; n3++)\n      t3[n3 - 1] = arguments[n3];\n  s.push(new m(e3, t3)), 1 !== s.length || f || c(d);\n}, m.prototype.run = function() {\n  (this || r).fun.apply(null, (this || r).array);\n}, o.title = \"browser\", o.browser = true, o.env = {}, o.argv = [], o.version = \"\", o.versions = {}, o.on = p, o.addListener = p, o.once = p, o.off = p, o.removeListener = p, o.removeAllListeners = p, o.emit = p, o.prependListener = p, o.prependOnceListener = p, o.listeners = function(e3) {\n  return [];\n}, o.binding = function(e3) {\n  throw new Error(\"process.binding is not supported\");\n}, o.cwd = function() {\n  return \"/\";\n}, o.chdir = function(e3) {\n  throw new Error(\"process.chdir is not supported\");\n}, o.umask = function() {\n  return 0;\n};\nvar T = e;\nT.addListener;\nT.argv;\nT.binding;\nT.browser;\nT.chdir;\nT.cwd;\nT.emit;\nT.env;\nT.listeners;\nT.nextTick;\nT.off;\nT.on;\nT.once;\nT.prependListener;\nT.prependOnceListener;\nT.removeAllListeners;\nT.removeListener;\nT.title;\nT.umask;\nT.version;\nT.versions;\n\n// node_modules/@jspm/core/nodelibs/browser/chunk-b4205b57.js\nvar t2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.toStringTag;\nvar e2 = Object.prototype.toString;\nvar o2 = /* @__PURE__ */ __name(function(o3) {\n  return !(t2 && o3 && \"object\" == typeof o3 && Symbol.toStringTag in o3) && \"[object Arguments]\" === e2.call(o3);\n}, \"o\");\nvar n2 = /* @__PURE__ */ __name(function(t3) {\n  return !!o2(t3) || null !== t3 && \"object\" == typeof t3 && \"number\" == typeof t3.length && t3.length >= 0 && \"[object Array]\" !== e2.call(t3) && \"[object Function]\" === e2.call(t3.callee);\n}, \"n\");\nvar r2 = function() {\n  return o2(arguments);\n}();\no2.isLegacyArguments = n2;\nvar l2 = r2 ? o2 : n2;\nvar t$1 = Object.prototype.toString;\nvar o$1 = Function.prototype.toString;\nvar n$1 = /^\\s*(?:function)?\\*/;\nvar e$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.toStringTag;\nvar r$1 = Object.getPrototypeOf;\nvar c2 = function() {\n  if (!e$1)\n    return false;\n  try {\n    return Function(\"return function*() {}\")();\n  } catch (t3) {\n  }\n}();\nvar u2 = c2 ? r$1(c2) : {};\nvar i2 = /* @__PURE__ */ __name(function(c3) {\n  return \"function\" == typeof c3 && (!!n$1.test(o$1.call(c3)) || (e$1 ? r$1(c3) === u2 : \"[object GeneratorFunction]\" === t$1.call(c3)));\n}, \"i\");\nvar t$2 = \"function\" == typeof Object.create ? function(t3, e3) {\n  e3 && (t3.super_ = e3, t3.prototype = Object.create(e3.prototype, { constructor: { value: t3, enumerable: false, writable: true, configurable: true } }));\n} : function(t3, e3) {\n  if (e3) {\n    t3.super_ = e3;\n    var o3 = /* @__PURE__ */ __name(function() {\n    }, \"o\");\n    o3.prototype = e3.prototype, t3.prototype = new o3(), t3.prototype.constructor = t3;\n  }\n};\nvar i$1 = /* @__PURE__ */ __name(function(e3) {\n  return e3 && \"object\" == typeof e3 && \"function\" == typeof e3.copy && \"function\" == typeof e3.fill && \"function\" == typeof e3.readUInt8;\n}, \"i$1\");\nvar o$2 = {};\nvar u$1 = i$1;\nvar f2 = l2;\nvar a2 = i2;\nfunction c$1(e3) {\n  return e3.call.bind(e3);\n}\n__name(c$1, \"c$1\");\nvar s2 = \"undefined\" != typeof BigInt;\nvar p2 = \"undefined\" != typeof Symbol;\nvar y = p2 && void 0 !== Symbol.toStringTag;\nvar l$1 = \"undefined\" != typeof Uint8Array;\nvar d2 = \"undefined\" != typeof ArrayBuffer;\nif (l$1 && y)\n  var g = Object.getPrototypeOf(Uint8Array.prototype), b = c$1(Object.getOwnPropertyDescriptor(g, Symbol.toStringTag).get);\nvar m2 = c$1(Object.prototype.toString);\nvar h2 = c$1(Number.prototype.valueOf);\nvar j = c$1(String.prototype.valueOf);\nvar A = c$1(Boolean.prototype.valueOf);\nif (s2)\n  var w = c$1(BigInt.prototype.valueOf);\nif (p2)\n  var v = c$1(Symbol.prototype.valueOf);\nfunction O(e3, t3) {\n  if (\"object\" != typeof e3)\n    return false;\n  try {\n    return t3(e3), true;\n  } catch (e4) {\n    return false;\n  }\n}\n__name(O, \"O\");\nfunction S(e3) {\n  return l$1 && y ? void 0 !== b(e3) : B(e3) || k(e3) || E(e3) || D(e3) || U(e3) || P(e3) || x(e3) || I(e3) || M(e3) || z(e3) || F(e3);\n}\n__name(S, \"S\");\nfunction B(e3) {\n  return l$1 && y ? \"Uint8Array\" === b(e3) : \"[object Uint8Array]\" === m2(e3) || u$1(e3) && void 0 !== e3.buffer;\n}\n__name(B, \"B\");\nfunction k(e3) {\n  return l$1 && y ? \"Uint8ClampedArray\" === b(e3) : \"[object Uint8ClampedArray]\" === m2(e3);\n}\n__name(k, \"k\");\nfunction E(e3) {\n  return l$1 && y ? \"Uint16Array\" === b(e3) : \"[object Uint16Array]\" === m2(e3);\n}\n__name(E, \"E\");\nfunction D(e3) {\n  return l$1 && y ? \"Uint32Array\" === b(e3) : \"[object Uint32Array]\" === m2(e3);\n}\n__name(D, \"D\");\nfunction U(e3) {\n  return l$1 && y ? \"Int8Array\" === b(e3) : \"[object Int8Array]\" === m2(e3);\n}\n__name(U, \"U\");\nfunction P(e3) {\n  return l$1 && y ? \"Int16Array\" === b(e3) : \"[object Int16Array]\" === m2(e3);\n}\n__name(P, \"P\");\nfunction x(e3) {\n  return l$1 && y ? \"Int32Array\" === b(e3) : \"[object Int32Array]\" === m2(e3);\n}\n__name(x, \"x\");\nfunction I(e3) {\n  return l$1 && y ? \"Float32Array\" === b(e3) : \"[object Float32Array]\" === m2(e3);\n}\n__name(I, \"I\");\nfunction M(e3) {\n  return l$1 && y ? \"Float64Array\" === b(e3) : \"[object Float64Array]\" === m2(e3);\n}\n__name(M, \"M\");\nfunction z(e3) {\n  return l$1 && y ? \"BigInt64Array\" === b(e3) : \"[object BigInt64Array]\" === m2(e3);\n}\n__name(z, \"z\");\nfunction F(e3) {\n  return l$1 && y ? \"BigUint64Array\" === b(e3) : \"[object BigUint64Array]\" === m2(e3);\n}\n__name(F, \"F\");\nfunction T2(e3) {\n  return \"[object Map]\" === m2(e3);\n}\n__name(T2, \"T\");\nfunction N(e3) {\n  return \"[object Set]\" === m2(e3);\n}\n__name(N, \"N\");\nfunction W(e3) {\n  return \"[object WeakMap]\" === m2(e3);\n}\n__name(W, \"W\");\nfunction $(e3) {\n  return \"[object WeakSet]\" === m2(e3);\n}\n__name($, \"$\");\nfunction C(e3) {\n  return \"[object ArrayBuffer]\" === m2(e3);\n}\n__name(C, \"C\");\nfunction V(e3) {\n  return \"undefined\" != typeof ArrayBuffer && (C.working ? C(e3) : e3 instanceof ArrayBuffer);\n}\n__name(V, \"V\");\nfunction G(e3) {\n  return \"[object DataView]\" === m2(e3);\n}\n__name(G, \"G\");\nfunction R(e3) {\n  return \"undefined\" != typeof DataView && (G.working ? G(e3) : e3 instanceof DataView);\n}\n__name(R, \"R\");\nfunction J(e3) {\n  return \"[object SharedArrayBuffer]\" === m2(e3);\n}\n__name(J, \"J\");\nfunction _(e3) {\n  return \"undefined\" != typeof SharedArrayBuffer && (J.working ? J(e3) : e3 instanceof SharedArrayBuffer);\n}\n__name(_, \"_\");\nfunction H(e3) {\n  return O(e3, h2);\n}\n__name(H, \"H\");\nfunction Z(e3) {\n  return O(e3, j);\n}\n__name(Z, \"Z\");\nfunction q(e3) {\n  return O(e3, A);\n}\n__name(q, \"q\");\nfunction K(e3) {\n  return s2 && O(e3, w);\n}\n__name(K, \"K\");\nfunction L(e3) {\n  return p2 && O(e3, v);\n}\n__name(L, \"L\");\no$2.isArgumentsObject = f2, o$2.isGeneratorFunction = a2, o$2.isPromise = function(e3) {\n  return \"undefined\" != typeof Promise && e3 instanceof Promise || null !== e3 && \"object\" == typeof e3 && \"function\" == typeof e3.then && \"function\" == typeof e3.catch;\n}, o$2.isArrayBufferView = function(e3) {\n  return d2 && ArrayBuffer.isView ? ArrayBuffer.isView(e3) : S(e3) || R(e3);\n}, o$2.isTypedArray = S, o$2.isUint8Array = B, o$2.isUint8ClampedArray = k, o$2.isUint16Array = E, o$2.isUint32Array = D, o$2.isInt8Array = U, o$2.isInt16Array = P, o$2.isInt32Array = x, o$2.isFloat32Array = I, o$2.isFloat64Array = M, o$2.isBigInt64Array = z, o$2.isBigUint64Array = F, T2.working = \"undefined\" != typeof Map && T2(/* @__PURE__ */ new Map()), o$2.isMap = function(e3) {\n  return \"undefined\" != typeof Map && (T2.working ? T2(e3) : e3 instanceof Map);\n}, N.working = \"undefined\" != typeof Set && N(/* @__PURE__ */ new Set()), o$2.isSet = function(e3) {\n  return \"undefined\" != typeof Set && (N.working ? N(e3) : e3 instanceof Set);\n}, W.working = \"undefined\" != typeof WeakMap && W(/* @__PURE__ */ new WeakMap()), o$2.isWeakMap = function(e3) {\n  return \"undefined\" != typeof WeakMap && (W.working ? W(e3) : e3 instanceof WeakMap);\n}, $.working = \"undefined\" != typeof WeakSet && $(/* @__PURE__ */ new WeakSet()), o$2.isWeakSet = function(e3) {\n  return $(e3);\n}, C.working = \"undefined\" != typeof ArrayBuffer && C(new ArrayBuffer()), o$2.isArrayBuffer = V, G.working = \"undefined\" != typeof ArrayBuffer && \"undefined\" != typeof DataView && G(new DataView(new ArrayBuffer(1), 0, 1)), o$2.isDataView = R, J.working = \"undefined\" != typeof SharedArrayBuffer && J(new SharedArrayBuffer()), o$2.isSharedArrayBuffer = _, o$2.isAsyncFunction = function(e3) {\n  return \"[object AsyncFunction]\" === m2(e3);\n}, o$2.isMapIterator = function(e3) {\n  return \"[object Map Iterator]\" === m2(e3);\n}, o$2.isSetIterator = function(e3) {\n  return \"[object Set Iterator]\" === m2(e3);\n}, o$2.isGeneratorObject = function(e3) {\n  return \"[object Generator]\" === m2(e3);\n}, o$2.isWebAssemblyCompiledModule = function(e3) {\n  return \"[object WebAssembly.Module]\" === m2(e3);\n}, o$2.isNumberObject = H, o$2.isStringObject = Z, o$2.isBooleanObject = q, o$2.isBigIntObject = K, o$2.isSymbolObject = L, o$2.isBoxedPrimitive = function(e3) {\n  return H(e3) || Z(e3) || q(e3) || K(e3) || L(e3);\n}, o$2.isAnyArrayBuffer = function(e3) {\n  return l$1 && (V(e3) || _(e3));\n}, [\"isProxy\", \"isExternal\", \"isModuleNamespaceObject\"].forEach(function(e3) {\n  Object.defineProperty(o$2, e3, { enumerable: false, value: function() {\n    throw new Error(e3 + \" is not supported in userland\");\n  } });\n});\nvar Q = \"undefined\" != typeof globalThis ? globalThis : \"undefined\" != typeof self ? self : globalThis;\nvar X = {};\nvar Y = T;\nvar ee = Object.getOwnPropertyDescriptors || function(e3) {\n  for (var t3 = Object.keys(e3), r3 = {}, n3 = 0; n3 < t3.length; n3++)\n    r3[t3[n3]] = Object.getOwnPropertyDescriptor(e3, t3[n3]);\n  return r3;\n};\nvar te = /%[sdj%]/g;\nX.format = function(e3) {\n  if (!ge(e3)) {\n    for (var t3 = [], r3 = 0; r3 < arguments.length; r3++)\n      t3.push(oe(arguments[r3]));\n    return t3.join(\" \");\n  }\n  r3 = 1;\n  for (var n3 = arguments, i3 = n3.length, o3 = String(e3).replace(te, function(e4) {\n    if (\"%%\" === e4)\n      return \"%\";\n    if (r3 >= i3)\n      return e4;\n    switch (e4) {\n      case \"%s\":\n        return String(n3[r3++]);\n      case \"%d\":\n        return Number(n3[r3++]);\n      case \"%j\":\n        try {\n          return JSON.stringify(n3[r3++]);\n        } catch (e5) {\n          return \"[Circular]\";\n        }\n      default:\n        return e4;\n    }\n  }), u3 = n3[r3]; r3 < i3; u3 = n3[++r3])\n    le(u3) || !he(u3) ? o3 += \" \" + u3 : o3 += \" \" + oe(u3);\n  return o3;\n}, X.deprecate = function(e3, t3) {\n  if (void 0 !== Y && true === Y.noDeprecation)\n    return e3;\n  if (void 0 === Y)\n    return function() {\n      return X.deprecate(e3, t3).apply(this || Q, arguments);\n    };\n  var r3 = false;\n  return function() {\n    if (!r3) {\n      if (Y.throwDeprecation)\n        throw new Error(t3);\n      Y.traceDeprecation ? console.trace(t3) : console.error(t3), r3 = true;\n    }\n    return e3.apply(this || Q, arguments);\n  };\n};\nvar re = {};\nvar ne = /^$/;\nif (Y.env.NODE_DEBUG) {\n  ie = Y.env.NODE_DEBUG;\n  ie = ie.replace(/[|\\\\{}()[\\]^$+?.]/g, \"\\\\$&\").replace(/\\*/g, \".*\").replace(/,/g, \"$|^\").toUpperCase(), ne = new RegExp(\"^\" + ie + \"$\", \"i\");\n}\nvar ie;\nfunction oe(e3, t3) {\n  var r3 = { seen: [], stylize: fe };\n  return arguments.length >= 3 && (r3.depth = arguments[2]), arguments.length >= 4 && (r3.colors = arguments[3]), ye(t3) ? r3.showHidden = t3 : t3 && X._extend(r3, t3), be(r3.showHidden) && (r3.showHidden = false), be(r3.depth) && (r3.depth = 2), be(r3.colors) && (r3.colors = false), be(r3.customInspect) && (r3.customInspect = true), r3.colors && (r3.stylize = ue), ae(r3, e3, r3.depth);\n}\n__name(oe, \"oe\");\nfunction ue(e3, t3) {\n  var r3 = oe.styles[t3];\n  return r3 ? \"\\x1B[\" + oe.colors[r3][0] + \"m\" + e3 + \"\\x1B[\" + oe.colors[r3][1] + \"m\" : e3;\n}\n__name(ue, \"ue\");\nfunction fe(e3, t3) {\n  return e3;\n}\n__name(fe, \"fe\");\nfunction ae(e3, t3, r3) {\n  if (e3.customInspect && t3 && we(t3.inspect) && t3.inspect !== X.inspect && (!t3.constructor || t3.constructor.prototype !== t3)) {\n    var n3 = t3.inspect(r3, e3);\n    return ge(n3) || (n3 = ae(e3, n3, r3)), n3;\n  }\n  var i3 = function(e4, t4) {\n    if (be(t4))\n      return e4.stylize(\"undefined\", \"undefined\");\n    if (ge(t4)) {\n      var r4 = \"'\" + JSON.stringify(t4).replace(/^\"|\"$/g, \"\").replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"') + \"'\";\n      return e4.stylize(r4, \"string\");\n    }\n    if (de(t4))\n      return e4.stylize(\"\" + t4, \"number\");\n    if (ye(t4))\n      return e4.stylize(\"\" + t4, \"boolean\");\n    if (le(t4))\n      return e4.stylize(\"null\", \"null\");\n  }(e3, t3);\n  if (i3)\n    return i3;\n  var o3 = Object.keys(t3), u3 = function(e4) {\n    var t4 = {};\n    return e4.forEach(function(e5, r4) {\n      t4[e5] = true;\n    }), t4;\n  }(o3);\n  if (e3.showHidden && (o3 = Object.getOwnPropertyNames(t3)), Ae(t3) && (o3.indexOf(\"message\") >= 0 || o3.indexOf(\"description\") >= 0))\n    return ce(t3);\n  if (0 === o3.length) {\n    if (we(t3)) {\n      var f3 = t3.name ? \": \" + t3.name : \"\";\n      return e3.stylize(\"[Function\" + f3 + \"]\", \"special\");\n    }\n    if (me(t3))\n      return e3.stylize(RegExp.prototype.toString.call(t3), \"regexp\");\n    if (je(t3))\n      return e3.stylize(Date.prototype.toString.call(t3), \"date\");\n    if (Ae(t3))\n      return ce(t3);\n  }\n  var a3, c3 = \"\", s4 = false, p3 = [\"{\", \"}\"];\n  (pe(t3) && (s4 = true, p3 = [\"[\", \"]\"]), we(t3)) && (c3 = \" [Function\" + (t3.name ? \": \" + t3.name : \"\") + \"]\");\n  return me(t3) && (c3 = \" \" + RegExp.prototype.toString.call(t3)), je(t3) && (c3 = \" \" + Date.prototype.toUTCString.call(t3)), Ae(t3) && (c3 = \" \" + ce(t3)), 0 !== o3.length || s4 && 0 != t3.length ? r3 < 0 ? me(t3) ? e3.stylize(RegExp.prototype.toString.call(t3), \"regexp\") : e3.stylize(\"[Object]\", \"special\") : (e3.seen.push(t3), a3 = s4 ? function(e4, t4, r4, n4, i4) {\n    for (var o4 = [], u4 = 0, f4 = t4.length; u4 < f4; ++u4)\n      ke(t4, String(u4)) ? o4.push(se(e4, t4, r4, n4, String(u4), true)) : o4.push(\"\");\n    return i4.forEach(function(i5) {\n      i5.match(/^\\d+$/) || o4.push(se(e4, t4, r4, n4, i5, true));\n    }), o4;\n  }(e3, t3, r3, u3, o3) : o3.map(function(n4) {\n    return se(e3, t3, r3, u3, n4, s4);\n  }), e3.seen.pop(), function(e4, t4, r4) {\n    var n4 = 0;\n    if (e4.reduce(function(e5, t5) {\n      return n4++, t5.indexOf(\"\\n\") >= 0 && n4++, e5 + t5.replace(/\\u001b\\[\\d\\d?m/g, \"\").length + 1;\n    }, 0) > 60)\n      return r4[0] + (\"\" === t4 ? \"\" : t4 + \"\\n \") + \" \" + e4.join(\",\\n  \") + \" \" + r4[1];\n    return r4[0] + t4 + \" \" + e4.join(\", \") + \" \" + r4[1];\n  }(a3, c3, p3)) : p3[0] + c3 + p3[1];\n}\n__name(ae, \"ae\");\nfunction ce(e3) {\n  return \"[\" + Error.prototype.toString.call(e3) + \"]\";\n}\n__name(ce, \"ce\");\nfunction se(e3, t3, r3, n3, i3, o3) {\n  var u3, f3, a3;\n  if ((a3 = Object.getOwnPropertyDescriptor(t3, i3) || { value: t3[i3] }).get ? f3 = a3.set ? e3.stylize(\"[Getter/Setter]\", \"special\") : e3.stylize(\"[Getter]\", \"special\") : a3.set && (f3 = e3.stylize(\"[Setter]\", \"special\")), ke(n3, i3) || (u3 = \"[\" + i3 + \"]\"), f3 || (e3.seen.indexOf(a3.value) < 0 ? (f3 = le(r3) ? ae(e3, a3.value, null) : ae(e3, a3.value, r3 - 1)).indexOf(\"\\n\") > -1 && (f3 = o3 ? f3.split(\"\\n\").map(function(e4) {\n    return \"  \" + e4;\n  }).join(\"\\n\").substr(2) : \"\\n\" + f3.split(\"\\n\").map(function(e4) {\n    return \"   \" + e4;\n  }).join(\"\\n\")) : f3 = e3.stylize(\"[Circular]\", \"special\")), be(u3)) {\n    if (o3 && i3.match(/^\\d+$/))\n      return f3;\n    (u3 = JSON.stringify(\"\" + i3)).match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/) ? (u3 = u3.substr(1, u3.length - 2), u3 = e3.stylize(u3, \"name\")) : (u3 = u3.replace(/'/g, \"\\\\'\").replace(/\\\\\"/g, '\"').replace(/(^\"|\"$)/g, \"'\"), u3 = e3.stylize(u3, \"string\"));\n  }\n  return u3 + \": \" + f3;\n}\n__name(se, \"se\");\nfunction pe(e3) {\n  return Array.isArray(e3);\n}\n__name(pe, \"pe\");\nfunction ye(e3) {\n  return \"boolean\" == typeof e3;\n}\n__name(ye, \"ye\");\nfunction le(e3) {\n  return null === e3;\n}\n__name(le, \"le\");\nfunction de(e3) {\n  return \"number\" == typeof e3;\n}\n__name(de, \"de\");\nfunction ge(e3) {\n  return \"string\" == typeof e3;\n}\n__name(ge, \"ge\");\nfunction be(e3) {\n  return void 0 === e3;\n}\n__name(be, \"be\");\nfunction me(e3) {\n  return he(e3) && \"[object RegExp]\" === ve(e3);\n}\n__name(me, \"me\");\nfunction he(e3) {\n  return \"object\" == typeof e3 && null !== e3;\n}\n__name(he, \"he\");\nfunction je(e3) {\n  return he(e3) && \"[object Date]\" === ve(e3);\n}\n__name(je, \"je\");\nfunction Ae(e3) {\n  return he(e3) && (\"[object Error]\" === ve(e3) || e3 instanceof Error);\n}\n__name(Ae, \"Ae\");\nfunction we(e3) {\n  return \"function\" == typeof e3;\n}\n__name(we, \"we\");\nfunction ve(e3) {\n  return Object.prototype.toString.call(e3);\n}\n__name(ve, \"ve\");\nfunction Oe(e3) {\n  return e3 < 10 ? \"0\" + e3.toString(10) : e3.toString(10);\n}\n__name(Oe, \"Oe\");\nX.debuglog = function(e3) {\n  if (e3 = e3.toUpperCase(), !re[e3])\n    if (ne.test(e3)) {\n      var t3 = Y.pid;\n      re[e3] = function() {\n        var r3 = X.format.apply(X, arguments);\n        console.error(\"%s %d: %s\", e3, t3, r3);\n      };\n    } else\n      re[e3] = function() {\n      };\n  return re[e3];\n}, X.inspect = oe, oe.colors = { bold: [1, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], white: [37, 39], grey: [90, 39], black: [30, 39], blue: [34, 39], cyan: [36, 39], green: [32, 39], magenta: [35, 39], red: [31, 39], yellow: [33, 39] }, oe.styles = { special: \"cyan\", number: \"yellow\", boolean: \"yellow\", undefined: \"grey\", null: \"bold\", string: \"green\", date: \"magenta\", regexp: \"red\" }, X.types = o$2, X.isArray = pe, X.isBoolean = ye, X.isNull = le, X.isNullOrUndefined = function(e3) {\n  return null == e3;\n}, X.isNumber = de, X.isString = ge, X.isSymbol = function(e3) {\n  return \"symbol\" == typeof e3;\n}, X.isUndefined = be, X.isRegExp = me, X.types.isRegExp = me, X.isObject = he, X.isDate = je, X.types.isDate = je, X.isError = Ae, X.types.isNativeError = Ae, X.isFunction = we, X.isPrimitive = function(e3) {\n  return null === e3 || \"boolean\" == typeof e3 || \"number\" == typeof e3 || \"string\" == typeof e3 || \"symbol\" == typeof e3 || void 0 === e3;\n}, X.isBuffer = i$1;\nvar Se = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nfunction Be() {\n  var e3 = /* @__PURE__ */ new Date(), t3 = [Oe(e3.getHours()), Oe(e3.getMinutes()), Oe(e3.getSeconds())].join(\":\");\n  return [e3.getDate(), Se[e3.getMonth()], t3].join(\" \");\n}\n__name(Be, \"Be\");\nfunction ke(e3, t3) {\n  return Object.prototype.hasOwnProperty.call(e3, t3);\n}\n__name(ke, \"ke\");\nX.log = function() {\n  console.log(\"%s - %s\", Be(), X.format.apply(X, arguments));\n}, X.inherits = t$2, X._extend = function(e3, t3) {\n  if (!t3 || !he(t3))\n    return e3;\n  for (var r3 = Object.keys(t3), n3 = r3.length; n3--; )\n    e3[r3[n3]] = t3[r3[n3]];\n  return e3;\n};\nvar Ee = \"undefined\" != typeof Symbol ? Symbol(\"util.promisify.custom\") : void 0;\nfunction De(e3, t3) {\n  if (!e3) {\n    var r3 = new Error(\"Promise was rejected with a falsy value\");\n    r3.reason = e3, e3 = r3;\n  }\n  return t3(e3);\n}\n__name(De, \"De\");\nX.promisify = function(e3) {\n  if (\"function\" != typeof e3)\n    throw new TypeError('The \"original\" argument must be of type Function');\n  if (Ee && e3[Ee]) {\n    var t3;\n    if (\"function\" != typeof (t3 = e3[Ee]))\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    return Object.defineProperty(t3, Ee, { value: t3, enumerable: false, writable: false, configurable: true }), t3;\n  }\n  function t3() {\n    for (var t4, r3, n3 = new Promise(function(e4, n4) {\n      t4 = e4, r3 = n4;\n    }), i3 = [], o3 = 0; o3 < arguments.length; o3++)\n      i3.push(arguments[o3]);\n    i3.push(function(e4, n4) {\n      e4 ? r3(e4) : t4(n4);\n    });\n    try {\n      e3.apply(this || Q, i3);\n    } catch (e4) {\n      r3(e4);\n    }\n    return n3;\n  }\n  __name(t3, \"t\");\n  return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Ee && Object.defineProperty(t3, Ee, { value: t3, enumerable: false, writable: false, configurable: true }), Object.defineProperties(t3, ee(e3));\n}, X.promisify.custom = Ee, X.callbackify = function(e3) {\n  if (\"function\" != typeof e3)\n    throw new TypeError('The \"original\" argument must be of type Function');\n  function t3() {\n    for (var t4 = [], r3 = 0; r3 < arguments.length; r3++)\n      t4.push(arguments[r3]);\n    var n3 = t4.pop();\n    if (\"function\" != typeof n3)\n      throw new TypeError(\"The last argument must be of type Function\");\n    var i3 = this || Q, o3 = /* @__PURE__ */ __name(function() {\n      return n3.apply(i3, arguments);\n    }, \"o\");\n    e3.apply(this || Q, t4).then(function(e4) {\n      Y.nextTick(o3.bind(null, null, e4));\n    }, function(e4) {\n      Y.nextTick(De.bind(null, e4, o3));\n    });\n  }\n  __name(t3, \"t\");\n  return Object.setPrototypeOf(t3, Object.getPrototypeOf(e3)), Object.defineProperties(t3, ee(e3)), t3;\n};\n\n// node_modules/@jspm/core/nodelibs/browser/chunk-ce0fbc82.js\nX._extend;\nX.callbackify;\nX.debuglog;\nX.deprecate;\nX.format;\nX.inherits;\nX.inspect;\nX.isArray;\nX.isBoolean;\nX.isBuffer;\nX.isDate;\nX.isError;\nX.isFunction;\nX.isNull;\nX.isNullOrUndefined;\nX.isNumber;\nX.isObject;\nX.isPrimitive;\nX.isRegExp;\nX.isString;\nX.isSymbol;\nX.isUndefined;\nX.log;\nX.promisify;\nX._extend;\nX.callbackify;\nX.debuglog;\nX.deprecate;\nX.format;\nX.inherits;\nX.inspect;\nX.isArray;\nX.isBoolean;\nX.isBuffer;\nX.isDate;\nX.isError;\nX.isFunction;\nX.isNull;\nX.isNullOrUndefined;\nX.isNumber;\nX.isObject;\nX.isPrimitive;\nX.isRegExp;\nX.isString;\nX.isSymbol;\nX.isUndefined;\nX.log;\nX.promisify;\nX.types;\n\n// node-modules-polyfills:util\nX._extend;\nX.callbackify;\nX.debuglog;\nX.deprecate;\nX.format;\nX.inherits;\nvar inspect2 = X.inspect;\nX.isArray;\nX.isBoolean;\nX.isBuffer;\nX.isDate;\nX.isError;\nX.isFunction;\nX.isNull;\nX.isNullOrUndefined;\nX.isNumber;\nX.isObject;\nX.isPrimitive;\nX.isRegExp;\nX.isString;\nX.isSymbol;\nX.isUndefined;\nX.log;\nX.promisify;\nX.types;\nX.TextEncoder = globalThis.TextEncoder;\nX.TextDecoder = globalThis.TextDecoder;\n\n// src/lib/errors/BaseError.ts\nvar customInspectSymbol = Symbol.for(\"nodejs.util.inspect.custom\");\nvar customInspectSymbolStackLess = Symbol.for(\"nodejs.util.inspect.custom.stack-less\");\nvar _BaseError = class _BaseError extends Error {\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message\n    };\n  }\n  [customInspectSymbol](depth, options) {\n    return `${this[customInspectSymbolStackLess](depth, options)}\n${this.stack.slice(this.stack.indexOf(\"\\n\"))}`;\n  }\n};\n__name(_BaseError, \"BaseError\");\nvar BaseError = _BaseError;\n\n// src/lib/errors/BaseConstraintError.ts\nvar _BaseConstraintError = class _BaseConstraintError extends BaseError {\n  constructor(constraint, message, given) {\n    super(message);\n    this.constraint = constraint;\n    this.given = given;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      constraint: this.constraint,\n      given: this.given,\n      message: this.message\n    };\n  }\n};\n__name(_BaseConstraintError, \"BaseConstraintError\");\nvar BaseConstraintError = _BaseConstraintError;\n\n// src/lib/errors/ExpectedConstraintError.ts\nvar _ExpectedConstraintError = class _ExpectedConstraintError extends BaseConstraintError {\n  constructor(constraint, message, given, expected) {\n    super(constraint, message, given);\n    this.expected = expected;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      constraint: this.constraint,\n      given: this.given,\n      expected: this.expected,\n      message: this.message\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const constraint = options.stylize(this.constraint, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[ExpectedConstraintError: ${constraint}]`, \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const given = inspect2(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"ExpectedConstraintError\", \"special\")} > ${constraint}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const expectedBlock = `\n  ${options.stylize(\"Expected: \", \"string\")}${options.stylize(this.expected, \"boolean\")}`;\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${expectedBlock}\n${givenBlock}`;\n  }\n};\n__name(_ExpectedConstraintError, \"ExpectedConstraintError\");\nvar ExpectedConstraintError = _ExpectedConstraintError;\n\n// src/lib/Result.ts\nvar _Result = class _Result {\n  constructor(success, value, error) {\n    this.success = success;\n    if (success) {\n      this.value = value;\n    } else {\n      this.error = error;\n    }\n  }\n  isOk() {\n    return this.success;\n  }\n  isErr() {\n    return !this.success;\n  }\n  unwrap() {\n    if (this.isOk())\n      return this.value;\n    throw this.error;\n  }\n  static ok(value) {\n    return new _Result(true, value);\n  }\n  static err(error) {\n    return new _Result(false, void 0, error);\n  }\n};\n__name(_Result, \"Result\");\nvar Result = _Result;\n\n// src/constraints/ObjectConstrains.ts\nfunction whenConstraint(key, options, validator, validatorOptions) {\n  return {\n    run(input, parent) {\n      if (!parent) {\n        return Result.err(\n          new ExpectedConstraintError(\n            \"s.object(T.when)\",\n            validatorOptions?.message ?? \"Validator has no parent\",\n            parent,\n            \"Validator to have a parent\"\n          )\n        );\n      }\n      const isKeyArray = Array.isArray(key);\n      const value = isKeyArray ? key.map((k2) => get__default.default(parent, k2)) : get__default.default(parent, key);\n      const predicate = resolveBooleanIs(options, value, isKeyArray) ? options.then : options.otherwise;\n      if (predicate) {\n        return predicate(validator).run(input);\n      }\n      return Result.ok(input);\n    }\n  };\n}\n__name(whenConstraint, \"whenConstraint\");\nfunction resolveBooleanIs(options, value, isKeyArray) {\n  if (options.is === void 0) {\n    return isKeyArray ? !value.some((val) => !val) : Boolean(value);\n  }\n  if (typeof options.is === \"function\") {\n    return options.is(value);\n  }\n  return value === options.is;\n}\n__name(resolveBooleanIs, \"resolveBooleanIs\");\n\n// src/lib/configs.ts\nvar validationEnabled = true;\nfunction setGlobalValidationEnabled(enabled) {\n  validationEnabled = enabled;\n}\n__name(setGlobalValidationEnabled, \"setGlobalValidationEnabled\");\nfunction getGlobalValidationEnabled() {\n  return validationEnabled;\n}\n__name(getGlobalValidationEnabled, \"getGlobalValidationEnabled\");\n\n// src/validators/util/getValue.ts\nfunction getValue(valueOrFn) {\n  return typeof valueOrFn === \"function\" ? valueOrFn() : valueOrFn;\n}\n__name(getValue, \"getValue\");\n\n// src/validators/BaseValidator.ts\nvar _BaseValidator = class _BaseValidator {\n  constructor(validatorOptions = {}, constraints = []) {\n    this.constraints = [];\n    this.isValidationEnabled = null;\n    this.constraints = constraints;\n    this.validatorOptions = validatorOptions;\n  }\n  setParent(parent) {\n    this.parent = parent;\n    return this;\n  }\n  optional(options = this.validatorOptions) {\n    return new UnionValidator([new LiteralValidator(void 0, options), this.clone()], options);\n  }\n  nullable(options = this.validatorOptions) {\n    return new UnionValidator([new LiteralValidator(null, options), this.clone()], options);\n  }\n  nullish(options = this.validatorOptions) {\n    return new UnionValidator([new NullishValidator(options), this.clone()], options);\n  }\n  array(options = this.validatorOptions) {\n    return new ArrayValidator(this.clone(), options);\n  }\n  set(options = this.validatorOptions) {\n    return new SetValidator(this.clone(), options);\n  }\n  or(...predicates) {\n    return new UnionValidator([this.clone(), ...predicates], this.validatorOptions);\n  }\n  transform(cb, options = this.validatorOptions) {\n    return this.addConstraint(\n      {\n        run: (input) => Result.ok(cb(input))\n      },\n      options\n    );\n  }\n  reshape(cb, options = this.validatorOptions) {\n    return this.addConstraint(\n      {\n        run: cb\n      },\n      options\n    );\n  }\n  default(value, options = this.validatorOptions) {\n    return new DefaultValidator(this.clone(), value, options);\n  }\n  when(key, options, validatorOptions) {\n    return this.addConstraint(whenConstraint(key, options, this, validatorOptions));\n  }\n  describe(description) {\n    const clone = this.clone();\n    clone.description = description;\n    return clone;\n  }\n  run(value) {\n    let result = this.handle(value);\n    if (result.isErr())\n      return result;\n    for (const constraint of this.constraints) {\n      result = constraint.run(result.value, this.parent);\n      if (result.isErr())\n        break;\n    }\n    return result;\n  }\n  parse(value) {\n    if (!this.shouldRunConstraints) {\n      return this.handle(value).unwrap();\n    }\n    return this.constraints.reduce((v2, constraint) => constraint.run(v2).unwrap(), this.handle(value).unwrap());\n  }\n  is(value) {\n    return this.run(value).isOk();\n  }\n  /**\n   * Sets if the validator should also run constraints or just do basic checks.\n   * @param isValidationEnabled Whether this validator should be enabled or disabled. You can pass boolean or a function returning boolean which will be called just before parsing.\n   * Set to `null` to go off of the global configuration.\n   */\n  setValidationEnabled(isValidationEnabled) {\n    const clone = this.clone();\n    clone.isValidationEnabled = isValidationEnabled;\n    return clone;\n  }\n  getValidationEnabled() {\n    return getValue(this.isValidationEnabled);\n  }\n  get shouldRunConstraints() {\n    return getValue(this.isValidationEnabled) ?? getGlobalValidationEnabled();\n  }\n  clone() {\n    const clone = Reflect.construct(this.constructor, [this.validatorOptions, this.constraints]);\n    clone.isValidationEnabled = this.isValidationEnabled;\n    return clone;\n  }\n  addConstraint(constraint, validatorOptions = this.validatorOptions) {\n    const clone = this.clone();\n    clone.validatorOptions = validatorOptions;\n    clone.constraints = clone.constraints.concat(constraint);\n    return clone;\n  }\n};\n__name(_BaseValidator, \"BaseValidator\");\nvar BaseValidator = _BaseValidator;\nfunction isUnique(input) {\n  if (input.length < 2)\n    return true;\n  const uniqueArray2 = uniqWith__default.default(input, fastDeepEqual__default.default);\n  return uniqueArray2.length === input.length;\n}\n__name(isUnique, \"isUnique\");\n\n// src/constraints/util/operators.ts\nfunction lessThan(a3, b2) {\n  return a3 < b2;\n}\n__name(lessThan, \"lessThan\");\nfunction lessThanOrEqual(a3, b2) {\n  return a3 <= b2;\n}\n__name(lessThanOrEqual, \"lessThanOrEqual\");\nfunction greaterThan(a3, b2) {\n  return a3 > b2;\n}\n__name(greaterThan, \"greaterThan\");\nfunction greaterThanOrEqual(a3, b2) {\n  return a3 >= b2;\n}\n__name(greaterThanOrEqual, \"greaterThanOrEqual\");\nfunction equal(a3, b2) {\n  return a3 === b2;\n}\n__name(equal, \"equal\");\nfunction notEqual(a3, b2) {\n  return a3 !== b2;\n}\n__name(notEqual, \"notEqual\");\n\n// src/constraints/ArrayConstraints.ts\nfunction arrayLengthComparator(comparator, name, expected, length, options) {\n  return {\n    run(input) {\n      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid Array length\", input, expected));\n    }\n  };\n}\n__name(arrayLengthComparator, \"arrayLengthComparator\");\nfunction arrayLengthLessThan(value, options) {\n  const expected = `expected.length < ${value}`;\n  return arrayLengthComparator(lessThan, \"s.array(T).lengthLessThan()\", expected, value, options);\n}\n__name(arrayLengthLessThan, \"arrayLengthLessThan\");\nfunction arrayLengthLessThanOrEqual(value, options) {\n  const expected = `expected.length <= ${value}`;\n  return arrayLengthComparator(lessThanOrEqual, \"s.array(T).lengthLessThanOrEqual()\", expected, value, options);\n}\n__name(arrayLengthLessThanOrEqual, \"arrayLengthLessThanOrEqual\");\nfunction arrayLengthGreaterThan(value, options) {\n  const expected = `expected.length > ${value}`;\n  return arrayLengthComparator(greaterThan, \"s.array(T).lengthGreaterThan()\", expected, value, options);\n}\n__name(arrayLengthGreaterThan, \"arrayLengthGreaterThan\");\nfunction arrayLengthGreaterThanOrEqual(value, options) {\n  const expected = `expected.length >= ${value}`;\n  return arrayLengthComparator(greaterThanOrEqual, \"s.array(T).lengthGreaterThanOrEqual()\", expected, value, options);\n}\n__name(arrayLengthGreaterThanOrEqual, \"arrayLengthGreaterThanOrEqual\");\nfunction arrayLengthEqual(value, options) {\n  const expected = `expected.length === ${value}`;\n  return arrayLengthComparator(equal, \"s.array(T).lengthEqual()\", expected, value, options);\n}\n__name(arrayLengthEqual, \"arrayLengthEqual\");\nfunction arrayLengthNotEqual(value, options) {\n  const expected = `expected.length !== ${value}`;\n  return arrayLengthComparator(notEqual, \"s.array(T).lengthNotEqual()\", expected, value, options);\n}\n__name(arrayLengthNotEqual, \"arrayLengthNotEqual\");\nfunction arrayLengthRange(start, endBefore, options) {\n  const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.array(T).lengthRange()\", options?.message ?? \"Invalid Array length\", input, expected));\n    }\n  };\n}\n__name(arrayLengthRange, \"arrayLengthRange\");\nfunction arrayLengthRangeInclusive(start, end, options) {\n  const expected = `expected.length >= ${start} && expected.length <= ${end}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\"s.array(T).lengthRangeInclusive()\", options?.message ?? \"Invalid Array length\", input, expected)\n      );\n    }\n  };\n}\n__name(arrayLengthRangeInclusive, \"arrayLengthRangeInclusive\");\nfunction arrayLengthRangeExclusive(startAfter, endBefore, options) {\n  const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\"s.array(T).lengthRangeExclusive()\", options?.message ?? \"Invalid Array length\", input, expected)\n      );\n    }\n  };\n}\n__name(arrayLengthRangeExclusive, \"arrayLengthRangeExclusive\");\nfunction uniqueArray(options) {\n  return {\n    run(input) {\n      return isUnique(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.array(T).unique()\",\n          options?.message ?? \"Array values are not unique\",\n          input,\n          \"Expected all values to be unique\"\n        )\n      );\n    }\n  };\n}\n__name(uniqueArray, \"uniqueArray\");\n\n// src/lib/errors/CombinedPropertyError.ts\nvar _CombinedPropertyError = class _CombinedPropertyError extends BaseError {\n  constructor(errors, validatorOptions) {\n    super(validatorOptions?.message ?? \"Received one or more errors\");\n    this.errors = errors;\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    if (depth < 0) {\n      return options.stylize(\"[CombinedPropertyError]\", \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const header = `${options.stylize(\"CombinedPropertyError\", \"special\")} (${options.stylize(this.errors.length.toString(), \"number\")})`;\n    const message = options.stylize(this.message, \"regexp\");\n    const errors = this.errors.map(([key, error]) => {\n      const property = _CombinedPropertyError.formatProperty(key, options);\n      const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\\n/g, padding);\n      return `  input${property}${padding}${body}`;\n    }).join(\"\\n\\n\");\n    return `${header}\n  ${message}\n\n${errors}`;\n  }\n  static formatProperty(key, options) {\n    if (typeof key === \"string\")\n      return options.stylize(`.${key}`, \"symbol\");\n    if (typeof key === \"number\")\n      return `[${options.stylize(key.toString(), \"number\")}]`;\n    return `[${options.stylize(\"Symbol\", \"symbol\")}(${key.description})]`;\n  }\n};\n__name(_CombinedPropertyError, \"CombinedPropertyError\");\nvar CombinedPropertyError = _CombinedPropertyError;\n\n// src/lib/errors/ValidationError.ts\nvar _ValidationError = class _ValidationError extends BaseError {\n  constructor(validator, message, given) {\n    super(message);\n    this.validator = validator;\n    this.given = given;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      message: \"Unknown validation error occurred.\",\n      validator: this.validator,\n      given: this.given\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const validator = options.stylize(this.validator, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[ValidationError: ${validator}]`, \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const given = inspect2(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"ValidationError\", \"special\")} > ${validator}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${givenBlock}`;\n  }\n};\n__name(_ValidationError, \"ValidationError\");\nvar ValidationError = _ValidationError;\n\n// src/validators/ArrayValidator.ts\nvar _ArrayValidator = class _ArrayValidator extends BaseValidator {\n  constructor(validator, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validator = validator;\n  }\n  lengthLessThan(length, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthLessThan(length, options));\n  }\n  lengthLessThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthLessThanOrEqual(length, options));\n  }\n  lengthGreaterThan(length, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthGreaterThan(length, options));\n  }\n  lengthGreaterThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthGreaterThanOrEqual(length, options));\n  }\n  lengthEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthEqual(length, options));\n  }\n  lengthNotEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthNotEqual(length, options));\n  }\n  lengthRange(start, endBefore, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthRange(start, endBefore, options));\n  }\n  lengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthRangeInclusive(startAt, endAt, options));\n  }\n  lengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {\n    return this.addConstraint(arrayLengthRangeExclusive(startAfter, endBefore, options));\n  }\n  unique(options = this.validatorOptions) {\n    return this.addConstraint(uniqueArray(options));\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);\n  }\n  handle(values) {\n    if (!Array.isArray(values)) {\n      return Result.err(new ValidationError(\"s.array(T)\", this.validatorOptions.message ?? \"Expected an array\", values));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(values);\n    }\n    const errors = [];\n    const transformed = [];\n    for (let i3 = 0; i3 < values.length; i3++) {\n      const result = this.validator.run(values[i3]);\n      if (result.isOk())\n        transformed.push(result.value);\n      else\n        errors.push([i3, result.error]);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n  }\n};\n__name(_ArrayValidator, \"ArrayValidator\");\nvar ArrayValidator = _ArrayValidator;\n\n// src/constraints/BigIntConstraints.ts\nfunction bigintComparator(comparator, name, expected, number, options) {\n  return {\n    run(input) {\n      return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid bigint value\", input, expected));\n    }\n  };\n}\n__name(bigintComparator, \"bigintComparator\");\nfunction bigintLessThan(value, options) {\n  const expected = `expected < ${value}n`;\n  return bigintComparator(lessThan, \"s.bigint().lessThan()\", expected, value, options);\n}\n__name(bigintLessThan, \"bigintLessThan\");\nfunction bigintLessThanOrEqual(value, options) {\n  const expected = `expected <= ${value}n`;\n  return bigintComparator(lessThanOrEqual, \"s.bigint().lessThanOrEqual()\", expected, value, options);\n}\n__name(bigintLessThanOrEqual, \"bigintLessThanOrEqual\");\nfunction bigintGreaterThan(value, options) {\n  const expected = `expected > ${value}n`;\n  return bigintComparator(greaterThan, \"s.bigint().greaterThan()\", expected, value, options);\n}\n__name(bigintGreaterThan, \"bigintGreaterThan\");\nfunction bigintGreaterThanOrEqual(value, options) {\n  const expected = `expected >= ${value}n`;\n  return bigintComparator(greaterThanOrEqual, \"s.bigint().greaterThanOrEqual()\", expected, value, options);\n}\n__name(bigintGreaterThanOrEqual, \"bigintGreaterThanOrEqual\");\nfunction bigintEqual(value, options) {\n  const expected = `expected === ${value}n`;\n  return bigintComparator(equal, \"s.bigint().equal()\", expected, value, options);\n}\n__name(bigintEqual, \"bigintEqual\");\nfunction bigintNotEqual(value, options) {\n  const expected = `expected !== ${value}n`;\n  return bigintComparator(notEqual, \"s.bigint().notEqual()\", expected, value, options);\n}\n__name(bigintNotEqual, \"bigintNotEqual\");\nfunction bigintDivisibleBy(divider, options) {\n  const expected = `expected % ${divider}n === 0n`;\n  return {\n    run(input) {\n      return input % divider === 0n ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.bigint().divisibleBy()\", options?.message ?? \"BigInt is not divisible\", input, expected));\n    }\n  };\n}\n__name(bigintDivisibleBy, \"bigintDivisibleBy\");\n\n// src/validators/BigIntValidator.ts\nvar _BigIntValidator = class _BigIntValidator extends BaseValidator {\n  lessThan(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintLessThan(number, options));\n  }\n  lessThanOrEqual(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintLessThanOrEqual(number, options));\n  }\n  greaterThan(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintGreaterThan(number, options));\n  }\n  greaterThanOrEqual(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintGreaterThanOrEqual(number, options));\n  }\n  equal(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintEqual(number, options));\n  }\n  notEqual(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintNotEqual(number, options));\n  }\n  positive(options = this.validatorOptions) {\n    return this.greaterThanOrEqual(0n, options);\n  }\n  negative(options = this.validatorOptions) {\n    return this.lessThan(0n, options);\n  }\n  divisibleBy(number, options = this.validatorOptions) {\n    return this.addConstraint(bigintDivisibleBy(number, options));\n  }\n  abs(options = this.validatorOptions) {\n    return this.transform((value) => value < 0 ? -value : value, options);\n  }\n  intN(bits, options = this.validatorOptions) {\n    return this.transform((value) => BigInt.asIntN(bits, value), options);\n  }\n  uintN(bits, options = this.validatorOptions) {\n    return this.transform((value) => BigInt.asUintN(bits, value), options);\n  }\n  handle(value) {\n    return typeof value === \"bigint\" ? Result.ok(value) : Result.err(new ValidationError(\"s.bigint()\", this.validatorOptions.message ?? \"Expected a bigint primitive\", value));\n  }\n};\n__name(_BigIntValidator, \"BigIntValidator\");\nvar BigIntValidator = _BigIntValidator;\n\n// src/constraints/BooleanConstraints.ts\nfunction booleanTrue(options) {\n  return {\n    run(input) {\n      return input ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.boolean().true()\", options?.message ?? \"Invalid boolean value\", input, \"true\"));\n    }\n  };\n}\n__name(booleanTrue, \"booleanTrue\");\nfunction booleanFalse(options) {\n  return {\n    run(input) {\n      return input ? Result.err(new ExpectedConstraintError(\"s.boolean().false()\", options?.message ?? \"Invalid boolean value\", input, \"false\")) : Result.ok(input);\n    }\n  };\n}\n__name(booleanFalse, \"booleanFalse\");\n\n// src/validators/BooleanValidator.ts\nvar _BooleanValidator = class _BooleanValidator extends BaseValidator {\n  true(options = this.validatorOptions) {\n    return this.addConstraint(booleanTrue(options));\n  }\n  false(options = this.validatorOptions) {\n    return this.addConstraint(booleanFalse(options));\n  }\n  equal(value, options = this.validatorOptions) {\n    return value ? this.true(options) : this.false(options);\n  }\n  notEqual(value, options = this.validatorOptions) {\n    return value ? this.false(options) : this.true(options);\n  }\n  handle(value) {\n    return typeof value === \"boolean\" ? Result.ok(value) : Result.err(new ValidationError(\"s.boolean()\", this.validatorOptions.message ?? \"Expected a boolean primitive\", value));\n  }\n};\n__name(_BooleanValidator, \"BooleanValidator\");\nvar BooleanValidator = _BooleanValidator;\n\n// src/constraints/DateConstraints.ts\nfunction dateComparator(comparator, name, expected, number, options) {\n  return {\n    run(input) {\n      return comparator(input.getTime(), number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid Date value\", input, expected));\n    }\n  };\n}\n__name(dateComparator, \"dateComparator\");\nfunction dateLessThan(value, options) {\n  const expected = `expected < ${value.toISOString()}`;\n  return dateComparator(lessThan, \"s.date().lessThan()\", expected, value.getTime(), options);\n}\n__name(dateLessThan, \"dateLessThan\");\nfunction dateLessThanOrEqual(value, options) {\n  const expected = `expected <= ${value.toISOString()}`;\n  return dateComparator(lessThanOrEqual, \"s.date().lessThanOrEqual()\", expected, value.getTime(), options);\n}\n__name(dateLessThanOrEqual, \"dateLessThanOrEqual\");\nfunction dateGreaterThan(value, options) {\n  const expected = `expected > ${value.toISOString()}`;\n  return dateComparator(greaterThan, \"s.date().greaterThan()\", expected, value.getTime(), options);\n}\n__name(dateGreaterThan, \"dateGreaterThan\");\nfunction dateGreaterThanOrEqual(value, options) {\n  const expected = `expected >= ${value.toISOString()}`;\n  return dateComparator(greaterThanOrEqual, \"s.date().greaterThanOrEqual()\", expected, value.getTime(), options);\n}\n__name(dateGreaterThanOrEqual, \"dateGreaterThanOrEqual\");\nfunction dateEqual(value, options) {\n  const expected = `expected === ${value.toISOString()}`;\n  return dateComparator(equal, \"s.date().equal()\", expected, value.getTime(), options);\n}\n__name(dateEqual, \"dateEqual\");\nfunction dateNotEqual(value, options) {\n  const expected = `expected !== ${value.toISOString()}`;\n  return dateComparator(notEqual, \"s.date().notEqual()\", expected, value.getTime(), options);\n}\n__name(dateNotEqual, \"dateNotEqual\");\nfunction dateInvalid(options) {\n  return {\n    run(input) {\n      return Number.isNaN(input.getTime()) ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.date().invalid()\", options?.message ?? \"Invalid Date value\", input, \"expected === NaN\"));\n    }\n  };\n}\n__name(dateInvalid, \"dateInvalid\");\nfunction dateValid(options) {\n  return {\n    run(input) {\n      return Number.isNaN(input.getTime()) ? Result.err(new ExpectedConstraintError(\"s.date().valid()\", options?.message ?? \"Invalid Date value\", input, \"expected !== NaN\")) : Result.ok(input);\n    }\n  };\n}\n__name(dateValid, \"dateValid\");\n\n// src/validators/DateValidator.ts\nvar _DateValidator = class _DateValidator extends BaseValidator {\n  lessThan(date, options = this.validatorOptions) {\n    return this.addConstraint(dateLessThan(new Date(date), options));\n  }\n  lessThanOrEqual(date, options = this.validatorOptions) {\n    return this.addConstraint(dateLessThanOrEqual(new Date(date), options));\n  }\n  greaterThan(date, options = this.validatorOptions) {\n    return this.addConstraint(dateGreaterThan(new Date(date), options));\n  }\n  greaterThanOrEqual(date, options = this.validatorOptions) {\n    return this.addConstraint(dateGreaterThanOrEqual(new Date(date), options));\n  }\n  equal(date, options = this.validatorOptions) {\n    const resolved = new Date(date);\n    return Number.isNaN(resolved.getTime()) ? this.invalid(options) : this.addConstraint(dateEqual(resolved, options));\n  }\n  notEqual(date, options = this.validatorOptions) {\n    const resolved = new Date(date);\n    return Number.isNaN(resolved.getTime()) ? this.valid(options) : this.addConstraint(dateNotEqual(resolved, options));\n  }\n  valid(options = this.validatorOptions) {\n    return this.addConstraint(dateValid(options));\n  }\n  invalid(options = this.validatorOptions) {\n    return this.addConstraint(dateInvalid(options));\n  }\n  handle(value) {\n    return value instanceof Date ? Result.ok(value) : Result.err(new ValidationError(\"s.date()\", this.validatorOptions.message ?? \"Expected a Date\", value));\n  }\n};\n__name(_DateValidator, \"DateValidator\");\nvar DateValidator = _DateValidator;\n\n// src/lib/errors/ExpectedValidationError.ts\nvar _ExpectedValidationError = class _ExpectedValidationError extends ValidationError {\n  constructor(validator, message, given, expected) {\n    super(validator, message, given);\n    this.expected = expected;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      validator: this.validator,\n      given: this.given,\n      expected: this.expected,\n      message: this.message\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const validator = options.stylize(this.validator, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[ExpectedValidationError: ${validator}]`, \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const expected = inspect2(this.expected, newOptions).replace(/\\n/g, padding);\n    const given = inspect2(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"ExpectedValidationError\", \"special\")} > ${validator}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const expectedBlock = `\n  ${options.stylize(\"Expected:\", \"string\")}${padding}${expected}`;\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${expectedBlock}\n${givenBlock}`;\n  }\n};\n__name(_ExpectedValidationError, \"ExpectedValidationError\");\nvar ExpectedValidationError = _ExpectedValidationError;\n\n// src/validators/InstanceValidator.ts\nvar _InstanceValidator = class _InstanceValidator extends BaseValidator {\n  constructor(expected, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.expected = expected;\n  }\n  handle(value) {\n    return value instanceof this.expected ? Result.ok(value) : Result.err(new ExpectedValidationError(\"s.instance(V)\", this.validatorOptions.message ?? \"Expected\", value, this.expected));\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.expected, this.validatorOptions, this.constraints]);\n  }\n};\n__name(_InstanceValidator, \"InstanceValidator\");\nvar InstanceValidator = _InstanceValidator;\n\n// src/validators/LiteralValidator.ts\nvar _LiteralValidator = class _LiteralValidator extends BaseValidator {\n  constructor(literal, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.expected = literal;\n  }\n  handle(value) {\n    return Object.is(value, this.expected) ? Result.ok(value) : Result.err(\n      new ExpectedValidationError(\"s.literal(V)\", this.validatorOptions.message ?? \"Expected values to be equals\", value, this.expected)\n    );\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.expected, this.validatorOptions, this.constraints]);\n  }\n};\n__name(_LiteralValidator, \"LiteralValidator\");\nvar LiteralValidator = _LiteralValidator;\n\n// src/validators/NeverValidator.ts\nvar _NeverValidator = class _NeverValidator extends BaseValidator {\n  handle(value) {\n    return Result.err(new ValidationError(\"s.never()\", this.validatorOptions.message ?? \"Expected a value to not be passed\", value));\n  }\n};\n__name(_NeverValidator, \"NeverValidator\");\nvar NeverValidator = _NeverValidator;\n\n// src/validators/NullishValidator.ts\nvar _NullishValidator = class _NullishValidator extends BaseValidator {\n  handle(value) {\n    return value === void 0 || value === null ? Result.ok(value) : Result.err(new ValidationError(\"s.nullish()\", this.validatorOptions.message ?? \"Expected undefined or null\", value));\n  }\n};\n__name(_NullishValidator, \"NullishValidator\");\nvar NullishValidator = _NullishValidator;\n\n// src/constraints/NumberConstraints.ts\nfunction numberComparator(comparator, name, expected, number, options) {\n  return {\n    run(input) {\n      return comparator(input, number) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid number value\", input, expected));\n    }\n  };\n}\n__name(numberComparator, \"numberComparator\");\nfunction numberLessThan(value, options) {\n  const expected = `expected < ${value}`;\n  return numberComparator(lessThan, \"s.number().lessThan()\", expected, value, options);\n}\n__name(numberLessThan, \"numberLessThan\");\nfunction numberLessThanOrEqual(value, options) {\n  const expected = `expected <= ${value}`;\n  return numberComparator(lessThanOrEqual, \"s.number().lessThanOrEqual()\", expected, value, options);\n}\n__name(numberLessThanOrEqual, \"numberLessThanOrEqual\");\nfunction numberGreaterThan(value, options) {\n  const expected = `expected > ${value}`;\n  return numberComparator(greaterThan, \"s.number().greaterThan()\", expected, value, options);\n}\n__name(numberGreaterThan, \"numberGreaterThan\");\nfunction numberGreaterThanOrEqual(value, options) {\n  const expected = `expected >= ${value}`;\n  return numberComparator(greaterThanOrEqual, \"s.number().greaterThanOrEqual()\", expected, value, options);\n}\n__name(numberGreaterThanOrEqual, \"numberGreaterThanOrEqual\");\nfunction numberEqual(value, options) {\n  const expected = `expected === ${value}`;\n  return numberComparator(equal, \"s.number().equal()\", expected, value, options);\n}\n__name(numberEqual, \"numberEqual\");\nfunction numberNotEqual(value, options) {\n  const expected = `expected !== ${value}`;\n  return numberComparator(notEqual, \"s.number().notEqual()\", expected, value, options);\n}\n__name(numberNotEqual, \"numberNotEqual\");\nfunction numberInt(options) {\n  return {\n    run(input) {\n      return Number.isInteger(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.number().int()\",\n          options?.message ?? \"Given value is not an integer\",\n          input,\n          \"Number.isInteger(expected) to be true\"\n        )\n      );\n    }\n  };\n}\n__name(numberInt, \"numberInt\");\nfunction numberSafeInt(options) {\n  return {\n    run(input) {\n      return Number.isSafeInteger(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.number().safeInt()\",\n          options?.message ?? \"Given value is not a safe integer\",\n          input,\n          \"Number.isSafeInteger(expected) to be true\"\n        )\n      );\n    }\n  };\n}\n__name(numberSafeInt, \"numberSafeInt\");\nfunction numberFinite(options) {\n  return {\n    run(input) {\n      return Number.isFinite(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.number().finite()\",\n          options?.message ?? \"Given value is not finite\",\n          input,\n          \"Number.isFinite(expected) to be true\"\n        )\n      );\n    }\n  };\n}\n__name(numberFinite, \"numberFinite\");\nfunction numberNaN(options) {\n  return {\n    run(input) {\n      return Number.isNaN(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\"s.number().equal(NaN)\", options?.message ?? \"Invalid number value\", input, \"expected === NaN\")\n      );\n    }\n  };\n}\n__name(numberNaN, \"numberNaN\");\nfunction numberNotNaN(options) {\n  return {\n    run(input) {\n      return Number.isNaN(input) ? Result.err(\n        new ExpectedConstraintError(\"s.number().notEqual(NaN)\", options?.message ?? \"Invalid number value\", input, \"expected !== NaN\")\n      ) : Result.ok(input);\n    }\n  };\n}\n__name(numberNotNaN, \"numberNotNaN\");\nfunction numberDivisibleBy(divider, options) {\n  const expected = `expected % ${divider} === 0`;\n  return {\n    run(input) {\n      return input % divider === 0 ? Result.ok(input) : Result.err(new ExpectedConstraintError(\"s.number().divisibleBy()\", options?.message ?? \"Number is not divisible\", input, expected));\n    }\n  };\n}\n__name(numberDivisibleBy, \"numberDivisibleBy\");\n\n// src/validators/NumberValidator.ts\nvar _NumberValidator = class _NumberValidator extends BaseValidator {\n  lessThan(number, options = this.validatorOptions) {\n    return this.addConstraint(numberLessThan(number, options));\n  }\n  lessThanOrEqual(number, options = this.validatorOptions) {\n    return this.addConstraint(numberLessThanOrEqual(number, options));\n  }\n  greaterThan(number, options = this.validatorOptions) {\n    return this.addConstraint(numberGreaterThan(number, options));\n  }\n  greaterThanOrEqual(number, options = this.validatorOptions) {\n    return this.addConstraint(numberGreaterThanOrEqual(number, options));\n  }\n  equal(number, options = this.validatorOptions) {\n    return Number.isNaN(number) ? this.addConstraint(numberNaN(options)) : this.addConstraint(numberEqual(number, options));\n  }\n  notEqual(number, options = this.validatorOptions) {\n    return Number.isNaN(number) ? this.addConstraint(numberNotNaN(options)) : this.addConstraint(numberNotEqual(number, options));\n  }\n  int(options = this.validatorOptions) {\n    return this.addConstraint(numberInt(options));\n  }\n  safeInt(options = this.validatorOptions) {\n    return this.addConstraint(numberSafeInt(options));\n  }\n  finite(options = this.validatorOptions) {\n    return this.addConstraint(numberFinite(options));\n  }\n  positive(options = this.validatorOptions) {\n    return this.greaterThanOrEqual(0, options);\n  }\n  negative(options = this.validatorOptions) {\n    return this.lessThan(0, options);\n  }\n  divisibleBy(divider, options = this.validatorOptions) {\n    return this.addConstraint(numberDivisibleBy(divider, options));\n  }\n  abs(options = this.validatorOptions) {\n    return this.transform(Math.abs, options);\n  }\n  sign(options = this.validatorOptions) {\n    return this.transform(Math.sign, options);\n  }\n  trunc(options = this.validatorOptions) {\n    return this.transform(Math.trunc, options);\n  }\n  floor(options = this.validatorOptions) {\n    return this.transform(Math.floor, options);\n  }\n  fround(options = this.validatorOptions) {\n    return this.transform(Math.fround, options);\n  }\n  round(options = this.validatorOptions) {\n    return this.transform(Math.round, options);\n  }\n  ceil(options = this.validatorOptions) {\n    return this.transform(Math.ceil, options);\n  }\n  handle(value) {\n    return typeof value === \"number\" ? Result.ok(value) : Result.err(new ValidationError(\"s.number()\", this.validatorOptions.message ?? \"Expected a number primitive\", value));\n  }\n};\n__name(_NumberValidator, \"NumberValidator\");\nvar NumberValidator = _NumberValidator;\n\n// src/lib/errors/MissingPropertyError.ts\nvar _MissingPropertyError = class _MissingPropertyError extends BaseError {\n  constructor(property, validatorOptions) {\n    super(validatorOptions?.message ?? \"A required property is missing\");\n    this.property = property;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      property: this.property\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const property = options.stylize(this.property.toString(), \"string\");\n    if (depth < 0) {\n      return options.stylize(`[MissingPropertyError: ${property}]`, \"special\");\n    }\n    const header = `${options.stylize(\"MissingPropertyError\", \"special\")} > ${property}`;\n    const message = options.stylize(this.message, \"regexp\");\n    return `${header}\n  ${message}`;\n  }\n};\n__name(_MissingPropertyError, \"MissingPropertyError\");\nvar MissingPropertyError = _MissingPropertyError;\n\n// src/lib/errors/UnknownPropertyError.ts\nvar _UnknownPropertyError = class _UnknownPropertyError extends BaseError {\n  constructor(property, value, options) {\n    super(options?.message ?? \"Received unexpected property\");\n    this.property = property;\n    this.value = value;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      property: this.property,\n      value: this.value\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const property = options.stylize(this.property.toString(), \"string\");\n    if (depth < 0) {\n      return options.stylize(`[UnknownPropertyError: ${property}]`, \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const given = inspect2(this.value, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"UnknownPropertyError\", \"special\")} > ${property}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${givenBlock}`;\n  }\n};\n__name(_UnknownPropertyError, \"UnknownPropertyError\");\nvar UnknownPropertyError = _UnknownPropertyError;\n\n// src/validators/DefaultValidator.ts\nvar _DefaultValidator = class _DefaultValidator extends BaseValidator {\n  constructor(validator, value, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validator = validator;\n    this.defaultValue = value;\n  }\n  default(value, options = this.validatorOptions) {\n    const clone = this.clone();\n    clone.validatorOptions = options;\n    clone.defaultValue = value;\n    return clone;\n  }\n  handle(value) {\n    return typeof value === \"undefined\" ? Result.ok(getValue(this.defaultValue)) : this.validator[\"handle\"](value);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.defaultValue, this.validatorOptions, this.constraints]);\n  }\n};\n__name(_DefaultValidator, \"DefaultValidator\");\nvar DefaultValidator = _DefaultValidator;\n\n// src/lib/errors/CombinedError.ts\nvar _CombinedError = class _CombinedError extends BaseError {\n  constructor(errors, validatorOptions) {\n    super(validatorOptions?.message ?? \"Received one or more errors\");\n    this.errors = errors;\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    if (depth < 0) {\n      return options.stylize(\"[CombinedError]\", \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1, compact: true };\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const header = `${options.stylize(\"CombinedError\", \"special\")} (${options.stylize(this.errors.length.toString(), \"number\")})`;\n    const message = options.stylize(this.message, \"regexp\");\n    const errors = this.errors.map((error, i3) => {\n      const index = options.stylize((i3 + 1).toString(), \"number\");\n      const body = error[customInspectSymbolStackLess](depth - 1, newOptions).replace(/\\n/g, padding);\n      return `  ${index} ${body}`;\n    }).join(\"\\n\\n\");\n    return `${header}\n  ${message}\n\n${errors}`;\n  }\n};\n__name(_CombinedError, \"CombinedError\");\nvar CombinedError = _CombinedError;\n\n// src/validators/UnionValidator.ts\nvar _UnionValidator = class _UnionValidator extends BaseValidator {\n  constructor(validators, validatorOptions, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validators = validators;\n  }\n  optional(options = this.validatorOptions) {\n    if (this.validators.length === 0)\n      return new _UnionValidator([new LiteralValidator(void 0, options)], this.validatorOptions, this.constraints);\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === void 0)\n        return this.clone();\n      if (validator.expected === null) {\n        return new _UnionValidator(\n          [new NullishValidator(options), ...this.validators.slice(1)],\n          this.validatorOptions,\n          this.constraints\n        );\n      }\n    } else if (validator instanceof NullishValidator) {\n      return this.clone();\n    }\n    return new _UnionValidator([new LiteralValidator(void 0, options), ...this.validators], this.validatorOptions);\n  }\n  required(options = this.validatorOptions) {\n    if (this.validators.length === 0)\n      return this.clone();\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === void 0) {\n        return new _UnionValidator(this.validators.slice(1), this.validatorOptions, this.constraints);\n      }\n    } else if (validator instanceof NullishValidator) {\n      return new _UnionValidator(\n        [new LiteralValidator(null, options), ...this.validators.slice(1)],\n        this.validatorOptions,\n        this.constraints\n      );\n    }\n    return this.clone();\n  }\n  nullable(options = this.validatorOptions) {\n    if (this.validators.length === 0) {\n      return new _UnionValidator([new LiteralValidator(null, options)], this.validatorOptions, this.constraints);\n    }\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === null)\n        return this.clone();\n      if (validator.expected === void 0) {\n        return new _UnionValidator(\n          [new NullishValidator(options), ...this.validators.slice(1)],\n          this.validatorOptions,\n          this.constraints\n        );\n      }\n    } else if (validator instanceof NullishValidator) {\n      return this.clone();\n    }\n    return new _UnionValidator([new LiteralValidator(null, options), ...this.validators], this.validatorOptions);\n  }\n  nullish(options = this.validatorOptions) {\n    if (this.validators.length === 0) {\n      return new _UnionValidator([new NullishValidator(options)], options, this.constraints);\n    }\n    const [validator] = this.validators;\n    if (validator instanceof LiteralValidator) {\n      if (validator.expected === null || validator.expected === void 0) {\n        return new _UnionValidator(\n          [new NullishValidator(options), ...this.validators.slice(1)],\n          options,\n          this.constraints\n        );\n      }\n    } else if (validator instanceof NullishValidator) {\n      return this.clone();\n    }\n    return new _UnionValidator([new NullishValidator(options), ...this.validators], options);\n  }\n  or(...predicates) {\n    return new _UnionValidator([...this.validators, ...predicates], this.validatorOptions);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validators, this.validatorOptions, this.constraints]);\n  }\n  handle(value) {\n    const errors = [];\n    for (const validator of this.validators) {\n      const result = validator.run(value);\n      if (result.isOk())\n        return result;\n      errors.push(result.error);\n    }\n    return Result.err(new CombinedError(errors, this.validatorOptions));\n  }\n};\n__name(_UnionValidator, \"UnionValidator\");\nvar UnionValidator = _UnionValidator;\n\n// src/validators/ObjectValidator.ts\nvar _ObjectValidator = class _ObjectValidator extends BaseValidator {\n  constructor(shape, strategy = 0 /* Ignore */, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.keys = [];\n    this.requiredKeys = /* @__PURE__ */ new Map();\n    this.possiblyUndefinedKeys = /* @__PURE__ */ new Map();\n    this.possiblyUndefinedKeysWithDefaults = /* @__PURE__ */ new Map();\n    this.shape = shape;\n    this.strategy = strategy;\n    switch (this.strategy) {\n      case 0 /* Ignore */:\n        this.handleStrategy = (value) => this.handleIgnoreStrategy(value);\n        break;\n      case 1 /* Strict */: {\n        this.handleStrategy = (value) => this.handleStrictStrategy(value);\n        break;\n      }\n      case 2 /* Passthrough */:\n        this.handleStrategy = (value) => this.handlePassthroughStrategy(value);\n        break;\n    }\n    const shapeEntries = Object.entries(shape);\n    this.keys = shapeEntries.map(([key]) => key);\n    for (const [key, validator] of shapeEntries) {\n      if (validator instanceof UnionValidator) {\n        const [possiblyLiteralOrNullishPredicate] = validator[\"validators\"];\n        if (possiblyLiteralOrNullishPredicate instanceof NullishValidator) {\n          this.possiblyUndefinedKeys.set(key, validator);\n        } else if (possiblyLiteralOrNullishPredicate instanceof LiteralValidator) {\n          if (possiblyLiteralOrNullishPredicate.expected === void 0) {\n            this.possiblyUndefinedKeys.set(key, validator);\n          } else {\n            this.requiredKeys.set(key, validator);\n          }\n        } else if (validator instanceof DefaultValidator) {\n          this.possiblyUndefinedKeysWithDefaults.set(key, validator);\n        } else {\n          this.requiredKeys.set(key, validator);\n        }\n      } else if (validator instanceof NullishValidator) {\n        this.possiblyUndefinedKeys.set(key, validator);\n      } else if (validator instanceof LiteralValidator) {\n        if (validator.expected === void 0) {\n          this.possiblyUndefinedKeys.set(key, validator);\n        } else {\n          this.requiredKeys.set(key, validator);\n        }\n      } else if (validator instanceof DefaultValidator) {\n        this.possiblyUndefinedKeysWithDefaults.set(key, validator);\n      } else {\n        this.requiredKeys.set(key, validator);\n      }\n    }\n  }\n  strict(options = this.validatorOptions) {\n    return Reflect.construct(this.constructor, [this.shape, 1 /* Strict */, options, this.constraints]);\n  }\n  ignore(options = this.validatorOptions) {\n    return Reflect.construct(this.constructor, [this.shape, 0 /* Ignore */, options, this.constraints]);\n  }\n  passthrough(options = this.validatorOptions) {\n    return Reflect.construct(this.constructor, [this.shape, 2 /* Passthrough */, options, this.constraints]);\n  }\n  partial(options = this.validatorOptions) {\n    const shape = Object.fromEntries(this.keys.map((key) => [key, this.shape[key].optional(options)]));\n    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);\n  }\n  required(options = this.validatorOptions) {\n    const shape = Object.fromEntries(\n      this.keys.map((key) => {\n        let validator = this.shape[key];\n        if (validator instanceof UnionValidator)\n          validator = validator.required(options);\n        return [key, validator];\n      })\n    );\n    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);\n  }\n  extend(schema, options = this.validatorOptions) {\n    const shape = { ...this.shape, ...schema instanceof _ObjectValidator ? schema.shape : schema };\n    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);\n  }\n  pick(keys, options = this.validatorOptions) {\n    const shape = Object.fromEntries(\n      keys.filter((key) => this.keys.includes(key)).map((key) => [key, this.shape[key]])\n    );\n    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);\n  }\n  omit(keys, options = this.validatorOptions) {\n    const shape = Object.fromEntries(\n      this.keys.filter((key) => !keys.includes(key)).map((key) => [key, this.shape[key]])\n    );\n    return Reflect.construct(this.constructor, [shape, this.strategy, options, this.constraints]);\n  }\n  handle(value) {\n    const typeOfValue = typeof value;\n    if (typeOfValue !== \"object\") {\n      return Result.err(\n        new ValidationError(\n          \"s.object(T)\",\n          this.validatorOptions.message ?? `Expected the value to be an object, but received ${typeOfValue} instead`,\n          value\n        )\n      );\n    }\n    if (value === null) {\n      return Result.err(new ValidationError(\"s.object(T)\", this.validatorOptions.message ?? \"Expected the value to not be null\", value));\n    }\n    if (Array.isArray(value)) {\n      return Result.err(new ValidationError(\"s.object(T)\", this.validatorOptions.message ?? \"Expected the value to not be an array\", value));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(value);\n    }\n    for (const predicate of Object.values(this.shape)) {\n      predicate.setParent(this.parent ?? value);\n    }\n    return this.handleStrategy(value);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.shape, this.strategy, this.validatorOptions, this.constraints]);\n  }\n  handleIgnoreStrategy(value) {\n    const errors = [];\n    const finalObject = {};\n    const inputEntries = new Map(Object.entries(value));\n    const runPredicate = /* @__PURE__ */ __name((key, predicate) => {\n      const result = predicate.run(value[key]);\n      if (result.isOk()) {\n        finalObject[key] = result.value;\n      } else {\n        const error = result.error;\n        errors.push([key, error]);\n      }\n    }, \"runPredicate\");\n    for (const [key, predicate] of this.requiredKeys) {\n      if (inputEntries.delete(key)) {\n        runPredicate(key, predicate);\n      } else {\n        errors.push([key, new MissingPropertyError(key, this.validatorOptions)]);\n      }\n    }\n    for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {\n      inputEntries.delete(key);\n      runPredicate(key, validator);\n    }\n    if (inputEntries.size === 0) {\n      return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n    }\n    const checkInputEntriesInsteadOfSchemaKeys = this.possiblyUndefinedKeys.size > inputEntries.size;\n    if (checkInputEntriesInsteadOfSchemaKeys) {\n      for (const [key] of inputEntries) {\n        const predicate = this.possiblyUndefinedKeys.get(key);\n        if (predicate) {\n          runPredicate(key, predicate);\n        }\n      }\n    } else {\n      for (const [key, predicate] of this.possiblyUndefinedKeys) {\n        if (inputEntries.delete(key)) {\n          runPredicate(key, predicate);\n        }\n      }\n    }\n    return errors.length === 0 ? Result.ok(finalObject) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n  }\n  handleStrictStrategy(value) {\n    const errors = [];\n    const finalResult = {};\n    const inputEntries = new Map(Object.entries(value));\n    const runPredicate = /* @__PURE__ */ __name((key, predicate) => {\n      const result = predicate.run(value[key]);\n      if (result.isOk()) {\n        finalResult[key] = result.value;\n      } else {\n        const error = result.error;\n        errors.push([key, error]);\n      }\n    }, \"runPredicate\");\n    for (const [key, predicate] of this.requiredKeys) {\n      if (inputEntries.delete(key)) {\n        runPredicate(key, predicate);\n      } else {\n        errors.push([key, new MissingPropertyError(key, this.validatorOptions)]);\n      }\n    }\n    for (const [key, validator] of this.possiblyUndefinedKeysWithDefaults) {\n      inputEntries.delete(key);\n      runPredicate(key, validator);\n    }\n    for (const [key, predicate] of this.possiblyUndefinedKeys) {\n      if (inputEntries.size === 0) {\n        break;\n      }\n      if (inputEntries.delete(key)) {\n        runPredicate(key, predicate);\n      }\n    }\n    if (inputEntries.size !== 0) {\n      for (const [key, value2] of inputEntries.entries()) {\n        errors.push([key, new UnknownPropertyError(key, value2, this.validatorOptions)]);\n      }\n    }\n    return errors.length === 0 ? Result.ok(finalResult) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n  }\n  handlePassthroughStrategy(value) {\n    const result = this.handleIgnoreStrategy(value);\n    return result.isErr() ? result : Result.ok({ ...value, ...result.value });\n  }\n};\n__name(_ObjectValidator, \"ObjectValidator\");\nvar ObjectValidator = _ObjectValidator;\n\n// src/validators/PassthroughValidator.ts\nvar _PassthroughValidator = class _PassthroughValidator extends BaseValidator {\n  handle(value) {\n    return Result.ok(value);\n  }\n};\n__name(_PassthroughValidator, \"PassthroughValidator\");\nvar PassthroughValidator = _PassthroughValidator;\n\n// src/validators/RecordValidator.ts\nvar _RecordValidator = class _RecordValidator extends BaseValidator {\n  constructor(validator, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validator = validator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);\n  }\n  handle(value) {\n    if (typeof value !== \"object\") {\n      return Result.err(new ValidationError(\"s.record(T)\", this.validatorOptions.message ?? \"Expected an object\", value));\n    }\n    if (value === null) {\n      return Result.err(new ValidationError(\"s.record(T)\", this.validatorOptions.message ?? \"Expected the value to not be null\", value));\n    }\n    if (Array.isArray(value)) {\n      return Result.err(new ValidationError(\"s.record(T)\", this.validatorOptions.message ?? \"Expected the value to not be an array\", value));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(value);\n    }\n    const errors = [];\n    const transformed = {};\n    for (const [key, val] of Object.entries(value)) {\n      const result = this.validator.run(val);\n      if (result.isOk())\n        transformed[key] = result.value;\n      else\n        errors.push([key, result.error]);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n  }\n};\n__name(_RecordValidator, \"RecordValidator\");\nvar RecordValidator = _RecordValidator;\n\n// src/validators/SetValidator.ts\nvar _SetValidator = class _SetValidator extends BaseValidator {\n  constructor(validator, validatorOptions, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validator = validator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);\n  }\n  handle(values) {\n    if (!(values instanceof Set)) {\n      return Result.err(new ValidationError(\"s.set(T)\", this.validatorOptions.message ?? \"Expected a set\", values));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(values);\n    }\n    const errors = [];\n    const transformed = /* @__PURE__ */ new Set();\n    for (const value of values) {\n      const result = this.validator.run(value);\n      if (result.isOk())\n        transformed.add(result.value);\n      else\n        errors.push(result.error);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedError(errors, this.validatorOptions));\n  }\n};\n__name(_SetValidator, \"SetValidator\");\nvar SetValidator = _SetValidator;\n\n// src/constraints/util/emailValidator.ts\nvar accountRegex = /^(?!\\.)(?!.*\\.\\.)([A-Z0-9_+-\\.]*)[A-Z0-9_+-]$/i;\nfunction validateEmail(email) {\n  if (!email)\n    return false;\n  const atIndex = email.indexOf(\"@\");\n  if (atIndex === -1)\n    return false;\n  if (atIndex > 64)\n    return false;\n  const domainIndex = atIndex + 1;\n  if (email.includes(\"@\", domainIndex))\n    return false;\n  if (email.length - domainIndex > 255)\n    return false;\n  let dotIndex = email.indexOf(\".\", domainIndex);\n  if (dotIndex === -1)\n    return false;\n  let lastDotIndex = domainIndex;\n  do {\n    if (dotIndex - lastDotIndex > 63)\n      return false;\n    lastDotIndex = dotIndex + 1;\n  } while ((dotIndex = email.indexOf(\".\", lastDotIndex)) !== -1);\n  if (email.length - lastDotIndex > 63)\n    return false;\n  return accountRegex.test(email.slice(0, atIndex)) && validateEmailDomain(email.slice(domainIndex));\n}\n__name(validateEmail, \"validateEmail\");\nfunction validateEmailDomain(domain) {\n  try {\n    return new URL(`http://${domain}`).hostname === domain;\n  } catch {\n    return false;\n  }\n}\n__name(validateEmailDomain, \"validateEmailDomain\");\n\n// src/constraints/util/net.ts\nvar v4Seg = \"(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\";\nvar v4Str = `(${v4Seg}[.]){3}${v4Seg}`;\nvar IPv4Reg = new RegExp(`^${v4Str}$`);\nvar v6Seg = \"(?:[0-9a-fA-F]{1,4})\";\nvar IPv6Reg = new RegExp(\n  `^((?:${v6Seg}:){7}(?:${v6Seg}|:)|(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:)))(%[0-9a-zA-Z-.:]{1,})?$`\n);\nfunction isIPv4(s4) {\n  return IPv4Reg.test(s4);\n}\n__name(isIPv4, \"isIPv4\");\nfunction isIPv6(s4) {\n  return IPv6Reg.test(s4);\n}\n__name(isIPv6, \"isIPv6\");\nfunction isIP(s4) {\n  if (isIPv4(s4))\n    return 4;\n  if (isIPv6(s4))\n    return 6;\n  return 0;\n}\n__name(isIP, \"isIP\");\n\n// src/constraints/util/phoneValidator.ts\nvar phoneNumberRegex = /^((?:\\+|0{0,2})\\d{1,2}\\s?)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\nfunction validatePhoneNumber(input) {\n  return phoneNumberRegex.test(input);\n}\n__name(validatePhoneNumber, \"validatePhoneNumber\");\n\n// src/lib/errors/MultiplePossibilitiesConstraintError.ts\nvar _MultiplePossibilitiesConstraintError = class _MultiplePossibilitiesConstraintError extends BaseConstraintError {\n  constructor(constraint, message, given, expected) {\n    super(constraint, message, given);\n    this.expected = expected;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      constraint: this.constraint,\n      given: this.given,\n      expected: this.expected\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const constraint = options.stylize(this.constraint, \"string\");\n    if (depth < 0) {\n      return options.stylize(`[MultiplePossibilitiesConstraintError: ${constraint}]`, \"special\");\n    }\n    const newOptions = { ...options, depth: options.depth === null ? null : options.depth - 1 };\n    const verticalLine = options.stylize(\"|\", \"undefined\");\n    const padding = `\n  ${verticalLine} `;\n    const given = inspect2(this.given, newOptions).replace(/\\n/g, padding);\n    const header = `${options.stylize(\"MultiplePossibilitiesConstraintError\", \"special\")} > ${constraint}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const expectedPadding = `\n  ${verticalLine} - `;\n    const expectedBlock = `\n  ${options.stylize(\"Expected any of the following:\", \"string\")}${expectedPadding}${this.expected.map((possible) => options.stylize(possible, \"boolean\")).join(expectedPadding)}`;\n    const givenBlock = `\n  ${options.stylize(\"Received:\", \"regexp\")}${padding}${given}`;\n    return `${header}\n  ${message}\n${expectedBlock}\n${givenBlock}`;\n  }\n};\n__name(_MultiplePossibilitiesConstraintError, \"MultiplePossibilitiesConstraintError\");\nvar MultiplePossibilitiesConstraintError = _MultiplePossibilitiesConstraintError;\n\n// src/constraints/util/common/combinedResultFn.ts\nfunction combinedErrorFn(...fns) {\n  switch (fns.length) {\n    case 0:\n      return () => null;\n    case 1:\n      return fns[0];\n    case 2: {\n      const [fn0, fn1] = fns;\n      return (...params) => fn0(...params) || fn1(...params);\n    }\n    default: {\n      return (...params) => {\n        for (const fn of fns) {\n          const result = fn(...params);\n          if (result)\n            return result;\n        }\n        return null;\n      };\n    }\n  }\n}\n__name(combinedErrorFn, \"combinedErrorFn\");\n\n// src/constraints/util/urlValidators.ts\nfunction createUrlValidators(options, validatorOptions) {\n  const fns = [];\n  if (options?.allowedProtocols?.length)\n    fns.push(allowedProtocolsFn(options.allowedProtocols, validatorOptions));\n  if (options?.allowedDomains?.length)\n    fns.push(allowedDomainsFn(options.allowedDomains, validatorOptions));\n  return combinedErrorFn(...fns);\n}\n__name(createUrlValidators, \"createUrlValidators\");\nfunction allowedProtocolsFn(allowedProtocols, options) {\n  return (input, url) => allowedProtocols.includes(url.protocol) ? null : new MultiplePossibilitiesConstraintError(\"s.string().url()\", options?.message ?? \"Invalid URL protocol\", input, allowedProtocols);\n}\n__name(allowedProtocolsFn, \"allowedProtocolsFn\");\nfunction allowedDomainsFn(allowedDomains, options) {\n  return (input, url) => allowedDomains.includes(url.hostname) ? null : new MultiplePossibilitiesConstraintError(\"s.string().url()\", options?.message ?? \"Invalid URL domain\", input, allowedDomains);\n}\n__name(allowedDomainsFn, \"allowedDomainsFn\");\n\n// src/constraints/StringConstraints.ts\nfunction stringLengthComparator(comparator, name, expected, length, options) {\n  return {\n    run(input) {\n      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid string length\", input, expected));\n    }\n  };\n}\n__name(stringLengthComparator, \"stringLengthComparator\");\nfunction stringLengthLessThan(length, options) {\n  const expected = `expected.length < ${length}`;\n  return stringLengthComparator(lessThan, \"s.string().lengthLessThan()\", expected, length, options);\n}\n__name(stringLengthLessThan, \"stringLengthLessThan\");\nfunction stringLengthLessThanOrEqual(length, options) {\n  const expected = `expected.length <= ${length}`;\n  return stringLengthComparator(lessThanOrEqual, \"s.string().lengthLessThanOrEqual()\", expected, length, options);\n}\n__name(stringLengthLessThanOrEqual, \"stringLengthLessThanOrEqual\");\nfunction stringLengthGreaterThan(length, options) {\n  const expected = `expected.length > ${length}`;\n  return stringLengthComparator(greaterThan, \"s.string().lengthGreaterThan()\", expected, length, options);\n}\n__name(stringLengthGreaterThan, \"stringLengthGreaterThan\");\nfunction stringLengthGreaterThanOrEqual(length, options) {\n  const expected = `expected.length >= ${length}`;\n  return stringLengthComparator(greaterThanOrEqual, \"s.string().lengthGreaterThanOrEqual()\", expected, length, options);\n}\n__name(stringLengthGreaterThanOrEqual, \"stringLengthGreaterThanOrEqual\");\nfunction stringLengthEqual(length, options) {\n  const expected = `expected.length === ${length}`;\n  return stringLengthComparator(equal, \"s.string().lengthEqual()\", expected, length, options);\n}\n__name(stringLengthEqual, \"stringLengthEqual\");\nfunction stringLengthNotEqual(length, options) {\n  const expected = `expected.length !== ${length}`;\n  return stringLengthComparator(notEqual, \"s.string().lengthNotEqual()\", expected, length, options);\n}\n__name(stringLengthNotEqual, \"stringLengthNotEqual\");\nfunction stringEmail(options) {\n  return {\n    run(input) {\n      return validateEmail(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.string().email()\",\n          options?.message ?? \"Invalid email address\",\n          input,\n          \"expected to be an email address\"\n        )\n      );\n    }\n  };\n}\n__name(stringEmail, \"stringEmail\");\nfunction stringRegexValidator(type, expected, regex, options) {\n  return {\n    run(input) {\n      return regex.test(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(type, options?.message ?? \"Invalid string format\", input, expected));\n    }\n  };\n}\n__name(stringRegexValidator, \"stringRegexValidator\");\nfunction stringUrl(options, validatorOptions) {\n  const validatorFn = createUrlValidators(options, validatorOptions);\n  return {\n    run(input) {\n      let url;\n      try {\n        url = new URL(input);\n      } catch {\n        return Result.err(\n          new ExpectedConstraintError(\"s.string().url()\", validatorOptions?.message ?? \"Invalid URL\", input, \"expected to match a URL\")\n        );\n      }\n      const validatorFnResult = validatorFn(input, url);\n      if (validatorFnResult === null)\n        return Result.ok(input);\n      return Result.err(validatorFnResult);\n    }\n  };\n}\n__name(stringUrl, \"stringUrl\");\nfunction stringIp(version, options) {\n  const ipVersion = version ? `v${version}` : \"\";\n  const validatorFn = version === 4 ? isIPv4 : version === 6 ? isIPv6 : isIP;\n  const name = `s.string().ip${ipVersion}()`;\n  const message = `Invalid IP${ipVersion} address`;\n  const expected = `expected to be an IP${ipVersion} address`;\n  return {\n    run(input) {\n      return validatorFn(input) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? message, input, expected));\n    }\n  };\n}\n__name(stringIp, \"stringIp\");\nfunction stringRegex(regex, options) {\n  return stringRegexValidator(\"s.string().regex()\", `expected ${regex}.test(expected) to be true`, regex, options);\n}\n__name(stringRegex, \"stringRegex\");\nfunction stringUuid({ version = 4, nullable = false } = {}, options) {\n  version ?? (version = \"1-5\");\n  const regex = new RegExp(\n    `^(?:[0-9A-F]{8}-[0-9A-F]{4}-[${version}][0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}${nullable ? \"|00000000-0000-0000-0000-000000000000\" : \"\"})$`,\n    \"i\"\n  );\n  const expected = `expected to match UUID${typeof version === \"number\" ? `v${version}` : ` in range of ${version}`}`;\n  return stringRegexValidator(\"s.string().uuid()\", expected, regex, options);\n}\n__name(stringUuid, \"stringUuid\");\nfunction stringDate(options) {\n  return {\n    run(input) {\n      const time = Date.parse(input);\n      return Number.isNaN(time) ? Result.err(\n        new ExpectedConstraintError(\n          \"s.string().date()\",\n          options?.message ?? \"Invalid date string\",\n          input,\n          \"expected to be a valid date string (in the ISO 8601 or ECMA-262 format)\"\n        )\n      ) : Result.ok(input);\n    }\n  };\n}\n__name(stringDate, \"stringDate\");\nfunction stringPhone(options) {\n  return {\n    run(input) {\n      return validatePhoneNumber(input) ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.string().phone()\",\n          options?.message ?? \"Invalid phone number\",\n          input,\n          \"expected to be a phone number\"\n        )\n      );\n    }\n  };\n}\n__name(stringPhone, \"stringPhone\");\n\n// src/validators/StringValidator.ts\nvar _StringValidator = class _StringValidator extends BaseValidator {\n  lengthLessThan(length, options = this.validatorOptions) {\n    return this.addConstraint(stringLengthLessThan(length, options));\n  }\n  lengthLessThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(stringLengthLessThanOrEqual(length, options));\n  }\n  lengthGreaterThan(length, options = this.validatorOptions) {\n    return this.addConstraint(stringLengthGreaterThan(length, options));\n  }\n  lengthGreaterThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(stringLengthGreaterThanOrEqual(length, options));\n  }\n  lengthEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(stringLengthEqual(length, options));\n  }\n  lengthNotEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(stringLengthNotEqual(length, options));\n  }\n  email(options = this.validatorOptions) {\n    return this.addConstraint(stringEmail(options));\n  }\n  url(options, validatorOptions = this.validatorOptions) {\n    const urlOptions = this.isUrlOptions(options);\n    if (urlOptions) {\n      return this.addConstraint(stringUrl(options, validatorOptions));\n    }\n    return this.addConstraint(stringUrl(void 0, validatorOptions));\n  }\n  uuid(options, validatorOptions = this.validatorOptions) {\n    const stringUuidOptions = this.isStringUuidOptions(options);\n    if (stringUuidOptions) {\n      return this.addConstraint(stringUuid(options, validatorOptions));\n    }\n    return this.addConstraint(stringUuid(void 0, validatorOptions));\n  }\n  regex(regex, options = this.validatorOptions) {\n    return this.addConstraint(stringRegex(regex, options));\n  }\n  date(options = this.validatorOptions) {\n    return this.addConstraint(stringDate(options));\n  }\n  ipv4(options = this.validatorOptions) {\n    return this.ip(4, options);\n  }\n  ipv6(options = this.validatorOptions) {\n    return this.ip(6, options);\n  }\n  ip(version, options = this.validatorOptions) {\n    return this.addConstraint(stringIp(version, options));\n  }\n  phone(options = this.validatorOptions) {\n    return this.addConstraint(stringPhone(options));\n  }\n  handle(value) {\n    return typeof value === \"string\" ? Result.ok(value) : Result.err(new ValidationError(\"s.string()\", this.validatorOptions.message ?? \"Expected a string primitive\", value));\n  }\n  isUrlOptions(options) {\n    return options?.message === void 0;\n  }\n  isStringUuidOptions(options) {\n    return options?.message === void 0;\n  }\n};\n__name(_StringValidator, \"StringValidator\");\nvar StringValidator = _StringValidator;\n\n// src/validators/TupleValidator.ts\nvar _TupleValidator = class _TupleValidator extends BaseValidator {\n  constructor(validators, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validators = [];\n    this.validators = validators;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validators, this.validatorOptions, this.constraints]);\n  }\n  handle(values) {\n    if (!Array.isArray(values)) {\n      return Result.err(new ValidationError(\"s.tuple(T)\", this.validatorOptions.message ?? \"Expected an array\", values));\n    }\n    if (values.length !== this.validators.length) {\n      return Result.err(\n        new ValidationError(\"s.tuple(T)\", this.validatorOptions.message ?? `Expected an array of length ${this.validators.length}`, values)\n      );\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(values);\n    }\n    const errors = [];\n    const transformed = [];\n    for (let i3 = 0; i3 < values.length; i3++) {\n      const result = this.validators[i3].run(values[i3]);\n      if (result.isOk())\n        transformed.push(result.value);\n      else\n        errors.push([i3, result.error]);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n  }\n};\n__name(_TupleValidator, \"TupleValidator\");\nvar TupleValidator = _TupleValidator;\n\n// src/validators/MapValidator.ts\nvar _MapValidator = class _MapValidator extends BaseValidator {\n  constructor(keyValidator, valueValidator, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.keyValidator = keyValidator;\n    this.valueValidator = valueValidator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.keyValidator, this.valueValidator, this.validatorOptions, this.constraints]);\n  }\n  handle(value) {\n    if (!(value instanceof Map)) {\n      return Result.err(new ValidationError(\"s.map(K, V)\", this.validatorOptions.message ?? \"Expected a map\", value));\n    }\n    if (!this.shouldRunConstraints) {\n      return Result.ok(value);\n    }\n    const errors = [];\n    const transformed = /* @__PURE__ */ new Map();\n    for (const [key, val] of value.entries()) {\n      const keyResult = this.keyValidator.run(key);\n      const valueResult = this.valueValidator.run(val);\n      const { length } = errors;\n      if (keyResult.isErr())\n        errors.push([key, keyResult.error]);\n      if (valueResult.isErr())\n        errors.push([key, valueResult.error]);\n      if (errors.length === length)\n        transformed.set(keyResult.value, valueResult.value);\n    }\n    return errors.length === 0 ? Result.ok(transformed) : Result.err(new CombinedPropertyError(errors, this.validatorOptions));\n  }\n};\n__name(_MapValidator, \"MapValidator\");\nvar MapValidator = _MapValidator;\n\n// src/validators/LazyValidator.ts\nvar _LazyValidator = class _LazyValidator extends BaseValidator {\n  constructor(validator, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.validator = validator;\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.validator, this.validatorOptions, this.constraints]);\n  }\n  handle(values) {\n    return this.validator(values).run(values);\n  }\n};\n__name(_LazyValidator, \"LazyValidator\");\nvar LazyValidator = _LazyValidator;\n\n// src/lib/errors/UnknownEnumValueError.ts\nvar _UnknownEnumValueError = class _UnknownEnumValueError extends BaseError {\n  constructor(value, keys, enumMappings, validatorOptions) {\n    super(validatorOptions?.message ?? \"Expected the value to be one of the following enum values:\");\n    this.value = value;\n    this.enumKeys = keys;\n    this.enumMappings = enumMappings;\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      value: this.value,\n      enumKeys: this.enumKeys,\n      enumMappings: [...this.enumMappings.entries()]\n    };\n  }\n  [customInspectSymbolStackLess](depth, options) {\n    const value = options.stylize(this.value.toString(), \"string\");\n    if (depth < 0) {\n      return options.stylize(`[UnknownEnumValueError: ${value}]`, \"special\");\n    }\n    const padding = `\n  ${options.stylize(\"|\", \"undefined\")} `;\n    const pairs = this.enumKeys.map((key) => {\n      const enumValue = this.enumMappings.get(key);\n      return `${options.stylize(key, \"string\")} or ${options.stylize(\n        enumValue.toString(),\n        typeof enumValue === \"number\" ? \"number\" : \"string\"\n      )}`;\n    }).join(padding);\n    const header = `${options.stylize(\"UnknownEnumValueError\", \"special\")} > ${value}`;\n    const message = options.stylize(this.message, \"regexp\");\n    const pairsBlock = `${padding}${pairs}`;\n    return `${header}\n  ${message}\n${pairsBlock}`;\n  }\n};\n__name(_UnknownEnumValueError, \"UnknownEnumValueError\");\nvar UnknownEnumValueError = _UnknownEnumValueError;\n\n// src/validators/NativeEnumValidator.ts\nvar _NativeEnumValidator = class _NativeEnumValidator extends BaseValidator {\n  constructor(enumShape, validatorOptions = {}) {\n    super(validatorOptions);\n    this.hasNumericElements = false;\n    this.enumMapping = /* @__PURE__ */ new Map();\n    this.enumShape = enumShape;\n    this.enumKeys = Object.keys(enumShape).filter((key) => {\n      return typeof enumShape[enumShape[key]] !== \"number\";\n    });\n    for (const key of this.enumKeys) {\n      const enumValue = enumShape[key];\n      this.enumMapping.set(key, enumValue);\n      this.enumMapping.set(enumValue, enumValue);\n      if (typeof enumValue === \"number\") {\n        this.hasNumericElements = true;\n        this.enumMapping.set(`${enumValue}`, enumValue);\n      }\n    }\n  }\n  handle(value) {\n    const typeOfValue = typeof value;\n    if (typeOfValue === \"number\") {\n      if (!this.hasNumericElements) {\n        return Result.err(\n          new ValidationError(\"s.nativeEnum(T)\", this.validatorOptions.message ?? \"Expected the value to be a string\", value)\n        );\n      }\n    } else if (typeOfValue !== \"string\") {\n      return Result.err(\n        new ValidationError(\"s.nativeEnum(T)\", this.validatorOptions.message ?? \"Expected the value to be a string or number\", value)\n      );\n    }\n    const casted = value;\n    const possibleEnumValue = this.enumMapping.get(casted);\n    return typeof possibleEnumValue === \"undefined\" ? Result.err(new UnknownEnumValueError(casted, this.enumKeys, this.enumMapping, this.validatorOptions)) : Result.ok(possibleEnumValue);\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.enumShape, this.validatorOptions]);\n  }\n};\n__name(_NativeEnumValidator, \"NativeEnumValidator\");\nvar NativeEnumValidator = _NativeEnumValidator;\n\n// src/constraints/TypedArrayLengthConstraints.ts\nfunction typedArrayByteLengthComparator(comparator, name, expected, length, options) {\n  return {\n    run(input) {\n      return comparator(input.byteLength, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid Typed Array byte length\", input, expected));\n    }\n  };\n}\n__name(typedArrayByteLengthComparator, \"typedArrayByteLengthComparator\");\nfunction typedArrayByteLengthLessThan(value, options) {\n  const expected = `expected.byteLength < ${value}`;\n  return typedArrayByteLengthComparator(lessThan, \"s.typedArray(T).byteLengthLessThan()\", expected, value, options);\n}\n__name(typedArrayByteLengthLessThan, \"typedArrayByteLengthLessThan\");\nfunction typedArrayByteLengthLessThanOrEqual(value, options) {\n  const expected = `expected.byteLength <= ${value}`;\n  return typedArrayByteLengthComparator(lessThanOrEqual, \"s.typedArray(T).byteLengthLessThanOrEqual()\", expected, value, options);\n}\n__name(typedArrayByteLengthLessThanOrEqual, \"typedArrayByteLengthLessThanOrEqual\");\nfunction typedArrayByteLengthGreaterThan(value, options) {\n  const expected = `expected.byteLength > ${value}`;\n  return typedArrayByteLengthComparator(greaterThan, \"s.typedArray(T).byteLengthGreaterThan()\", expected, value, options);\n}\n__name(typedArrayByteLengthGreaterThan, \"typedArrayByteLengthGreaterThan\");\nfunction typedArrayByteLengthGreaterThanOrEqual(value, options) {\n  const expected = `expected.byteLength >= ${value}`;\n  return typedArrayByteLengthComparator(greaterThanOrEqual, \"s.typedArray(T).byteLengthGreaterThanOrEqual()\", expected, value, options);\n}\n__name(typedArrayByteLengthGreaterThanOrEqual, \"typedArrayByteLengthGreaterThanOrEqual\");\nfunction typedArrayByteLengthEqual(value, options) {\n  const expected = `expected.byteLength === ${value}`;\n  return typedArrayByteLengthComparator(equal, \"s.typedArray(T).byteLengthEqual()\", expected, value, options);\n}\n__name(typedArrayByteLengthEqual, \"typedArrayByteLengthEqual\");\nfunction typedArrayByteLengthNotEqual(value, options) {\n  const expected = `expected.byteLength !== ${value}`;\n  return typedArrayByteLengthComparator(notEqual, \"s.typedArray(T).byteLengthNotEqual()\", expected, value, options);\n}\n__name(typedArrayByteLengthNotEqual, \"typedArrayByteLengthNotEqual\");\nfunction typedArrayByteLengthRange(start, endBefore, options) {\n  const expected = `expected.byteLength >= ${start} && expected.byteLength < ${endBefore}`;\n  return {\n    run(input) {\n      return input.byteLength >= start && input.byteLength < endBefore ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.typedArray(T).byteLengthRange()\",\n          options?.message ?? \"Invalid Typed Array byte length\",\n          input,\n          expected\n        )\n      );\n    }\n  };\n}\n__name(typedArrayByteLengthRange, \"typedArrayByteLengthRange\");\nfunction typedArrayByteLengthRangeInclusive(start, end, options) {\n  const expected = `expected.byteLength >= ${start} && expected.byteLength <= ${end}`;\n  return {\n    run(input) {\n      return input.byteLength >= start && input.byteLength <= end ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.typedArray(T).byteLengthRangeInclusive()\",\n          options?.message ?? \"Invalid Typed Array byte length\",\n          input,\n          expected\n        )\n      );\n    }\n  };\n}\n__name(typedArrayByteLengthRangeInclusive, \"typedArrayByteLengthRangeInclusive\");\nfunction typedArrayByteLengthRangeExclusive(startAfter, endBefore, options) {\n  const expected = `expected.byteLength > ${startAfter} && expected.byteLength < ${endBefore}`;\n  return {\n    run(input) {\n      return input.byteLength > startAfter && input.byteLength < endBefore ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.typedArray(T).byteLengthRangeExclusive()\",\n          options?.message ?? \"Invalid Typed Array byte length\",\n          input,\n          expected\n        )\n      );\n    }\n  };\n}\n__name(typedArrayByteLengthRangeExclusive, \"typedArrayByteLengthRangeExclusive\");\nfunction typedArrayLengthComparator(comparator, name, expected, length, options) {\n  return {\n    run(input) {\n      return comparator(input.length, length) ? Result.ok(input) : Result.err(new ExpectedConstraintError(name, options?.message ?? \"Invalid Typed Array length\", input, expected));\n    }\n  };\n}\n__name(typedArrayLengthComparator, \"typedArrayLengthComparator\");\nfunction typedArrayLengthLessThan(value, options) {\n  const expected = `expected.length < ${value}`;\n  return typedArrayLengthComparator(lessThan, \"s.typedArray(T).lengthLessThan()\", expected, value, options);\n}\n__name(typedArrayLengthLessThan, \"typedArrayLengthLessThan\");\nfunction typedArrayLengthLessThanOrEqual(value, options) {\n  const expected = `expected.length <= ${value}`;\n  return typedArrayLengthComparator(lessThanOrEqual, \"s.typedArray(T).lengthLessThanOrEqual()\", expected, value, options);\n}\n__name(typedArrayLengthLessThanOrEqual, \"typedArrayLengthLessThanOrEqual\");\nfunction typedArrayLengthGreaterThan(value, options) {\n  const expected = `expected.length > ${value}`;\n  return typedArrayLengthComparator(greaterThan, \"s.typedArray(T).lengthGreaterThan()\", expected, value, options);\n}\n__name(typedArrayLengthGreaterThan, \"typedArrayLengthGreaterThan\");\nfunction typedArrayLengthGreaterThanOrEqual(value, options) {\n  const expected = `expected.length >= ${value}`;\n  return typedArrayLengthComparator(greaterThanOrEqual, \"s.typedArray(T).lengthGreaterThanOrEqual()\", expected, value, options);\n}\n__name(typedArrayLengthGreaterThanOrEqual, \"typedArrayLengthGreaterThanOrEqual\");\nfunction typedArrayLengthEqual(value, options) {\n  const expected = `expected.length === ${value}`;\n  return typedArrayLengthComparator(equal, \"s.typedArray(T).lengthEqual()\", expected, value, options);\n}\n__name(typedArrayLengthEqual, \"typedArrayLengthEqual\");\nfunction typedArrayLengthNotEqual(value, options) {\n  const expected = `expected.length !== ${value}`;\n  return typedArrayLengthComparator(notEqual, \"s.typedArray(T).lengthNotEqual()\", expected, value, options);\n}\n__name(typedArrayLengthNotEqual, \"typedArrayLengthNotEqual\");\nfunction typedArrayLengthRange(start, endBefore, options) {\n  const expected = `expected.length >= ${start} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length < endBefore ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.typedArray(T).lengthRange()\",\n          options?.message ?? \"Invalid Typed Array length\",\n          input,\n          expected\n        )\n      );\n    }\n  };\n}\n__name(typedArrayLengthRange, \"typedArrayLengthRange\");\nfunction typedArrayLengthRangeInclusive(start, end, options) {\n  const expected = `expected.length >= ${start} && expected.length <= ${end}`;\n  return {\n    run(input) {\n      return input.length >= start && input.length <= end ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.typedArray(T).lengthRangeInclusive()\",\n          options?.message ?? \"Invalid Typed Array length\",\n          input,\n          expected\n        )\n      );\n    }\n  };\n}\n__name(typedArrayLengthRangeInclusive, \"typedArrayLengthRangeInclusive\");\nfunction typedArrayLengthRangeExclusive(startAfter, endBefore, options) {\n  const expected = `expected.length > ${startAfter} && expected.length < ${endBefore}`;\n  return {\n    run(input) {\n      return input.length > startAfter && input.length < endBefore ? Result.ok(input) : Result.err(\n        new ExpectedConstraintError(\n          \"s.typedArray(T).lengthRangeExclusive()\",\n          options?.message ?? \"Invalid Typed Array length\",\n          input,\n          expected\n        )\n      );\n    }\n  };\n}\n__name(typedArrayLengthRangeExclusive, \"typedArrayLengthRangeExclusive\");\n\n// src/constraints/util/common/vowels.ts\nvar vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\nvar aOrAn = /* @__PURE__ */ __name((word) => {\n  return `${vowels.includes(word[0].toLowerCase()) ? \"an\" : \"a\"} ${word}`;\n}, \"aOrAn\");\n\n// src/constraints/util/typedArray.ts\nvar TypedArrays = {\n  Int8Array: (x2) => x2 instanceof Int8Array,\n  Uint8Array: (x2) => x2 instanceof Uint8Array,\n  Uint8ClampedArray: (x2) => x2 instanceof Uint8ClampedArray,\n  Int16Array: (x2) => x2 instanceof Int16Array,\n  Uint16Array: (x2) => x2 instanceof Uint16Array,\n  Int32Array: (x2) => x2 instanceof Int32Array,\n  Uint32Array: (x2) => x2 instanceof Uint32Array,\n  Float32Array: (x2) => x2 instanceof Float32Array,\n  Float64Array: (x2) => x2 instanceof Float64Array,\n  BigInt64Array: (x2) => x2 instanceof BigInt64Array,\n  BigUint64Array: (x2) => x2 instanceof BigUint64Array,\n  TypedArray: (x2) => ArrayBuffer.isView(x2) && !(x2 instanceof DataView)\n};\n\n// src/validators/TypedArrayValidator.ts\nvar _TypedArrayValidator = class _TypedArrayValidator extends BaseValidator {\n  constructor(type, validatorOptions = {}, constraints = []) {\n    super(validatorOptions, constraints);\n    this.type = type;\n  }\n  byteLengthLessThan(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthLessThan(length, options));\n  }\n  byteLengthLessThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthLessThanOrEqual(length, options));\n  }\n  byteLengthGreaterThan(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthGreaterThan(length, options));\n  }\n  byteLengthGreaterThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthGreaterThanOrEqual(length, options));\n  }\n  byteLengthEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthEqual(length, options));\n  }\n  byteLengthNotEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthNotEqual(length, options));\n  }\n  byteLengthRange(start, endBefore, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthRange(start, endBefore, options));\n  }\n  byteLengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthRangeInclusive(startAt, endAt, options));\n  }\n  byteLengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayByteLengthRangeExclusive(startAfter, endBefore, options));\n  }\n  lengthLessThan(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthLessThan(length, options));\n  }\n  lengthLessThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthLessThanOrEqual(length, options));\n  }\n  lengthGreaterThan(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthGreaterThan(length, options));\n  }\n  lengthGreaterThanOrEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthGreaterThanOrEqual(length, options));\n  }\n  lengthEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthEqual(length, options));\n  }\n  lengthNotEqual(length, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthNotEqual(length, options));\n  }\n  lengthRange(start, endBefore, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthRange(start, endBefore, options));\n  }\n  lengthRangeInclusive(startAt, endAt, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthRangeInclusive(startAt, endAt, options));\n  }\n  lengthRangeExclusive(startAfter, endBefore, options = this.validatorOptions) {\n    return this.addConstraint(typedArrayLengthRangeExclusive(startAfter, endBefore, options));\n  }\n  clone() {\n    return Reflect.construct(this.constructor, [this.type, this.validatorOptions, this.constraints]);\n  }\n  handle(value) {\n    return TypedArrays[this.type](value) ? Result.ok(value) : Result.err(new ValidationError(\"s.typedArray()\", this.validatorOptions.message ?? `Expected ${aOrAn(this.type)}`, value));\n  }\n};\n__name(_TypedArrayValidator, \"TypedArrayValidator\");\nvar TypedArrayValidator = _TypedArrayValidator;\n\n// src/lib/Shapes.ts\nvar _Shapes = class _Shapes {\n  string(options) {\n    return new StringValidator(options);\n  }\n  number(options) {\n    return new NumberValidator(options);\n  }\n  bigint(options) {\n    return new BigIntValidator(options);\n  }\n  boolean(options) {\n    return new BooleanValidator(options);\n  }\n  date(options) {\n    return new DateValidator(options);\n  }\n  object(shape, options) {\n    return new ObjectValidator(shape, 0 /* Ignore */, options);\n  }\n  undefined(options) {\n    return this.literal(void 0, { equalsOptions: options });\n  }\n  null(options) {\n    return this.literal(null, { equalsOptions: options });\n  }\n  nullish(options) {\n    return new NullishValidator(options);\n  }\n  any(options) {\n    return new PassthroughValidator(options);\n  }\n  unknown(options) {\n    return new PassthroughValidator(options);\n  }\n  never(options) {\n    return new NeverValidator(options);\n  }\n  enum(values, options) {\n    return this.union(\n      values.map((value) => this.literal(value, { equalsOptions: options })),\n      options\n    );\n  }\n  nativeEnum(enumShape, options) {\n    return new NativeEnumValidator(enumShape, options);\n  }\n  literal(value, options) {\n    if (value instanceof Date) {\n      return this.date(options?.dateOptions).equal(value, options?.equalsOptions);\n    }\n    return new LiteralValidator(value, options?.equalsOptions);\n  }\n  instance(expected, options) {\n    return new InstanceValidator(expected, options);\n  }\n  union(validators, options) {\n    return new UnionValidator(validators, options);\n  }\n  array(validator, options) {\n    return new ArrayValidator(validator, options);\n  }\n  typedArray(type = \"TypedArray\", options) {\n    return new TypedArrayValidator(type, options);\n  }\n  int8Array(options) {\n    return this.typedArray(\"Int8Array\", options);\n  }\n  uint8Array(options) {\n    return this.typedArray(\"Uint8Array\", options);\n  }\n  uint8ClampedArray(options) {\n    return this.typedArray(\"Uint8ClampedArray\", options);\n  }\n  int16Array(options) {\n    return this.typedArray(\"Int16Array\", options);\n  }\n  uint16Array(options) {\n    return this.typedArray(\"Uint16Array\", options);\n  }\n  int32Array(options) {\n    return this.typedArray(\"Int32Array\", options);\n  }\n  uint32Array(options) {\n    return this.typedArray(\"Uint32Array\", options);\n  }\n  float32Array(options) {\n    return this.typedArray(\"Float32Array\", options);\n  }\n  float64Array(options) {\n    return this.typedArray(\"Float64Array\", options);\n  }\n  bigInt64Array(options) {\n    return this.typedArray(\"BigInt64Array\", options);\n  }\n  bigUint64Array(options) {\n    return this.typedArray(\"BigUint64Array\", options);\n  }\n  tuple(validators, options) {\n    return new TupleValidator(validators, options);\n  }\n  set(validator, options) {\n    return new SetValidator(validator, options);\n  }\n  record(validator, options) {\n    return new RecordValidator(validator, options);\n  }\n  map(keyValidator, valueValidator, options) {\n    return new MapValidator(keyValidator, valueValidator, options);\n  }\n  lazy(validator, options) {\n    return new LazyValidator(validator, options);\n  }\n};\n__name(_Shapes, \"Shapes\");\nvar Shapes = _Shapes;\n\n// src/index.ts\nvar s3 = new Shapes();\n/**\n * @license MIT\n * @copyright 2020 Colin McDonnell\n * @see https://github.com/colinhacks/zod/blob/master/LICENSE\n */\n\nexports.BaseError = BaseError;\nexports.CombinedError = CombinedError;\nexports.CombinedPropertyError = CombinedPropertyError;\nexports.ExpectedConstraintError = ExpectedConstraintError;\nexports.ExpectedValidationError = ExpectedValidationError;\nexports.MissingPropertyError = MissingPropertyError;\nexports.MultiplePossibilitiesConstraintError = MultiplePossibilitiesConstraintError;\nexports.Result = Result;\nexports.UnknownEnumValueError = UnknownEnumValueError;\nexports.UnknownPropertyError = UnknownPropertyError;\nexports.ValidationError = ValidationError;\nexports.customInspectSymbol = customInspectSymbol;\nexports.customInspectSymbolStackLess = customInspectSymbolStackLess;\nexports.getGlobalValidationEnabled = getGlobalValidationEnabled;\nexports.s = s3;\nexports.setGlobalValidationEnabled = setGlobalValidationEnabled;\n//# sourceMappingURL=out.js.map\n//# sourceMappingURL=index.cjs.map",
    "'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.flatten = exports.unique = exports.hardMixProtos = exports.nearestCommonProto = exports.protoChain = exports.copyProps = void 0;\n/**\n * Utility function that works like `Object.apply`, but copies getters and setters properly as well.  Additionally gives\n * the option to exclude properties by name.\n */\nconst copyProps = (dest, src, exclude = []) => {\n    const props = Object.getOwnPropertyDescriptors(src);\n    for (let prop of exclude)\n        delete props[prop];\n    Object.defineProperties(dest, props);\n};\nexports.copyProps = copyProps;\n/**\n * Returns the full chain of prototypes up until Object.prototype given a starting object.  The order of prototypes will\n * be closest to farthest in the chain.\n */\nconst protoChain = (obj, currentChain = [obj]) => {\n    const proto = Object.getPrototypeOf(obj);\n    if (proto === null)\n        return currentChain;\n    return (0, exports.protoChain)(proto, [...currentChain, proto]);\n};\nexports.protoChain = protoChain;\n/**\n * Identifies the nearest ancestor common to all the given objects in their prototype chains.  For most unrelated\n * objects, this function should return Object.prototype.\n */\nconst nearestCommonProto = (...objs) => {\n    if (objs.length === 0)\n        return undefined;\n    let commonProto = undefined;\n    const protoChains = objs.map(obj => (0, exports.protoChain)(obj));\n    while (protoChains.every(protoChain => protoChain.length > 0)) {\n        const protos = protoChains.map(protoChain => protoChain.pop());\n        const potentialCommonProto = protos[0];\n        if (protos.every(proto => proto === potentialCommonProto))\n            commonProto = potentialCommonProto;\n        else\n            break;\n    }\n    return commonProto;\n};\nexports.nearestCommonProto = nearestCommonProto;\n/**\n * Creates a new prototype object that is a mixture of the given prototypes.  The mixing is achieved by first\n * identifying the nearest common ancestor and using it as the prototype for a new object.  Then all properties/methods\n * downstream of this prototype (ONLY downstream) are copied into the new object.\n *\n * The resulting prototype is more performant than softMixProtos(...), as well as ES5 compatible.  However, it's not as\n * flexible as updates to the source prototypes aren't captured by the mixed result.  See softMixProtos for why you may\n * want to use that instead.\n */\nconst hardMixProtos = (ingredients, constructor, exclude = []) => {\n    var _a;\n    const base = (_a = (0, exports.nearestCommonProto)(...ingredients)) !== null && _a !== void 0 ? _a : Object.prototype;\n    const mixedProto = Object.create(base);\n    // Keeps track of prototypes we've already visited to avoid copying the same properties multiple times.  We init the\n    // list with the proto chain below the nearest common ancestor because we don't want any of those methods mixed in\n    // when they will already be accessible via prototype access.\n    const visitedProtos = (0, exports.protoChain)(base);\n    for (let prototype of ingredients) {\n        let protos = (0, exports.protoChain)(prototype);\n        // Apply the prototype chain in reverse order so that old methods don't override newer ones.\n        for (let i = protos.length - 1; i >= 0; i--) {\n            let newProto = protos[i];\n            if (visitedProtos.indexOf(newProto) === -1) {\n                (0, exports.copyProps)(mixedProto, newProto, ['constructor', ...exclude]);\n                visitedProtos.push(newProto);\n            }\n        }\n    }\n    mixedProto.constructor = constructor;\n    return mixedProto;\n};\nexports.hardMixProtos = hardMixProtos;\nconst unique = (arr) => arr.filter((e, i) => arr.indexOf(e) == i);\nexports.unique = unique;\nconst flatten = (arr) => arr.length === 0\n    ? []\n    : arr.length === 1\n        ? arr[0]\n        : arr.reduce((a1, a2) => [...a1, ...a2]);\nexports.flatten = flatten;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.softMixProtos = exports.proxyMix = exports.getIngredientWithProp = void 0;\nconst util_1 = require(\"./util\");\n/**\n * Finds the ingredient with the given prop, searching in reverse order and breadth-first if searching ingredient\n * prototypes is required.\n */\nconst getIngredientWithProp = (prop, ingredients) => {\n    const protoChains = ingredients.map(ingredient => (0, util_1.protoChain)(ingredient));\n    // since we search breadth-first, we need to keep track of our depth in the prototype chains\n    let protoDepth = 0;\n    // not all prototype chains are the same depth, so this remains true as long as at least one of the ingredients'\n    // prototype chains has an object at this depth\n    let protosAreLeftToSearch = true;\n    while (protosAreLeftToSearch) {\n        // with the start of each horizontal slice, we assume this is the one that's deeper than any of the proto chains\n        protosAreLeftToSearch = false;\n        // scan through the ingredients right to left\n        for (let i = ingredients.length - 1; i >= 0; i--) {\n            const searchTarget = protoChains[i][protoDepth];\n            if (searchTarget !== undefined && searchTarget !== null) {\n                // if we find something, this is proof that this horizontal slice potentially more objects to search\n                protosAreLeftToSearch = true;\n                // eureka, we found it\n                if (Object.getOwnPropertyDescriptor(searchTarget, prop) != undefined) {\n                    return protoChains[i][0];\n                }\n            }\n        }\n        protoDepth++;\n    }\n    return undefined;\n};\nexports.getIngredientWithProp = getIngredientWithProp;\n/**\n * \"Mixes\" ingredients by wrapping them in a Proxy.  The optional prototype argument allows the mixed object to sit\n * downstream of an existing prototype chain.  Note that \"properties\" cannot be added, deleted, or modified.\n */\nconst proxyMix = (ingredients, prototype = Object.prototype) => new Proxy({}, {\n    getPrototypeOf() {\n        return prototype;\n    },\n    setPrototypeOf() {\n        throw Error('Cannot set prototype of Proxies created by ts-mixer');\n    },\n    getOwnPropertyDescriptor(_, prop) {\n        return Object.getOwnPropertyDescriptor((0, exports.getIngredientWithProp)(prop, ingredients) || {}, prop);\n    },\n    defineProperty() {\n        throw new Error('Cannot define new properties on Proxies created by ts-mixer');\n    },\n    has(_, prop) {\n        return (0, exports.getIngredientWithProp)(prop, ingredients) !== undefined || prototype[prop] !== undefined;\n    },\n    get(_, prop) {\n        return ((0, exports.getIngredientWithProp)(prop, ingredients) || prototype)[prop];\n    },\n    set(_, prop, val) {\n        const ingredientWithProp = (0, exports.getIngredientWithProp)(prop, ingredients);\n        if (ingredientWithProp === undefined)\n            throw new Error('Cannot set new properties on Proxies created by ts-mixer');\n        ingredientWithProp[prop] = val;\n        return true;\n    },\n    deleteProperty() {\n        throw new Error('Cannot delete properties on Proxies created by ts-mixer');\n    },\n    ownKeys() {\n        return ingredients\n            .map(Object.getOwnPropertyNames)\n            .reduce((prev, curr) => curr.concat(prev.filter(key => curr.indexOf(key) < 0)));\n    },\n});\nexports.proxyMix = proxyMix;\n/**\n * Creates a new proxy-prototype object that is a \"soft\" mixture of the given prototypes.  The mixing is achieved by\n * proxying all property access to the ingredients.  This is not ES5 compatible and less performant.  However, any\n * changes made to the source prototypes will be reflected in the proxy-prototype, which may be desirable.\n */\nconst softMixProtos = (ingredients, constructor) => (0, exports.proxyMix)([...ingredients, { constructor }]);\nexports.softMixProtos = softMixProtos;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.settings = void 0;\nexports.settings = {\n    initFunction: null,\n    staticsStrategy: 'copy',\n    prototypeStrategy: 'copy',\n    decoratorInheritance: 'deep',\n};\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasMixin = exports.registerMixins = exports.getMixinsForClass = void 0;\nconst util_1 = require(\"./util\");\n// Keeps track of constituent classes for every mixin class created by ts-mixer.\nconst mixins = new WeakMap();\nconst getMixinsForClass = (clazz) => mixins.get(clazz);\nexports.getMixinsForClass = getMixinsForClass;\nconst registerMixins = (mixedClass, constituents) => mixins.set(mixedClass, constituents);\nexports.registerMixins = registerMixins;\nconst hasMixin = (instance, mixin) => {\n    if (instance instanceof mixin)\n        return true;\n    const constructor = instance.constructor;\n    const visited = new Set();\n    let frontier = new Set();\n    frontier.add(constructor);\n    while (frontier.size > 0) {\n        // check if the frontier has the mixin we're looking for.  if not, we can say we visited every item in the frontier\n        if (frontier.has(mixin))\n            return true;\n        frontier.forEach((item) => visited.add(item));\n        // build a new frontier based on the associated mixin classes and prototype chains of each frontier item\n        const newFrontier = new Set();\n        frontier.forEach((item) => {\n            var _a;\n            const itemConstituents = (_a = mixins.get(item)) !== null && _a !== void 0 ? _a : (0, util_1.protoChain)(item.prototype)\n                .map((proto) => proto.constructor)\n                .filter((item) => item !== null);\n            if (itemConstituents)\n                itemConstituents.forEach((constituent) => {\n                    if (!visited.has(constituent) && !frontier.has(constituent))\n                        newFrontier.add(constituent);\n                });\n        });\n        // we have a new frontier, now search again\n        frontier = newFrontier;\n    }\n    // if we get here, we couldn't find the mixin anywhere in the prototype chain or associated mixin classes\n    return false;\n};\nexports.hasMixin = hasMixin;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decorate = exports.getDecoratorsForClass = exports.directDecoratorSearch = exports.deepDecoratorSearch = void 0;\nconst util_1 = require(\"./util\");\nconst mixin_tracking_1 = require(\"./mixin-tracking\");\nconst mergeObjectsOfDecorators = (o1, o2) => {\n    var _a, _b;\n    const allKeys = (0, util_1.unique)([...Object.getOwnPropertyNames(o1), ...Object.getOwnPropertyNames(o2)]);\n    const mergedObject = {};\n    for (let key of allKeys)\n        mergedObject[key] = (0, util_1.unique)([...((_a = o1 === null || o1 === void 0 ? void 0 : o1[key]) !== null && _a !== void 0 ? _a : []), ...((_b = o2 === null || o2 === void 0 ? void 0 : o2[key]) !== null && _b !== void 0 ? _b : [])]);\n    return mergedObject;\n};\nconst mergePropertyAndMethodDecorators = (d1, d2) => {\n    var _a, _b, _c, _d;\n    return ({\n        property: mergeObjectsOfDecorators((_a = d1 === null || d1 === void 0 ? void 0 : d1.property) !== null && _a !== void 0 ? _a : {}, (_b = d2 === null || d2 === void 0 ? void 0 : d2.property) !== null && _b !== void 0 ? _b : {}),\n        method: mergeObjectsOfDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.method) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.method) !== null && _d !== void 0 ? _d : {}),\n    });\n};\nconst mergeDecorators = (d1, d2) => {\n    var _a, _b, _c, _d, _e, _f;\n    return ({\n        class: (0, util_1.unique)([...(_a = d1 === null || d1 === void 0 ? void 0 : d1.class) !== null && _a !== void 0 ? _a : [], ...(_b = d2 === null || d2 === void 0 ? void 0 : d2.class) !== null && _b !== void 0 ? _b : []]),\n        static: mergePropertyAndMethodDecorators((_c = d1 === null || d1 === void 0 ? void 0 : d1.static) !== null && _c !== void 0 ? _c : {}, (_d = d2 === null || d2 === void 0 ? void 0 : d2.static) !== null && _d !== void 0 ? _d : {}),\n        instance: mergePropertyAndMethodDecorators((_e = d1 === null || d1 === void 0 ? void 0 : d1.instance) !== null && _e !== void 0 ? _e : {}, (_f = d2 === null || d2 === void 0 ? void 0 : d2.instance) !== null && _f !== void 0 ? _f : {}),\n    });\n};\nconst decorators = new Map();\nconst findAllConstituentClasses = (...classes) => {\n    var _a;\n    const allClasses = new Set();\n    const frontier = new Set([...classes]);\n    while (frontier.size > 0) {\n        for (let clazz of frontier) {\n            const protoChainClasses = (0, util_1.protoChain)(clazz.prototype).map(proto => proto.constructor);\n            const mixinClasses = (_a = (0, mixin_tracking_1.getMixinsForClass)(clazz)) !== null && _a !== void 0 ? _a : [];\n            const potentiallyNewClasses = [...protoChainClasses, ...mixinClasses];\n            const newClasses = potentiallyNewClasses.filter(c => !allClasses.has(c));\n            for (let newClass of newClasses)\n                frontier.add(newClass);\n            allClasses.add(clazz);\n            frontier.delete(clazz);\n        }\n    }\n    return [...allClasses];\n};\nconst deepDecoratorSearch = (...classes) => {\n    const decoratorsForClassChain = findAllConstituentClasses(...classes)\n        .map(clazz => decorators.get(clazz))\n        .filter(decorators => !!decorators);\n    if (decoratorsForClassChain.length == 0)\n        return {};\n    if (decoratorsForClassChain.length == 1)\n        return decoratorsForClassChain[0];\n    return decoratorsForClassChain.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nexports.deepDecoratorSearch = deepDecoratorSearch;\nconst directDecoratorSearch = (...classes) => {\n    const classDecorators = classes.map(clazz => (0, exports.getDecoratorsForClass)(clazz));\n    if (classDecorators.length === 0)\n        return {};\n    if (classDecorators.length === 1)\n        return classDecorators[0];\n    return classDecorators.reduce((d1, d2) => mergeDecorators(d1, d2));\n};\nexports.directDecoratorSearch = directDecoratorSearch;\nconst getDecoratorsForClass = (clazz) => {\n    let decoratorsForClass = decorators.get(clazz);\n    if (!decoratorsForClass) {\n        decoratorsForClass = {};\n        decorators.set(clazz, decoratorsForClass);\n    }\n    return decoratorsForClass;\n};\nexports.getDecoratorsForClass = getDecoratorsForClass;\nconst decorateClass = (decorator) => ((clazz) => {\n    const decoratorsForClass = (0, exports.getDecoratorsForClass)(clazz);\n    let classDecorators = decoratorsForClass.class;\n    if (!classDecorators) {\n        classDecorators = [];\n        decoratorsForClass.class = classDecorators;\n    }\n    classDecorators.push(decorator);\n    return decorator(clazz);\n});\nconst decorateMember = (decorator) => ((object, key, ...otherArgs) => {\n    var _a, _b, _c;\n    const decoratorTargetType = typeof object === 'function' ? 'static' : 'instance';\n    const decoratorType = typeof object[key] === 'function' ? 'method' : 'property';\n    const clazz = decoratorTargetType === 'static' ? object : object.constructor;\n    const decoratorsForClass = (0, exports.getDecoratorsForClass)(clazz);\n    const decoratorsForTargetType = (_a = decoratorsForClass === null || decoratorsForClass === void 0 ? void 0 : decoratorsForClass[decoratorTargetType]) !== null && _a !== void 0 ? _a : {};\n    decoratorsForClass[decoratorTargetType] = decoratorsForTargetType;\n    let decoratorsForType = (_b = decoratorsForTargetType === null || decoratorsForTargetType === void 0 ? void 0 : decoratorsForTargetType[decoratorType]) !== null && _b !== void 0 ? _b : {};\n    decoratorsForTargetType[decoratorType] = decoratorsForType;\n    let decoratorsForKey = (_c = decoratorsForType === null || decoratorsForType === void 0 ? void 0 : decoratorsForType[key]) !== null && _c !== void 0 ? _c : [];\n    decoratorsForType[key] = decoratorsForKey;\n    // @ts-ignore: array is type `A[] | B[]` and item is type `A | B`, so technically a type error, but it's fine\n    decoratorsForKey.push(decorator);\n    // @ts-ignore\n    return decorator(object, key, ...otherArgs);\n});\nconst decorate = (decorator) => ((...args) => {\n    if (args.length === 1)\n        return decorateClass(decorator)(args[0]);\n    return decorateMember(decorator)(...args);\n});\nexports.decorate = decorate;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mix = exports.Mixin = void 0;\nconst proxy_1 = require(\"./proxy\");\nconst settings_1 = require(\"./settings\");\nconst util_1 = require(\"./util\");\nconst decorator_1 = require(\"./decorator\");\nconst mixin_tracking_1 = require(\"./mixin-tracking\");\nfunction Mixin(...constructors) {\n    var _a, _b, _c;\n    const prototypes = constructors.map(constructor => constructor.prototype);\n    // Here we gather up the init functions of the ingredient prototypes, combine them into one init function, and\n    // attach it to the mixed class prototype.  The reason we do this is because we want the init functions to mix\n    // similarly to constructors -- not methods, which simply override each other.\n    const initFunctionName = settings_1.settings.initFunction;\n    if (initFunctionName !== null) {\n        const initFunctions = prototypes\n            .map(proto => proto[initFunctionName])\n            .filter(func => typeof func === 'function');\n        const combinedInitFunction = function (...args) {\n            for (let initFunction of initFunctions)\n                initFunction.apply(this, args);\n        };\n        const extraProto = { [initFunctionName]: combinedInitFunction };\n        prototypes.push(extraProto);\n    }\n    function MixedClass(...args) {\n        for (const constructor of constructors)\n            // @ts-ignore: potentially abstract class\n            (0, util_1.copyProps)(this, new constructor(...args));\n        if (initFunctionName !== null && typeof this[initFunctionName] === 'function')\n            this[initFunctionName].apply(this, args);\n    }\n    MixedClass.prototype = settings_1.settings.prototypeStrategy === 'copy'\n        ? (0, util_1.hardMixProtos)(prototypes, MixedClass)\n        : (0, proxy_1.softMixProtos)(prototypes, MixedClass);\n    Object.setPrototypeOf(MixedClass, settings_1.settings.staticsStrategy === 'copy'\n        ? (0, util_1.hardMixProtos)(constructors, null, ['prototype'])\n        : (0, proxy_1.proxyMix)(constructors, Function.prototype));\n    let DecoratedMixedClass = MixedClass;\n    if (settings_1.settings.decoratorInheritance !== 'none') {\n        const classDecorators = settings_1.settings.decoratorInheritance === 'deep'\n            ? (0, decorator_1.deepDecoratorSearch)(...constructors)\n            : (0, decorator_1.directDecoratorSearch)(...constructors);\n        for (let decorator of (_a = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.class) !== null && _a !== void 0 ? _a : []) {\n            const result = decorator(DecoratedMixedClass);\n            if (result) {\n                DecoratedMixedClass = result;\n            }\n        }\n        applyPropAndMethodDecorators((_b = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.static) !== null && _b !== void 0 ? _b : {}, DecoratedMixedClass);\n        applyPropAndMethodDecorators((_c = classDecorators === null || classDecorators === void 0 ? void 0 : classDecorators.instance) !== null && _c !== void 0 ? _c : {}, DecoratedMixedClass.prototype);\n    }\n    (0, mixin_tracking_1.registerMixins)(DecoratedMixedClass, constructors);\n    return DecoratedMixedClass;\n}\nexports.Mixin = Mixin;\nconst applyPropAndMethodDecorators = (propAndMethodDecorators, target) => {\n    const propDecorators = propAndMethodDecorators.property;\n    const methodDecorators = propAndMethodDecorators.method;\n    if (propDecorators)\n        for (let key in propDecorators)\n            for (let decorator of propDecorators[key])\n                decorator(target, key);\n    if (methodDecorators)\n        for (let key in methodDecorators)\n            for (let decorator of methodDecorators[key])\n                decorator(target, key, Object.getOwnPropertyDescriptor(target, key));\n};\n/**\n * A decorator version of the `Mixin` function.  You'll want to use this instead of `Mixin` for mixing generic classes.\n */\nconst mix = (...ingredients) => decoratedClass => {\n    // @ts-ignore\n    const mixedClass = Mixin(...ingredients.concat([decoratedClass]));\n    Object.defineProperty(mixedClass, 'name', {\n        value: decoratedClass.name,\n        writable: false,\n    });\n    return mixedClass;\n};\nexports.mix = mix;\n",
    "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasMixin = exports.decorate = exports.settings = exports.mix = exports.Mixin = void 0;\nvar mixins_1 = require(\"./mixins\");\nObject.defineProperty(exports, \"Mixin\", { enumerable: true, get: function () { return mixins_1.Mixin; } });\nObject.defineProperty(exports, \"mix\", { enumerable: true, get: function () { return mixins_1.mix; } });\nvar settings_1 = require(\"./settings\");\nObject.defineProperty(exports, \"settings\", { enumerable: true, get: function () { return settings_1.settings; } });\nvar decorator_1 = require(\"./decorator\");\nObject.defineProperty(exports, \"decorate\", { enumerable: true, get: function () { return decorator_1.decorate; } });\nvar mixin_tracking_1 = require(\"./mixin-tracking\");\nObject.defineProperty(exports, \"hasMixin\", { enumerable: true, get: function () { return mixin_tracking_1.hasMixin; } });\n",
    "\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __decorateClass = (decorators, target, key, kind) => {\n  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;\n  for (var i = decorators.length - 1, decorator; i >= 0; i--)\n    if (decorator = decorators[i])\n      result = (kind ? decorator(target, key, result) : decorator(result)) || result;\n  if (kind && result) __defProp(target, key, result);\n  return result;\n};\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  ActionRowBuilder: () => ActionRowBuilder,\n  ApplicationCommandNumericOptionMinMaxValueMixin: () => ApplicationCommandNumericOptionMinMaxValueMixin,\n  ApplicationCommandOptionBase: () => ApplicationCommandOptionBase,\n  ApplicationCommandOptionChannelTypesMixin: () => ApplicationCommandOptionChannelTypesMixin,\n  ApplicationCommandOptionWithAutocompleteMixin: () => ApplicationCommandOptionWithAutocompleteMixin,\n  ApplicationCommandOptionWithChoicesMixin: () => ApplicationCommandOptionWithChoicesMixin,\n  BaseSelectMenuBuilder: () => BaseSelectMenuBuilder,\n  ButtonBuilder: () => ButtonBuilder,\n  ChannelSelectMenuBuilder: () => ChannelSelectMenuBuilder,\n  ComponentAssertions: () => Assertions_exports2,\n  ComponentBuilder: () => ComponentBuilder,\n  ContextMenuCommandAssertions: () => Assertions_exports6,\n  ContextMenuCommandBuilder: () => ContextMenuCommandBuilder,\n  EmbedAssertions: () => Assertions_exports,\n  EmbedBuilder: () => EmbedBuilder,\n  MentionableSelectMenuBuilder: () => MentionableSelectMenuBuilder,\n  ModalAssertions: () => Assertions_exports4,\n  ModalBuilder: () => ModalBuilder,\n  RoleSelectMenuBuilder: () => RoleSelectMenuBuilder,\n  SelectMenuBuilder: () => StringSelectMenuBuilder,\n  SelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,\n  SharedNameAndDescription: () => SharedNameAndDescription,\n  SharedSlashCommand: () => SharedSlashCommand,\n  SharedSlashCommandOptions: () => SharedSlashCommandOptions,\n  SharedSlashCommandSubcommands: () => SharedSlashCommandSubcommands,\n  SlashCommandAssertions: () => Assertions_exports5,\n  SlashCommandAttachmentOption: () => SlashCommandAttachmentOption,\n  SlashCommandBooleanOption: () => SlashCommandBooleanOption,\n  SlashCommandBuilder: () => SlashCommandBuilder,\n  SlashCommandChannelOption: () => SlashCommandChannelOption,\n  SlashCommandIntegerOption: () => SlashCommandIntegerOption,\n  SlashCommandMentionableOption: () => SlashCommandMentionableOption,\n  SlashCommandNumberOption: () => SlashCommandNumberOption,\n  SlashCommandRoleOption: () => SlashCommandRoleOption,\n  SlashCommandStringOption: () => SlashCommandStringOption,\n  SlashCommandSubcommandBuilder: () => SlashCommandSubcommandBuilder,\n  SlashCommandSubcommandGroupBuilder: () => SlashCommandSubcommandGroupBuilder,\n  SlashCommandUserOption: () => SlashCommandUserOption,\n  StringSelectMenuBuilder: () => StringSelectMenuBuilder,\n  StringSelectMenuOptionBuilder: () => StringSelectMenuOptionBuilder,\n  TextInputAssertions: () => Assertions_exports3,\n  TextInputBuilder: () => TextInputBuilder,\n  UserSelectMenuBuilder: () => UserSelectMenuBuilder,\n  createComponentBuilder: () => createComponentBuilder,\n  disableValidators: () => disableValidators,\n  embedLength: () => embedLength,\n  enableValidators: () => enableValidators,\n  isValidationEnabled: () => isValidationEnabled,\n  normalizeArray: () => normalizeArray,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/messages/embed/Assertions.ts\nvar Assertions_exports = {};\n__export(Assertions_exports, {\n  RGBPredicate: () => RGBPredicate,\n  authorNamePredicate: () => authorNamePredicate,\n  colorPredicate: () => colorPredicate,\n  descriptionPredicate: () => descriptionPredicate,\n  embedAuthorPredicate: () => embedAuthorPredicate,\n  embedFieldPredicate: () => embedFieldPredicate,\n  embedFieldsArrayPredicate: () => embedFieldsArrayPredicate,\n  embedFooterPredicate: () => embedFooterPredicate,\n  fieldInlinePredicate: () => fieldInlinePredicate,\n  fieldLengthPredicate: () => fieldLengthPredicate,\n  fieldNamePredicate: () => fieldNamePredicate,\n  fieldValuePredicate: () => fieldValuePredicate,\n  footerTextPredicate: () => footerTextPredicate,\n  imageURLPredicate: () => imageURLPredicate,\n  timestampPredicate: () => timestampPredicate,\n  titlePredicate: () => titlePredicate,\n  urlPredicate: () => urlPredicate,\n  validateFieldLength: () => validateFieldLength\n});\nvar import_shapeshift = require(\"@sapphire/shapeshift\");\n\n// src/util/validation.ts\nvar validate = true;\nfunction enableValidators() {\n  return validate = true;\n}\n__name(enableValidators, \"enableValidators\");\nfunction disableValidators() {\n  return validate = false;\n}\n__name(disableValidators, \"disableValidators\");\nfunction isValidationEnabled() {\n  return validate;\n}\n__name(isValidationEnabled, \"isValidationEnabled\");\n\n// src/messages/embed/Assertions.ts\nvar fieldNamePredicate = import_shapeshift.s.string().lengthLessThanOrEqual(256).setValidationEnabled(isValidationEnabled);\nvar fieldValuePredicate = import_shapeshift.s.string().lengthLessThanOrEqual(1024).setValidationEnabled(isValidationEnabled);\nvar fieldInlinePredicate = import_shapeshift.s.boolean().optional();\nvar embedFieldPredicate = import_shapeshift.s.object({\n  name: fieldNamePredicate,\n  value: fieldValuePredicate,\n  inline: fieldInlinePredicate\n}).setValidationEnabled(isValidationEnabled);\nvar embedFieldsArrayPredicate = embedFieldPredicate.array().setValidationEnabled(isValidationEnabled);\nvar fieldLengthPredicate = import_shapeshift.s.number().lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateFieldLength(amountAdding, fields) {\n  fieldLengthPredicate.parse((fields?.length ?? 0) + amountAdding);\n}\n__name(validateFieldLength, \"validateFieldLength\");\nvar authorNamePredicate = fieldNamePredicate.lengthGreaterThanOrEqual(1).nullable().setValidationEnabled(isValidationEnabled);\nvar imageURLPredicate = import_shapeshift.s.string().url({\n  allowedProtocols: [\"http:\", \"https:\", \"attachment:\"]\n}).nullish().setValidationEnabled(isValidationEnabled);\nvar urlPredicate = import_shapeshift.s.string().url({\n  allowedProtocols: [\"http:\", \"https:\"]\n}).nullish().setValidationEnabled(isValidationEnabled);\nvar embedAuthorPredicate = import_shapeshift.s.object({\n  name: authorNamePredicate,\n  iconURL: imageURLPredicate,\n  url: urlPredicate\n}).setValidationEnabled(isValidationEnabled);\nvar RGBPredicate = import_shapeshift.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(255).setValidationEnabled(isValidationEnabled);\nvar colorPredicate = import_shapeshift.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(16777215).or(import_shapeshift.s.tuple([RGBPredicate, RGBPredicate, RGBPredicate])).nullable().setValidationEnabled(isValidationEnabled);\nvar descriptionPredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(4096).nullable().setValidationEnabled(isValidationEnabled);\nvar footerTextPredicate = import_shapeshift.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(2048).nullable().setValidationEnabled(isValidationEnabled);\nvar embedFooterPredicate = import_shapeshift.s.object({\n  text: footerTextPredicate,\n  iconURL: imageURLPredicate\n}).setValidationEnabled(isValidationEnabled);\nvar timestampPredicate = import_shapeshift.s.union([import_shapeshift.s.number(), import_shapeshift.s.date()]).nullable().setValidationEnabled(isValidationEnabled);\nvar titlePredicate = fieldNamePredicate.lengthGreaterThanOrEqual(1).nullable().setValidationEnabled(isValidationEnabled);\n\n// src/util/normalizeArray.ts\nfunction normalizeArray(arr) {\n  if (Array.isArray(arr[0])) return [...arr[0]];\n  return arr;\n}\n__name(normalizeArray, \"normalizeArray\");\n\n// src/messages/embed/Embed.ts\nvar EmbedBuilder = class {\n  static {\n    __name(this, \"EmbedBuilder\");\n  }\n  /**\n   * The API data associated with this embed.\n   */\n  data;\n  /**\n   * Creates a new embed from API data.\n   *\n   * @param data - The API data to create this embed with\n   */\n  constructor(data = {}) {\n    this.data = { ...data };\n    if (data.timestamp) this.data.timestamp = new Date(data.timestamp).toISOString();\n  }\n  /**\n   * Appends fields to the embed.\n   *\n   * @remarks\n   * This method accepts either an array of fields or a variable number of field parameters.\n   * The maximum amount of fields that can be added is 25.\n   * @example\n   * Using an array:\n   * ```ts\n   * const fields: APIEmbedField[] = ...;\n   * const embed = new EmbedBuilder()\n   * \t.addFields(fields);\n   * ```\n   * @example\n   * Using rest parameters (variadic):\n   * ```ts\n   * const embed = new EmbedBuilder()\n   * \t.addFields(\n   * \t\t{ name: 'Field 1', value: 'Value 1' },\n   * \t\t{ name: 'Field 2', value: 'Value 2' },\n   * \t);\n   * ```\n   * @param fields - The fields to add\n   */\n  addFields(...fields) {\n    const normalizedFields = normalizeArray(fields);\n    validateFieldLength(normalizedFields.length, this.data.fields);\n    embedFieldsArrayPredicate.parse(normalizedFields);\n    if (this.data.fields) this.data.fields.push(...normalizedFields);\n    else this.data.fields = normalizedFields;\n    return this;\n  }\n  /**\n   * Removes, replaces, or inserts fields for this embed.\n   *\n   * @remarks\n   * This method behaves similarly\n   * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice | Array.prototype.splice()}.\n   * The maximum amount of fields that can be added is 25.\n   *\n   * It's useful for modifying and adjusting order of the already-existing fields of an embed.\n   * @example\n   * Remove the first field:\n   * ```ts\n   * embed.spliceFields(0, 1);\n   * ```\n   * @example\n   * Remove the first n fields:\n   * ```ts\n   * const n = 4;\n   * embed.spliceFields(0, n);\n   * ```\n   * @example\n   * Remove the last field:\n   * ```ts\n   * embed.spliceFields(-1, 1);\n   * ```\n   * @param index - The index to start at\n   * @param deleteCount - The number of fields to remove\n   * @param fields - The replacing field objects\n   */\n  spliceFields(index, deleteCount, ...fields) {\n    validateFieldLength(fields.length - deleteCount, this.data.fields);\n    embedFieldsArrayPredicate.parse(fields);\n    if (this.data.fields) this.data.fields.splice(index, deleteCount, ...fields);\n    else this.data.fields = fields;\n    return this;\n  }\n  /**\n   * Sets the fields for this embed.\n   *\n   * @remarks\n   * This method is an alias for {@link EmbedBuilder.spliceFields}. More specifically,\n   * it splices the entire array of fields, replacing them with the provided fields.\n   *\n   * You can set a maximum of 25 fields.\n   * @param fields - The fields to set\n   */\n  setFields(...fields) {\n    this.spliceFields(0, this.data.fields?.length ?? 0, ...normalizeArray(fields));\n    return this;\n  }\n  /**\n   * Sets the author of this embed.\n   *\n   * @param options - The options to use\n   */\n  setAuthor(options) {\n    if (options === null) {\n      this.data.author = void 0;\n      return this;\n    }\n    embedAuthorPredicate.parse(options);\n    this.data.author = { name: options.name, url: options.url, icon_url: options.iconURL };\n    return this;\n  }\n  /**\n   * Sets the color of this embed.\n   *\n   * @param color - The color to use\n   */\n  setColor(color) {\n    colorPredicate.parse(color);\n    if (Array.isArray(color)) {\n      const [red, green, blue] = color;\n      this.data.color = (red << 16) + (green << 8) + blue;\n      return this;\n    }\n    this.data.color = color ?? void 0;\n    return this;\n  }\n  /**\n   * Sets the description of this embed.\n   *\n   * @param description - The description to use\n   */\n  setDescription(description) {\n    descriptionPredicate.parse(description);\n    this.data.description = description ?? void 0;\n    return this;\n  }\n  /**\n   * Sets the footer of this embed.\n   *\n   * @param options - The footer to use\n   */\n  setFooter(options) {\n    if (options === null) {\n      this.data.footer = void 0;\n      return this;\n    }\n    embedFooterPredicate.parse(options);\n    this.data.footer = { text: options.text, icon_url: options.iconURL };\n    return this;\n  }\n  /**\n   * Sets the image of this embed.\n   *\n   * @param url - The image URL to use\n   */\n  setImage(url) {\n    imageURLPredicate.parse(url);\n    this.data.image = url ? { url } : void 0;\n    return this;\n  }\n  /**\n   * Sets the thumbnail of this embed.\n   *\n   * @param url - The thumbnail URL to use\n   */\n  setThumbnail(url) {\n    imageURLPredicate.parse(url);\n    this.data.thumbnail = url ? { url } : void 0;\n    return this;\n  }\n  /**\n   * Sets the timestamp of this embed.\n   *\n   * @param timestamp - The timestamp or date to use\n   */\n  setTimestamp(timestamp = Date.now()) {\n    timestampPredicate.parse(timestamp);\n    this.data.timestamp = timestamp ? new Date(timestamp).toISOString() : void 0;\n    return this;\n  }\n  /**\n   * Sets the title for this embed.\n   *\n   * @param title - The title to use\n   */\n  setTitle(title) {\n    titlePredicate.parse(title);\n    this.data.title = title ?? void 0;\n    return this;\n  }\n  /**\n   * Sets the URL of this embed.\n   *\n   * @param url - The URL to use\n   */\n  setURL(url) {\n    urlPredicate.parse(url);\n    this.data.url = url ?? void 0;\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    return { ...this.data };\n  }\n};\n\n// src/index.ts\n__reExport(src_exports, require(\"@discordjs/formatters\"), module.exports);\n\n// src/components/Assertions.ts\nvar Assertions_exports2 = {};\n__export(Assertions_exports2, {\n  buttonLabelValidator: () => buttonLabelValidator,\n  buttonStyleValidator: () => buttonStyleValidator,\n  channelTypesValidator: () => channelTypesValidator,\n  customIdValidator: () => customIdValidator,\n  defaultValidator: () => defaultValidator,\n  disabledValidator: () => disabledValidator,\n  emojiValidator: () => emojiValidator,\n  jsonOptionValidator: () => jsonOptionValidator,\n  labelValueDescriptionValidator: () => labelValueDescriptionValidator,\n  minMaxValidator: () => minMaxValidator,\n  optionValidator: () => optionValidator,\n  optionsLengthValidator: () => optionsLengthValidator,\n  optionsValidator: () => optionsValidator,\n  placeholderValidator: () => placeholderValidator,\n  urlValidator: () => urlValidator,\n  validateRequiredButtonParameters: () => validateRequiredButtonParameters,\n  validateRequiredSelectMenuOptionParameters: () => validateRequiredSelectMenuOptionParameters,\n  validateRequiredSelectMenuParameters: () => validateRequiredSelectMenuParameters\n});\nvar import_shapeshift2 = require(\"@sapphire/shapeshift\");\nvar import_v10 = require(\"discord-api-types/v10\");\n\n// src/components/selectMenu/StringSelectMenuOption.ts\nvar StringSelectMenuOptionBuilder = class {\n  /**\n   * Creates a new string select menu option from API data.\n   *\n   * @param data - The API data to create this string select menu option with\n   * @example\n   * Creating a string select menu option from an API data object:\n   * ```ts\n   * const selectMenuOption = new SelectMenuOptionBuilder({\n   * \tlabel: 'catchy label',\n   * \tvalue: '1',\n   * });\n   * ```\n   * @example\n   * Creating a string select menu option using setters and API data:\n   * ```ts\n   * const selectMenuOption = new SelectMenuOptionBuilder({\n   * \tdefault: true,\n   * \tvalue: '1',\n   * })\n   * \t.setLabel('woah');\n   * ```\n   */\n  constructor(data = {}) {\n    this.data = data;\n  }\n  static {\n    __name(this, \"StringSelectMenuOptionBuilder\");\n  }\n  /**\n   * Sets the label for this option.\n   *\n   * @param label - The label to use\n   */\n  setLabel(label) {\n    this.data.label = labelValueDescriptionValidator.parse(label);\n    return this;\n  }\n  /**\n   * Sets the value for this option.\n   *\n   * @param value - The value to use\n   */\n  setValue(value) {\n    this.data.value = labelValueDescriptionValidator.parse(value);\n    return this;\n  }\n  /**\n   * Sets the description for this option.\n   *\n   * @param description - The description to use\n   */\n  setDescription(description) {\n    this.data.description = labelValueDescriptionValidator.parse(description);\n    return this;\n  }\n  /**\n   * Sets whether this option is selected by default.\n   *\n   * @param isDefault - Whether this option is selected by default\n   */\n  setDefault(isDefault = true) {\n    this.data.default = defaultValidator.parse(isDefault);\n    return this;\n  }\n  /**\n   * Sets the emoji to display for this option.\n   *\n   * @param emoji - The emoji to use\n   */\n  setEmoji(emoji) {\n    this.data.emoji = emojiValidator.parse(emoji);\n    return this;\n  }\n  /**\n   * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredSelectMenuOptionParameters(this.data.label, this.data.value);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/Assertions.ts\nvar customIdValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar emojiValidator = import_shapeshift2.s.object({\n  id: import_shapeshift2.s.string(),\n  name: import_shapeshift2.s.string(),\n  animated: import_shapeshift2.s.boolean()\n}).partial().strict().setValidationEnabled(isValidationEnabled);\nvar disabledValidator = import_shapeshift2.s.boolean();\nvar buttonLabelValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(80).setValidationEnabled(isValidationEnabled);\nvar buttonStyleValidator = import_shapeshift2.s.nativeEnum(import_v10.ButtonStyle);\nvar placeholderValidator = import_shapeshift2.s.string().lengthLessThanOrEqual(150).setValidationEnabled(isValidationEnabled);\nvar minMaxValidator = import_shapeshift2.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nvar labelValueDescriptionValidator = import_shapeshift2.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar jsonOptionValidator = import_shapeshift2.s.object({\n  label: labelValueDescriptionValidator,\n  value: labelValueDescriptionValidator,\n  description: labelValueDescriptionValidator.optional(),\n  emoji: emojiValidator.optional(),\n  default: import_shapeshift2.s.boolean().optional()\n}).setValidationEnabled(isValidationEnabled);\nvar optionValidator = import_shapeshift2.s.instance(StringSelectMenuOptionBuilder).setValidationEnabled(isValidationEnabled);\nvar optionsValidator = optionValidator.array().lengthGreaterThanOrEqual(0).setValidationEnabled(isValidationEnabled);\nvar optionsLengthValidator = import_shapeshift2.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredSelectMenuParameters(options, customId) {\n  customIdValidator.parse(customId);\n  optionsValidator.parse(options);\n}\n__name(validateRequiredSelectMenuParameters, \"validateRequiredSelectMenuParameters\");\nvar defaultValidator = import_shapeshift2.s.boolean();\nfunction validateRequiredSelectMenuOptionParameters(label, value) {\n  labelValueDescriptionValidator.parse(label);\n  labelValueDescriptionValidator.parse(value);\n}\n__name(validateRequiredSelectMenuOptionParameters, \"validateRequiredSelectMenuOptionParameters\");\nvar channelTypesValidator = import_shapeshift2.s.nativeEnum(import_v10.ChannelType).array().setValidationEnabled(isValidationEnabled);\nvar urlValidator = import_shapeshift2.s.string().url({\n  allowedProtocols: [\"http:\", \"https:\", \"discord:\"]\n}).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredButtonParameters(style, label, emoji, customId, skuId, url) {\n  if (style === import_v10.ButtonStyle.Premium) {\n    if (!skuId) {\n      throw new RangeError(\"Premium buttons must have an SKU id.\");\n    }\n    if (customId || label || url || emoji) {\n      throw new RangeError(\"Premium buttons cannot have a custom id, label, URL, or emoji.\");\n    }\n  } else {\n    if (skuId) {\n      throw new RangeError(\"Non-premium buttons must not have an SKU id.\");\n    }\n    if (url && customId) {\n      throw new RangeError(\"URL and custom id are mutually exclusive.\");\n    }\n    if (!label && !emoji) {\n      throw new RangeError(\"Non-premium buttons must have a label and/or an emoji.\");\n    }\n    if (style === import_v10.ButtonStyle.Link) {\n      if (!url) {\n        throw new RangeError(\"Link buttons must have a URL.\");\n      }\n    } else if (url) {\n      throw new RangeError(\"Non-premium and non-link buttons cannot have a URL.\");\n    }\n  }\n}\n__name(validateRequiredButtonParameters, \"validateRequiredButtonParameters\");\n\n// src/components/ActionRow.ts\nvar import_v1011 = require(\"discord-api-types/v10\");\n\n// src/components/Component.ts\nvar ComponentBuilder = class {\n  static {\n    __name(this, \"ComponentBuilder\");\n  }\n  /**\n   * The API data associated with this component.\n   */\n  data;\n  /**\n   * Constructs a new kind of component.\n   *\n   * @param data - The data to construct a component out of\n   */\n  constructor(data) {\n    this.data = data;\n  }\n};\n\n// src/components/Components.ts\nvar import_v1010 = require(\"discord-api-types/v10\");\n\n// src/components/button/Button.ts\nvar import_v102 = require(\"discord-api-types/v10\");\nvar ButtonBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"ButtonBuilder\");\n  }\n  /**\n   * Creates a new button from API data.\n   *\n   * @param data - The API data to create this button with\n   * @example\n   * Creating a button from an API data object:\n   * ```ts\n   * const button = new ButtonBuilder({\n   * \tcustom_id: 'a cool button',\n   * \tstyle: ButtonStyle.Primary,\n   * \tlabel: 'Click Me',\n   * \temoji: {\n   * \t\tname: 'smile',\n   * \t\tid: '123456789012345678',\n   * \t},\n   * });\n   * ```\n   * @example\n   * Creating a button using setters and API data:\n   * ```ts\n   * const button = new ButtonBuilder({\n   * \tstyle: ButtonStyle.Secondary,\n   * \tlabel: 'Click Me',\n   * })\n   * \t.setEmoji({ name: '🙂' })\n   * \t.setCustomId('another cool button');\n   * ```\n   */\n  constructor(data) {\n    super({ type: import_v102.ComponentType.Button, ...data });\n  }\n  /**\n   * Sets the style of this button.\n   *\n   * @param style - The style to use\n   */\n  setStyle(style) {\n    this.data.style = buttonStyleValidator.parse(style);\n    return this;\n  }\n  /**\n   * Sets the URL for this button.\n   *\n   * @remarks\n   * This method is only available to buttons using the `Link` button style.\n   * Only three types of URL schemes are currently supported: `https://`, `http://`, and `discord://`.\n   * @param url - The URL to use\n   */\n  setURL(url) {\n    this.data.url = urlValidator.parse(url);\n    return this;\n  }\n  /**\n   * Sets the custom id for this button.\n   *\n   * @remarks\n   * This method is only applicable to buttons that are not using the `Link` button style.\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Sets the SKU id that represents a purchasable SKU for this button.\n   *\n   * @remarks Only available when using premium-style buttons.\n   * @param skuId - The SKU id to use\n   */\n  setSKUId(skuId) {\n    this.data.sku_id = skuId;\n    return this;\n  }\n  /**\n   * Sets the emoji to display on this button.\n   *\n   * @param emoji - The emoji to use\n   */\n  setEmoji(emoji) {\n    this.data.emoji = emojiValidator.parse(emoji);\n    return this;\n  }\n  /**\n   * Sets whether this button is disabled.\n   *\n   * @param disabled - Whether to disable this button\n   */\n  setDisabled(disabled = true) {\n    this.data.disabled = disabledValidator.parse(disabled);\n    return this;\n  }\n  /**\n   * Sets the label for this button.\n   *\n   * @param label - The label to use\n   */\n  setLabel(label) {\n    this.data.label = buttonLabelValidator.parse(label);\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredButtonParameters(\n      this.data.style,\n      this.data.label,\n      this.data.emoji,\n      this.data.custom_id,\n      this.data.sku_id,\n      this.data.url\n    );\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/selectMenu/ChannelSelectMenu.ts\nvar import_v103 = require(\"discord-api-types/v10\");\n\n// src/components/selectMenu/BaseSelectMenu.ts\nvar BaseSelectMenuBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"BaseSelectMenuBuilder\");\n  }\n  /**\n   * Sets the placeholder for this select menu.\n   *\n   * @param placeholder - The placeholder to use\n   */\n  setPlaceholder(placeholder) {\n    this.data.placeholder = placeholderValidator.parse(placeholder);\n    return this;\n  }\n  /**\n   * Sets the minimum values that must be selected in the select menu.\n   *\n   * @param minValues - The minimum values that must be selected\n   */\n  setMinValues(minValues) {\n    this.data.min_values = minMaxValidator.parse(minValues);\n    return this;\n  }\n  /**\n   * Sets the maximum values that must be selected in the select menu.\n   *\n   * @param maxValues - The maximum values that must be selected\n   */\n  setMaxValues(maxValues) {\n    this.data.max_values = minMaxValidator.parse(maxValues);\n    return this;\n  }\n  /**\n   * Sets the custom id for this select menu.\n   *\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Sets whether this select menu is disabled.\n   *\n   * @param disabled - Whether this select menu is disabled\n   */\n  setDisabled(disabled = true) {\n    this.data.disabled = disabledValidator.parse(disabled);\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    customIdValidator.parse(this.data.custom_id);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/selectMenu/ChannelSelectMenu.ts\nvar ChannelSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"ChannelSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new ChannelSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new ChannelSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.addChannelTypes(ChannelType.GuildText, ChannelType.GuildAnnouncement)\n   * \t.setMinValues(2);\n   * ```\n   */\n  constructor(data) {\n    super({ ...data, type: import_v103.ComponentType.ChannelSelect });\n  }\n  /**\n   * Adds channel types to this select menu.\n   *\n   * @param types - The channel types to use\n   */\n  addChannelTypes(...types) {\n    const normalizedTypes = normalizeArray(types);\n    this.data.channel_types ??= [];\n    this.data.channel_types.push(...channelTypesValidator.parse(normalizedTypes));\n    return this;\n  }\n  /**\n   * Sets channel types for this select menu.\n   *\n   * @param types - The channel types to use\n   */\n  setChannelTypes(...types) {\n    const normalizedTypes = normalizeArray(types);\n    this.data.channel_types ??= [];\n    this.data.channel_types.splice(0, this.data.channel_types.length, ...channelTypesValidator.parse(normalizedTypes));\n    return this;\n  }\n  /**\n   * Adds default channels to this auto populated select menu.\n   *\n   * @param channels - The channels to add\n   */\n  addDefaultChannels(...channels) {\n    const normalizedValues = normalizeArray(channels);\n    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);\n    this.data.default_values ??= [];\n    this.data.default_values.push(\n      ...normalizedValues.map((id) => ({\n        id,\n        type: import_v103.SelectMenuDefaultValueType.Channel\n      }))\n    );\n    return this;\n  }\n  /**\n   * Sets default channels for this auto populated select menu.\n   *\n   * @param channels - The channels to set\n   */\n  setDefaultChannels(...channels) {\n    const normalizedValues = normalizeArray(channels);\n    optionsLengthValidator.parse(normalizedValues.length);\n    this.data.default_values = normalizedValues.map((id) => ({\n      id,\n      type: import_v103.SelectMenuDefaultValueType.Channel\n    }));\n    return this;\n  }\n  /**\n   * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n   */\n  toJSON() {\n    customIdValidator.parse(this.data.custom_id);\n    return {\n      ...this.data\n    };\n  }\n};\n\n// src/components/selectMenu/MentionableSelectMenu.ts\nvar import_v104 = require(\"discord-api-types/v10\");\nvar MentionableSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"MentionableSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new MentionableSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new MentionableSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1);\n   * ```\n   */\n  constructor(data) {\n    super({ ...data, type: import_v104.ComponentType.MentionableSelect });\n  }\n  /**\n   * Adds default roles to this auto populated select menu.\n   *\n   * @param roles - The roles to add\n   */\n  addDefaultRoles(...roles) {\n    const normalizedValues = normalizeArray(roles);\n    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);\n    this.data.default_values ??= [];\n    this.data.default_values.push(\n      ...normalizedValues.map((id) => ({\n        id,\n        type: import_v104.SelectMenuDefaultValueType.Role\n      }))\n    );\n    return this;\n  }\n  /**\n   * Adds default users to this auto populated select menu.\n   *\n   * @param users - The users to add\n   */\n  addDefaultUsers(...users) {\n    const normalizedValues = normalizeArray(users);\n    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);\n    this.data.default_values ??= [];\n    this.data.default_values.push(\n      ...normalizedValues.map((id) => ({\n        id,\n        type: import_v104.SelectMenuDefaultValueType.User\n      }))\n    );\n    return this;\n  }\n  /**\n   * Adds default values to this auto populated select menu.\n   *\n   * @param values - The values to add\n   */\n  addDefaultValues(...values) {\n    const normalizedValues = normalizeArray(values);\n    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);\n    this.data.default_values ??= [];\n    this.data.default_values.push(...normalizedValues);\n    return this;\n  }\n  /**\n   * Sets default values for this auto populated select menu.\n   *\n   * @param values - The values to set\n   */\n  setDefaultValues(...values) {\n    const normalizedValues = normalizeArray(values);\n    optionsLengthValidator.parse(normalizedValues.length);\n    this.data.default_values = normalizedValues;\n    return this;\n  }\n};\n\n// src/components/selectMenu/RoleSelectMenu.ts\nvar import_v105 = require(\"discord-api-types/v10\");\nvar RoleSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"RoleSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new RoleSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new RoleSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1);\n   * ```\n   */\n  constructor(data) {\n    super({ ...data, type: import_v105.ComponentType.RoleSelect });\n  }\n  /**\n   * Adds default roles to this auto populated select menu.\n   *\n   * @param roles - The roles to add\n   */\n  addDefaultRoles(...roles) {\n    const normalizedValues = normalizeArray(roles);\n    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);\n    this.data.default_values ??= [];\n    this.data.default_values.push(\n      ...normalizedValues.map((id) => ({\n        id,\n        type: import_v105.SelectMenuDefaultValueType.Role\n      }))\n    );\n    return this;\n  }\n  /**\n   * Sets default roles for this auto populated select menu.\n   *\n   * @param roles - The roles to set\n   */\n  setDefaultRoles(...roles) {\n    const normalizedValues = normalizeArray(roles);\n    optionsLengthValidator.parse(normalizedValues.length);\n    this.data.default_values = normalizedValues.map((id) => ({\n      id,\n      type: import_v105.SelectMenuDefaultValueType.Role\n    }));\n    return this;\n  }\n};\n\n// src/components/selectMenu/StringSelectMenu.ts\nvar import_v106 = require(\"discord-api-types/v10\");\nvar StringSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"StringSelectMenuBuilder\");\n  }\n  /**\n   * The options within this select menu.\n   */\n  options;\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new StringSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * \toptions: [\n   * \t\t{ label: 'option 1', value: '1' },\n   * \t\t{ label: 'option 2', value: '2' },\n   * \t\t{ label: 'option 3', value: '3' },\n   * \t],\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new StringSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1)\n   * \t.addOptions({\n   * \t\tlabel: 'Catchy',\n   * \t\tvalue: 'catch',\n   * \t});\n   * ```\n   */\n  constructor(data) {\n    const { options, ...initData } = data ?? {};\n    super({ ...initData, type: import_v106.ComponentType.StringSelect });\n    this.options = options?.map((option) => new StringSelectMenuOptionBuilder(option)) ?? [];\n  }\n  /**\n   * Adds options to this select menu.\n   *\n   * @param options - The options to add\n   */\n  addOptions(...options) {\n    const normalizedOptions = normalizeArray(options);\n    optionsLengthValidator.parse(this.options.length + normalizedOptions.length);\n    this.options.push(\n      ...normalizedOptions.map(\n        (normalizedOption) => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))\n      )\n    );\n    return this;\n  }\n  /**\n   * Sets the options for this select menu.\n   *\n   * @param options - The options to set\n   */\n  setOptions(...options) {\n    return this.spliceOptions(0, this.options.length, ...options);\n  }\n  /**\n   * Removes, replaces, or inserts options for this select menu.\n   *\n   * @remarks\n   * This method behaves similarly\n   * to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice | Array.prototype.splice()}.\n   * It's useful for modifying and adjusting the order of existing options.\n   * @example\n   * Remove the first option:\n   * ```ts\n   * selectMenu.spliceOptions(0, 1);\n   * ```\n   * @example\n   * Remove the first n option:\n   * ```ts\n   * const n = 4;\n   * selectMenu.spliceOptions(0, n);\n   * ```\n   * @example\n   * Remove the last option:\n   * ```ts\n   * selectMenu.spliceOptions(-1, 1);\n   * ```\n   * @param index - The index to start at\n   * @param deleteCount - The number of options to remove\n   * @param options - The replacing option objects or builders\n   */\n  spliceOptions(index, deleteCount, ...options) {\n    const normalizedOptions = normalizeArray(options);\n    const clone = [...this.options];\n    clone.splice(\n      index,\n      deleteCount,\n      ...normalizedOptions.map(\n        (normalizedOption) => normalizedOption instanceof StringSelectMenuOptionBuilder ? normalizedOption : new StringSelectMenuOptionBuilder(jsonOptionValidator.parse(normalizedOption))\n      )\n    );\n    optionsLengthValidator.parse(clone.length);\n    this.options.splice(0, this.options.length, ...clone);\n    return this;\n  }\n  /**\n   * {@inheritDoc BaseSelectMenuBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredSelectMenuParameters(this.options, this.data.custom_id);\n    return {\n      ...this.data,\n      options: this.options.map((option) => option.toJSON())\n    };\n  }\n};\n\n// src/components/selectMenu/UserSelectMenu.ts\nvar import_v107 = require(\"discord-api-types/v10\");\nvar UserSelectMenuBuilder = class extends BaseSelectMenuBuilder {\n  static {\n    __name(this, \"UserSelectMenuBuilder\");\n  }\n  /**\n   * Creates a new select menu from API data.\n   *\n   * @param data - The API data to create this select menu with\n   * @example\n   * Creating a select menu from an API data object:\n   * ```ts\n   * const selectMenu = new UserSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * \tplaceholder: 'select an option',\n   * \tmax_values: 2,\n   * });\n   * ```\n   * @example\n   * Creating a select menu using setters and API data:\n   * ```ts\n   * const selectMenu = new UserSelectMenuBuilder({\n   * \tcustom_id: 'a cool select menu',\n   * })\n   * \t.setMinValues(1);\n   * ```\n   */\n  constructor(data) {\n    super({ ...data, type: import_v107.ComponentType.UserSelect });\n  }\n  /**\n   * Adds default users to this auto populated select menu.\n   *\n   * @param users - The users to add\n   */\n  addDefaultUsers(...users) {\n    const normalizedValues = normalizeArray(users);\n    optionsLengthValidator.parse((this.data.default_values?.length ?? 0) + normalizedValues.length);\n    this.data.default_values ??= [];\n    this.data.default_values.push(\n      ...normalizedValues.map((id) => ({\n        id,\n        type: import_v107.SelectMenuDefaultValueType.User\n      }))\n    );\n    return this;\n  }\n  /**\n   * Sets default users for this auto populated select menu.\n   *\n   * @param users - The users to set\n   */\n  setDefaultUsers(...users) {\n    const normalizedValues = normalizeArray(users);\n    optionsLengthValidator.parse(normalizedValues.length);\n    this.data.default_values = normalizedValues.map((id) => ({\n      id,\n      type: import_v107.SelectMenuDefaultValueType.User\n    }));\n    return this;\n  }\n};\n\n// src/components/textInput/TextInput.ts\nvar import_util = require(\"@discordjs/util\");\nvar import_v109 = require(\"discord-api-types/v10\");\nvar import_fast_deep_equal = __toESM(require(\"fast-deep-equal\"));\n\n// src/components/textInput/Assertions.ts\nvar Assertions_exports3 = {};\n__export(Assertions_exports3, {\n  labelValidator: () => labelValidator,\n  maxLengthValidator: () => maxLengthValidator,\n  minLengthValidator: () => minLengthValidator,\n  placeholderValidator: () => placeholderValidator2,\n  requiredValidator: () => requiredValidator,\n  textInputStyleValidator: () => textInputStyleValidator,\n  validateRequiredParameters: () => validateRequiredParameters,\n  valueValidator: () => valueValidator\n});\nvar import_shapeshift3 = require(\"@sapphire/shapeshift\");\nvar import_v108 = require(\"discord-api-types/v10\");\nvar textInputStyleValidator = import_shapeshift3.s.nativeEnum(import_v108.TextInputStyle);\nvar minLengthValidator = import_shapeshift3.s.number().int().greaterThanOrEqual(0).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar maxLengthValidator = import_shapeshift3.s.number().int().greaterThanOrEqual(1).lessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar requiredValidator = import_shapeshift3.s.boolean();\nvar valueValidator = import_shapeshift3.s.string().lengthLessThanOrEqual(4e3).setValidationEnabled(isValidationEnabled);\nvar placeholderValidator2 = import_shapeshift3.s.string().lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar labelValidator = import_shapeshift3.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredParameters(customId, style, label) {\n  customIdValidator.parse(customId);\n  textInputStyleValidator.parse(style);\n  labelValidator.parse(label);\n}\n__name(validateRequiredParameters, \"validateRequiredParameters\");\n\n// src/components/textInput/TextInput.ts\nvar TextInputBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"TextInputBuilder\");\n  }\n  /**\n   * Creates a new text input from API data.\n   *\n   * @param data - The API data to create this text input with\n   * @example\n   * Creating a text input from an API data object:\n   * ```ts\n   * const textInput = new TextInputBuilder({\n   * \tcustom_id: 'a cool text input',\n   * \tlabel: 'Type something',\n   * \tstyle: TextInputStyle.Short,\n   * });\n   * ```\n   * @example\n   * Creating a text input using setters and API data:\n   * ```ts\n   * const textInput = new TextInputBuilder({\n   * \tlabel: 'Type something else',\n   * })\n   * \t.setCustomId('woah')\n   * \t.setStyle(TextInputStyle.Paragraph);\n   * ```\n   */\n  constructor(data) {\n    super({ type: import_v109.ComponentType.TextInput, ...data });\n  }\n  /**\n   * Sets the custom id for this text input.\n   *\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Sets the label for this text input.\n   *\n   * @param label - The label to use\n   */\n  setLabel(label) {\n    this.data.label = labelValidator.parse(label);\n    return this;\n  }\n  /**\n   * Sets the style for this text input.\n   *\n   * @param style - The style to use\n   */\n  setStyle(style) {\n    this.data.style = textInputStyleValidator.parse(style);\n    return this;\n  }\n  /**\n   * Sets the minimum length of text for this text input.\n   *\n   * @param minLength - The minimum length of text for this text input\n   */\n  setMinLength(minLength) {\n    this.data.min_length = minLengthValidator.parse(minLength);\n    return this;\n  }\n  /**\n   * Sets the maximum length of text for this text input.\n   *\n   * @param maxLength - The maximum length of text for this text input\n   */\n  setMaxLength(maxLength) {\n    this.data.max_length = maxLengthValidator.parse(maxLength);\n    return this;\n  }\n  /**\n   * Sets the placeholder for this text input.\n   *\n   * @param placeholder - The placeholder to use\n   */\n  setPlaceholder(placeholder) {\n    this.data.placeholder = placeholderValidator2.parse(placeholder);\n    return this;\n  }\n  /**\n   * Sets the value for this text input.\n   *\n   * @param value - The value to use\n   */\n  setValue(value) {\n    this.data.value = valueValidator.parse(value);\n    return this;\n  }\n  /**\n   * Sets whether this text input is required.\n   *\n   * @param required - Whether this text input is required\n   */\n  setRequired(required = true) {\n    this.data.required = requiredValidator.parse(required);\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredParameters(this.data.custom_id, this.data.style, this.data.label);\n    return {\n      ...this.data\n    };\n  }\n  /**\n   * Whether this is equal to another structure.\n   */\n  equals(other) {\n    if ((0, import_util.isJSONEncodable)(other)) {\n      return (0, import_fast_deep_equal.default)(other.toJSON(), this.data);\n    }\n    return (0, import_fast_deep_equal.default)(other, this.data);\n  }\n};\n\n// src/components/Components.ts\nfunction createComponentBuilder(data) {\n  if (data instanceof ComponentBuilder) {\n    return data;\n  }\n  switch (data.type) {\n    case import_v1010.ComponentType.ActionRow:\n      return new ActionRowBuilder(data);\n    case import_v1010.ComponentType.Button:\n      return new ButtonBuilder(data);\n    case import_v1010.ComponentType.StringSelect:\n      return new StringSelectMenuBuilder(data);\n    case import_v1010.ComponentType.TextInput:\n      return new TextInputBuilder(data);\n    case import_v1010.ComponentType.UserSelect:\n      return new UserSelectMenuBuilder(data);\n    case import_v1010.ComponentType.RoleSelect:\n      return new RoleSelectMenuBuilder(data);\n    case import_v1010.ComponentType.MentionableSelect:\n      return new MentionableSelectMenuBuilder(data);\n    case import_v1010.ComponentType.ChannelSelect:\n      return new ChannelSelectMenuBuilder(data);\n    default:\n      throw new Error(`Cannot properly serialize component type: ${data.type}`);\n  }\n}\n__name(createComponentBuilder, \"createComponentBuilder\");\n\n// src/components/ActionRow.ts\nvar ActionRowBuilder = class extends ComponentBuilder {\n  static {\n    __name(this, \"ActionRowBuilder\");\n  }\n  /**\n   * The components within this action row.\n   */\n  components;\n  /**\n   * Creates a new action row from API data.\n   *\n   * @param data - The API data to create this action row with\n   * @example\n   * Creating an action row from an API data object:\n   * ```ts\n   * const actionRow = new ActionRowBuilder({\n   * \tcomponents: [\n   * \t\t{\n   * \t\t\tcustom_id: \"custom id\",\n   * \t\t\tlabel: \"Type something\",\n   * \t\t\tstyle: TextInputStyle.Short,\n   * \t\t\ttype: ComponentType.TextInput,\n   * \t\t},\n   * \t],\n   * });\n   * ```\n   * @example\n   * Creating an action row using setters and API data:\n   * ```ts\n   * const actionRow = new ActionRowBuilder({\n   * \tcomponents: [\n   * \t\t{\n   * \t\t\tcustom_id: \"custom id\",\n   * \t\t\tlabel: \"Click me\",\n   * \t\t\tstyle: ButtonStyle.Primary,\n   * \t\t\ttype: ComponentType.Button,\n   * \t\t},\n   * \t],\n   * })\n   * \t.addComponents(button2, button3);\n   * ```\n   */\n  constructor({ components, ...data } = {}) {\n    super({ type: import_v1011.ComponentType.ActionRow, ...data });\n    this.components = components?.map((component) => createComponentBuilder(component)) ?? [];\n  }\n  /**\n   * Adds components to this action row.\n   *\n   * @param components - The components to add\n   */\n  addComponents(...components) {\n    this.components.push(...normalizeArray(components));\n    return this;\n  }\n  /**\n   * Sets components for this action row.\n   *\n   * @param components - The components to set\n   */\n  setComponents(...components) {\n    this.components.splice(0, this.components.length, ...normalizeArray(components));\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    return {\n      ...this.data,\n      components: this.components.map((component) => component.toJSON())\n    };\n  }\n};\n\n// src/interactions/modals/Assertions.ts\nvar Assertions_exports4 = {};\n__export(Assertions_exports4, {\n  componentsValidator: () => componentsValidator,\n  titleValidator: () => titleValidator,\n  validateRequiredParameters: () => validateRequiredParameters2\n});\nvar import_shapeshift4 = require(\"@sapphire/shapeshift\");\nvar titleValidator = import_shapeshift4.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(45).setValidationEnabled(isValidationEnabled);\nvar componentsValidator = import_shapeshift4.s.instance(ActionRowBuilder).array().lengthGreaterThanOrEqual(1).setValidationEnabled(isValidationEnabled);\nfunction validateRequiredParameters2(customId, title, components) {\n  customIdValidator.parse(customId);\n  titleValidator.parse(title);\n  componentsValidator.parse(components);\n}\n__name(validateRequiredParameters2, \"validateRequiredParameters\");\n\n// src/interactions/modals/Modal.ts\nvar ModalBuilder = class {\n  static {\n    __name(this, \"ModalBuilder\");\n  }\n  /**\n   * The API data associated with this modal.\n   */\n  data;\n  /**\n   * The components within this modal.\n   */\n  components = [];\n  /**\n   * Creates a new modal from API data.\n   *\n   * @param data - The API data to create this modal with\n   */\n  constructor({ components, ...data } = {}) {\n    this.data = { ...data };\n    this.components = components?.map((component) => createComponentBuilder(component)) ?? [];\n  }\n  /**\n   * Sets the title of this modal.\n   *\n   * @param title - The title to use\n   */\n  setTitle(title) {\n    this.data.title = titleValidator.parse(title);\n    return this;\n  }\n  /**\n   * Sets the custom id of this modal.\n   *\n   * @param customId - The custom id to use\n   */\n  setCustomId(customId) {\n    this.data.custom_id = customIdValidator.parse(customId);\n    return this;\n  }\n  /**\n   * Adds components to this modal.\n   *\n   * @param components - The components to add\n   */\n  addComponents(...components) {\n    this.components.push(\n      ...normalizeArray(components).map(\n        (component) => component instanceof ActionRowBuilder ? component : new ActionRowBuilder(component)\n      )\n    );\n    return this;\n  }\n  /**\n   * Sets components for this modal.\n   *\n   * @param components - The components to set\n   */\n  setComponents(...components) {\n    this.components.splice(0, this.components.length, ...normalizeArray(components));\n    return this;\n  }\n  /**\n   * {@inheritDoc ComponentBuilder.toJSON}\n   */\n  toJSON() {\n    validateRequiredParameters2(this.data.custom_id, this.data.title, this.components);\n    return {\n      ...this.data,\n      components: this.components.map((component) => component.toJSON())\n    };\n  }\n};\n\n// src/interactions/slashCommands/Assertions.ts\nvar Assertions_exports5 = {};\n__export(Assertions_exports5, {\n  assertReturnOfBuilder: () => assertReturnOfBuilder,\n  contextsPredicate: () => contextsPredicate,\n  integrationTypesPredicate: () => integrationTypesPredicate,\n  localizationMapPredicate: () => localizationMapPredicate,\n  validateChoicesLength: () => validateChoicesLength,\n  validateDMPermission: () => validateDMPermission,\n  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions,\n  validateDefaultPermission: () => validateDefaultPermission,\n  validateDescription: () => validateDescription,\n  validateLocale: () => validateLocale,\n  validateLocalizationMap: () => validateLocalizationMap,\n  validateMaxOptionsLength: () => validateMaxOptionsLength,\n  validateNSFW: () => validateNSFW,\n  validateName: () => validateName,\n  validateRequired: () => validateRequired,\n  validateRequiredParameters: () => validateRequiredParameters3\n});\nvar import_shapeshift5 = require(\"@sapphire/shapeshift\");\nvar import_v1012 = require(\"discord-api-types/v10\");\nvar namePredicate = import_shapeshift5.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^[\\p{Ll}\\p{Lm}\\p{Lo}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}_-]+$/u).setValidationEnabled(isValidationEnabled);\nfunction validateName(name) {\n  namePredicate.parse(name);\n}\n__name(validateName, \"validateName\");\nvar descriptionPredicate2 = import_shapeshift5.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100).setValidationEnabled(isValidationEnabled);\nvar localePredicate = import_shapeshift5.s.nativeEnum(import_v1012.Locale);\nfunction validateDescription(description) {\n  descriptionPredicate2.parse(description);\n}\n__name(validateDescription, \"validateDescription\");\nvar maxArrayLengthPredicate = import_shapeshift5.s.unknown().array().lengthLessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateLocale(locale) {\n  return localePredicate.parse(locale);\n}\n__name(validateLocale, \"validateLocale\");\nfunction validateMaxOptionsLength(options) {\n  maxArrayLengthPredicate.parse(options);\n}\n__name(validateMaxOptionsLength, \"validateMaxOptionsLength\");\nfunction validateRequiredParameters3(name, description, options) {\n  validateName(name);\n  validateDescription(description);\n  validateMaxOptionsLength(options);\n}\n__name(validateRequiredParameters3, \"validateRequiredParameters\");\nvar booleanPredicate = import_shapeshift5.s.boolean();\nfunction validateDefaultPermission(value) {\n  booleanPredicate.parse(value);\n}\n__name(validateDefaultPermission, \"validateDefaultPermission\");\nfunction validateRequired(required) {\n  booleanPredicate.parse(required);\n}\n__name(validateRequired, \"validateRequired\");\nvar choicesLengthPredicate = import_shapeshift5.s.number().lessThanOrEqual(25).setValidationEnabled(isValidationEnabled);\nfunction validateChoicesLength(amountAdding, choices) {\n  choicesLengthPredicate.parse((choices?.length ?? 0) + amountAdding);\n}\n__name(validateChoicesLength, \"validateChoicesLength\");\nfunction assertReturnOfBuilder(input, ExpectedInstanceOf) {\n  import_shapeshift5.s.instance(ExpectedInstanceOf).parse(input);\n}\n__name(assertReturnOfBuilder, \"assertReturnOfBuilder\");\nvar localizationMapPredicate = import_shapeshift5.s.object(Object.fromEntries(Object.values(import_v1012.Locale).map((locale) => [locale, import_shapeshift5.s.string().nullish()]))).strict().nullish().setValidationEnabled(isValidationEnabled);\nfunction validateLocalizationMap(value) {\n  localizationMapPredicate.parse(value);\n}\n__name(validateLocalizationMap, \"validateLocalizationMap\");\nvar dmPermissionPredicate = import_shapeshift5.s.boolean().nullish();\nfunction validateDMPermission(value) {\n  dmPermissionPredicate.parse(value);\n}\n__name(validateDMPermission, \"validateDMPermission\");\nvar memberPermissionPredicate = import_shapeshift5.s.union([\n  import_shapeshift5.s.bigint().transform((value) => value.toString()),\n  import_shapeshift5.s.number().safeInt().transform((value) => value.toString()),\n  import_shapeshift5.s.string().regex(/^\\d+$/)\n]).nullish();\nfunction validateDefaultMemberPermissions(permissions) {\n  return memberPermissionPredicate.parse(permissions);\n}\n__name(validateDefaultMemberPermissions, \"validateDefaultMemberPermissions\");\nfunction validateNSFW(value) {\n  booleanPredicate.parse(value);\n}\n__name(validateNSFW, \"validateNSFW\");\nvar contextsPredicate = import_shapeshift5.s.array(\n  import_shapeshift5.s.nativeEnum(import_v1012.InteractionContextType).setValidationEnabled(isValidationEnabled)\n);\nvar integrationTypesPredicate = import_shapeshift5.s.array(\n  import_shapeshift5.s.nativeEnum(import_v1012.ApplicationIntegrationType).setValidationEnabled(isValidationEnabled)\n);\n\n// src/interactions/slashCommands/SlashCommandBuilder.ts\nvar import_ts_mixer6 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/NameAndDescription.ts\nvar SharedNameAndDescription = class {\n  static {\n    __name(this, \"SharedNameAndDescription\");\n  }\n  /**\n   * The name of this command.\n   */\n  name;\n  /**\n   * The name localizations of this command.\n   */\n  name_localizations;\n  /**\n   * The description of this command.\n   */\n  description;\n  /**\n   * The description localizations of this command.\n   */\n  description_localizations;\n  /**\n   * Sets the name of this command.\n   *\n   * @param name - The name to use\n   */\n  setName(name) {\n    validateName(name);\n    Reflect.set(this, \"name\", name);\n    return this;\n  }\n  /**\n   * Sets the description of this command.\n   *\n   * @param description - The description to use\n   */\n  setDescription(description) {\n    validateDescription(description);\n    Reflect.set(this, \"description\", description);\n    return this;\n  }\n  /**\n   * Sets a name localization for this command.\n   *\n   * @param locale - The locale to set\n   * @param localizedName - The localized name for the given `locale`\n   */\n  setNameLocalization(locale, localizedName) {\n    if (!this.name_localizations) {\n      Reflect.set(this, \"name_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedName === null) {\n      this.name_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateName(localizedName);\n    this.name_localizations[parsedLocale] = localizedName;\n    return this;\n  }\n  /**\n   * Sets the name localizations for this command.\n   *\n   * @param localizedNames - The object of localized names to set\n   */\n  setNameLocalizations(localizedNames) {\n    if (localizedNames === null) {\n      Reflect.set(this, \"name_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"name_localizations\", {});\n    for (const args of Object.entries(localizedNames)) {\n      this.setNameLocalization(...args);\n    }\n    return this;\n  }\n  /**\n   * Sets a description localization for this command.\n   *\n   * @param locale - The locale to set\n   * @param localizedDescription - The localized description for the given locale\n   */\n  setDescriptionLocalization(locale, localizedDescription) {\n    if (!this.description_localizations) {\n      Reflect.set(this, \"description_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedDescription === null) {\n      this.description_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateDescription(localizedDescription);\n    this.description_localizations[parsedLocale] = localizedDescription;\n    return this;\n  }\n  /**\n   * Sets the description localizations for this command.\n   *\n   * @param localizedDescriptions - The object of localized descriptions to set\n   */\n  setDescriptionLocalizations(localizedDescriptions) {\n    if (localizedDescriptions === null) {\n      Reflect.set(this, \"description_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"description_localizations\", {});\n    for (const args of Object.entries(localizedDescriptions)) {\n      this.setDescriptionLocalization(...args);\n    }\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/mixins/SharedSlashCommand.ts\nvar import_v1013 = require(\"discord-api-types/v10\");\nvar SharedSlashCommand = class {\n  static {\n    __name(this, \"SharedSlashCommand\");\n  }\n  name = void 0;\n  name_localizations;\n  description = void 0;\n  description_localizations;\n  options = [];\n  contexts;\n  /**\n   * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.\n   */\n  default_permission = void 0;\n  default_member_permissions = void 0;\n  /**\n   * @deprecated Use {@link SharedSlashCommand.contexts} instead.\n   */\n  dm_permission = void 0;\n  integration_types;\n  nsfw = void 0;\n  /**\n   * Sets the contexts of this command.\n   *\n   * @param contexts - The contexts\n   */\n  setContexts(...contexts) {\n    Reflect.set(this, \"contexts\", contextsPredicate.parse(normalizeArray(contexts)));\n    return this;\n  }\n  /**\n   * Sets the integration types of this command.\n   *\n   * @param integrationTypes - The integration types\n   */\n  setIntegrationTypes(...integrationTypes) {\n    Reflect.set(this, \"integration_types\", integrationTypesPredicate.parse(normalizeArray(integrationTypes)));\n    return this;\n  }\n  /**\n   * Sets whether the command is enabled by default when the application is added to a guild.\n   *\n   * @remarks\n   * If set to `false`, you will have to later `PUT` the permissions for this command.\n   * @param value - Whether or not to enable this command by default\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.\n   */\n  setDefaultPermission(value) {\n    validateDefaultPermission(value);\n    Reflect.set(this, \"default_permission\", value);\n    return this;\n  }\n  /**\n   * Sets the default permissions a member should have in order to run the command.\n   *\n   * @remarks\n   * You can set this to `'0'` to disable the command by default.\n   * @param permissions - The permissions bit field to set\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   */\n  setDefaultMemberPermissions(permissions) {\n    const permissionValue = validateDefaultMemberPermissions(permissions);\n    Reflect.set(this, \"default_member_permissions\", permissionValue);\n    return this;\n  }\n  /**\n   * Sets if the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This method is only for global commands.\n   * @param enabled - Whether the command should be enabled in direct messages\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   * @deprecated\n   * Use {@link SharedSlashCommand.setContexts} instead.\n   */\n  setDMPermission(enabled) {\n    validateDMPermission(enabled);\n    Reflect.set(this, \"dm_permission\", enabled);\n    return this;\n  }\n  /**\n   * Sets whether this command is NSFW.\n   *\n   * @param nsfw - Whether this command is NSFW\n   */\n  setNSFW(nsfw = true) {\n    validateNSFW(nsfw);\n    Reflect.set(this, \"nsfw\", nsfw);\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    validateLocalizationMap(this.name_localizations);\n    validateLocalizationMap(this.description_localizations);\n    return {\n      ...this,\n      type: import_v1013.ApplicationCommandType.ChatInput,\n      options: this.options.map((option) => option.toJSON())\n    };\n  }\n};\n\n// src/interactions/slashCommands/options/attachment.ts\nvar import_v1014 = require(\"discord-api-types/v10\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionBase.ts\nvar ApplicationCommandOptionBase = class extends SharedNameAndDescription {\n  static {\n    __name(this, \"ApplicationCommandOptionBase\");\n  }\n  /**\n   * Whether this option is required.\n   *\n   * @defaultValue `false`\n   */\n  required = false;\n  /**\n   * Sets whether this option is required.\n   *\n   * @param required - Whether this option should be required\n   */\n  setRequired(required) {\n    validateRequired(required);\n    Reflect.set(this, \"required\", required);\n    return this;\n  }\n  /**\n   * This method runs required validators on this builder.\n   */\n  runRequiredValidations() {\n    validateRequiredParameters3(this.name, this.description, []);\n    validateLocalizationMap(this.name_localizations);\n    validateLocalizationMap(this.description_localizations);\n    validateRequired(this.required);\n  }\n};\n\n// src/interactions/slashCommands/options/attachment.ts\nvar SlashCommandAttachmentOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandAttachmentOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1014.ApplicationCommandOptionType.Attachment;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return { ...this };\n  }\n};\n\n// src/interactions/slashCommands/options/boolean.ts\nvar import_v1015 = require(\"discord-api-types/v10\");\nvar SlashCommandBooleanOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandBooleanOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1015.ApplicationCommandOptionType.Boolean;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return { ...this };\n  }\n};\n\n// src/interactions/slashCommands/options/channel.ts\nvar import_v1017 = require(\"discord-api-types/v10\");\nvar import_ts_mixer = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionChannelTypesMixin.ts\nvar import_shapeshift6 = require(\"@sapphire/shapeshift\");\nvar import_v1016 = require(\"discord-api-types/v10\");\nvar allowedChannelTypes = [\n  import_v1016.ChannelType.GuildText,\n  import_v1016.ChannelType.GuildVoice,\n  import_v1016.ChannelType.GuildCategory,\n  import_v1016.ChannelType.GuildAnnouncement,\n  import_v1016.ChannelType.AnnouncementThread,\n  import_v1016.ChannelType.PublicThread,\n  import_v1016.ChannelType.PrivateThread,\n  import_v1016.ChannelType.GuildStageVoice,\n  import_v1016.ChannelType.GuildForum,\n  import_v1016.ChannelType.GuildMedia\n];\nvar channelTypesPredicate = import_shapeshift6.s.array(import_shapeshift6.s.union(allowedChannelTypes.map((type) => import_shapeshift6.s.literal(type))));\nvar ApplicationCommandOptionChannelTypesMixin = class {\n  static {\n    __name(this, \"ApplicationCommandOptionChannelTypesMixin\");\n  }\n  /**\n   * The channel types of this option.\n   */\n  channel_types;\n  /**\n   * Adds channel types to this option.\n   *\n   * @param channelTypes - The channel types\n   */\n  addChannelTypes(...channelTypes) {\n    if (this.channel_types === void 0) {\n      Reflect.set(this, \"channel_types\", []);\n    }\n    this.channel_types.push(...channelTypesPredicate.parse(normalizeArray(channelTypes)));\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/options/channel.ts\nvar SlashCommandChannelOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1017.ApplicationCommandOptionType.Channel;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return { ...this };\n  }\n};\n__name(SlashCommandChannelOption, \"SlashCommandChannelOption\");\nSlashCommandChannelOption = __decorateClass([\n  (0, import_ts_mixer.mix)(ApplicationCommandOptionChannelTypesMixin)\n], SlashCommandChannelOption);\n\n// src/interactions/slashCommands/options/integer.ts\nvar import_shapeshift9 = require(\"@sapphire/shapeshift\");\nvar import_v1019 = require(\"discord-api-types/v10\");\nvar import_ts_mixer2 = require(\"ts-mixer\");\n\n// src/interactions/slashCommands/mixins/ApplicationCommandNumericOptionMinMaxValueMixin.ts\nvar ApplicationCommandNumericOptionMinMaxValueMixin = class {\n  static {\n    __name(this, \"ApplicationCommandNumericOptionMinMaxValueMixin\");\n  }\n  /**\n   * The maximum value of this option.\n   */\n  max_value;\n  /**\n   * The minimum value of this option.\n   */\n  min_value;\n};\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionWithAutocompleteMixin.ts\nvar import_shapeshift7 = require(\"@sapphire/shapeshift\");\nvar booleanPredicate2 = import_shapeshift7.s.boolean();\nvar ApplicationCommandOptionWithAutocompleteMixin = class {\n  static {\n    __name(this, \"ApplicationCommandOptionWithAutocompleteMixin\");\n  }\n  /**\n   * Whether this option utilizes autocomplete.\n   */\n  autocomplete;\n  /**\n   * The type of this option.\n   *\n   * @privateRemarks Since this is present and this is a mixin, this is needed.\n   */\n  type;\n  /**\n   * Whether this option uses autocomplete.\n   *\n   * @param autocomplete - Whether this option should use autocomplete\n   */\n  setAutocomplete(autocomplete) {\n    booleanPredicate2.parse(autocomplete);\n    if (autocomplete && \"choices\" in this && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    Reflect.set(this, \"autocomplete\", autocomplete);\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/mixins/ApplicationCommandOptionWithChoicesMixin.ts\nvar import_shapeshift8 = require(\"@sapphire/shapeshift\");\nvar import_v1018 = require(\"discord-api-types/v10\");\nvar stringPredicate = import_shapeshift8.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(100);\nvar numberPredicate = import_shapeshift8.s.number().greaterThan(Number.NEGATIVE_INFINITY).lessThan(Number.POSITIVE_INFINITY);\nvar choicesPredicate = import_shapeshift8.s.object({\n  name: stringPredicate,\n  name_localizations: localizationMapPredicate,\n  value: import_shapeshift8.s.union([stringPredicate, numberPredicate])\n}).array();\nvar ApplicationCommandOptionWithChoicesMixin = class {\n  static {\n    __name(this, \"ApplicationCommandOptionWithChoicesMixin\");\n  }\n  /**\n   * The choices of this option.\n   */\n  choices;\n  /**\n   * The type of this option.\n   *\n   * @privateRemarks Since this is present and this is a mixin, this is needed.\n   */\n  type;\n  /**\n   * Adds multiple choices to this option.\n   *\n   * @param choices - The choices to add\n   */\n  addChoices(...choices) {\n    const normalizedChoices = normalizeArray(choices);\n    if (normalizedChoices.length > 0 && \"autocomplete\" in this && this.autocomplete) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    choicesPredicate.parse(normalizedChoices);\n    if (this.choices === void 0) {\n      Reflect.set(this, \"choices\", []);\n    }\n    validateChoicesLength(normalizedChoices.length, this.choices);\n    for (const { name, name_localizations, value } of normalizedChoices) {\n      if (this.type === import_v1018.ApplicationCommandOptionType.String) {\n        stringPredicate.parse(value);\n      } else {\n        numberPredicate.parse(value);\n      }\n      this.choices.push({ name, name_localizations, value });\n    }\n    return this;\n  }\n  /**\n   * Sets multiple choices for this option.\n   *\n   * @param choices - The choices to set\n   */\n  setChoices(...choices) {\n    const normalizedChoices = normalizeArray(choices);\n    if (normalizedChoices.length > 0 && \"autocomplete\" in this && this.autocomplete) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    choicesPredicate.parse(normalizedChoices);\n    Reflect.set(this, \"choices\", []);\n    this.addChoices(normalizedChoices);\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/options/integer.ts\nvar numberValidator = import_shapeshift9.s.number().int();\nvar SlashCommandIntegerOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1019.ApplicationCommandOptionType.Integer;\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n   */\n  setMaxValue(max) {\n    numberValidator.parse(max);\n    Reflect.set(this, \"max_value\", max);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n   */\n  setMinValue(min) {\n    numberValidator.parse(min);\n    Reflect.set(this, \"min_value\", min);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return { ...this };\n  }\n};\n__name(SlashCommandIntegerOption, \"SlashCommandIntegerOption\");\nSlashCommandIntegerOption = __decorateClass([\n  (0, import_ts_mixer2.mix)(\n    ApplicationCommandNumericOptionMinMaxValueMixin,\n    ApplicationCommandOptionWithAutocompleteMixin,\n    ApplicationCommandOptionWithChoicesMixin\n  )\n], SlashCommandIntegerOption);\n\n// src/interactions/slashCommands/options/mentionable.ts\nvar import_v1020 = require(\"discord-api-types/v10\");\nvar SlashCommandMentionableOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandMentionableOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1020.ApplicationCommandOptionType.Mentionable;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return { ...this };\n  }\n};\n\n// src/interactions/slashCommands/options/number.ts\nvar import_shapeshift10 = require(\"@sapphire/shapeshift\");\nvar import_v1021 = require(\"discord-api-types/v10\");\nvar import_ts_mixer3 = require(\"ts-mixer\");\nvar numberValidator2 = import_shapeshift10.s.number();\nvar SlashCommandNumberOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1021.ApplicationCommandOptionType.Number;\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMaxValue}\n   */\n  setMaxValue(max) {\n    numberValidator2.parse(max);\n    Reflect.set(this, \"max_value\", max);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandNumericOptionMinMaxValueMixin.setMinValue}\n   */\n  setMinValue(min) {\n    numberValidator2.parse(min);\n    Reflect.set(this, \"min_value\", min);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return { ...this };\n  }\n};\n__name(SlashCommandNumberOption, \"SlashCommandNumberOption\");\nSlashCommandNumberOption = __decorateClass([\n  (0, import_ts_mixer3.mix)(\n    ApplicationCommandNumericOptionMinMaxValueMixin,\n    ApplicationCommandOptionWithAutocompleteMixin,\n    ApplicationCommandOptionWithChoicesMixin\n  )\n], SlashCommandNumberOption);\n\n// src/interactions/slashCommands/options/role.ts\nvar import_v1022 = require(\"discord-api-types/v10\");\nvar SlashCommandRoleOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandRoleOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1022.ApplicationCommandOptionType.Role;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return { ...this };\n  }\n};\n\n// src/interactions/slashCommands/options/string.ts\nvar import_shapeshift11 = require(\"@sapphire/shapeshift\");\nvar import_v1023 = require(\"discord-api-types/v10\");\nvar import_ts_mixer4 = require(\"ts-mixer\");\nvar minLengthValidator2 = import_shapeshift11.s.number().greaterThanOrEqual(0).lessThanOrEqual(6e3);\nvar maxLengthValidator2 = import_shapeshift11.s.number().greaterThanOrEqual(1).lessThanOrEqual(6e3);\nvar SlashCommandStringOption = class extends ApplicationCommandOptionBase {\n  /**\n   * The type of this option.\n   */\n  type = import_v1023.ApplicationCommandOptionType.String;\n  /**\n   * The maximum length of this option.\n   */\n  max_length;\n  /**\n   * The minimum length of this option.\n   */\n  min_length;\n  /**\n   * Sets the maximum length of this string option.\n   *\n   * @param max - The maximum length this option can be\n   */\n  setMaxLength(max) {\n    maxLengthValidator2.parse(max);\n    Reflect.set(this, \"max_length\", max);\n    return this;\n  }\n  /**\n   * Sets the minimum length of this string option.\n   *\n   * @param min - The minimum length this option can be\n   */\n  setMinLength(min) {\n    minLengthValidator2.parse(min);\n    Reflect.set(this, \"min_length\", min);\n    return this;\n  }\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    if (this.autocomplete && Array.isArray(this.choices) && this.choices.length > 0) {\n      throw new RangeError(\"Autocomplete and choices are mutually exclusive to each other.\");\n    }\n    return { ...this };\n  }\n};\n__name(SlashCommandStringOption, \"SlashCommandStringOption\");\nSlashCommandStringOption = __decorateClass([\n  (0, import_ts_mixer4.mix)(ApplicationCommandOptionWithAutocompleteMixin, ApplicationCommandOptionWithChoicesMixin)\n], SlashCommandStringOption);\n\n// src/interactions/slashCommands/options/user.ts\nvar import_v1024 = require(\"discord-api-types/v10\");\nvar SlashCommandUserOption = class extends ApplicationCommandOptionBase {\n  static {\n    __name(this, \"SlashCommandUserOption\");\n  }\n  /**\n   * The type of this option.\n   */\n  type = import_v1024.ApplicationCommandOptionType.User;\n  /**\n   * {@inheritDoc ApplicationCommandOptionBase.toJSON}\n   */\n  toJSON() {\n    this.runRequiredValidations();\n    return { ...this };\n  }\n};\n\n// src/interactions/slashCommands/mixins/SharedSlashCommandOptions.ts\nvar SharedSlashCommandOptions = class {\n  static {\n    __name(this, \"SharedSlashCommandOptions\");\n  }\n  options;\n  /**\n   * Adds a boolean option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addBooleanOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n  }\n  /**\n   * Adds a user option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addUserOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandUserOption);\n  }\n  /**\n   * Adds a channel option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addChannelOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n  }\n  /**\n   * Adds a role option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addRoleOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n  }\n  /**\n   * Adds an attachment option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addAttachmentOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandAttachmentOption);\n  }\n  /**\n   * Adds a mentionable option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addMentionableOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n  }\n  /**\n   * Adds a string option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addStringOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandStringOption);\n  }\n  /**\n   * Adds an integer option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addIntegerOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n  }\n  /**\n   * Adds a number option.\n   *\n   * @param input - A function that returns an option builder or an already built builder\n   */\n  addNumberOption(input) {\n    return this._sharedAddOptionMethod(input, SlashCommandNumberOption);\n  }\n  /**\n   * Where the actual adding magic happens. ✨\n   *\n   * @param input - The input. What else?\n   * @param Instance - The instance of whatever is being added\n   * @internal\n   */\n  _sharedAddOptionMethod(input, Instance) {\n    const { options } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new Instance()) : input;\n    assertReturnOfBuilder(result, Instance);\n    options.push(result);\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/SlashCommandSubcommands.ts\nvar import_v1025 = require(\"discord-api-types/v10\");\nvar import_ts_mixer5 = require(\"ts-mixer\");\nvar SlashCommandSubcommandGroupBuilder = class {\n  /**\n   * The name of this subcommand group.\n   */\n  name = void 0;\n  /**\n   * The description of this subcommand group.\n   */\n  description = void 0;\n  /**\n   * The subcommands within this subcommand group.\n   */\n  options = [];\n  /**\n   * Adds a new subcommand to this group.\n   *\n   * @param input - A function that returns a subcommand builder or an already built builder\n   */\n  addSubcommand(input) {\n    const { options } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n    options.push(result);\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    return {\n      type: import_v1025.ApplicationCommandOptionType.SubcommandGroup,\n      name: this.name,\n      name_localizations: this.name_localizations,\n      description: this.description,\n      description_localizations: this.description_localizations,\n      options: this.options.map((option) => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandSubcommandGroupBuilder, \"SlashCommandSubcommandGroupBuilder\");\nSlashCommandSubcommandGroupBuilder = __decorateClass([\n  (0, import_ts_mixer5.mix)(SharedNameAndDescription)\n], SlashCommandSubcommandGroupBuilder);\nvar SlashCommandSubcommandBuilder = class {\n  /**\n   * The name of this subcommand.\n   */\n  name = void 0;\n  /**\n   * The description of this subcommand.\n   */\n  description = void 0;\n  /**\n   * The options within this subcommand.\n   */\n  options = [];\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters3(this.name, this.description, this.options);\n    return {\n      type: import_v1025.ApplicationCommandOptionType.Subcommand,\n      name: this.name,\n      name_localizations: this.name_localizations,\n      description: this.description,\n      description_localizations: this.description_localizations,\n      options: this.options.map((option) => option.toJSON())\n    };\n  }\n};\n__name(SlashCommandSubcommandBuilder, \"SlashCommandSubcommandBuilder\");\nSlashCommandSubcommandBuilder = __decorateClass([\n  (0, import_ts_mixer5.mix)(SharedNameAndDescription, SharedSlashCommandOptions)\n], SlashCommandSubcommandBuilder);\n\n// src/interactions/slashCommands/mixins/SharedSubcommands.ts\nvar SharedSlashCommandSubcommands = class {\n  static {\n    __name(this, \"SharedSlashCommandSubcommands\");\n  }\n  options = [];\n  /**\n   * Adds a new subcommand group to this command.\n   *\n   * @param input - A function that returns a subcommand group builder or an already built builder\n   */\n  addSubcommandGroup(input) {\n    const { options } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandGroupBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandGroupBuilder);\n    options.push(result);\n    return this;\n  }\n  /**\n   * Adds a new subcommand to this command.\n   *\n   * @param input - A function that returns a subcommand builder or an already built builder\n   */\n  addSubcommand(input) {\n    const { options } = this;\n    validateMaxOptionsLength(options);\n    const result = typeof input === \"function\" ? input(new SlashCommandSubcommandBuilder()) : input;\n    assertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n    options.push(result);\n    return this;\n  }\n};\n\n// src/interactions/slashCommands/SlashCommandBuilder.ts\nvar SlashCommandBuilder = class {\n  /**\n   * The name of this command.\n   */\n  name = void 0;\n  /**\n   * The name localizations of this command.\n   */\n  name_localizations;\n  /**\n   * The description of this command.\n   */\n  description = void 0;\n  /**\n   * The description localizations of this command.\n   */\n  description_localizations;\n  /**\n   * The options of this command.\n   */\n  options = [];\n  /**\n   * The contexts for this command.\n   */\n  contexts;\n  /**\n   * Whether this command is enabled by default when the application is added to a guild.\n   *\n   * @deprecated Use {@link SharedSlashCommand.setDefaultMemberPermissions} or {@link SharedSlashCommand.setDMPermission} instead.\n   */\n  default_permission = void 0;\n  /**\n   * The set of permissions represented as a bit set for the command.\n   */\n  default_member_permissions = void 0;\n  /**\n   * Indicates whether the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This property is only for global commands.\n   * @deprecated\n   * Use {@link SlashCommandBuilder.contexts} instead.\n   */\n  dm_permission = void 0;\n  /**\n   * The integration types for this command.\n   */\n  integration_types;\n  /**\n   * Whether this command is NSFW.\n   */\n  nsfw = void 0;\n};\n__name(SlashCommandBuilder, \"SlashCommandBuilder\");\nSlashCommandBuilder = __decorateClass([\n  (0, import_ts_mixer6.mix)(SharedSlashCommandOptions, SharedNameAndDescription, SharedSlashCommandSubcommands, SharedSlashCommand)\n], SlashCommandBuilder);\n\n// src/interactions/contextMenuCommands/Assertions.ts\nvar Assertions_exports6 = {};\n__export(Assertions_exports6, {\n  contextsPredicate: () => contextsPredicate2,\n  integrationTypesPredicate: () => integrationTypesPredicate2,\n  validateDMPermission: () => validateDMPermission2,\n  validateDefaultMemberPermissions: () => validateDefaultMemberPermissions2,\n  validateDefaultPermission: () => validateDefaultPermission2,\n  validateName: () => validateName2,\n  validateRequiredParameters: () => validateRequiredParameters4,\n  validateType: () => validateType\n});\nvar import_shapeshift12 = require(\"@sapphire/shapeshift\");\nvar import_v1026 = require(\"discord-api-types/v10\");\nvar namePredicate2 = import_shapeshift12.s.string().lengthGreaterThanOrEqual(1).lengthLessThanOrEqual(32).regex(/^( *[\\p{P}\\p{L}\\p{N}\\p{sc=Devanagari}\\p{sc=Thai}]+ *)+$/u).setValidationEnabled(isValidationEnabled);\nvar typePredicate = import_shapeshift12.s.union([import_shapeshift12.s.literal(import_v1026.ApplicationCommandType.User), import_shapeshift12.s.literal(import_v1026.ApplicationCommandType.Message)]).setValidationEnabled(isValidationEnabled);\nvar booleanPredicate3 = import_shapeshift12.s.boolean();\nfunction validateDefaultPermission2(value) {\n  booleanPredicate3.parse(value);\n}\n__name(validateDefaultPermission2, \"validateDefaultPermission\");\nfunction validateName2(name) {\n  namePredicate2.parse(name);\n}\n__name(validateName2, \"validateName\");\nfunction validateType(type) {\n  typePredicate.parse(type);\n}\n__name(validateType, \"validateType\");\nfunction validateRequiredParameters4(name, type) {\n  validateName2(name);\n  validateType(type);\n}\n__name(validateRequiredParameters4, \"validateRequiredParameters\");\nvar dmPermissionPredicate2 = import_shapeshift12.s.boolean().nullish();\nfunction validateDMPermission2(value) {\n  dmPermissionPredicate2.parse(value);\n}\n__name(validateDMPermission2, \"validateDMPermission\");\nvar memberPermissionPredicate2 = import_shapeshift12.s.union([\n  import_shapeshift12.s.bigint().transform((value) => value.toString()),\n  import_shapeshift12.s.number().safeInt().transform((value) => value.toString()),\n  import_shapeshift12.s.string().regex(/^\\d+$/)\n]).nullish();\nfunction validateDefaultMemberPermissions2(permissions) {\n  return memberPermissionPredicate2.parse(permissions);\n}\n__name(validateDefaultMemberPermissions2, \"validateDefaultMemberPermissions\");\nvar contextsPredicate2 = import_shapeshift12.s.array(\n  import_shapeshift12.s.nativeEnum(import_v1026.InteractionContextType).setValidationEnabled(isValidationEnabled)\n);\nvar integrationTypesPredicate2 = import_shapeshift12.s.array(\n  import_shapeshift12.s.nativeEnum(import_v1026.ApplicationIntegrationType).setValidationEnabled(isValidationEnabled)\n);\n\n// src/interactions/contextMenuCommands/ContextMenuCommandBuilder.ts\nvar ContextMenuCommandBuilder = class {\n  static {\n    __name(this, \"ContextMenuCommandBuilder\");\n  }\n  /**\n   * The name of this command.\n   */\n  name = void 0;\n  /**\n   * The name localizations of this command.\n   */\n  name_localizations;\n  /**\n   * The type of this command.\n   */\n  type = void 0;\n  /**\n   * The contexts for this command.\n   */\n  contexts;\n  /**\n   * Whether this command is enabled by default when the application is added to a guild.\n   *\n   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n   */\n  default_permission = void 0;\n  /**\n   * The set of permissions represented as a bit set for the command.\n   */\n  default_member_permissions = void 0;\n  /**\n   * Indicates whether the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This property is only for global commands.\n   * @deprecated\n   * Use {@link ContextMenuCommandBuilder.contexts} instead.\n   */\n  dm_permission = void 0;\n  /**\n   * The integration types for this command.\n   */\n  integration_types;\n  /**\n   * Sets the contexts of this command.\n   *\n   * @param contexts - The contexts\n   */\n  setContexts(...contexts) {\n    Reflect.set(this, \"contexts\", contextsPredicate2.parse(normalizeArray(contexts)));\n    return this;\n  }\n  /**\n   * Sets integration types of this command.\n   *\n   * @param integrationTypes - The integration types\n   */\n  setIntegrationTypes(...integrationTypes) {\n    Reflect.set(this, \"integration_types\", integrationTypesPredicate2.parse(normalizeArray(integrationTypes)));\n    return this;\n  }\n  /**\n   * Sets the name of this command.\n   *\n   * @param name - The name to use\n   */\n  setName(name) {\n    validateName2(name);\n    Reflect.set(this, \"name\", name);\n    return this;\n  }\n  /**\n   * Sets the type of this command.\n   *\n   * @param type - The type to use\n   */\n  setType(type) {\n    validateType(type);\n    Reflect.set(this, \"type\", type);\n    return this;\n  }\n  /**\n   * Sets whether the command is enabled by default when the application is added to a guild.\n   *\n   * @remarks\n   * If set to `false`, you will have to later `PUT` the permissions for this command.\n   * @param value - Whether to enable this command by default\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   * @deprecated Use {@link ContextMenuCommandBuilder.setDefaultMemberPermissions} or {@link ContextMenuCommandBuilder.setDMPermission} instead.\n   */\n  setDefaultPermission(value) {\n    validateDefaultPermission2(value);\n    Reflect.set(this, \"default_permission\", value);\n    return this;\n  }\n  /**\n   * Sets the default permissions a member should have in order to run this command.\n   *\n   * @remarks\n   * You can set this to `'0'` to disable the command by default.\n   * @param permissions - The permissions bit field to set\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   */\n  setDefaultMemberPermissions(permissions) {\n    const permissionValue = validateDefaultMemberPermissions2(permissions);\n    Reflect.set(this, \"default_member_permissions\", permissionValue);\n    return this;\n  }\n  /**\n   * Sets if the command is available in direct messages with the application.\n   *\n   * @remarks\n   * By default, commands are visible. This method is only for global commands.\n   * @param enabled - Whether the command should be enabled in direct messages\n   * @see {@link https://discord.com/developers/docs/interactions/application-commands#permissions}\n   * @deprecated Use {@link ContextMenuCommandBuilder.setContexts} instead.\n   */\n  setDMPermission(enabled) {\n    validateDMPermission2(enabled);\n    Reflect.set(this, \"dm_permission\", enabled);\n    return this;\n  }\n  /**\n   * Sets a name localization for this command.\n   *\n   * @param locale - The locale to set\n   * @param localizedName - The localized name for the given `locale`\n   */\n  setNameLocalization(locale, localizedName) {\n    if (!this.name_localizations) {\n      Reflect.set(this, \"name_localizations\", {});\n    }\n    const parsedLocale = validateLocale(locale);\n    if (localizedName === null) {\n      this.name_localizations[parsedLocale] = null;\n      return this;\n    }\n    validateName2(localizedName);\n    this.name_localizations[parsedLocale] = localizedName;\n    return this;\n  }\n  /**\n   * Sets the name localizations for this command.\n   *\n   * @param localizedNames - The object of localized names to set\n   */\n  setNameLocalizations(localizedNames) {\n    if (localizedNames === null) {\n      Reflect.set(this, \"name_localizations\", null);\n      return this;\n    }\n    Reflect.set(this, \"name_localizations\", {});\n    for (const args of Object.entries(localizedNames))\n      this.setNameLocalization(...args);\n    return this;\n  }\n  /**\n   * Serializes this builder to API-compatible JSON data.\n   *\n   * @remarks\n   * This method runs validations on the data before serializing it.\n   * As such, it may throw an error if the data is invalid.\n   */\n  toJSON() {\n    validateRequiredParameters4(this.name, this.type);\n    validateLocalizationMap(this.name_localizations);\n    return { ...this };\n  }\n};\n\n// src/util/componentUtil.ts\nfunction embedLength(data) {\n  return (data.title?.length ?? 0) + (data.description?.length ?? 0) + (data.fields?.reduce((prev, curr) => prev + curr.name.length + curr.value.length, 0) ?? 0) + (data.footer?.text.length ?? 0) + (data.author?.name.length ?? 0);\n}\n__name(embedLength, \"embedLength\");\n\n// src/index.ts\nvar version = \"1.10.1\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ActionRowBuilder,\n  ApplicationCommandNumericOptionMinMaxValueMixin,\n  ApplicationCommandOptionBase,\n  ApplicationCommandOptionChannelTypesMixin,\n  ApplicationCommandOptionWithAutocompleteMixin,\n  ApplicationCommandOptionWithChoicesMixin,\n  BaseSelectMenuBuilder,\n  ButtonBuilder,\n  ChannelSelectMenuBuilder,\n  ComponentAssertions,\n  ComponentBuilder,\n  ContextMenuCommandAssertions,\n  ContextMenuCommandBuilder,\n  EmbedAssertions,\n  EmbedBuilder,\n  MentionableSelectMenuBuilder,\n  ModalAssertions,\n  ModalBuilder,\n  RoleSelectMenuBuilder,\n  SelectMenuBuilder,\n  SelectMenuOptionBuilder,\n  SharedNameAndDescription,\n  SharedSlashCommand,\n  SharedSlashCommandOptions,\n  SharedSlashCommandSubcommands,\n  SlashCommandAssertions,\n  SlashCommandAttachmentOption,\n  SlashCommandBooleanOption,\n  SlashCommandBuilder,\n  SlashCommandChannelOption,\n  SlashCommandIntegerOption,\n  SlashCommandMentionableOption,\n  SlashCommandNumberOption,\n  SlashCommandRoleOption,\n  SlashCommandStringOption,\n  SlashCommandSubcommandBuilder,\n  SlashCommandSubcommandGroupBuilder,\n  SlashCommandUserOption,\n  StringSelectMenuBuilder,\n  StringSelectMenuOptionBuilder,\n  TextInputAssertions,\n  TextInputBuilder,\n  UserSelectMenuBuilder,\n  createComponentBuilder,\n  disableValidators,\n  embedLength,\n  enableValidators,\n  isValidationEnabled,\n  normalizeArray,\n  version,\n  ...require(\"@discordjs/formatters\")\n});\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\nconst isEqual = require('fast-deep-equal');\n\n/**\n * Represents a component\n */\nclass Component {\n  constructor(data) {\n    /**\n     * The API data associated with this component\n     * @type {APIMessageComponent}\n     */\n    this.data = data;\n  }\n\n  /**\n   * The type of the component\n   * @type {ComponentType}\n   * @readonly\n   */\n  get type() {\n    return this.data.type;\n  }\n\n  /**\n   * Whether or not the given components are equal\n   * @param {Component|APIMessageComponent} other The component to compare against\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Component) {\n      return isEqual(other.data, this.data);\n    }\n    return isEqual(other, this.data);\n  }\n\n  /**\n   * Returns the API-compatible JSON for this component\n   * @returns {APIMessageComponent}\n   */\n  toJSON() {\n    return { ...this.data };\n  }\n}\n\nmodule.exports = Component;\n",
    "'use strict';\n\nconst { deprecate } = require('node:util');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst Component = require('./Component');\nconst { createComponent } = require('../util/Components');\n\n/**\n * Represents an action row\n * @extends {Component}\n */\nclass ActionRow extends Component {\n  constructor({ components, ...data }) {\n    super(data);\n\n    /**\n     * The components in this action row\n     * @type {Component[]}\n     * @readonly\n     */\n    this.components = components.map(component => createComponent(component));\n  }\n\n  /**\n   * Creates a new action row builder from JSON data\n   * @method from\n   * @memberof ActionRow\n   * @param {ActionRowBuilder|ActionRow|APIActionRowComponent} other The other data\n   * @returns {ActionRowBuilder}\n   * @deprecated Use {@link ActionRowBuilder.from | ActionRowBuilder#from} instead.\n   */\n  static from = deprecate(\n    other => new this(isJSONEncodable(other) ? other.toJSON() : other),\n    'ActionRow.from() is deprecated. Use ActionRowBuilder.from() instead.',\n  );\n\n  /**\n   * Returns the API-compatible JSON for this component\n   * @returns {APIActionRowComponent}\n   */\n  toJSON() {\n    return { ...this.data, components: this.components.map(component => component.toJSON()) };\n  }\n}\n\nmodule.exports = ActionRow;\n",
    "'use strict';\n\nconst { ButtonBuilder: BuildersButton } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\nconst { resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Represents a button builder.\n * @extends {BuildersButton}\n */\nclass ButtonBuilder extends BuildersButton {\n  constructor({ emoji, ...data } = {}) {\n    super(toSnakeCase({ ...data, emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji }));\n  }\n\n  /**\n   * Sets the emoji to display on this button\n   * @param {string|APIMessageComponentEmoji} emoji The emoji to display on this button\n   * @returns {ButtonBuilder}\n   */\n  setEmoji(emoji) {\n    if (typeof emoji === 'string') {\n      return super.setEmoji(resolvePartialEmoji(emoji));\n    }\n    return super.setEmoji(emoji);\n  }\n\n  /**\n   * Creates a new button builder from JSON data\n   * @param {ButtonBuilder|ButtonComponent|APIButtonComponent} other The other data\n   * @returns {ButtonBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = ButtonBuilder;\n\n/**\n * @external BuildersButton\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ButtonBuilder:Class}\n */\n",
    "'use strict';\n\nconst Component = require('./Component');\n\n/**\n * Represents a button component\n * @extends {Component}\n */\nclass ButtonComponent extends Component {\n  /**\n   * The style of this button\n   * @type {ButtonStyle}\n   * @readonly\n   */\n  get style() {\n    return this.data.style;\n  }\n\n  /**\n   * The label of this button\n   * @type {?string}\n   * @readonly\n   */\n  get label() {\n    return this.data.label ?? null;\n  }\n\n  /**\n   * The emoji used in this button\n   * @type {?APIMessageComponentEmoji}\n   * @readonly\n   */\n  get emoji() {\n    return this.data.emoji ?? null;\n  }\n\n  /**\n   * Whether this button is disabled\n   * @type {boolean}\n   * @readonly\n   */\n  get disabled() {\n    return this.data.disabled ?? false;\n  }\n\n  /**\n   * The custom id of this button (only defined on non-link buttons)\n   * @type {?string}\n   * @readonly\n   */\n  get customId() {\n    return this.data.custom_id ?? null;\n  }\n\n  /**\n   * The URL of this button (only defined on link buttons)\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    return this.data.url ?? null;\n  }\n}\n\nmodule.exports = ButtonComponent;\n",
    "'use strict';\n\nconst { ChannelSelectMenuBuilder: BuildersChannelSelectMenu } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersChannelSelectMenu}\n */\nclass ChannelSelectMenuBuilder extends BuildersChannelSelectMenu {\n  constructor(data = {}) {\n    super(toSnakeCase(data));\n  }\n\n  /**\n   * Creates a new select menu builder from JSON data\n   * @param {ChannelSelectMenuBuilder|ChannelSelectMenuComponent|APIChannelSelectComponent} other The other data\n   * @returns {ChannelSelectMenuBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = ChannelSelectMenuBuilder;\n\n/**\n * @external BuildersChannelSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ChannelSelectMenuBuilder:Class}\n */\n",
    "'use strict';\n\nconst Component = require('./Component');\n\n/**\n * Represents a select menu component\n * @extends {Component}\n */\nclass BaseSelectMenuComponent extends Component {\n  /**\n   * The placeholder for this select menu\n   * @type {?string}\n   * @readonly\n   */\n  get placeholder() {\n    return this.data.placeholder ?? null;\n  }\n\n  /**\n   * The maximum amount of options that can be selected\n   * @type {?number}\n   * @readonly\n   */\n  get maxValues() {\n    return this.data.max_values ?? null;\n  }\n\n  /**\n   * The minimum amount of options that must be selected\n   * @type {?number}\n   * @readonly\n   */\n  get minValues() {\n    return this.data.min_values ?? null;\n  }\n\n  /**\n   * The custom id of this select menu\n   * @type {string}\n   * @readonly\n   */\n  get customId() {\n    return this.data.custom_id;\n  }\n\n  /**\n   * Whether this select menu is disabled\n   * @type {boolean}\n   * @readonly\n   */\n  get disabled() {\n    return this.data.disabled ?? false;\n  }\n}\n\nmodule.exports = BaseSelectMenuComponent;\n",
    "'use strict';\n\nconst BaseSelectMenuComponent = require('./BaseSelectMenuComponent');\n\n/**\n * Represents a channel select menu component\n * @extends {BaseSelectMenuComponent}\n */\nclass ChannelSelectMenuComponent extends BaseSelectMenuComponent {\n  /**\n   * The options in this select menu\n   * @type {?(ChannelType[])}\n   * @readonly\n   */\n  get channelTypes() {\n    return this.data.channel_types ?? null;\n  }\n}\n\nmodule.exports = ChannelSelectMenuComponent;\n",
    "'use strict';\n\nconst { MentionableSelectMenuBuilder: BuildersMentionableSelectMenu } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersMentionableSelectMenu}\n */\nclass MentionableSelectMenuBuilder extends BuildersMentionableSelectMenu {\n  constructor(data = {}) {\n    super(toSnakeCase(data));\n  }\n\n  /**\n   * Creates a new select menu builder from JSON data\n   * @param {MentionableSelectMenuBuilder|MentionableSelectMenuComponent|APIMentionableSelectComponent} other\n   * The other data\n   * @returns {MentionableSelectMenuBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = MentionableSelectMenuBuilder;\n\n/**\n * @external BuildersMentionableSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/MentionableSelectMenuBuilder:Class}\n */\n",
    "'use strict';\n\nconst BaseSelectMenuComponent = require('./BaseSelectMenuComponent');\n\n/**\n * Represents a mentionable select menu component\n * @extends {BaseSelectMenuComponent}\n */\nclass MentionableSelectMenuComponent extends BaseSelectMenuComponent {}\n\nmodule.exports = MentionableSelectMenuComponent;\n",
    "'use strict';\n\nconst { RoleSelectMenuBuilder: BuildersRoleSelectMenu } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersRoleSelectMenu}\n */\nclass RoleSelectMenuBuilder extends BuildersRoleSelectMenu {\n  constructor(data = {}) {\n    super(toSnakeCase(data));\n  }\n\n  /**\n   * Creates a new select menu builder from JSON data\n   * @param {RoleSelectMenuBuilder|RoleSelectMenuComponent|APIRoleSelectComponent} other The other data\n   * @returns {RoleSelectMenuBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = RoleSelectMenuBuilder;\n\n/**\n * @external BuildersRoleSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/RoleSelectMenuBuilder:Class}\n */\n",
    "'use strict';\n\nconst BaseSelectMenuComponent = require('./BaseSelectMenuComponent');\n\n/**\n * Represents a role select menu component\n * @extends {BaseSelectMenuComponent}\n */\nclass RoleSelectMenuComponent extends BaseSelectMenuComponent {}\n\nmodule.exports = RoleSelectMenuComponent;\n",
    "'use strict';\n\nconst { SelectMenuBuilder: BuildersSelectMenu, normalizeArray } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\nconst { resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersSelectMenu}\n */\nclass StringSelectMenuBuilder extends BuildersSelectMenu {\n  constructor({ options, ...data } = {}) {\n    super(\n      toSnakeCase({\n        ...data,\n        options: options?.map(({ emoji, ...option }) => ({\n          ...option,\n          emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,\n        })),\n      }),\n    );\n  }\n\n  /**\n   * Normalizes a select menu option emoji\n   * @param {SelectMenuOptionData|APISelectMenuOption} selectMenuOption The option to normalize\n   * @returns {SelectMenuOptionBuilder|APISelectMenuOption}\n   * @private\n   */\n  static normalizeEmoji(selectMenuOption) {\n    if (isJSONEncodable(selectMenuOption)) {\n      return selectMenuOption;\n    }\n\n    const { emoji, ...option } = selectMenuOption;\n    return {\n      ...option,\n      emoji: typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,\n    };\n  }\n\n  /**\n   * Adds options to this select menu\n   * @param {RestOrArray<APISelectMenuOption>} options The options to add to this select menu\n   * @returns {StringSelectMenuBuilder}\n   */\n  addOptions(...options) {\n    return super.addOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));\n  }\n\n  /**\n   * Sets the options on this select menu\n   * @param {RestOrArray<APISelectMenuOption>} options The options to set on this select menu\n   * @returns {StringSelectMenuBuilder}\n   */\n  setOptions(...options) {\n    return super.setOptions(normalizeArray(options).map(option => StringSelectMenuBuilder.normalizeEmoji(option)));\n  }\n\n  /**\n   * Creates a new select menu builder from json data\n   * @param {StringSelectMenuBuilder|StringSelectMenuComponent|APIStringSelectComponent} other The other data\n   * @returns {StringSelectMenuBuilder}\n   */\n  static from(other) {\n    if (isJSONEncodable(other)) {\n      return new this(other.toJSON());\n    }\n    return new this(other);\n  }\n}\n\nmodule.exports = StringSelectMenuBuilder;\n\n/**\n * @external BuildersSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/StringSelectMenuBuilder:Class}\n */\n",
    "'use strict';\n\nconst BaseSelectMenuComponent = require('./BaseSelectMenuComponent');\n\n/**\n * Represents a string select menu component\n * @extends {BaseSelectMenuComponent}\n */\nclass StringSelectMenuComponent extends BaseSelectMenuComponent {\n  /**\n   * The options in this select menu\n   * @type {APISelectMenuOption[]}\n   * @readonly\n   */\n  get options() {\n    return this.data.options;\n  }\n}\n\nmodule.exports = StringSelectMenuComponent;\n",
    "'use strict';\n\nconst { TextInputBuilder: BuildersTextInput } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Represents a text input builder.\n * @extends {BuildersTextInput}\n */\nclass TextInputBuilder extends BuildersTextInput {\n  constructor(data) {\n    super(toSnakeCase(data));\n  }\n\n  /**\n   * Creates a new text input builder from JSON data\n   * @param {TextInputBuilder|TextInputComponent|APITextInputComponent} other The other data\n   * @returns {TextInputBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = TextInputBuilder;\n\n/**\n * @external BuildersTextInput\n * @see {@link https://discord.js.org/docs/packages/builders/stable/TextInputBuilder:Class}\n */\n",
    "'use strict';\n\nconst Component = require('./Component');\n\n/**\n * Represents a text input component.\n * @extends {Component}\n */\nclass TextInputComponent extends Component {\n  /**\n   * The custom id of this text input\n   * @type {string}\n   * @readonly\n   */\n  get customId() {\n    return this.data.custom_id;\n  }\n\n  /**\n   * The value for this text input\n   * @type {string}\n   * @readonly\n   */\n  get value() {\n    return this.data.value;\n  }\n}\n\nmodule.exports = TextInputComponent;\n",
    "'use strict';\n\nconst { UserSelectMenuBuilder: BuildersUserSelectMenu } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Class used to build select menu components to be sent through the API\n * @extends {BuildersUserSelectMenu}\n */\nclass UserSelectMenuBuilder extends BuildersUserSelectMenu {\n  constructor(data = {}) {\n    super(toSnakeCase(data));\n  }\n\n  /**\n   * Creates a new select menu builder from JSON data\n   * @param {UserSelectMenuBuilder|UserSelectMenuComponent|APIUserSelectComponent} other The other data\n   * @returns {UserSelectMenuBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = UserSelectMenuBuilder;\n\n/**\n * @external BuildersUserSelectMenu\n * @see {@link https://discord.js.org/docs/packages/builders/stable/UserSelectMenuBuilder:Class}\n */\n",
    "'use strict';\n\nconst BaseSelectMenuComponent = require('./BaseSelectMenuComponent');\n\n/**\n * Represents a user select menu component\n * @extends {BaseSelectMenuComponent}\n */\nclass UserSelectMenuComponent extends BaseSelectMenuComponent {}\n\nmodule.exports = UserSelectMenuComponent;\n",
    "'use strict';\n\nconst { ComponentBuilder } = require('@discordjs/builders');\nconst { ComponentType } = require('discord-api-types/v10');\n\n/**\n * @typedef {Object} BaseComponentData\n * @property {ComponentType} type The type of component\n */\n\n/**\n * @typedef {BaseComponentData} ActionRowData\n * @property {ComponentData[]} components The components in this action row\n */\n\n/**\n * @typedef {BaseComponentData} ButtonComponentData\n * @property {ButtonStyle} style The style of the button\n * @property {?boolean} disabled Whether this button is disabled\n * @property {string} label The label of this button\n * @property {?APIMessageComponentEmoji} emoji The emoji on this button\n * @property {?string} customId The custom id of the button\n * @property {?string} url The URL of the button\n */\n\n/**\n * @typedef {object} SelectMenuComponentOptionData\n * @property {string} label The label of the option\n * @property {string} value The value of the option\n * @property {?string} description The description of the option\n * @property {?APIMessageComponentEmoji} emoji The emoji on the option\n * @property {?boolean} default Whether this option is selected by default\n */\n\n/**\n * @typedef {BaseComponentData} SelectMenuComponentData\n * @property {string} customId The custom id of the select menu\n * @property {?boolean} disabled Whether the select menu is disabled or not\n * @property {?number} maxValues The maximum amount of options that can be selected\n * @property {?number} minValues The minimum amount of options that can be selected\n * @property {?SelectMenuComponentOptionData[]} options The options in this select menu\n * @property {?string} placeholder The placeholder of the select menu\n */\n\n/**\n * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData} MessageComponentData\n */\n\n/**\n * @typedef {BaseComponentData} TextInputComponentData\n * @property {string} customId The custom id of the text input\n * @property {TextInputStyle} style The style of the text input\n * @property {string} label The text that appears on top of the text input field\n * @property {?number} minLength The minimum number of characters that can be entered in the text input\n * @property {?number} maxLength The maximum number of characters that can be entered in the text input\n * @property {?boolean} required Whether or not the text input is required or not\n * @property {?string} value The pre-filled text in the text input\n * @property {?string} placeholder Placeholder for the text input\n */\n\n/**\n * @typedef {ActionRowData|ButtonComponentData|SelectMenuComponentData|TextInputComponentData} ComponentData\n */\n\n/**\n * Any emoji data that can be used within a button\n * @typedef {APIMessageComponentEmoji|string} ComponentEmojiResolvable\n */\n\n/**\n * Transforms API data into a component\n * @param {APIMessageComponent|Component} data The data to create the component from\n * @returns {Component}\n * @ignore\n */\nfunction createComponent(data) {\n  if (data instanceof Component) {\n    return data;\n  }\n\n  switch (data.type) {\n    case ComponentType.ActionRow:\n      return new ActionRow(data);\n    case ComponentType.Button:\n      return new ButtonComponent(data);\n    case ComponentType.StringSelect:\n      return new StringSelectMenuComponent(data);\n    case ComponentType.TextInput:\n      return new TextInputComponent(data);\n    case ComponentType.UserSelect:\n      return new UserSelectMenuComponent(data);\n    case ComponentType.RoleSelect:\n      return new RoleSelectMenuComponent(data);\n    case ComponentType.MentionableSelect:\n      return new MentionableSelectMenuComponent(data);\n    case ComponentType.ChannelSelect:\n      return new ChannelSelectMenuComponent(data);\n    default:\n      return new Component(data);\n  }\n}\n\n/**\n * Transforms API data into a component builder\n * @param {APIMessageComponent|ComponentBuilder} data The data to create the component from\n * @returns {ComponentBuilder}\n * @ignore\n */\nfunction createComponentBuilder(data) {\n  if (data instanceof ComponentBuilder) {\n    return data;\n  }\n\n  switch (data.type) {\n    case ComponentType.ActionRow:\n      return new ActionRowBuilder(data);\n    case ComponentType.Button:\n      return new ButtonBuilder(data);\n    case ComponentType.StringSelect:\n      return new StringSelectMenuBuilder(data);\n    case ComponentType.TextInput:\n      return new TextInputBuilder(data);\n    case ComponentType.UserSelect:\n      return new UserSelectMenuBuilder(data);\n    case ComponentType.RoleSelect:\n      return new RoleSelectMenuBuilder(data);\n    case ComponentType.MentionableSelect:\n      return new MentionableSelectMenuBuilder(data);\n    case ComponentType.ChannelSelect:\n      return new ChannelSelectMenuBuilder(data);\n    default:\n      return new ComponentBuilder(data);\n  }\n}\n\nmodule.exports = { createComponent, createComponentBuilder };\n\nconst ActionRow = require('../structures/ActionRow');\nconst ActionRowBuilder = require('../structures/ActionRowBuilder');\nconst ButtonBuilder = require('../structures/ButtonBuilder');\nconst ButtonComponent = require('../structures/ButtonComponent');\nconst ChannelSelectMenuBuilder = require('../structures/ChannelSelectMenuBuilder');\nconst ChannelSelectMenuComponent = require('../structures/ChannelSelectMenuComponent');\nconst Component = require('../structures/Component');\nconst MentionableSelectMenuBuilder = require('../structures/MentionableSelectMenuBuilder');\nconst MentionableSelectMenuComponent = require('../structures/MentionableSelectMenuComponent');\nconst RoleSelectMenuBuilder = require('../structures/RoleSelectMenuBuilder');\nconst RoleSelectMenuComponent = require('../structures/RoleSelectMenuComponent');\nconst StringSelectMenuBuilder = require('../structures/StringSelectMenuBuilder');\nconst StringSelectMenuComponent = require('../structures/StringSelectMenuComponent');\nconst TextInputBuilder = require('../structures/TextInputBuilder');\nconst TextInputComponent = require('../structures/TextInputComponent');\nconst UserSelectMenuBuilder = require('../structures/UserSelectMenuBuilder');\nconst UserSelectMenuComponent = require('../structures/UserSelectMenuComponent');\n",
    "'use strict';\n\nconst { ActionRowBuilder: BuildersActionRow } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { createComponentBuilder } = require('../util/Components');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Represents an action row builder.\n * @extends {BuildersActionRow}\n */\nclass ActionRowBuilder extends BuildersActionRow {\n  constructor({ components, ...data } = {}) {\n    super({\n      ...toSnakeCase(data),\n      components: components?.map(component => createComponentBuilder(component)),\n    });\n  }\n\n  /**\n   * Creates a new action row builder from JSON data\n   * @param {ActionRow|ActionRowBuilder|APIActionRowComponent} other The other data\n   * @returns {ActionRowBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = ActionRowBuilder;\n\n/**\n * @external BuildersActionRow\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ActionRowBuilder:Class}\n */\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { GuildScheduledEventStatus, GuildScheduledEventEntityType, RouteBases } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents a scheduled event in a {@link Guild}.\n * @extends {Base}\n */\nclass GuildScheduledEvent extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the guild scheduled event\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The id of the guild this guild scheduled event belongs to\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('channel_id' in data) {\n      /**\n       * The channel id in which the scheduled event will be hosted,\n       * or `null` if entity type is {@link GuildScheduledEventEntityType.External}\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this guild scheduled event\n       * @type {?Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    } else {\n      this.creatorId ??= null;\n    }\n\n    if ('name' in data) {\n      /**\n       * The name of the guild scheduled event\n       * @type {?string}\n       */\n      this.name = data.name;\n    } else {\n      // Only if partial.\n      this.name ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of the guild scheduled event\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('scheduled_start_time' in data) {\n      /**\n       * The timestamp the guild scheduled event will start at\n       * @type {?number}\n       */\n      this.scheduledStartTimestamp = Date.parse(data.scheduled_start_time);\n    } else {\n      this.scheduledStartTimestamp ??= null;\n    }\n\n    if ('scheduled_end_time' in data) {\n      /**\n       * The timestamp the guild scheduled event will end at\n       * or `null` if the event does not have a scheduled time to end\n       * @type {?number}\n       */\n      this.scheduledEndTimestamp = data.scheduled_end_time ? Date.parse(data.scheduled_end_time) : null;\n    } else {\n      this.scheduledEndTimestamp ??= null;\n    }\n\n    if ('privacy_level' in data) {\n      /**\n       * The privacy level of the guild scheduled event\n       * @type {?GuildScheduledEventPrivacyLevel}\n       */\n      this.privacyLevel = data.privacy_level;\n    } else {\n      // Only if partial.\n      this.privacyLevel ??= null;\n    }\n\n    if ('status' in data) {\n      /**\n       * The status of the guild scheduled event\n       * @type {?GuildScheduledEventStatus}\n       */\n      this.status = data.status;\n    } else {\n      // Only if partial.\n      this.status ??= null;\n    }\n\n    if ('entity_type' in data) {\n      /**\n       * The type of hosting entity associated with the scheduled event\n       * @type {?GuildScheduledEventEntityType}\n       */\n      this.entityType = data.entity_type;\n    } else {\n      // Only if partial.\n      this.entityType ??= null;\n    }\n\n    if ('entity_id' in data) {\n      /**\n       * The id of the hosting entity associated with the scheduled event\n       * @type {?Snowflake}\n       */\n      this.entityId = data.entity_id;\n    } else {\n      this.entityId ??= null;\n    }\n\n    if ('user_count' in data) {\n      /**\n       * The number of users who are subscribed to this guild scheduled event\n       * @type {?number}\n       */\n      this.userCount = data.user_count;\n    } else {\n      this.userCount ??= null;\n    }\n\n    if ('creator' in data) {\n      /**\n       * The user that created this guild scheduled event\n       * @type {?User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    } else {\n      this.creator ??= this.client.users.resolve(this.creatorId);\n    }\n\n    /* eslint-disable max-len */\n    /**\n     * Represents the additional metadata for a {@link GuildScheduledEvent}\n     * @see {@link https://discord.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata}\n     * @typedef {Object} GuildScheduledEventEntityMetadata\n     * @property {?string} location The location of the guild scheduled event\n     */\n    /* eslint-enable max-len */\n\n    if ('entity_metadata' in data) {\n      if (data.entity_metadata) {\n        /**\n         * Additional metadata\n         * @type {?GuildScheduledEventEntityMetadata}\n         */\n        this.entityMetadata = {\n          location: data.entity_metadata.location ?? this.entityMetadata?.location ?? null,\n        };\n      } else {\n        this.entityMetadata = null;\n      }\n    } else {\n      this.entityMetadata ??= null;\n    }\n\n    if ('image' in data) {\n      /**\n       * The cover image hash for this scheduled event\n       * @type {?string}\n       */\n      this.image = data.image;\n    } else {\n      this.image ??= null;\n    }\n\n    /**\n     * Represents the recurrence rule for a {@link GuildScheduledEvent}.\n     * @typedef {Object} GuildScheduledEventRecurrenceRule\n     * @property {number} startTimestamp The timestamp the recurrence rule interval starts at\n     * @property {Date} startAt The time the recurrence rule interval starts at\n     * @property {?number} endTimestamp The timestamp the recurrence rule interval ends at\n     * @property {?Date} endAt The time the recurrence rule interval ends at\n     * @property {GuildScheduledEventRecurrenceRuleFrequency} frequency How often the event occurs\n     * @property {number} interval The spacing between the events\n     * @property {?GuildScheduledEventRecurrenceRuleWeekday[]} byWeekday The days within a week to recur on\n     * @property {?GuildScheduledEventRecurrenceRuleNWeekday[]} byNWeekday The days within a week to recur on\n     * @property {?GuildScheduledEventRecurrenceRuleMonth[]} byMonth The months to recur on\n     * @property {?number[]} byMonthDay The days within a month to recur on\n     * @property {?number[]} byYearDay The days within a year to recur on\n     * @property {?number} count The total amount of times the event is allowed to recur before stopping\n     */\n\n    /**\n     * @typedef {Object} GuildScheduledEventRecurrenceRuleNWeekday\n     * @property {number} n The week to recur on\n     * @property {GuildScheduledEventRecurrenceRuleWeekday} day The day within the week to recur on\n     */\n\n    if ('recurrence_rule' in data) {\n      /**\n       * The recurrence rule for this scheduled event\n       * @type {?GuildScheduledEventRecurrenceRule}\n       */\n      this.recurrenceRule = data.recurrence_rule && {\n        startTimestamp: Date.parse(data.recurrence_rule.start),\n        get startAt() {\n          return new Date(this.startTimestamp);\n        },\n        endTimestamp: data.recurrence_rule.end && Date.parse(data.recurrence_rule.end),\n        get endAt() {\n          return this.endTimestamp && new Date(this.endTimestamp);\n        },\n        frequency: data.recurrence_rule.frequency,\n        interval: data.recurrence_rule.interval,\n        byWeekday: data.recurrence_rule.by_weekday,\n        byNWeekday: data.recurrence_rule.by_n_weekday,\n        byMonth: data.recurrence_rule.by_month,\n        byMonthDay: data.recurrence_rule.by_month_day,\n        byYearDay: data.recurrence_rule.by_year_day,\n        count: data.recurrence_rule.count,\n      };\n    } else {\n      this.recurrenceRule ??= null;\n    }\n  }\n\n  /**\n   * Whether this guild scheduled event is partial.\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.name === null;\n  }\n\n  /**\n   * The URL of this scheduled event's cover image\n   * @param {BaseImageURLOptions} [options={}] Options for image URL\n   * @returns {?string}\n   */\n  coverImageURL(options = {}) {\n    return this.image && this.client.rest.cdn.guildScheduledEventCover(this.id, this.image, options);\n  }\n\n  /**\n   * The timestamp the guild scheduled event was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the guild scheduled event was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will start at\n   * <info>This can be potentially `null` only when it's an {@link GuildAuditLogsEntry#target}</info>\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledStartAt() {\n    return this.scheduledStartTimestamp && new Date(this.scheduledStartTimestamp);\n  }\n\n  /**\n   * The time the guild scheduled event will end at,\n   * or `null` if the event does not have a scheduled time to end\n   * @type {?Date}\n   * @readonly\n   */\n  get scheduledEndAt() {\n    return this.scheduledEndTimestamp && new Date(this.scheduledEndTimestamp);\n  }\n\n  /**\n   * The channel associated with this scheduled event\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this scheduled event belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL to the guild scheduled event\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.scheduledEvent}/${this.guildId}/${this.id}`;\n  }\n\n  /**\n   * Options used to create an invite URL to a {@link GuildScheduledEvent}\n   * @typedef {InviteCreateOptions} GuildScheduledEventInviteURLCreateOptions\n   * @property {GuildInvitableChannelResolvable} [channel] The channel to create the invite in.\n   * <warn>This is required when the `entityType` of `GuildScheduledEvent` is\n   * {@link GuildScheduledEventEntityType.External}, gets ignored otherwise</warn>\n   */\n\n  /**\n   * Creates an invite URL to this guild scheduled event.\n   * @param {GuildScheduledEventInviteURLCreateOptions} [options] The options to create the invite\n   * @returns {Promise<string>}\n   */\n  async createInviteURL(options) {\n    let channelId = this.channelId;\n    if (this.entityType === GuildScheduledEventEntityType.External) {\n      if (!options?.channel) throw new DiscordjsError(ErrorCodes.InviteOptionsMissingChannel);\n      channelId = this.guild.channels.resolveId(options.channel);\n      if (!channelId) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    }\n    const invite = await this.guild.invites.create(channelId, options);\n    return `${RouteBases.invite}/${invite.code}?event=${this.id}`;\n  }\n\n  /**\n   * Edits this guild scheduled event.\n   * @param {GuildScheduledEventEditOptions} options The options to edit the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Edit a guild scheduled event\n   * guildScheduledEvent.edit({ name: 'Party' })\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.scheduledEvents.edit(this.id, options);\n  }\n\n  /**\n   * Fetches this guild scheduled event.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildScheduledEvent>}\n   */\n  fetch(force = true) {\n    return this.guild.scheduledEvents.fetch({ guildScheduledEvent: this.id, force });\n  }\n\n  /**\n   * Deletes this guild scheduled event.\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Delete a guild scheduled event\n   * guildScheduledEvent.delete()\n   *  .then(guildScheduledEvent => console.log(guildScheduledEvent))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.scheduledEvents.delete(this.id);\n    return this;\n  }\n\n  /**\n   * Sets a new name for the guild scheduled event.\n   * @param {string} name The new name of the guild scheduled event\n   * @param {string} [reason] The reason for changing the name\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set name of a guild scheduled event\n   * guildScheduledEvent.setName('Birthday Party')\n   *  .then(guildScheduledEvent => console.log(`Set the name to: ${guildScheduledEvent.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets a new time to schedule the event at.\n   * @param {DateResolvable} scheduledStartTime The time to schedule the event at\n   * @param {string} [reason] The reason for changing the scheduled start time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set start time of a guild scheduled event\n   * guildScheduledEvent.setScheduledStartTime('2022-09-24T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the start time to: ${guildScheduledEvent.scheduledStartTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledStartTime(scheduledStartTime, reason) {\n    return this.edit({ scheduledStartTime, reason });\n  }\n\n  // TODO: scheduledEndTime gets reset on passing null but it hasn't been documented\n  /**\n   * Sets a new time to end the event at.\n   * @param {DateResolvable} scheduledEndTime The time to end the event at\n   * @param {string} [reason] The reason for changing the scheduled end time\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set end time of a guild scheduled event\n   * guildScheduledEvent.setScheduledEndTime('2022-09-25T00:00:00+05:30')\n   *  .then(guildScheduledEvent => console.log(`Set the end time to: ${guildScheduledEvent.scheduledEndTime}`))\n   *  .catch(console.error);\n   */\n  setScheduledEndTime(scheduledEndTime, reason) {\n    return this.edit({ scheduledEndTime, reason });\n  }\n\n  /**\n   * Sets the new description of the guild scheduled event.\n   * @param {string} description The description of the guild scheduled event\n   * @param {string} [reason] The reason for changing the description\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set description of a guild scheduled event\n   * guildScheduledEvent.setDescription('A virtual birthday party')\n   *  .then(guildScheduledEvent => console.log(`Set the description to: ${guildScheduledEvent.description}`))\n   *  .catch(console.error);\n   */\n  setDescription(description, reason) {\n    return this.edit({ description, reason });\n  }\n\n  /**\n   * Sets the new status of the guild scheduled event.\n   * <info>If you're working with TypeScript, use this method in conjunction with status type-guards\n   * like {@link GuildScheduledEvent#isScheduled} to get only valid status as suggestion</info>\n   * @param {GuildScheduledEventStatus} status The status of the guild scheduled event\n   * @param {string} [reason] The reason for changing the status\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set status of a guild scheduled event\n   * guildScheduledEvent.setStatus(GuildScheduledEventStatus.Active)\n   *  .then(guildScheduledEvent => console.log(`Set the status to: ${guildScheduledEvent.status}`))\n   *  .catch(console.error);\n   */\n  setStatus(status, reason) {\n    return this.edit({ status, reason });\n  }\n\n  /**\n   * Sets the new location of the guild scheduled event.\n   * @param {string} location The location of the guild scheduled event\n   * @param {string} [reason] The reason for changing the location\n   * @returns {Promise<GuildScheduledEvent>}\n   * @example\n   * // Set location of a guild scheduled event\n   * guildScheduledEvent.setLocation('Earth')\n   *  .then(guildScheduledEvent => console.log(`Set the location to: ${guildScheduledEvent.entityMetadata.location}`))\n   *  .catch(console.error);\n   */\n  setLocation(location, reason) {\n    return this.edit({ entityMetadata: { location }, reason });\n  }\n\n  /**\n   * Fetches subscribers of this guild scheduled event.\n   * @param {FetchGuildScheduledEventSubscribersOptions} [options] Options for fetching the subscribers\n   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}\n   */\n  fetchSubscribers(options) {\n    return this.guild.scheduledEvents.fetchSubscribers(this.id, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the event's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Event: https://discord.com/events/412345678901234567/499876543211234567\n   * console.log(`Event: ${guildScheduledEvent}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has an {@link GuildScheduledEventStatus.Active} status.\n   * @returns {boolean}\n   */\n  isActive() {\n    return this.status === GuildScheduledEventStatus.Active;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Canceled} status.\n   * @returns {boolean}\n   */\n  isCanceled() {\n    return this.status === GuildScheduledEventStatus.Canceled;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Completed} status.\n   * @returns {boolean}\n   */\n  isCompleted() {\n    return this.status === GuildScheduledEventStatus.Completed;\n  }\n\n  /**\n   * Indicates whether this guild scheduled event has a {@link GuildScheduledEventStatus.Scheduled} status.\n   * @returns {boolean}\n   */\n  isScheduled() {\n    return this.status === GuildScheduledEventStatus.Scheduled;\n  }\n}\n\nexports.GuildScheduledEvent = GuildScheduledEvent;\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('../Base');\n\n/**\n * Represents an OAuth2 Application.\n * @extends {Base}\n * @abstract\n */\nclass Application extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The application's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the application\n       * @type {?string}\n       */\n      this.name = data.name;\n    } else {\n      this.name ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The application's description\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('icon' in data) {\n      /**\n       * The application's icon hash\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    } else {\n      this.icon ??= null;\n    }\n\n    if ('terms_of_service_url' in data) {\n      /**\n       * The URL of the application's terms of service\n       * @type {?string}\n       */\n      this.termsOfServiceURL = data.terms_of_service_url;\n    } else {\n      this.termsOfServiceURL ??= null;\n    }\n\n    if ('privacy_policy_url' in data) {\n      /**\n       * The URL of the application's privacy policy\n       * @type {?string}\n       */\n      this.privacyPolicyURL = data.privacy_policy_url;\n    } else {\n      this.privacyPolicyURL ??= null;\n    }\n\n    if ('rpc_origins' in data) {\n      /**\n       * The application's RPC origins, if enabled\n       * @type {string[]}\n       */\n      this.rpcOrigins = data.rpc_origins;\n    } else {\n      this.rpcOrigins ??= [];\n    }\n\n    if ('cover_image' in data) {\n      /**\n       * The hash of the application's cover image\n       * @type {?string}\n       */\n      this.cover = data.cover_image;\n    } else {\n      this.cover ??= null;\n    }\n\n    if ('verify_key' in data) {\n      /**\n       * The hex-encoded key for verification in interactions and the GameSDK's GetTicket\n       * @type {?string}\n       */\n      this.verifyKey = data.verify_key;\n    } else {\n      this.verifyKey ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the application was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the application was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the application's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.appIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * A link to this application's cover image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  coverURL(options = {}) {\n    return this.cover && this.client.rest.cdn.appIcon(this.id, this.cover, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the application's name instead of the\n   * Application object.\n   * @returns {?string}\n   * @example\n   * // Logs: Application name: My App\n   * console.log(`Application name: ${application}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Application;\n",
    "'use strict';\n\nconst Application = require('./interfaces/Application');\n\n/**\n * Represents an Integration's OAuth2 Application.\n * @extends {Application}\n */\nclass IntegrationApplication extends Application {\n  _patch(data) {\n    super._patch(data);\n\n    if ('bot' in data) {\n      /**\n       * The bot user for this application\n       * @type {?User}\n       */\n      this.bot = this.client.users._add(data.bot);\n    } else {\n      this.bot ??= null;\n    }\n\n    if ('terms_of_service_url' in data) {\n      /**\n       * The URL of the application's terms of service\n       * @type {?string}\n       */\n      this.termsOfServiceURL = data.terms_of_service_url;\n    } else {\n      this.termsOfServiceURL ??= null;\n    }\n\n    if ('privacy_policy_url' in data) {\n      /**\n       * The URL of the application's privacy policy\n       * @type {?string}\n       */\n      this.privacyPolicyURL = data.privacy_policy_url;\n    } else {\n      this.privacyPolicyURL ??= null;\n    }\n\n    if ('rpc_origins' in data) {\n      /**\n       * The Array of RPC origin URLs\n       * @type {string[]}\n       */\n      this.rpcOrigins = data.rpc_origins;\n    } else {\n      this.rpcOrigins ??= [];\n    }\n\n    if ('hook' in data) {\n      /**\n       * Whether the application can be default hooked by the client\n       * @type {?boolean}\n       */\n      this.hook = data.hook;\n    } else {\n      this.hook ??= null;\n    }\n\n    if ('cover_image' in data) {\n      /**\n       * The hash of the application's cover image\n       * @type {?string}\n       */\n      this.cover = data.cover_image;\n    } else {\n      this.cover ??= null;\n    }\n\n    if ('verify_key' in data) {\n      /**\n       * The hex-encoded key for verification in interactions and the GameSDK's GetTicket\n       * @type {?string}\n       */\n      this.verifyKey = data.verify_key;\n    } else {\n      this.verifyKey ??= null;\n    }\n  }\n}\n\nmodule.exports = IntegrationApplication;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\n\n/**\n * Represents the data about a public {@link StageInstance} in an {@link Invite}.\n * @extends {Base}\n * @deprecated\n */\nclass InviteStageInstance extends Base {\n  constructor(client, data, channelId, guildId) {\n    super(client);\n\n    /**\n     * The id of the stage channel this invite is for\n     * @type {Snowflake}\n     */\n    this.channelId = channelId;\n\n    /**\n     * The stage channel's guild id\n     * @type {Snowflake}\n     */\n    this.guildId = guildId;\n\n    /**\n     * The members speaking in the stage channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n    this.members = new Collection();\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('participant_count' in data) {\n      /**\n       * The number of users in the stage channel\n       * @type {number}\n       */\n      this.participantCount = data.participant_count;\n    }\n\n    if ('speaker_count' in data) {\n      /**\n       * The number of users speaking in the stage channel\n       * @type {number}\n       */\n      this.speakerCount = data.speaker_count;\n    }\n\n    this.members.clear();\n    for (const rawMember of data.members) {\n      const member = this.guild.members._add(rawMember);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The stage channel this invite is for\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild of the stage channel this invite is for\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n}\n\nmodule.exports = InviteStageInstance;\n",
    "'use strict';\n\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes, GuildFeature } = require('discord-api-types/v10');\nconst Base = require('./Base');\n\n/**\n * The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.\n * @extends {Base}\n * @abstract\n */\nclass BaseGuild extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The guild's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon hash of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * An array of features available to this guild\n     * @type {GuildFeature[]}\n     */\n    this.features = data.features;\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name\n      .replace(/'s /g, ' ')\n      .replace(/\\w+/g, e => e[0])\n      .replace(/\\s/g, '');\n  }\n\n  /**\n   * Whether this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes(GuildFeature.Partnered);\n  }\n\n  /**\n   * Whether this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes(GuildFeature.Verified);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guild(this.id), {\n      query: makeURLSearchParams({ with_counts: true }),\n    });\n    return this.client.guilds._add(data);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n}\n\nmodule.exports = BaseGuild;\n",
    "'use strict';\n\nconst BaseGuild = require('./BaseGuild');\n\n/**\n * Bundles common attributes and methods between {@link Guild} and {@link InviteGuild}\n * @extends {BaseGuild}\n * @abstract\n */\nclass AnonymousGuild extends BaseGuild {\n  constructor(client, data, immediatePatch = true) {\n    super(client, data);\n    if (immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('features' in data) this.features = data.features;\n\n    if ('splash' in data) {\n      /**\n       * The hash of the guild invite splash image\n       * @type {?string}\n       */\n      this.splash = data.splash;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The hash of the guild banner\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of the guild, if any\n       * @type {?string}\n       */\n      this.description = data.description;\n    }\n\n    if ('verification_level' in data) {\n      /**\n       * The verification level of the guild\n       * @type {GuildVerificationLevel}\n       */\n      this.verificationLevel = data.verification_level;\n    }\n\n    if ('vanity_url_code' in data) {\n      /**\n       * The vanity invite code of the guild, if any\n       * @type {?string}\n       */\n      this.vanityURLCode = data.vanity_url_code;\n    }\n\n    if ('nsfw_level' in data) {\n      /**\n       * The NSFW level of this guild\n       * @type {GuildNSFWLevel}\n       */\n      this.nsfwLevel = data.nsfw_level;\n    }\n\n    if ('premium_subscription_count' in data) {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    } else {\n      this.premiumSubscriptionCount ??= null;\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL(options = {}) {\n    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);\n  }\n\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  splashURL(options = {}) {\n    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);\n  }\n}\n\nmodule.exports = AnonymousGuild;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { formatEmoji } = require('@discordjs/formatters');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\n\nlet deprecationEmittedForURL = false;\n\n/**\n * Represents an emoji, see {@link ApplicationEmoji}, {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n    this.animated = emoji.animated ?? null;\n\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n    this.name = emoji.name ?? null;\n\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id ?? null;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * Returns a URL for the emoji or `null` if this is not a custom emoji.\n   * @param {BaseImageURLOptions} [options] Options for the image URL\n   * @returns {?string}\n   */\n  imageURL(options) {\n    return this.id && this.client.rest.cdn.emoji(this.id, options);\n  }\n\n  /**\n   * Returns a URL for the emoji or `null` if this is not a custom emoji.\n   * @type {?string}\n   * @readonly\n   * @deprecated Use {@link Emoji#imageURL} instead.\n   */\n  get url() {\n    if (!deprecationEmittedForURL) {\n      process.emitWarning('The Emoji#url getter is deprecated. Use Emoji#imageURL() instead.', 'DeprecationWarning');\n      deprecationEmittedForURL = true;\n    }\n\n    return this.imageURL({ extension: this.animated ? 'gif' : 'png' });\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.id && DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? formatEmoji({ animated: this.animated, id: this.id, name: this.name }) : this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      identifier: true,\n    });\n    json.imageURL = this.imageURL();\n    return json;\n  }\n}\n\nexports.Emoji = Emoji;\n",
    "'use strict';\n\nconst Base = require('./Base');\nconst { Emoji } = require('./Emoji');\n\n/**\n * Represents a channel link in a guild's welcome screen.\n * @extends {Base}\n */\nclass WelcomeChannel extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n\n    /**\n     * The guild for this welcome channel\n     * @type {Guild|InviteGuild}\n     */\n    this.guild = guild;\n\n    /**\n     * The description of this welcome channel\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The raw emoji data\n     * @type {Object}\n     * @private\n     */\n    this._emoji = {\n      name: data.emoji_name,\n      id: data.emoji_id,\n    };\n\n    /**\n     * The id of this welcome channel\n     * @type {Snowflake}\n     */\n    this.channelId = data.channel_id;\n  }\n\n  /**\n   * The channel of this welcome channel\n   * @type {?(TextChannel|NewsChannel|ForumChannel|MediaChannel)}\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The emoji of this welcome channel\n   * @type {GuildEmoji|Emoji}\n   */\n  get emoji() {\n    return this.client.emojis.cache.get(this._emoji.id) ?? new Emoji(this.client, this._emoji);\n  }\n}\n\nmodule.exports = WelcomeChannel;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { GuildFeature } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst WelcomeChannel = require('./WelcomeChannel');\n\n/**\n * Represents a welcome screen.\n * @extends {Base}\n */\nclass WelcomeScreen extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n\n    /**\n     * The guild for this welcome screen\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The description of this welcome screen\n     * @type {?string}\n     */\n    this.description = data.description ?? null;\n\n    /**\n     * Collection of welcome channels belonging to this welcome screen\n     * @type {Collection<Snowflake, WelcomeChannel>}\n     */\n    this.welcomeChannels = new Collection();\n\n    for (const channel of data.welcome_channels) {\n      const welcomeChannel = new WelcomeChannel(this.guild, channel);\n      this.welcomeChannels.set(welcomeChannel.channelId, welcomeChannel);\n    }\n  }\n\n  /**\n   * Whether the welcome screen is enabled on the guild\n   * @type {boolean}\n   */\n  get enabled() {\n    return this.guild.features.includes(GuildFeature.WelcomeScreenEnabled);\n  }\n}\n\nmodule.exports = WelcomeScreen;\n",
    "'use strict';\n\nconst AnonymousGuild = require('./AnonymousGuild');\nconst WelcomeScreen = require('./WelcomeScreen');\n\n/**\n * Represents a guild received from an invite, includes welcome screen data if available.\n * @extends {AnonymousGuild}\n */\nclass InviteGuild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The welcome screen for this invite guild\n     * @type {?WelcomeScreen}\n     */\n    this.welcomeScreen = data.welcome_screen !== undefined ? new WelcomeScreen(this, data.welcome_screen) : null;\n  }\n}\n\nmodule.exports = InviteGuild;\n",
    "'use strict';\n\nconst { RouteBases, Routes, PermissionFlagsBits } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { GuildScheduledEvent } = require('./GuildScheduledEvent');\nconst IntegrationApplication = require('./IntegrationApplication');\nconst InviteStageInstance = require('./InviteStageInstance');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an invitation to a guild channel.\n * @extends {Base}\n */\nclass Invite extends Base {\n  /**\n   * A regular expression that matches Discord invite links.\n   * The `code` group property is present on the `exec()` result of this expression.\n   * @type {RegExp}\n   * @memberof Invite\n   */\n  static InvitesPattern = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/(?<code>[\\w-]{2,255})/i;\n\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The type of this invite\n     * @type {InviteType}\n     */\n    this.type = data.type;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n    this.guild ??= null;\n    if (data.guild) {\n      this.guild = this.client.guilds.cache.get(data.guild.id) ?? new InviteGuild(this.client, data.guild);\n    }\n\n    if ('code' in data) {\n      /**\n       * The code for this invite\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate number of online members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.presenceCount = data.approximate_presence_count;\n    } else {\n      this.presenceCount ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate total number of members of the guild this invite is for\n       * <info>This is only available when the invite was fetched through {@link Client#fetchInvite}.</info>\n       * @type {?number}\n       */\n      this.memberCount = data.approximate_member_count;\n    } else {\n      this.memberCount ??= null;\n    }\n\n    if ('temporary' in data) {\n      /**\n       * Whether or not this invite only grants temporary membership\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?boolean}\n       */\n      this.temporary = data.temporary ?? null;\n    } else {\n      this.temporary ??= null;\n    }\n\n    if ('max_age' in data) {\n      /**\n       * The maximum age of the invite, in seconds, 0 if never expires\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxAge = data.max_age;\n    } else {\n      this.maxAge ??= null;\n    }\n\n    if ('uses' in data) {\n      /**\n       * How many times this invite has been used\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.uses = data.uses;\n    } else {\n      this.uses ??= null;\n    }\n\n    if ('max_uses' in data) {\n      /**\n       * The maximum uses of this invite\n       * <info>This is only available when the invite was fetched through {@link GuildInviteManager#fetch}\n       * or created through {@link GuildInviteManager#create}.</info>\n       * @type {?number}\n       */\n      this.maxUses = data.max_uses;\n    } else {\n      this.maxUses ??= null;\n    }\n\n    if ('inviter_id' in data) {\n      /**\n       * The user's id who created this invite\n       * @type {?Snowflake}\n       */\n      this.inviterId = data.inviter_id;\n    } else {\n      this.inviterId ??= null;\n    }\n\n    if ('inviter' in data) {\n      this.client.users._add(data.inviter);\n      this.inviterId = data.inviter.id;\n    }\n\n    if ('target_user' in data) {\n      /**\n       * The user whose stream to display for this voice channel stream invite\n       * @type {?User}\n       */\n      this.targetUser = this.client.users._add(data.target_user);\n    } else {\n      this.targetUser ??= null;\n    }\n\n    if ('target_application' in data) {\n      /**\n       * The embedded application to open for this voice channel embedded application invite\n       * @type {?IntegrationApplication}\n       */\n      this.targetApplication = new IntegrationApplication(this.client, data.target_application);\n    } else {\n      this.targetApplication ??= null;\n    }\n\n    if ('target_type' in data) {\n      /**\n       * The target type\n       * @type {?InviteTargetType}\n       */\n      this.targetType = data.target_type;\n    } else {\n      this.targetType ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel this invite is for\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('channel' in data) {\n      /**\n       * The channel this invite is for\n       * @type {?BaseChannel}\n       */\n      this.channel =\n        this.client.channels._add(data.channel, this.guild, { cache: false }) ??\n        this.client.channels.resolve(this.channelId);\n\n      this.channelId ??= data.channel.id;\n    }\n\n    if ('created_at' in data) {\n      /**\n       * The timestamp this invite was created at\n       * @type {?number}\n       */\n      this.createdTimestamp = Date.parse(data.created_at);\n    } else {\n      this.createdTimestamp ??= null;\n    }\n\n    if ('expires_at' in data) {\n      this._expiresTimestamp = data.expires_at && Date.parse(data.expires_at);\n    } else {\n      this._expiresTimestamp ??= null;\n    }\n\n    if ('stage_instance' in data) {\n      /**\n       * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n       * @type {?InviteStageInstance}\n       * @deprecated\n       */\n      this.stageInstance = new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id);\n    } else {\n      this.stageInstance ??= null;\n    }\n\n    if ('guild_scheduled_event' in data) {\n      /**\n       * The guild scheduled event data if there is a {@link GuildScheduledEvent} in the channel this invite is for\n       * @type {?GuildScheduledEvent}\n       */\n      this.guildScheduledEvent = new GuildScheduledEvent(this.client, data.guild_scheduled_event);\n    } else {\n      this.guildScheduledEvent ??= null;\n    }\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return Boolean(\n      this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageChannels, false) ||\n        guild.members.me.permissions.has(PermissionFlagsBits.ManageGuild),\n    );\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return (\n      this._expiresTimestamp ??\n      (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1_000 : null)\n    );\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    return this.expiresTimestamp && new Date(this.expiresTimestamp);\n  }\n\n  /**\n   * The user who created this invite\n   * @type {?User}\n   * @readonly\n   */\n  get inviter() {\n    return this.inviterId && this.client.users.resolve(this.inviterId);\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.invite}/${this.code}`;\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  async delete(reason) {\n    await this.client.rest.delete(Routes.invite(this.code), { reason });\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId',\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n}\n\nmodule.exports = Invite;\n",
    "'use strict';\n\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { RouteBases, Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { resolveImage } = require('../util/DataResolver');\nconst Events = require('../util/Events');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * A regular expression that matches guild template links.\n   * The `code` group property is present on the `exec()` result of this expression.\n   * @type {RegExp}\n   * @memberof GuildTemplate\n   */\n  static GuildTemplatesPattern = /discord(?:app)?\\.(?:com\\/template|new)\\/(?<code>[\\w-]{2,255})/i;\n\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('code' in data) {\n      /**\n       * The unique code of this template\n       * @type {string}\n       */\n      this.code = data.code;\n    }\n\n    if ('name' in data) {\n      /**\n       * The name of this template\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of this template\n       * @type {?string}\n       */\n      this.description = data.description;\n    }\n\n    if ('usage_count' in data) {\n      /**\n       * The amount of times this template has been used\n       * @type {number}\n       */\n      this.usageCount = data.usage_count;\n    }\n\n    if ('creator_id' in data) {\n      /**\n       * The id of the user that created this template\n       * @type {Snowflake}\n       */\n      this.creatorId = data.creator_id;\n    }\n\n    if ('creator' in data) {\n      /**\n       * The user that created this template\n       * @type {User}\n       */\n      this.creator = this.client.users._add(data.creator);\n    }\n\n    if ('created_at' in data) {\n      /**\n       * The timestamp of when this template was created at\n       * @type {number}\n       */\n      this.createdTimestamp = Date.parse(data.created_at);\n    }\n\n    if ('updated_at' in data) {\n      /**\n       * The timestamp of when this template was last synced to the guild\n       * @type {number}\n       */\n      this.updatedTimestamp = Date.parse(data.updated_at);\n    }\n\n    if ('source_guild_id' in data) {\n      /**\n       * The id of the guild that this template belongs to\n       * @type {Snowflake}\n       */\n      this.guildId = data.source_guild_id;\n    }\n\n    if ('serialized_source_guild' in data) {\n      /**\n       * The data of the guild that this template would create\n       * @type {APIGuild}\n       */\n      this.serializedGuild = data.serialized_source_guild;\n    }\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n\n    return this;\n  }\n\n  /**\n   * Creates a guild based on this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const { client } = this;\n    const data = await client.rest.post(Routes.template(this.code), {\n      body: {\n        name,\n        icon: await resolveImage(icon),\n      },\n    });\n\n    if (client.guilds.cache.has(data.id)) return client.guilds.cache.get(data.id);\n\n    return new Promise(resolve => {\n      const resolveGuild = guild => {\n        client.off(Events.GuildCreate, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GuildCreate, handleGuild);\n\n      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10_000).unref();\n    });\n  }\n\n  /**\n   * Options used to edit a guild template.\n   * @typedef {Object} GuildTemplateEditOptions\n   * @property {string} [name] The name of this template\n   * @property {string} [description] The description of this template\n   */\n\n  /**\n   * Updates the metadata of this template.\n   * @param {GuildTemplateEditOptions} [options] Options for editing the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async edit({ name, description } = {}) {\n    const data = await this.client.rest.patch(Routes.guildTemplate(this.guildId, this.code), {\n      body: { name, description },\n    });\n    return this._patch(data);\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.guildTemplate(this.guildId, this.code));\n    return this;\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async sync() {\n    const data = await this.client.rest.put(Routes.guildTemplate(this.guildId, this.code));\n    return this._patch(data);\n  }\n\n  /**\n   * The time when this template was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time when this template was last synced to the guild\n   * @type {Date}\n   * @readonly\n   */\n  get updatedAt() {\n    return new Date(this.updatedTimestamp);\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${RouteBases.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the template's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\n\nmodule.exports = GuildTemplate;\n",
    "'use strict';\n\nconst { Buffer } = require('node:buffer');\nconst fs = require('node:fs/promises');\nconst path = require('node:path');\nconst { fetch } = require('undici');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst Invite = require('../structures/Invite');\n\n/**\n * Data that can be resolved to give an invite code. This can be:\n * * An invite code\n * * An invite URL\n * @typedef {string} InviteResolvable\n */\n\n/**\n * Data that can be resolved to give a template code. This can be:\n * * A template code\n * * A template URL\n * @typedef {string} GuildTemplateResolvable\n */\n\n/**\n * Resolves the string to a code based on the passed regex.\n * @param {string} data The string to resolve\n * @param {RegExp} regex The RegExp used to extract the code\n * @returns {string}\n * @private\n */\nfunction resolveCode(data, regex) {\n  return regex.exec(data)?.[1] ?? data;\n}\n\n/**\n * Resolves InviteResolvable to an invite code.\n * @param {InviteResolvable} data The invite resolvable to resolve\n * @returns {string}\n * @private\n */\nfunction resolveInviteCode(data) {\n  return resolveCode(data, Invite.InvitesPattern);\n}\n\n/**\n * Resolves GuildTemplateResolvable to a template code.\n * @param {GuildTemplateResolvable} data The template resolvable to resolve\n * @returns {string}\n * @private\n */\nfunction resolveGuildTemplateCode(data) {\n  const GuildTemplate = require('../structures/GuildTemplate');\n  return resolveCode(data, GuildTemplate.GuildTemplatesPattern);\n}\n\n/**\n * Data that can be resolved to give a Buffer. This can be:\n * * A Buffer\n * * The path to a local file\n * * A URL <warn>When provided a URL, discord.js will fetch the URL internally in order to create a Buffer.\n * This can pose a security risk when the URL has not been sanitized</warn>\n * @typedef {string|Buffer} BufferResolvable\n */\n\n/**\n * @external Stream\n * @see {@link https://nodejs.org/api/stream.html}\n */\n\n/**\n * @typedef {Object} ResolvedFile\n * @property {Buffer} data Buffer containing the file data\n * @property {string} [contentType] Content-Type of the file\n * @private\n */\n\n/**\n * Resolves a BufferResolvable to a Buffer.\n * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n * @returns {Promise<ResolvedFile>}\n * @private\n */\nasync function resolveFile(resource) {\n  if (Buffer.isBuffer(resource)) return { data: resource };\n\n  if (typeof resource[Symbol.asyncIterator] === 'function') {\n    const buffers = [];\n    for await (const data of resource) buffers.push(Buffer.from(data));\n    return { data: Buffer.concat(buffers) };\n  }\n\n  if (typeof resource === 'string') {\n    if (/^https?:\\/\\//.test(resource)) {\n      const res = await fetch(resource);\n      return { data: Buffer.from(await res.arrayBuffer()), contentType: res.headers.get('content-type') };\n    }\n\n    const file = path.resolve(resource);\n\n    const stats = await fs.stat(file);\n    if (!stats.isFile()) throw new DiscordjsError(ErrorCodes.FileNotFound, file);\n    return { data: await fs.readFile(file) };\n  }\n\n  throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n}\n\n/**\n * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n * * A Buffer\n * * A base64 string\n * @typedef {Buffer|string} Base64Resolvable\n */\n\n/**\n * Resolves a Base64Resolvable to a Base 64 image.\n * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n * @returns {?string}\n * @private\n */\nfunction resolveBase64(data) {\n  if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n  return data;\n}\n\n/**\n * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n * @returns {Promise<?string>}\n * @private\n */\nasync function resolveImage(image) {\n  if (!image) return null;\n  if (typeof image === 'string' && image.startsWith('data:')) {\n    return image;\n  }\n  const file = await resolveFile(image);\n  return resolveBase64(file.data);\n}\n\nmodule.exports = { resolveCode, resolveInviteCode, resolveGuildTemplateCode, resolveImage, resolveBase64, resolveFile };\n",
    "'use strict';\n\nconst { MessageFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link Message#flags} bitfield.\n * @extends {BitField}\n */\nclass MessageFlagsBitField extends BitField {\n  /**\n   * Numeric message flags.\n   * @type {MessageFlags}\n   * @memberof MessageFlagsBitField\n   */\n  static Flags = MessageFlags;\n}\n\n/**\n * @name MessageFlagsBitField\n * @kind constructor\n * @memberof MessageFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Data that can be resolved to give a message flags bit field. This can be:\n * * A string (see {@link MessageFlagsBitField.Flags})\n * * A message flag\n * * An instance of {@link MessageFlagsBitField}\n * * An array of `MessageFlagsResolvable`\n * @typedef {string|number|MessageFlagsBitField|MessageFlagsResolvable[]} MessageFlagsResolvable\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name MessageFlagsBitField#bitfield\n */\n\nmodule.exports = MessageFlagsBitField;\n",
    "'use strict';\n\nconst { deprecate } = require('node:util');\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { InteractionType, ApplicationCommandType, ComponentType } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { SelectMenuTypes } = require('../util/Constants');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents an interaction.\n * @extends {Base}\n * @abstract\n */\nclass BaseInteraction extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The interaction's type\n     * @type {InteractionType}\n     */\n    this.type = data.type;\n\n    /**\n     * The interaction's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The interaction's token\n     * @type {string}\n     * @name BaseInteraction#token\n     * @readonly\n     */\n    Object.defineProperty(this, 'token', { value: data.token });\n\n    /**\n     * The application's id\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {?Snowflake}\n     */\n    this.channelId = data.channel?.id ?? null;\n\n    /**\n     * The id of the guild this interaction was sent in\n     * @type {?Snowflake}\n     */\n    this.guildId = data.guild_id ?? null;\n\n    /**\n     * The user who created this interaction\n     * @type {User}\n     */\n    this.user = this.client.users._add(data.user ?? data.member.user);\n\n    /**\n     * If this interaction was sent in a guild, the member which sent it\n     * @type {?(GuildMember|APIInteractionGuildMember)}\n     */\n    this.member = data.member ? (this.guild?.members._add(data.member) ?? data.member) : null;\n\n    /**\n     * The version\n     * @type {number}\n     */\n    this.version = data.version;\n\n    /**\n     * Set of permissions the application or bot has within the channel the interaction was sent from\n     * @type {Readonly<PermissionsBitField>}\n     */\n    this.appPermissions = new PermissionsBitField(data.app_permissions).freeze();\n\n    /**\n     * The permissions of the member, if one exists, in the channel this interaction was executed in\n     * @type {?Readonly<PermissionsBitField>}\n     */\n    this.memberPermissions = data.member?.permissions\n      ? new PermissionsBitField(data.member.permissions).freeze()\n      : null;\n\n    /**\n     * The locale of the user who invoked this interaction\n     * @type {Locale}\n     */\n    this.locale = data.locale;\n\n    /**\n     * The preferred locale from the guild this interaction was sent in\n     * @type {?Locale}\n     */\n    this.guildLocale = data.guild_locale ?? null;\n\n    /**\n     * The entitlements for the invoking user, representing access to premium SKUs\n     * @type {Collection<Snowflake, Entitlement>}\n     */\n    this.entitlements = data.entitlements.reduce(\n      (coll, entitlement) => coll.set(entitlement.id, this.client.application.entitlements._add(entitlement)),\n      new Collection(),\n    );\n\n    /* eslint-disable max-len */\n    /**\n     * Mapping of installation contexts that the interaction was authorized for the related user or guild ids\n     * @type {APIAuthorizingIntegrationOwnersMap}\n     * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-authorizing-integration-owners-object}\n     */\n    this.authorizingIntegrationOwners = data.authorizing_integration_owners;\n    /* eslint-enable max-len */\n\n    /**\n     * Context where the interaction was triggered from\n     * @type {?InteractionContextType}\n     */\n    this.context = data.context ?? null;\n  }\n\n  /**\n   * The timestamp the interaction was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the interaction was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The channel this interaction was sent in\n   * @type {?TextBasedChannels}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * The guild this interaction was sent in\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId) ?? null;\n  }\n\n  /**\n   * Indicates whether this interaction is received from a guild.\n   * @returns {boolean}\n   */\n  inGuild() {\n    return Boolean(this.guildId && this.member);\n  }\n\n  /**\n   * Indicates whether this interaction is received from a cached guild.\n   * @returns {boolean}\n   */\n  inCachedGuild() {\n    return Boolean(this.guild && this.member);\n  }\n\n  /**\n   * Indicates whether or not this interaction is received from an uncached guild.\n   * @returns {boolean}\n   */\n  inRawGuild() {\n    return Boolean(this.guildId && !this.guild && this.member);\n  }\n\n  /**\n   * Indicates whether this interaction is an {@link AutocompleteInteraction}\n   * @returns {boolean}\n   */\n  isAutocomplete() {\n    return this.type === InteractionType.ApplicationCommandAutocomplete;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link CommandInteraction}\n   * @returns {boolean}\n   */\n  isCommand() {\n    return this.type === InteractionType.ApplicationCommand;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ChatInputCommandInteraction}.\n   * @returns {boolean}\n   */\n  isChatInputCommand() {\n    return this.type === InteractionType.ApplicationCommand && this.commandType === ApplicationCommandType.ChatInput;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ContextMenuCommandInteraction}\n   * @returns {boolean}\n   */\n  isContextMenuCommand() {\n    return (\n      this.type === InteractionType.ApplicationCommand &&\n      [ApplicationCommandType.User, ApplicationCommandType.Message].includes(this.commandType)\n    );\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link MessageComponentInteraction}\n   * @returns {boolean}\n   */\n  isMessageComponent() {\n    return this.type === InteractionType.MessageComponent;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ModalSubmitInteraction}\n   * @returns {boolean}\n   */\n  isModalSubmit() {\n    return this.type === InteractionType.ModalSubmit;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link UserContextMenuCommandInteraction}\n   * @returns {boolean}\n   */\n  isUserContextMenuCommand() {\n    return this.isContextMenuCommand() && this.commandType === ApplicationCommandType.User;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link MessageContextMenuCommandInteraction}\n   * @returns {boolean}\n   */\n  isMessageContextMenuCommand() {\n    return this.isContextMenuCommand() && this.commandType === ApplicationCommandType.Message;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ButtonInteraction}.\n   * @returns {boolean}\n   */\n  isButton() {\n    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.Button;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link StringSelectMenuInteraction}.\n   * @returns {boolean}\n   * @deprecated Use {@link BaseInteraction#isStringSelectMenu} instead.\n   */\n  isSelectMenu() {\n    return this.isStringSelectMenu();\n  }\n\n  /**\n   * Indicates whether this interaction is a select menu of any known type.\n   * @returns {boolean}\n   */\n  isAnySelectMenu() {\n    return this.type === InteractionType.MessageComponent && SelectMenuTypes.includes(this.componentType);\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link StringSelectMenuInteraction}.\n   * @returns {boolean}\n   */\n  isStringSelectMenu() {\n    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.StringSelect;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link UserSelectMenuInteraction}\n   * @returns {boolean}\n   */\n  isUserSelectMenu() {\n    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.UserSelect;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link RoleSelectMenuInteraction}\n   * @returns {boolean}\n   */\n  isRoleSelectMenu() {\n    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.RoleSelect;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ChannelSelectMenuInteraction}\n   * @returns {boolean}\n   */\n  isChannelSelectMenu() {\n    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.ChannelSelect;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link MentionableSelectMenuInteraction}\n   * @returns {boolean}\n   */\n  isMentionableSelectMenu() {\n    return this.type === InteractionType.MessageComponent && this.componentType === ComponentType.MentionableSelect;\n  }\n\n  /**\n   * Indicates whether this interaction can be replied to.\n   * @returns {boolean}\n   */\n  isRepliable() {\n    return ![InteractionType.Ping, InteractionType.ApplicationCommandAutocomplete].includes(this.type);\n  }\n}\n\nBaseInteraction.prototype.isSelectMenu = deprecate(\n  BaseInteraction.prototype.isSelectMenu,\n  'BaseInteraction#isSelectMenu() is deprecated. Use BaseInteraction#isStringSelectMenu() instead.',\n);\n\nmodule.exports = BaseInteraction;\n",
    "'use strict';\n\n/**\n * Role connection metadata object for an application.\n */\nclass ApplicationRoleConnectionMetadata {\n  constructor(data) {\n    /**\n     * The name of this metadata field\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The name localizations for this metadata field\n     * @type {?Object<Locale, string>}\n     */\n    this.nameLocalizations = data.name_localizations ?? null;\n\n    /**\n     * The description of this metadata field\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The description localizations for this metadata field\n     * @type {?Object<Locale, string>}\n     */\n    this.descriptionLocalizations = data.description_localizations ?? null;\n\n    /**\n     * The dictionary key for this metadata field\n     * @type {string}\n     */\n    this.key = data.key;\n\n    /**\n     * The type of this metadata field\n     * @type {ApplicationRoleConnectionMetadataType}\n     */\n    this.type = data.type;\n  }\n}\n\nexports.ApplicationRoleConnectionMetadata = ApplicationRoleConnectionMetadata;\n",
    "'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a Client OAuth2 Application Team Member.\n * @extends {Base}\n */\nclass TeamMember extends Base {\n  constructor(team, data) {\n    super(team.client);\n\n    /**\n     * The Team this member is part of\n     * @type {Team}\n     */\n    this.team = team;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('permissions' in data) {\n      /**\n       * The permissions this Team Member has with regard to the team\n       * @type {string[]}\n       * @deprecated Use {@link TeamMember#role} instead.\n       */\n      this.permissions = data.permissions;\n    }\n\n    if ('membership_state' in data) {\n      /**\n       * The permissions this Team Member has with regard to the team\n       * @type {TeamMemberMembershipState}\n       */\n      this.membershipState = data.membership_state;\n    }\n\n    if ('user' in data) {\n      /**\n       * The user for this Team Member\n       * @type {User}\n       */\n      this.user = this.client.users._add(data.user);\n    }\n\n    if ('role' in data) {\n      /**\n       * The role of this Team Member\n       * @type {TeamMemberRole}\n       */\n      this.role = data.role;\n    }\n  }\n\n  /**\n   * The Team Member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the team member's mention instead of the\n   * TeamMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Team Member's mention: <@123456789012345678>\n   * console.log(`Team Member's mention: ${teamMember}`);\n   */\n  toString() {\n    return this.user.toString();\n  }\n}\n\nmodule.exports = TeamMember;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst TeamMember = require('./TeamMember');\n\n/**\n * Represents a Client OAuth2 Application Team.\n * @extends {Base}\n */\nclass Team extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The Team's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the Team\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('icon' in data) {\n      /**\n       * The Team's icon hash\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    } else {\n      this.icon ??= null;\n    }\n\n    if ('owner_user_id' in data) {\n      /**\n       * The Team's owner id\n       * @type {?Snowflake}\n       */\n      this.ownerId = data.owner_user_id;\n    } else {\n      this.ownerId ??= null;\n    }\n    /**\n     * The Team's members\n     * @type {Collection<Snowflake, TeamMember>}\n     */\n    this.members = new Collection();\n\n    for (const memberData of data.members) {\n      const member = new TeamMember(this, memberData);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The owner of this team\n   * @type {?TeamMember}\n   * @readonly\n   */\n  get owner() {\n    return this.members.get(this.ownerId) ?? null;\n  }\n\n  /**\n   * The timestamp the team was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the team was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the team's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.teamIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the Team's name instead of the\n   * Team object.\n   * @returns {string}\n   * @example\n   * // Logs: Team name: My Team\n   * console.log(`Team name: ${team}`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({ createdTimestamp: true });\n  }\n}\n\nmodule.exports = Team;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { ApplicationCommandPermissionType, RESTJSONErrorCodes, Routes } = require('discord-api-types/v10');\nconst BaseManager = require('./BaseManager');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Manages API methods for permissions of Application Commands.\n * @extends {BaseManager}\n */\nclass ApplicationCommandPermissionsManager extends BaseManager {\n  constructor(manager) {\n    super(manager.client);\n\n    /**\n     * The manager or command that this manager belongs to\n     * @type {ApplicationCommandManager|ApplicationCommand}\n     * @private\n     */\n    this.manager = manager;\n\n    /**\n     * The guild that this manager acts on\n     * @type {?Guild}\n     */\n    this.guild = manager.guild ?? null;\n\n    /**\n     * The id of the guild that this manager acts on\n     * @type {?Snowflake}\n     */\n    this.guildId = manager.guildId ?? manager.guild?.id ?? null;\n\n    /**\n     * The id of the command this manager acts on\n     * @type {?Snowflake}\n     */\n    this.commandId = manager.id ?? null;\n  }\n\n  /**\n   * The APIRouter path to the commands\n   * @param {Snowflake} guildId The guild's id to use in the path,\n   * @param {Snowflake} [commandId] The application command's id\n   * @returns {string}\n   * @private\n   */\n  permissionsPath(guildId, commandId) {\n    if (commandId) {\n      return Routes.applicationCommandPermissions(this.client.application.id, guildId, commandId);\n    }\n\n    return Routes.guildApplicationCommandsPermissions(this.client.application.id, guildId);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * The object returned when fetching permissions for an application command.\n   * @typedef {Object} ApplicationCommandPermissions\n   * @property {Snowflake} id The role, user, or channel's id. Can also be a\n   * {@link https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-constants permission constant}.\n   * @property {ApplicationCommandPermissionType} type Whether this permission is for a role or a user\n   * @property {boolean} permission Whether the role or user has the permission to use this command\n   */\n  /* eslint-enable max-len */\n\n  /**\n   * Options for managing permissions for one or more Application Commands\n   * <warn>When passing these options to a manager where `guildId` is `null`,\n   * `guild` is a required parameter</warn>\n   * @typedef {Object} BaseApplicationCommandPermissionsOptions\n   * @property {GuildResolvable} [guild] The guild to modify / check permissions for\n   * <warn>Ignored when the manager has a non-null `guildId` property</warn>\n   * @property {ApplicationCommandResolvable} [command] The command to modify / check permissions for\n   * <warn>Ignored when the manager has a non-null `commandId` property</warn>\n   */\n\n  /**\n   * Fetches the permissions for one or multiple commands. Providing the client's id as the \"command id\" will fetch\n   * *only* the guild level permissions\n   * @param {BaseApplicationCommandPermissionsOptions} [options] Options used to fetch permissions\n   * @returns {Promise<ApplicationCommandPermissions[]|Collection<Snowflake, ApplicationCommandPermissions[]>>}\n   * @example\n   * // Fetch permissions for one command\n   * guild.commands.permissions.fetch({ command: '123456789012345678' })\n   *   .then(perms => console.log(`Fetched ${perms.length} overwrites`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch permissions for all commands in a guild\n   * client.application.commands.permissions.fetch({ guild: '123456789012345678' })\n   *   .then(perms => console.log(`Fetched permissions for ${perms.size} commands`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch guild level permissions\n   * guild.commands.permissions.fetch({ command: client.user.id })\n   *   .then(perms => console.log(`Fetched ${perms.length} guild level permissions`))\n   *   .catch(console.error);\n   */\n  async fetch({ guild, command } = {}) {\n    const { guildId, commandId } = this._validateOptions(guild, command);\n    if (commandId) {\n      const data = await this.client.rest.get(this.permissionsPath(guildId, commandId));\n      return data.permissions;\n    }\n\n    const data = await this.client.rest.get(this.permissionsPath(guildId));\n    return data.reduce((coll, perm) => coll.set(perm.id, perm.permissions), new Collection());\n  }\n\n  /**\n   * Options used to set permissions for one or more Application Commands in a guild\n   * <warn>Omitting the `command` parameter edits the guild wide permissions\n   * when the manager's `commandId` is `null`</warn>\n   * @typedef {BaseApplicationCommandPermissionsOptions} ApplicationCommandPermissionsEditOptions\n   * @property {ApplicationCommandPermissions[]} permissions The new permissions for the guild or overwrite\n   * @property {string} token The bearer token to use that authorizes the permission edit\n   */\n\n  /**\n   * Sets the permissions for the guild or a command overwrite.\n   * @param {ApplicationCommandPermissionsEditOptions} options Options used to set permissions\n   * @returns {Promise<ApplicationCommandPermissions[]|Collection<Snowflake, ApplicationCommandPermissions[]>>}\n   * @example\n   * // Set a permission overwrite for a command\n   * client.application.commands.permissions.set({\n   *  guild: '892455839386304532',\n   *  command: '123456789012345678',\n   *  token: 'TotallyRealToken',\n   *  permissions: [\n   *    {\n   *      id: '876543210987654321',\n   *      type: ApplicationCommandPermissionType.User,\n   *      permission: false,\n   *    },\n   * ]})\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Set the permissions used for the guild (commands without overwrites)\n   * guild.commands.permissions.set({ token: 'TotallyRealToken', permissions: [\n   *   {\n   *     id: '123456789012345678',\n   *     permissions: [{\n   *       id: '876543210987654321',\n   *       type: ApplicationCommandPermissionType.User,\n   *       permission: false,\n   *     }],\n   *   },\n   * ]})\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async set({ guild, command, permissions, token } = {}) {\n    if (!token) {\n      throw new DiscordjsError(ErrorCodes.ApplicationCommandPermissionsTokenMissing);\n    }\n    let { guildId, commandId } = this._validateOptions(guild, command);\n\n    if (!Array.isArray(permissions)) {\n      throw new DiscordjsTypeError(\n        ErrorCodes.InvalidType,\n        'permissions',\n        'Array of ApplicationCommandPermissions',\n        true,\n      );\n    }\n\n    if (!commandId) {\n      commandId = this.client.user.id;\n    }\n    const data = await this.client.rest.put(this.permissionsPath(guildId, commandId), {\n      body: { permissions },\n      auth: false,\n      headers: { Authorization: `Bearer ${token}` },\n    });\n    return data.permissions;\n  }\n\n  /**\n   * Add permissions to a command.\n   * @param {ApplicationCommandPermissionsEditOptions} options Options used to add permissions\n   * @returns {Promise<ApplicationCommandPermissions[]>}\n   * @example\n   * // Add a rule to block a role from using a command\n   * guild.commands.permissions.add({ command: '123456789012345678', token: 'TotallyRealToken', permissions: [\n   *   {\n   *     id: '876543211234567890',\n   *     type: ApplicationCommandPermissionType.Role,\n   *     permission: false\n   *   },\n   * ]})\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async add({ guild, command, permissions, token } = {}) {\n    if (!token) {\n      throw new DiscordjsError(ErrorCodes.ApplicationCommandPermissionsTokenMissing);\n    }\n    let { guildId, commandId } = this._validateOptions(guild, command);\n    if (!commandId) {\n      commandId = this.client.user.id;\n    }\n    if (!Array.isArray(permissions)) {\n      throw new DiscordjsTypeError(\n        ErrorCodes.InvalidType,\n        'permissions',\n        'Array of ApplicationCommandPermissions',\n        true,\n      );\n    }\n\n    let existingPermissions = [];\n    try {\n      existingPermissions = await this.fetch({ guild: guildId, command: commandId });\n    } catch (error) {\n      if (error.code !== RESTJSONErrorCodes.UnknownApplicationCommandPermissions) throw error;\n    }\n\n    const newPermissions = permissions.slice();\n    for (const existingPermission of existingPermissions) {\n      if (!newPermissions.some(newPermission => newPermission.id === existingPermission.id)) {\n        newPermissions.push(existingPermission);\n      }\n    }\n\n    return this.set({ guild: guildId, command: commandId, permissions: newPermissions, token });\n  }\n\n  /**\n   * A static snowflake that identifies the everyone role for application command permissions.\n   * It is the same as the guild id\n   * @typedef {Snowflake} RolePermissionConstant\n   */\n\n  /**\n   * A static snowflake that identifies the \"all channels\" entity for application command permissions.\n   * It will be the result of the calculation `guildId - 1`\n   * @typedef {Snowflake} ChannelPermissionConstant\n   */\n\n  /**\n   * Options used to remove permissions from a command\n   * <warn>Omitting the `command` parameter removes from the guild wide permissions\n   * when the managers `commandId` is `null`</warn>\n   * <warn>At least one of `users`, `roles`, and `channels` is required</warn>\n   * @typedef {BaseApplicationCommandPermissionsOptions} RemoveApplicationCommandPermissionsOptions\n   * @property {string} token The bearer token to use that authorizes the permission removal\n   * @property {UserResolvable[]} [users] The user(s) to remove\n   * @property {Array<RoleResolvable|RolePermissionConstant>} [roles] The role(s) to remove\n   * @property {Array<GuildChannelResolvable|ChannelPermissionConstant>} [channels] The channel(s) to remove\n   */\n\n  /**\n   * Remove permissions from a command.\n   * @param {RemoveApplicationCommandPermissionsOptions} options Options used to remove permissions\n   * @returns {Promise<ApplicationCommandPermissions[]>}\n   * @example\n   * // Remove a user permission from this command\n   * guild.commands.permissions.remove({\n   *  command: '123456789012345678', users: '876543210123456789', token: 'TotallyRealToken',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove multiple roles from this command\n   * guild.commands.permissions.remove({\n   *   command: '123456789012345678', roles: ['876543210123456789', '765432101234567890'], token: 'TotallyRealToken',\n   * })\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  async remove({ guild, command, users, roles, channels, token } = {}) {\n    if (!token) {\n      throw new DiscordjsError(ErrorCodes.ApplicationCommandPermissionsTokenMissing);\n    }\n    let { guildId, commandId } = this._validateOptions(guild, command);\n    if (!commandId) {\n      commandId = this.client.user.id;\n    }\n\n    if (!users && !roles && !channels) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'users OR roles OR channels', 'Array or Resolvable', true);\n    }\n\n    let resolvedUserIds = [];\n    if (Array.isArray(users)) {\n      for (const user of users) {\n        const userId = this.client.users.resolveId(user);\n        if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'users', user);\n        resolvedUserIds.push(userId);\n      }\n    }\n\n    let resolvedRoleIds = [];\n    if (Array.isArray(roles)) {\n      for (const role of roles) {\n        if (typeof role === 'string') {\n          resolvedRoleIds.push(role);\n          continue;\n        }\n        if (!this.guild) throw new DiscordjsError(ErrorCodes.GuildUncachedEntityResolve, 'roles');\n        const roleId = this.guild.roles.resolveId(role);\n        if (!roleId) throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'users', role);\n        resolvedRoleIds.push(roleId);\n      }\n    }\n\n    let resolvedChannelIds = [];\n    if (Array.isArray(channels)) {\n      for (const channel of channels) {\n        if (typeof channel === 'string') {\n          resolvedChannelIds.push(channel);\n          continue;\n        }\n        if (!this.guild) throw new DiscordjsError(ErrorCodes.GuildUncachedEntityResolve, 'channels');\n        const channelId = this.guild.channels.resolveId(channel);\n        if (!channelId) throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'channels', channel);\n        resolvedChannelIds.push(channelId);\n      }\n    }\n\n    let existing = [];\n    try {\n      existing = await this.fetch({ guild: guildId, command: commandId });\n    } catch (error) {\n      if (error.code !== RESTJSONErrorCodes.UnknownApplicationCommandPermissions) throw error;\n    }\n\n    const permissions = existing.filter(perm => {\n      switch (perm.type) {\n        case ApplicationCommandPermissionType.Role:\n          return !resolvedRoleIds.includes(perm.id);\n        case ApplicationCommandPermissionType.User:\n          return !resolvedUserIds.includes(perm.id);\n        case ApplicationCommandPermissionType.Channel:\n          return !resolvedChannelIds.includes(perm.id);\n      }\n      return true;\n    });\n\n    return this.set({ guild: guildId, command: commandId, permissions, token });\n  }\n\n  /**\n   * Options used to check the existence of permissions on a command\n   * <warn>The `command` parameter is not optional when the managers `commandId` is `null`</warn>\n   * @typedef {BaseApplicationCommandPermissionsOptions} HasApplicationCommandPermissionsOptions\n   * @property {ApplicationCommandPermissionIdResolvable} permissionId The entity to check if a permission exists for\n   * on this command.\n   * @property {ApplicationCommandPermissionType} [permissionType] Check for a specific type of permission\n   */\n\n  /**\n   * Check whether a permission exists for a user, role, or channel\n   * @param {HasApplicationCommandPermissionsOptions} options Options used to check permissions\n   * @returns {Promise<boolean>}\n   * @example\n   * guild.commands.permissions.has({ command: '123456789012345678', permissionId: '876543210123456789' })\n   *  .then(console.log)\n   *  .catch(console.error);\n   */\n  async has({ guild, command, permissionId, permissionType }) {\n    const { guildId, commandId } = this._validateOptions(guild, command);\n    if (!commandId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n\n    if (!permissionId) {\n      throw new DiscordjsTypeError(\n        ErrorCodes.InvalidType,\n        'permissionId',\n        'UserResolvable, RoleResolvable, ChannelResolvable, or Permission Constant',\n      );\n    }\n    let resolvedId = permissionId;\n    if (typeof permissionId !== 'string') {\n      resolvedId = this.client.users.resolveId(permissionId);\n      if (!resolvedId) {\n        if (!this.guild) throw new DiscordjsError(ErrorCodes.GuildUncachedEntityResolve, 'roles');\n        resolvedId = this.guild.roles.resolveId(permissionId);\n      }\n      if (!resolvedId) {\n        resolvedId = this.guild.channels.resolveId(permissionId);\n      }\n      if (!resolvedId) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'permissionId',\n          'UserResolvable, RoleResolvable, ChannelResolvable, or Permission Constant',\n        );\n      }\n    }\n\n    let existing = [];\n    try {\n      existing = await this.fetch({ guild: guildId, command: commandId });\n    } catch (error) {\n      if (error.code !== RESTJSONErrorCodes.UnknownApplicationCommandPermissions) throw error;\n    }\n\n    // Check permission type if provided for the single edge case where a channel id is the same as the everyone role id\n    return existing.some(perm => perm.id === resolvedId && (permissionType ?? perm.type) === perm.type);\n  }\n\n  _validateOptions(guild, command) {\n    const guildId = this.guildId ?? this.client.guilds.resolveId(guild);\n    if (!guildId) throw new DiscordjsError(ErrorCodes.GlobalCommandPermissions);\n    let commandId = this.commandId;\n    if (command && !commandId) {\n      commandId = this.manager.resolveId?.(command);\n      if (!commandId && this.guild) {\n        commandId = this.guild.commands.resolveId(command);\n      }\n      commandId ??= this.client.application?.commands.resolveId(command);\n      if (!commandId) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable', true);\n      }\n    }\n    return { guildId, commandId };\n  }\n}\n\nmodule.exports = ApplicationCommandPermissionsManager;\n\n/* eslint-disable max-len */\n/**\n * Data that resolves to an id used for an application command permission\n * @typedef {UserResolvable|RoleResolvable|GuildChannelResolvable|RolePermissionConstant|ChannelPermissionConstant} ApplicationCommandPermissionIdResolvable\n */\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { ApplicationCommandOptionType } = require('discord-api-types/v10');\nconst isEqual = require('fast-deep-equal');\nconst Base = require('./Base');\nconst ApplicationCommandPermissionsManager = require('../managers/ApplicationCommandPermissionsManager');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents an application command.\n * @extends {Base}\n */\nclass ApplicationCommand extends Base {\n  constructor(client, data, guild, guildId) {\n    super(client);\n\n    /**\n     * The command's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The parent application's id\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The guild this command is part of\n     * @type {?Guild}\n     */\n    this.guild = guild ?? null;\n\n    /**\n     * The guild's id this command is part of, this may be non-null when `guild` is `null` if the command\n     * was fetched from the `ApplicationCommandManager`\n     * @type {?Snowflake}\n     */\n    this.guildId = guild?.id ?? guildId ?? null;\n\n    /**\n     * The manager for permissions of this command on its guild or arbitrary guilds when the command is global\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n\n    /**\n     * The type of this application command\n     * @type {ApplicationCommandType}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this command is age-restricted (18+)\n     * @type {boolean}\n     */\n    this.nsfw = data.nsfw ?? false;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of this command\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('name_localizations' in data) {\n      /**\n       * The name localizations for this command\n       * @type {?Object<Locale, string>}\n       */\n      this.nameLocalizations = data.name_localizations;\n    } else {\n      this.nameLocalizations ??= null;\n    }\n\n    if ('name_localized' in data) {\n      /**\n       * The localized name for this command\n       * @type {?string}\n       */\n      this.nameLocalized = data.name_localized;\n    } else {\n      this.nameLocalized ??= null;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description of this command\n       * @type {string}\n       */\n      this.description = data.description;\n    }\n\n    if ('description_localizations' in data) {\n      /**\n       * The description localizations for this command\n       * @type {?Object<Locale, string>}\n       */\n      this.descriptionLocalizations = data.description_localizations;\n    } else {\n      this.descriptionLocalizations ??= null;\n    }\n\n    if ('description_localized' in data) {\n      /**\n       * The localized description for this command\n       * @type {?string}\n       */\n      this.descriptionLocalized = data.description_localized;\n    } else {\n      this.descriptionLocalized ??= null;\n    }\n\n    if ('options' in data) {\n      /**\n       * The options of this command\n       * @type {ApplicationCommandOption[]}\n       */\n      this.options = data.options.map(option => this.constructor.transformOption(option, true));\n    } else {\n      this.options ??= [];\n    }\n\n    if ('default_member_permissions' in data) {\n      /**\n       * The default bitfield used to determine whether this command be used in a guild\n       * @type {?Readonly<PermissionsBitField>}\n       */\n      this.defaultMemberPermissions = data.default_member_permissions\n        ? new PermissionsBitField(BigInt(data.default_member_permissions)).freeze()\n        : null;\n    } else {\n      this.defaultMemberPermissions ??= null;\n    }\n\n    if ('dm_permission' in data) {\n      /**\n       * Whether the command can be used in DMs\n       * <info>This property is always `null` on guild commands</info>\n       * @type {?boolean}\n       * @deprecated Use {@link ApplicationCommand#contexts} instead.\n       */\n      this.dmPermission = data.dm_permission;\n    } else {\n      this.dmPermission ??= null;\n    }\n\n    if ('integration_types' in data) {\n      /**\n       * Installation context(s) where the command is available\n       * <info>Only for globally-scoped commands</info>\n       * @type {?ApplicationIntegrationType[]}\n       */\n      this.integrationTypes = data.integration_types;\n    } else {\n      this.integrationTypes ??= null;\n    }\n\n    if ('contexts' in data) {\n      /**\n       * Interaction context(s) where the command can be used\n       * <info>Only for globally-scoped commands</info>\n       * @type {?InteractionContextType[]}\n       */\n      this.contexts = data.contexts;\n    } else {\n      this.contexts ??= null;\n    }\n\n    if ('version' in data) {\n      /**\n       * Autoincrementing version identifier updated during substantial record changes\n       * @type {Snowflake}\n       */\n      this.version = data.version;\n    }\n  }\n\n  /**\n   * The timestamp the command was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the command was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The manager that this command belongs to\n   * @type {ApplicationCommandManager}\n   * @readonly\n   */\n  get manager() {\n    return (this.guild ?? this.client.application).commands;\n  }\n\n  /**\n   * Data for creating or editing an application command.\n   * @typedef {Object} ApplicationCommandData\n   * @property {string} name The name of the command, must be in all lowercase if type is\n   * {@link ApplicationCommandType.ChatInput}\n   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the command name\n   * @property {string} description The description of the command, if type is {@link ApplicationCommandType.ChatInput}\n   * @property {boolean} [nsfw] Whether the command is age-restricted\n   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the command description,\n   * if type is {@link ApplicationCommandType.ChatInput}\n   * @property {ApplicationCommandType} [type=ApplicationCommandType.ChatInput] The type of the command\n   * @property {ApplicationCommandOptionData[]} [options] Options for the command\n   * @property {?PermissionResolvable} [defaultMemberPermissions] The bitfield used to determine the default permissions\n   * a member needs in order to run the command\n   * @property {boolean} [dmPermission] Whether the command is enabled in DMs\n   */\n\n  /**\n   * An option for an application command or subcommand.\n   * <info>In addition to the listed properties, when used as a parameter,\n   * API style `snake_case` properties can be used for compatibility with generators like `@discordjs/builders`.</info>\n   * <warn>Note that providing a value for the `camelCase` counterpart for any `snake_case` property\n   * will discard the provided `snake_case` property.</warn>\n   * @typedef {Object} ApplicationCommandOptionData\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {Object<Locale, string>} [nameLocalizations] The name localizations for the option\n   * @property {string} description The description of the option\n   * @property {Object<Locale, string>} [descriptionLocalizations] The description localizations for the option\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoiceData[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOptionData[]} [options] Additional options if this option is a subcommand (group)\n   * @property {ChannelType[]} [channelTypes] When the option type is channel,\n   * the allowed types of channels that can be selected\n   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   */\n\n  /**\n   * @typedef {Object} ApplicationCommandOptionChoiceData\n   * @property {string} name The name of the choice\n   * @property {Object<Locale, string>} [nameLocalizations] The localized names for this choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Edits this application command.\n   * @param {Partial<ApplicationCommandData>} data The data to update the command with\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description of this command\n   * command.edit({\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.manager.edit(this, data, this.guildId);\n  }\n\n  /**\n   * Edits the name of this ApplicationCommand\n   * @param {string} name The new name of the command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Edits the localized names of this ApplicationCommand\n   * @param {Object<Locale, string>} nameLocalizations The new localized names for the command\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the name localizations of this command\n   * command.setLocalizedNames({\n   *   'en-GB': 'test',\n   *   'pt-BR': 'teste',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  setNameLocalizations(nameLocalizations) {\n    return this.edit({ nameLocalizations });\n  }\n\n  /**\n   * Edits the description of this ApplicationCommand\n   * @param {string} description The new description of the command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDescription(description) {\n    return this.edit({ description });\n  }\n\n  /**\n   * Edits the localized descriptions of this ApplicationCommand\n   * @param {Object<Locale, string>} descriptionLocalizations The new localized descriptions for the command\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description localizations of this command\n   * command.setDescriptionLocalizations({\n   *   'en-GB': 'A test command',\n   *   'pt-BR': 'Um comando de teste',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  setDescriptionLocalizations(descriptionLocalizations) {\n    return this.edit({ descriptionLocalizations });\n  }\n\n  /**\n   * Edits the default member permissions of this ApplicationCommand\n   * @param {?PermissionResolvable} defaultMemberPermissions The default member permissions required to run this command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDefaultMemberPermissions(defaultMemberPermissions) {\n    return this.edit({ defaultMemberPermissions });\n  }\n\n  /**\n   * Edits the DM permission of this ApplicationCommand\n   * @param {boolean} [dmPermission=true] Whether the command can be used in DMs\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setDMPermission(dmPermission = true) {\n    return this.edit({ dmPermission });\n  }\n\n  /**\n   * Edits the options of this ApplicationCommand\n   * @param {ApplicationCommandOptionData[]} options The options to set for this command\n   * @returns {Promise<ApplicationCommand>}\n   */\n  setOptions(options) {\n    return this.edit({ options });\n  }\n\n  /**\n   * Deletes this command.\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Delete this command\n   * command.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.manager.delete(this, this.guildId);\n  }\n\n  /**\n   * Whether this command equals another command. It compares all properties, so for most operations\n   * it is advisable to just compare `command.id === command2.id` as it is much faster and is often\n   * what most users need.\n   * @param {ApplicationCommand|ApplicationCommandData|APIApplicationCommand} command The command to compare with\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same\n   * order in the array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   */\n  equals(command, enforceOptionOrder = false) {\n    // If given an id, check if the id matches\n    if (command.id && this.id !== command.id) return false;\n\n    let defaultMemberPermissions = null;\n    let dmPermission = command.dmPermission ?? command.dm_permission;\n\n    if ('default_member_permissions' in command) {\n      defaultMemberPermissions = command.default_member_permissions\n        ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield\n        : null;\n    }\n\n    if ('defaultMemberPermissions' in command) {\n      defaultMemberPermissions =\n        command.defaultMemberPermissions !== null\n          ? new PermissionsBitField(command.defaultMemberPermissions).bitfield\n          : null;\n    }\n\n    // Check top level parameters\n    if (\n      command.name !== this.name ||\n      ('description' in command && command.description !== this.description) ||\n      ('version' in command && command.version !== this.version) ||\n      (command.type && command.type !== this.type) ||\n      ('nsfw' in command && command.nsfw !== this.nsfw) ||\n      // Future proof for options being nullable\n      // TODO: remove ?? 0 on each when nullable\n      (command.options?.length ?? 0) !== (this.options?.length ?? 0) ||\n      defaultMemberPermissions !== (this.defaultMemberPermissions?.bitfield ?? null) ||\n      (dmPermission !== undefined && dmPermission !== this.dmPermission) ||\n      !isEqual(command.nameLocalizations ?? command.name_localizations ?? {}, this.nameLocalizations ?? {}) ||\n      !isEqual(\n        command.descriptionLocalizations ?? command.description_localizations ?? {},\n        this.descriptionLocalizations ?? {},\n      ) ||\n      !isEqual(command.integrationTypes ?? command.integration_types ?? [], this.integrationTypes ?? []) ||\n      !isEqual(command.contexts ?? [], this.contexts ?? [])\n    ) {\n      return false;\n    }\n\n    if (command.options) {\n      return this.constructor.optionsEqual(this.options, command.options, enforceOptionOrder);\n    }\n    return true;\n  }\n\n  /**\n   * Recursively checks that all options for an {@link ApplicationCommand} are equal to the provided options.\n   * In most cases it is better to compare using {@link ApplicationCommand#equals}\n   * @param {ApplicationCommandOptionData[]} existing The options on the existing command,\n   * should be {@link ApplicationCommand#options}\n   * @param {ApplicationCommandOptionData[]|APIApplicationCommandOption[]} options The options to compare against\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options and choices are in the same\n   * order in the array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   */\n  static optionsEqual(existing, options, enforceOptionOrder = false) {\n    if (existing.length !== options.length) return false;\n    if (enforceOptionOrder) {\n      return existing.every((option, index) => this._optionEquals(option, options[index], enforceOptionOrder));\n    }\n    const newOptions = new Map(options.map(option => [option.name, option]));\n    for (const option of existing) {\n      const foundOption = newOptions.get(option.name);\n      if (!foundOption || !this._optionEquals(option, foundOption)) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks that an option for an {@link ApplicationCommand} is equal to the provided option\n   * In most cases it is better to compare using {@link ApplicationCommand#equals}\n   * @param {ApplicationCommandOptionData} existing The option on the existing command,\n   * should be from {@link ApplicationCommand#options}\n   * @param {ApplicationCommandOptionData|APIApplicationCommandOption} option The option to compare against\n   * @param {boolean} [enforceOptionOrder=false] Whether to strictly check that options or choices are in the same\n   * order in their array <info>The client may not always respect this ordering!</info>\n   * @returns {boolean}\n   * @private\n   */\n  static _optionEquals(existing, option, enforceOptionOrder = false) {\n    if (\n      option.name !== existing.name ||\n      option.type !== existing.type ||\n      option.description !== existing.description ||\n      option.autocomplete !== existing.autocomplete ||\n      (option.required ??\n        ([ApplicationCommandOptionType.Subcommand, ApplicationCommandOptionType.SubcommandGroup].includes(option.type)\n          ? undefined\n          : false)) !== existing.required ||\n      option.choices?.length !== existing.choices?.length ||\n      option.options?.length !== existing.options?.length ||\n      (option.channelTypes ?? option.channel_types)?.length !== existing.channelTypes?.length ||\n      (option.minValue ?? option.min_value) !== existing.minValue ||\n      (option.maxValue ?? option.max_value) !== existing.maxValue ||\n      (option.minLength ?? option.min_length) !== existing.minLength ||\n      (option.maxLength ?? option.max_length) !== existing.maxLength ||\n      !isEqual(option.nameLocalizations ?? option.name_localizations ?? {}, existing.nameLocalizations ?? {}) ||\n      !isEqual(\n        option.descriptionLocalizations ?? option.description_localizations ?? {},\n        existing.descriptionLocalizations ?? {},\n      )\n    ) {\n      return false;\n    }\n\n    if (existing.choices) {\n      if (\n        enforceOptionOrder &&\n        !existing.choices.every(\n          (choice, index) =>\n            choice.name === option.choices[index].name &&\n            choice.value === option.choices[index].value &&\n            isEqual(\n              choice.nameLocalizations ?? {},\n              option.choices[index].nameLocalizations ?? option.choices[index].name_localizations ?? {},\n            ),\n        )\n      ) {\n        return false;\n      }\n      if (!enforceOptionOrder) {\n        const newChoices = new Map(option.choices.map(choice => [choice.name, choice]));\n        for (const choice of existing.choices) {\n          const foundChoice = newChoices.get(choice.name);\n          if (!foundChoice || foundChoice.value !== choice.value) return false;\n        }\n      }\n    }\n\n    if (existing.channelTypes) {\n      const newTypes = option.channelTypes ?? option.channel_types;\n      for (const type of existing.channelTypes) {\n        if (!newTypes.includes(type)) return false;\n      }\n    }\n\n    if (existing.options) {\n      return this.optionsEqual(existing.options, option.options, enforceOptionOrder);\n    }\n    return true;\n  }\n\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOption\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {Object<Locale, string>} [nameLocalizations] The localizations for the option name\n   * @property {string} [nameLocalized] The localized name for this option\n   * @property {string} description The description of the option\n   * @property {Object<Locale, string>} [descriptionLocalizations] The localizations for the option description\n   * @property {string} [descriptionLocalized] The localized description for this option\n   * @property {boolean} [required] Whether the option is required\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOption[]} [options] Additional options if this option is a subcommand (group)\n   * @property {ApplicationCommandOptionAllowedChannelTypes[]} [channelTypes] When the option type is channel,\n   * the allowed types of channels that can be selected\n   * @property {number} [minValue] The minimum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [maxValue] The maximum value for an {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {number} [minLength] The minimum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   * @property {number} [maxLength] The maximum length for an {@link ApplicationCommandOptionType.String} option\n   * (maximum of `6000`)\n   */\n\n  /**\n   * A choice for an application command option.\n   * @typedef {Object} ApplicationCommandOptionChoice\n   * @property {string} name The name of the choice\n   * @property {?string} nameLocalized The localized name of the choice in the provided locale, if any\n   * @property {?Object<string, string>} [nameLocalizations] The localized names for this choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.\n   * @param {ApplicationCommandOptionData|ApplicationCommandOption} option The option to transform\n   * @param {boolean} [received] Whether this option has been received from Discord\n   * @returns {APIApplicationCommandOption}\n   * @private\n   */\n  static transformOption(option, received) {\n    const channelTypesKey = received ? 'channelTypes' : 'channel_types';\n    const minValueKey = received ? 'minValue' : 'min_value';\n    const maxValueKey = received ? 'maxValue' : 'max_value';\n    const minLengthKey = received ? 'minLength' : 'min_length';\n    const maxLengthKey = received ? 'maxLength' : 'max_length';\n    const nameLocalizationsKey = received ? 'nameLocalizations' : 'name_localizations';\n    const nameLocalizedKey = received ? 'nameLocalized' : 'name_localized';\n    const descriptionLocalizationsKey = received ? 'descriptionLocalizations' : 'description_localizations';\n    const descriptionLocalizedKey = received ? 'descriptionLocalized' : 'description_localized';\n    return {\n      type: option.type,\n      name: option.name,\n      [nameLocalizationsKey]: option.nameLocalizations ?? option.name_localizations,\n      [nameLocalizedKey]: option.nameLocalized ?? option.name_localized,\n      description: option.description,\n      [descriptionLocalizationsKey]: option.descriptionLocalizations ?? option.description_localizations,\n      [descriptionLocalizedKey]: option.descriptionLocalized ?? option.description_localized,\n      required:\n        option.required ??\n        (option.type === ApplicationCommandOptionType.Subcommand ||\n        option.type === ApplicationCommandOptionType.SubcommandGroup\n          ? undefined\n          : false),\n      autocomplete: option.autocomplete,\n      choices: option.choices?.map(choice => ({\n        name: choice.name,\n        [nameLocalizedKey]: choice.nameLocalized ?? choice.name_localized,\n        [nameLocalizationsKey]: choice.nameLocalizations ?? choice.name_localizations,\n        value: choice.value,\n      })),\n      options: option.options?.map(opt => this.transformOption(opt, received)),\n      [channelTypesKey]: option.channelTypes ?? option.channel_types,\n      [minValueKey]: option.minValue ?? option.min_value,\n      [maxValueKey]: option.maxValue ?? option.max_value,\n      [minLengthKey]: option.minLength ?? option.min_length,\n      [maxLengthKey]: option.maxLength ?? option.max_length,\n    };\n  }\n}\n\nmodule.exports = ApplicationCommand;\n\n/* eslint-disable max-len */\n/**\n * @external ApplicationCommandOptionAllowedChannelTypes\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ApplicationCommandOptionAllowedChannelTypes:TypeAlias}\n */\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { Routes } = require('discord-api-types/v10');\nconst ApplicationCommandPermissionsManager = require('./ApplicationCommandPermissionsManager');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst ApplicationCommand = require('../structures/ApplicationCommand');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Manages API methods for application commands and stores their cache.\n * @extends {CachedManager}\n */\nclass ApplicationCommandManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, ApplicationCommand, iterable);\n\n    /**\n     * The manager for permissions of arbitrary commands on arbitrary guilds\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, ApplicationCommand>}\n   * @name ApplicationCommandManager#cache\n   */\n\n  _add(data, cache, guildId) {\n    return super._add(data, cache, { extras: [this.guild, guildId] });\n  }\n\n  /**\n   * The APIRouter path to the commands\n   * @param {Snowflake} [options.id] The application command's id\n   * @param {Snowflake} [options.guildId] The guild's id to use in the path,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {string}\n   * @private\n   */\n  commandPath({ id, guildId } = {}) {\n    if (this.guild ?? guildId) {\n      if (id) {\n        return Routes.applicationGuildCommand(this.client.application.id, this.guild?.id ?? guildId, id);\n      }\n\n      return Routes.applicationGuildCommands(this.client.application.id, this.guild?.id ?? guildId);\n    }\n\n    if (id) {\n      return Routes.applicationCommand(this.client.application.id, id);\n    }\n\n    return Routes.applicationCommands(this.client.application.id);\n  }\n\n  /**\n   * Data that resolves to give an ApplicationCommand object. This can be:\n   * * An ApplicationCommand object\n   * * A Snowflake\n   * @typedef {ApplicationCommand|Snowflake} ApplicationCommandResolvable\n   */\n\n  /**\n   * Data that resolves to the data of an ApplicationCommand\n   * @typedef {ApplicationCommandData|APIApplicationCommand} ApplicationCommandDataResolvable\n   */\n\n  /**\n   * Options used to fetch data from Discord\n   * @typedef {Object} BaseFetchOptions\n   * @property {boolean} [cache=true] Whether to cache the fetched data if it wasn't already\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Options used to fetch Application Commands from Discord\n   * @typedef {BaseFetchOptions} FetchApplicationCommandOptions\n   * @property {Snowflake} [guildId] The guild's id to fetch commands for, for when the guild is not cached\n   * @property {Locale} [locale] The locale to use when fetching this command\n   * @property {boolean} [withLocalizations] Whether to fetch all localization data\n   */\n\n  /**\n   * Obtains one or multiple application commands from Discord, or the cache if it's already available.\n   * @param {Snowflake|FetchApplicationCommandOptions} [id] Options for fetching application command(s)\n   * @param {FetchApplicationCommandOptions} [options] Additional options for this fetch\n   * @returns {Promise<ApplicationCommand|Collection<Snowflake, ApplicationCommand>>}\n   * @example\n   * // Fetch a single command\n   * client.application.commands.fetch('123456789012345678')\n   *   .then(command => console.log(`Fetched command ${command.name}`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch all commands\n   * guild.commands.fetch()\n   *   .then(commands => console.log(`Fetched ${commands.size} commands`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { guildId, cache = true, force = false, locale, withLocalizations } = {}) {\n    if (typeof id === 'object') {\n      ({ guildId, cache = true, locale, withLocalizations } = id);\n    } else if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const command = await this.client.rest.get(this.commandPath({ id, guildId }));\n      return this._add(command, cache);\n    }\n\n    const data = await this.client.rest.get(this.commandPath({ guildId }), {\n      headers: {\n        'X-Discord-Locale': locale,\n      },\n      query: makeURLSearchParams({ with_localizations: withLocalizations }),\n    });\n    return data.reduce((coll, command) => coll.set(command.id, this._add(command, cache, guildId)), new Collection());\n  }\n\n  /**\n   * Creates an application command.\n   * @param {ApplicationCommandDataResolvable} command The command\n   * @param {Snowflake} [guildId] The guild's id to create this command in,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Create a new command\n   * client.application.commands.create({\n   *   name: 'test',\n   *   description: 'A test command',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async create(command, guildId) {\n    const data = await this.client.rest.post(this.commandPath({ guildId }), {\n      body: this.constructor.transformCommand(command),\n    });\n    return this._add(data, true, guildId);\n  }\n\n  /**\n   * Sets all the commands for this application or guild.\n   * @param {ApplicationCommandDataResolvable[]} commands The commands\n   * @param {Snowflake} [guildId] The guild's id to create the commands in,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<Collection<Snowflake, ApplicationCommand>>}\n   * @example\n   * // Set all commands to just this one\n   * client.application.commands.set([\n   *   {\n   *     name: 'test',\n   *     description: 'A test command',\n   *   },\n   * ])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all commands\n   * guild.commands.set([])\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async set(commands, guildId) {\n    const data = await this.client.rest.put(this.commandPath({ guildId }), {\n      body: commands.map(command => this.constructor.transformCommand(command)),\n    });\n    return data.reduce(\n      (collection, command) => collection.set(command.id, this._add(command, true, guildId)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Edits an application command.\n   * @param {ApplicationCommandResolvable} command The command to edit\n   * @param {Partial<ApplicationCommandDataResolvable>} data The data to update the command with\n   * @param {Snowflake} [guildId] The guild's id where the command registered,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit an existing command\n   * client.application.commands.edit('123456789012345678', {\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async edit(command, data, guildId) {\n    const id = this.resolveId(command);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n\n    const patched = await this.client.rest.patch(this.commandPath({ id, guildId }), {\n      body: this.constructor.transformCommand(data),\n    });\n    return this._add(patched, true, guildId);\n  }\n\n  /**\n   * Deletes an application command.\n   * @param {ApplicationCommandResolvable} command The command to delete\n   * @param {Snowflake} [guildId] The guild's id where the command is registered,\n   * ignored when using a {@link GuildApplicationCommandManager}\n   * @returns {Promise<?ApplicationCommand>}\n   * @example\n   * // Delete a command\n   * guild.commands.delete('123456789012345678')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(command, guildId) {\n    const id = this.resolveId(command);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'command', 'ApplicationCommandResolvable');\n\n    await this.client.rest.delete(this.commandPath({ id, guildId }));\n\n    const cached = this.cache.get(id);\n    this.cache.delete(id);\n    return cached ?? null;\n  }\n\n  /**\n   * Transforms an {@link ApplicationCommandData} object into something that can be used with the API.\n   * @param {ApplicationCommandDataResolvable} command The command to transform\n   * @returns {APIApplicationCommand}\n   * @private\n   */\n  static transformCommand(command) {\n    if (isJSONEncodable(command)) return command.toJSON();\n\n    let default_member_permissions;\n\n    if ('default_member_permissions' in command) {\n      default_member_permissions = command.default_member_permissions\n        ? new PermissionsBitField(BigInt(command.default_member_permissions)).bitfield.toString()\n        : command.default_member_permissions;\n    }\n\n    if ('defaultMemberPermissions' in command) {\n      default_member_permissions =\n        command.defaultMemberPermissions !== null\n          ? new PermissionsBitField(command.defaultMemberPermissions).bitfield.toString()\n          : command.defaultMemberPermissions;\n    }\n\n    return {\n      name: command.name,\n      name_localizations: command.nameLocalizations ?? command.name_localizations,\n      description: command.description,\n      nsfw: command.nsfw,\n      description_localizations: command.descriptionLocalizations ?? command.description_localizations,\n      type: command.type,\n      options: command.options?.map(option => ApplicationCommand.transformOption(option)),\n      default_member_permissions,\n      dm_permission: command.dmPermission ?? command.dm_permission,\n      integration_types: command.integrationTypes ?? command.integration_types,\n      contexts: command.contexts,\n    };\n  }\n}\n\nmodule.exports = ApplicationCommandManager;\n",
    "'use strict';\n\nconst { Emoji } = require('./Emoji');\n\n/**\n * Represents a custom emoji.\n * @extends {Emoji}\n */\nclass ApplicationEmoji extends Emoji {\n  constructor(client, data, application) {\n    super(client, data);\n\n    /**\n     * The application this emoji originates from\n     * @type {ClientApplication}\n     */\n    this.application = application;\n\n    /**\n     * The user who created this emoji\n     * @type {?User}\n     */\n    this.author = null;\n\n    this.managed = null;\n    this.requiresColons = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) this.name = data.name;\n    if (data.user) this.author = this.client.users._add(data.user);\n\n    if ('managed' in data) {\n      /**\n       * Whether this emoji is managed by an external service\n       * @type {?boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('require_colons' in data) {\n      /**\n       * Whether or not this emoji requires colons surrounding it\n       * @type {?boolean}\n       */\n      this.requiresColons = data.require_colons;\n    }\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n  fetchAuthor() {\n    return this.application.emojis.fetchAuthor(this);\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} ApplicationEmojiEditOptions\n   * @property {string} [name] The name of the emoji\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {ApplicationEmojiEditOptions} options The options to provide\n   * @returns {Promise<ApplicationEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(emoji => console.log(`Edited emoji ${emoji}`))\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.application.emojis.edit(this.id, options);\n  }\n\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @returns {Promise<ApplicationEmoji>}\n   */\n  setName(name) {\n    return this.edit({ name });\n  }\n\n  /**\n   * Deletes the emoji.\n   * @returns {Promise<ApplicationEmoji>}\n   */\n  async delete() {\n    await this.application.emojis.delete(this.id);\n    return this;\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {ApplicationEmoji|APIEmoji} other The emoji to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof ApplicationEmoji) {\n      return (\n        other.animated === this.animated &&\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.requiresColons === this.requiresColons\n      );\n    }\n\n    return other.id === this.id && other.name === this.name;\n  }\n}\n\nmodule.exports = ApplicationEmoji;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst ApplicationEmoji = require('../structures/ApplicationEmoji');\nconst { resolveImage } = require('../util/DataResolver');\n\n/**\n * Manages API methods for ApplicationEmojis and stores their cache.\n * @extends {CachedManager}\n */\nclass ApplicationEmojiManager extends CachedManager {\n  constructor(application, iterable) {\n    super(application.client, ApplicationEmoji, iterable);\n\n    /**\n     * The application this manager belongs to\n     * @type {ClientApplication}\n     */\n    this.application = application;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.application] });\n  }\n\n  /**\n   * Options used for creating an emoji of the application\n   * @typedef {Object} ApplicationEmojiCreateOptions\n   * @property {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @property {string} name The name for the emoji\n   */\n\n  /**\n   * Creates a new custom emoji of the application.\n   * @param {ApplicationEmojiCreateOptions} options Options for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a URL\n   * application.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * application.emojis.create({ attachment: './memes/banana.png', name: 'banana' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create({ attachment, name }) {\n    attachment = await resolveImage(attachment);\n    if (!attachment) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n\n    const body = { image: attachment, name };\n\n    const emoji = await this.client.rest.post(Routes.applicationEmojis(this.application.id), { body });\n    return this._add(emoji);\n  }\n\n  /**\n   * Obtains one or more emojis from Discord, or the emoji cache if they're already available.\n   * @param {Snowflake} [id] The emoji's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<ApplicationEmoji|Collection<Snowflake, ApplicationEmoji>>}\n   * @example\n   * // Fetch all emojis from the application\n   * application.emojis.fetch()\n   *   .then(emojis => console.log(`There are ${emojis.size} emojis.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single emoji\n   * application.emojis.fetch('222078108977594368')\n   *   .then(emoji => console.log(`The emoji name is: ${emoji.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const emoji = await this.client.rest.get(Routes.applicationEmoji(this.application.id, id));\n      return this._add(emoji, cache);\n    }\n\n    const { items: data } = await this.client.rest.get(Routes.applicationEmojis(this.application.id));\n    const emojis = new Collection();\n    for (const emoji of data) emojis.set(emoji.id, this._add(emoji, cache));\n    return emojis;\n  }\n\n  /**\n   * Deletes an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to delete\n   * @returns {Promise<void>}\n   */\n  async delete(emoji) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    await this.client.rest.delete(Routes.applicationEmoji(this.application.id, id));\n  }\n\n  /**\n   * Edits an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to edit\n   * @param {ApplicationEmojiEditOptions} options The options to provide\n   * @returns {Promise<ApplicationEmoji>}\n   */\n  async edit(emoji, options) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n\n    const newData = await this.client.rest.patch(Routes.applicationEmoji(this.application.id, id), {\n      body: {\n        name: options.name,\n      },\n    });\n    const existing = this.cache.get(id);\n    if (existing) {\n      existing._patch(newData);\n      return existing;\n    }\n    return this._add(newData);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @param {EmojiResolvable} emoji The emoji to fetch the author of\n   * @returns {Promise<User>}\n   */\n  async fetchAuthor(emoji) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n\n    const data = await this.client.rest.get(Routes.applicationEmoji(this.application.id, id));\n\n    return this._add(data).author;\n  }\n}\n\nmodule.exports = ApplicationEmojiManager;\n",
    "'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents an Entitlement\n * @extends {Base}\n */\nclass Entitlement extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the entitlement\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('sku_id' in data) {\n      /**\n       * The id of the associated SKU\n       * @type {Snowflake}\n       */\n      this.skuId = data.sku_id;\n    }\n\n    if ('user_id' in data) {\n      /**\n       * The id of the user that is granted access to this entitlement's SKU\n       * @type {Snowflake}\n       */\n      this.userId = data.user_id;\n    }\n\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild that is granted access to this entitlement's SKU\n       * @type {?Snowflake}\n       */\n      this.guildId = data.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n\n    if ('application_id' in data) {\n      /**\n       * The id of the parent application\n       * @type {Snowflake}\n       */\n      this.applicationId = data.application_id;\n    }\n\n    if ('type' in data) {\n      /**\n       * The type of this entitlement\n       * @type {EntitlementType}\n       */\n      this.type = data.type;\n    }\n\n    if ('deleted' in data) {\n      /**\n       * Whether this entitlement was deleted\n       * @type {boolean}\n       */\n      this.deleted = data.deleted;\n    }\n\n    if ('starts_at' in data) {\n      /**\n       * The timestamp at which this entitlement is valid\n       * @type {?number}\n       */\n      this.startsTimestamp = data.starts_at ? Date.parse(data.starts_at) : null;\n    } else {\n      this.startsTimestamp ??= null;\n    }\n\n    if ('ends_at' in data) {\n      /**\n       * The timestamp at which this entitlement is no longer valid\n       * @type {?number}\n       */\n      this.endsTimestamp = data.ends_at ? Date.parse(data.ends_at) : null;\n    } else {\n      this.endsTimestamp ??= null;\n    }\n\n    if ('consumed' in data) {\n      /**\n       * Whether this entitlement has been consumed\n       * @type {boolean}\n       */\n      this.consumed = data.consumed;\n    } else {\n      this.consumed ??= false;\n    }\n  }\n\n  /**\n   * The guild that is granted access to this entitlement's SKU\n   * @type {?Guild}\n   */\n  get guild() {\n    if (!this.guildId) return null;\n    return this.client.guilds.cache.get(this.guildId) ?? null;\n  }\n\n  /**\n   * The start date at which this entitlement is valid\n   * @type {?Date}\n   */\n  get startsAt() {\n    return this.startsTimestamp && new Date(this.startsTimestamp);\n  }\n\n  /**\n   * The end date at which this entitlement is no longer valid\n   * @type {?Date}\n   */\n  get endsAt() {\n    return this.endsTimestamp && new Date(this.endsTimestamp);\n  }\n\n  /**\n   * Indicates whether this entitlement is active\n   * @returns {boolean}\n   */\n  isActive() {\n    return !this.deleted && (!this.endsTimestamp || this.endsTimestamp > Date.now());\n  }\n\n  /**\n   * Indicates whether this entitlement is a test entitlement\n   * @returns {boolean}\n   */\n  isTest() {\n    return this.startsTimestamp === null;\n  }\n\n  /**\n   * Indicates whether this entitlement is a user subscription\n   * @returns {boolean}\n   */\n  isUserSubscription() {\n    return this.guildId === null;\n  }\n\n  /**\n   * Indicates whether this entitlement is a guild subscription\n   * @returns {boolean}\n   */\n  isGuildSubscription() {\n    return this.guildId !== null;\n  }\n\n  /**\n   * Fetches the user that is granted access to this entitlement's SKU\n   * @returns {Promise<User>}\n   */\n  fetchUser() {\n    return this.client.users.fetch(this.userId);\n  }\n\n  /**\n   * Marks this entitlement as consumed\n   * <info>Only available for One-Time Purchase consumable SKUs.</info>\n   * @returns {Promise<void>}\n   */\n  async consume() {\n    await this.client.application.entitlements.consume(this.id);\n  }\n}\n\nexports.Entitlement = Entitlement;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes, EntitlementOwnerType } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { ErrorCodes, DiscordjsTypeError } = require('../errors/index');\nconst { Entitlement } = require('../structures/Entitlement');\nconst { resolveSKUId } = require('../util/Util');\n\n/**\n * Manages API methods for entitlements and stores their cache.\n * @extends {CachedManager}\n */\nclass EntitlementManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Entitlement, iterable);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, Entitlement>}\n   * @name EntitlementManager#cache\n   */\n\n  /**\n   * Data that resolves to give an Entitlement object. This can be:\n   * * An Entitlement object\n   * * A Snowflake\n   * @typedef {Entitlement|Snowflake} EntitlementResolvable\n   */\n\n  /**\n   * Data that resolves to give a SKU object. This can be:\n   * * A SKU object\n   * * A Snowflake\n   * @typedef {SKU|Snowflake} SKUResolvable\n   */\n\n  /**\n   * Options used to fetch an entitlement\n   * @typedef {BaseFetchOptions} FetchEntitlementOptions\n   * @property {EntitlementResolvable} entitlement The entitlement to fetch\n   */\n\n  /**\n   * Options used to fetch entitlements\n   * @typedef {Object} FetchEntitlementsOptions\n   * @property {number} [limit] The maximum number of entitlements to fetch\n   * @property {GuildResolvable} [guild] The guild to fetch entitlements for\n   * @property {UserResolvable} [user] The user to fetch entitlements for\n   * @property {SKUResolvable[]} [skus] The SKUs to fetch entitlements for\n   * @property {boolean} [excludeEnded] Whether to exclude ended entitlements\n   * @property {boolean} [excludeDeleted] Whether to exclude deleted entitlements\n   * @property {boolean} [cache=true] Whether to cache the fetched entitlements\n   * @property {Snowflake} [before] Consider only entitlements before this entitlement id\n   * @property {Snowflake} [after] Consider only entitlements after this entitlement id\n   * <warn>If both `before` and `after` are provided, only `before` is respected</warn>\n   */\n\n  /**\n   * Fetches entitlements for this application\n   * @param {EntitlementResolvable|FetchEntitlementOptions|FetchEntitlementsOptions} [options]\n   * Options for fetching the entitlements\n   * @returns {Promise<Entitlement|Collection<Snowflake, Entitlement>>}\n   */\n  async fetch(options) {\n    if (!options) return this._fetchMany(options);\n    const { entitlement, cache, force } = options;\n    const resolvedEntitlement = this.resolveId(entitlement ?? options);\n\n    if (resolvedEntitlement) {\n      return this._fetchSingle({ entitlement: resolvedEntitlement, cache, force });\n    }\n\n    return this._fetchMany(options);\n  }\n\n  async _fetchSingle({ entitlement, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(entitlement);\n\n      if (existing) {\n        return existing;\n      }\n    }\n\n    const data = await this.client.rest.get(Routes.entitlement(this.client.application.id, entitlement));\n    return this._add(data, cache);\n  }\n\n  async _fetchMany({ limit, guild, user, skus, excludeEnded, excludeDeleted, cache, before, after } = {}) {\n    const query = makeURLSearchParams({\n      limit,\n      guild_id: guild && this.client.guilds.resolveId(guild),\n      user_id: user && this.client.users.resolveId(user),\n      sku_ids: skus?.map(sku => resolveSKUId(sku)).join(','),\n      exclude_ended: excludeEnded,\n      exclude_deleted: excludeDeleted,\n      before,\n      after,\n    });\n\n    const entitlements = await this.client.rest.get(Routes.entitlements(this.client.application.id), { query });\n\n    return entitlements.reduce(\n      (coll, entitlement) => coll.set(entitlement.id, this._add(entitlement, cache)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Options used to create a test entitlement\n   * <info>Either `guild` or `user` must be provided, but not both</info>\n   * @typedef {Object} EntitlementCreateOptions\n   * @property {SKUResolvable} sku The id of the SKU to create the entitlement for\n   * @property {GuildResolvable} [guild] The guild to create the entitlement for\n   * @property {UserResolvable} [user] The user to create the entitlement for\n   */\n\n  /**\n   * Creates a test entitlement\n   * @param {EntitlementCreateOptions} options Options for creating the test entitlement\n   * @returns {Promise<Entitlement>}\n   */\n  async createTest({ sku, guild, user }) {\n    const skuId = resolveSKUId(sku);\n    if (!skuId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sku', 'SKUResolvable');\n\n    if ((guild && user) || (!guild && !user)) {\n      throw new DiscordjsTypeError(ErrorCodes.EntitlementCreateInvalidOwner);\n    }\n\n    const resolved = guild ? this.client.guilds.resolveId(guild) : this.client.users.resolveId(user);\n    if (!resolved) {\n      const name = guild ? 'guild' : 'user';\n      const type = guild ? 'GuildResolvable' : 'UserResolvable';\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, name, type);\n    }\n\n    const entitlement = await this.client.rest.post(Routes.entitlements(this.client.application.id), {\n      body: {\n        sku_id: skuId,\n        owner_id: resolved,\n        owner_type: guild ? EntitlementOwnerType.Guild : EntitlementOwnerType.User,\n      },\n    });\n    return new Entitlement(this.client, entitlement);\n  }\n\n  /**\n   * Deletes a test entitlement\n   * @param {EntitlementResolvable} entitlement The entitlement to delete\n   * @returns {Promise<void>}\n   */\n  async deleteTest(entitlement) {\n    const resolved = this.resolveId(entitlement);\n    if (!resolved) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'entitlement', 'EntitlementResolvable');\n\n    await this.client.rest.delete(Routes.entitlement(this.client.application.id, resolved));\n  }\n\n  /**\n   * Marks an entitlement as consumed\n   * <info>Only available for One-Time Purchase consumable SKUs.</info>\n   * @param {Snowflake} entitlementId The id of the entitlement to consume\n   * @returns {Promise<void>}\n   */\n  async consume(entitlementId) {\n    await this.client.rest.post(Routes.consumeEntitlement(this.client.application.id, entitlementId));\n  }\n}\n\nexports.EntitlementManager = EntitlementManager;\n",
    "'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a Subscription\n * @extends {Base}\n */\nclass Subscription extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the subscription\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The id of the user who subscribed\n     * @type {Snowflake}\n     */\n    this.userId = data.user_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The SKU ids subscribed to\n     * @type {Snowflake[]}\n     */\n    this.skuIds = data.sku_ids;\n\n    /**\n     * The entitlement ids granted for this subscription\n     * @type {Snowflake[]}\n     */\n    this.entitlementIds = data.entitlement_ids;\n\n    /**\n     * The timestamp the current subscription period will start at\n     * @type {number}\n     */\n    this.currentPeriodStartTimestamp = Date.parse(data.current_period_start);\n\n    /**\n     * The timestamp the current subscription period will end at\n     * @type {number}\n     */\n    this.currentPeriodEndTimestamp = Date.parse(data.current_period_end);\n\n    /**\n     * The current status of the subscription\n     * @type {SubscriptionStatus}\n     */\n    this.status = data.status;\n\n    if ('renewal_sku_ids' in data) {\n      /**\n       * The SKU ids that this user will be subscribed to at renewal\n       * @type {?Snowflake[]}\n       */\n      this.renewalSkuIds = data.renewal_sku_ids;\n    }\n\n    if ('canceled_at' in data) {\n      /**\n       * The timestamp of when the subscription was canceled\n       * @type {?number}\n       */\n      this.canceledTimestamp = data.canceled_at ? Date.parse(data.canceled_at) : null;\n    } else {\n      this.canceledTimestamp ??= null;\n    }\n\n    if ('country' in data) {\n      /**\n       * ISO 3166-1 alpha-2 country code of the payment source used to purchase the subscription.\n       * Missing unless queried with a private OAuth scope.\n       * @type {?string}\n       */\n      this.country = data.country;\n    } else {\n      this.country ??= null;\n    }\n  }\n\n  /**\n   * The time the subscription was canceled\n   * @type {?Date}\n   * @readonly\n   */\n  get canceledAt() {\n    return this.canceledTimestamp && new Date(this.canceledTimestamp);\n  }\n\n  /**\n   * The time the current subscription period will start at\n   * @type {Date}\n   * @readonly\n   */\n  get currentPeriodStartAt() {\n    return new Date(this.currentPeriodStartTimestamp);\n  }\n\n  /**\n   * The time the current subscription period will end at\n   * @type {Date}\n   * @readonly\n   */\n  get currentPeriodEndAt() {\n    return new Date(this.currentPeriodEndTimestamp);\n  }\n}\n\nexports.Subscription = Subscription;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors/index');\nconst { Subscription } = require('../structures/Subscription');\nconst { resolveSKUId } = require('../util/Util');\n\n/**\n * Manages API methods for subscriptions and stores their cache.\n * @extends {CachedManager}\n */\nclass SubscriptionManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Subscription, iterable);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, Subscription>}\n   * @name SubscriptionManager#cache\n   */\n\n  /**\n   * Options used to fetch a subscription\n   * @typedef {BaseFetchOptions} FetchSubscriptionOptions\n   * @property {SKUResolvable} sku The SKU to fetch the subscription for\n   * @property {Snowflake} subscriptionId The id of the subscription to fetch\n   */\n\n  /**\n   * Options used to fetch subscriptions\n   * @typedef {Object} FetchSubscriptionsOptions\n   * @property {Snowflake} [after] Consider only subscriptions after this subscription id\n   * @property {Snowflake} [before] Consider only subscriptions before this subscription id\n   * @property {number} [limit] The maximum number of subscriptions to fetch\n   * @property {SKUResolvable} sku The SKU to fetch subscriptions for\n   * @property {UserResolvable} user The user to fetch entitlements for\n   * <warn>If both `before` and `after` are provided, only `before` is respected</warn>\n   */\n\n  /**\n   * Fetches subscriptions for this application\n   * @param {FetchSubscriptionOptions|FetchSubscriptionsOptions} [options={}] Options for fetching the subscriptions\n   * @returns {Promise<Subscription|Collection<Snowflake, Subscription>>}\n   */\n  async fetch(options = {}) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n\n    const { after, before, cache, limit, sku, subscriptionId, user } = options;\n\n    const skuId = resolveSKUId(sku);\n\n    if (!skuId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sku', 'SKUResolvable');\n\n    if (subscriptionId) {\n      const subscription = await this.client.rest.get(Routes.skuSubscription(skuId, subscriptionId));\n\n      return this._add(subscription, cache);\n    }\n\n    const query = makeURLSearchParams({\n      limit,\n      user_id: this.client.users.resolveId(user) ?? undefined,\n      sku_id: skuId,\n      before,\n      after,\n    });\n\n    const subscriptions = await this.client.rest.get(Routes.skuSubscriptions(skuId), { query });\n\n    return subscriptions.reduce(\n      (coll, subscription) => coll.set(subscription.id, this._add(subscription, cache)),\n      new Collection(),\n    );\n  }\n}\n\nexports.SubscriptionManager = SubscriptionManager;\n",
    "'use strict';\n\nconst { ApplicationFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link ClientApplication#flags} bitfield.\n * @extends {BitField}\n */\nclass ApplicationFlagsBitField extends BitField {\n  /**\n   * Numeric application flags. All available properties:\n   * @type {ApplicationFlags}\n   * @memberof ApplicationFlagsBitField\n   */\n  static Flags = ApplicationFlags;\n}\n\n/**\n * @name ApplicationFlagsBitField\n * @kind constructor\n * @memberof ApplicationFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name ApplicationFlagsBitField#bitfield\n */\n\n/**\n * Data that can be resolved to give an application flag bit field. This can be:\n * * A string (see {@link ApplicationFlagsBitField.Flags})\n * * An application flag\n * * An instance of ApplicationFlagsBitField\n * * An Array of ApplicationFlagsResolvable\n * @typedef {string|number|ApplicationFlagsBitField|ApplicationFlagsResolvable[]} ApplicationFlagsResolvable\n */\n\nmodule.exports = ApplicationFlagsBitField;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst { ApplicationRoleConnectionMetadata } = require('./ApplicationRoleConnectionMetadata');\nconst { SKU } = require('./SKU');\nconst Team = require('./Team');\nconst Application = require('./interfaces/Application');\nconst ApplicationCommandManager = require('../managers/ApplicationCommandManager');\nconst ApplicationEmojiManager = require('../managers/ApplicationEmojiManager');\nconst { EntitlementManager } = require('../managers/EntitlementManager');\nconst { SubscriptionManager } = require('../managers/SubscriptionManager');\nconst ApplicationFlagsBitField = require('../util/ApplicationFlagsBitField');\nconst { resolveImage } = require('../util/DataResolver');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * @typedef {Object} ClientApplicationInstallParams\n * @property {OAuth2Scopes[]} scopes Scopes that will be set upon adding this application\n * @property {Readonly<PermissionsBitField>} permissions Permissions that will be requested for the integrated role\n */\n\n/**\n * Represents a client application.\n * @extends {Application}\n */\nclass ClientApplication extends Application {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The application command manager for this application\n     * @type {ApplicationCommandManager}\n     */\n    this.commands = new ApplicationCommandManager(this.client);\n\n    /**\n     * The application emoji manager for this application\n     * @type {ApplicationEmojiManager}\n     */\n    this.emojis = new ApplicationEmojiManager(this);\n\n    /**\n     * The entitlement manager for this application\n     * @type {EntitlementManager}\n     */\n    this.entitlements = new EntitlementManager(this.client);\n\n    /**\n     * The subscription manager for this application\n     * @type {SubscriptionManager}\n     */\n    this.subscriptions = new SubscriptionManager(this.client);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The tags this application has (max of 5)\n     * @type {string[]}\n     */\n    this.tags = data.tags ?? [];\n\n    if ('install_params' in data) {\n      /**\n       * Settings for this application's default in-app authorization\n       * @type {?ClientApplicationInstallParams}\n       */\n      this.installParams = {\n        scopes: data.install_params.scopes,\n        permissions: new PermissionsBitField(data.install_params.permissions).freeze(),\n      };\n    } else {\n      this.installParams ??= null;\n    }\n\n    /**\n     * OAuth2 installation parameters.\n     * @typedef {Object} IntegrationTypesConfigurationParameters\n     * @property {OAuth2Scopes[]} scopes Scopes that will be set upon adding this application\n     * @property {Readonly<PermissionsBitField>} permissions Permissions that will be requested for the integrated role\n     */\n\n    /**\n     * The application's supported installation context data.\n     * @typedef {Object} IntegrationTypesConfigurationContext\n     * @property {?IntegrationTypesConfigurationParameters} oauth2InstallParams\n     * Scopes and permissions regarding the installation context\n     */\n\n    /**\n     * The application's supported installation context data.\n     * @typedef {Object} IntegrationTypesConfiguration\n     * @property {IntegrationTypesConfigurationContext} [0] Scopes and permissions\n     * regarding the guild-installation context\n     * @property {IntegrationTypesConfigurationContext} [1] Scopes and permissions\n     * regarding the user-installation context\n     */\n\n    if ('integration_types_config' in data) {\n      /**\n       * Default scopes and permissions for each supported installation context.\n       * The keys are stringified variants of {@link ApplicationIntegrationType}.\n       * @type {?IntegrationTypesConfiguration}\n       */\n      this.integrationTypesConfig = Object.fromEntries(\n        Object.entries(data.integration_types_config).map(([key, config]) => {\n          let oauth2InstallParams = null;\n          if (config.oauth2_install_params) {\n            oauth2InstallParams = {\n              scopes: config.oauth2_install_params.scopes,\n              permissions: new PermissionsBitField(config.oauth2_install_params.permissions).freeze(),\n            };\n          }\n\n          const context = {\n            oauth2InstallParams,\n          };\n\n          return [key, context];\n        }),\n      );\n    } else {\n      this.integrationTypesConfig ??= null;\n    }\n\n    if ('custom_install_url' in data) {\n      /**\n       * This application's custom installation URL\n       * @type {?string}\n       */\n      this.customInstallURL = data.custom_install_url;\n    } else {\n      this.customInstallURL = null;\n    }\n\n    if ('flags' in data) {\n      /**\n       * The flags this application has\n       * @type {ApplicationFlagsBitField}\n       */\n      this.flags = new ApplicationFlagsBitField(data.flags).freeze();\n    }\n\n    if ('approximate_guild_count' in data) {\n      /**\n       * An approximate amount of guilds this application is in.\n       * @type {?number}\n       */\n      this.approximateGuildCount = data.approximate_guild_count;\n    } else {\n      this.approximateGuildCount ??= null;\n    }\n\n    if ('approximate_user_install_count' in data) {\n      /**\n       * An approximate amount of users that have installed this application.\n       * @type {?number}\n       */\n      this.approximateUserInstallCount = data.approximate_user_install_count;\n    } else {\n      this.approximateUserInstallCount ??= null;\n    }\n\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild associated with this application.\n       * @type {?Snowflake}\n       */\n      this.guildId = data.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n\n    if ('bot_require_code_grant' in data) {\n      /**\n       * If this application's bot requires a code grant when using the OAuth2 flow\n       * @type {?boolean}\n       */\n      this.botRequireCodeGrant = data.bot_require_code_grant;\n    } else {\n      this.botRequireCodeGrant ??= null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * The bot associated with this application.\n       * @type {?User}\n       */\n      this.bot = this.client.users._add(data.bot);\n    } else {\n      this.bot ??= null;\n    }\n\n    if ('bot_public' in data) {\n      /**\n       * If this application's bot is public\n       * @type {?boolean}\n       */\n      this.botPublic = data.bot_public;\n    } else {\n      this.botPublic ??= null;\n    }\n\n    if ('interactions_endpoint_url' in data) {\n      /**\n       * This application's interaction endpoint URL.\n       * @type {?string}\n       */\n      this.interactionsEndpointURL = data.interactions_endpoint_url;\n    } else {\n      this.interactionsEndpointURL ??= null;\n    }\n\n    if ('role_connections_verification_url' in data) {\n      /**\n       * This application's role connection verification entry point URL\n       * @type {?string}\n       */\n      this.roleConnectionsVerificationURL = data.role_connections_verification_url;\n    } else {\n      this.roleConnectionsVerificationURL ??= null;\n    }\n\n    if ('event_webhooks_url' in data) {\n      /**\n       * This application's URL to receive event webhooks\n       * @type {?string}\n       */\n      this.eventWebhooksURL = data.event_webhooks_url;\n    } else {\n      this.eventWebhooksURL ??= null;\n    }\n\n    if ('event_webhooks_status' in data) {\n      /**\n       * This application's event webhooks status\n       * @type {?ApplicationWebhookEventStatus}\n       */\n      this.eventWebhooksStatus = data.event_webhooks_status;\n    } else {\n      this.eventWebhooksStatus ??= null;\n    }\n\n    if ('event_webhooks_types' in data) {\n      /**\n       * List of event webhooks types this application subscribes to\n       * @type {?ApplicationWebhookEventType[]}\n       */\n      this.eventWebhooksTypes = data.event_webhooks_types;\n    } else {\n      this.eventWebhooksTypes ??= null;\n    }\n\n    /**\n     * The owner of this OAuth application\n     * @type {?(User|Team)}\n     */\n    this.owner = data.team\n      ? new Team(this.client, data.team)\n      : data.owner\n        ? this.client.users._add(data.owner)\n        : (this.owner ?? null);\n  }\n\n  /**\n   * The guild associated with this application.\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId) ?? null;\n  }\n\n  /**\n   * Whether this application is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.name;\n  }\n\n  /**\n   * Options used for editing an application.\n   * @typedef {Object} ClientApplicationEditOptions\n   * @property {string} [customInstallURL] The application's custom installation URL\n   * @property {string} [description] The application's description\n   * @property {string} [roleConnectionsVerificationURL] The application's role connection verification URL\n   * @property {ClientApplicationInstallParams} [installParams]\n   * Settings for the application's default in-app authorization\n   * @property {ApplicationFlagsResolvable} [flags] The flags for the application\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The application's icon\n   * @property {?(BufferResolvable|Base64Resolvable)} [coverImage] The application's cover image\n   * @property {string} [interactionsEndpointURL] The application's interaction endpoint URL\n   * @property {string} [eventWebhooksURL] The application's event webhooks URL\n   * @property {ApplicationWebhookEventStatus.Enabled|ApplicationWebhookEventStatus.Disabled} [eventWebhooksStatus]\n   * The application's event webhooks status.\n   * @property {ApplicationWebhookEventType[]} [eventWebhooksTypes] The application's event webhooks types\n   * @property {string[]} [tags] The application's tags\n   */\n\n  /**\n   * Edits this application.\n   * @param {ClientApplicationEditOptions} [options] The options for editing this application\n   * @returns {Promise<ClientApplication>}\n   */\n  async edit({\n    customInstallURL,\n    description,\n    roleConnectionsVerificationURL,\n    installParams,\n    flags,\n    icon,\n    coverImage,\n    interactionsEndpointURL,\n    eventWebhooksURL,\n    eventWebhooksStatus,\n    eventWebhooksTypes,\n    tags,\n  } = {}) {\n    const data = await this.client.rest.patch(Routes.currentApplication(), {\n      body: {\n        custom_install_url: customInstallURL,\n        description,\n        role_connections_verification_url: roleConnectionsVerificationURL,\n        install_params: installParams,\n        flags: flags === undefined ? undefined : ApplicationFlagsBitField.resolve(flags),\n        icon: icon && (await resolveImage(icon)),\n        cover_image: coverImage && (await resolveImage(coverImage)),\n        interactions_endpoint_url: interactionsEndpointURL,\n        event_webhooks_url: eventWebhooksURL,\n        event_webhooks_status: eventWebhooksStatus,\n        event_webhooks_types: eventWebhooksTypes,\n        tags,\n      },\n    });\n\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Obtains this application from Discord.\n   * @returns {Promise<ClientApplication>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.currentApplication());\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Gets this application's role connection metadata records\n   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}\n   */\n  async fetchRoleConnectionMetadataRecords() {\n    const metadata = await this.client.rest.get(Routes.applicationRoleConnectionMetadata(this.client.user.id));\n    return metadata.map(data => new ApplicationRoleConnectionMetadata(data));\n  }\n\n  /**\n   * Data for creating or editing an application role connection metadata.\n   * @typedef {Object} ApplicationRoleConnectionMetadataEditOptions\n   * @property {string} name The name of the metadata field\n   * @property {?Object<Locale, string>} [nameLocalizations] The name localizations for the metadata field\n   * @property {string} description The description of the metadata field\n   * @property {?Object<Locale, string>} [descriptionLocalizations] The description localizations for the metadata field\n   * @property {string} key The dictionary key of the metadata field\n   * @property {ApplicationRoleConnectionMetadataType} type The type of the metadata field\n   */\n\n  /**\n   * Updates this application's role connection metadata records\n   * @param {ApplicationRoleConnectionMetadataEditOptions[]} records The new role connection metadata records\n   * @returns {Promise<ApplicationRoleConnectionMetadata[]>}\n   */\n  async editRoleConnectionMetadataRecords(records) {\n    const newRecords = await this.client.rest.put(Routes.applicationRoleConnectionMetadata(this.client.user.id), {\n      body: records.map(record => ({\n        type: record.type,\n        key: record.key,\n        name: record.name,\n        name_localizations: record.nameLocalizations,\n        description: record.description,\n        description_localizations: record.descriptionLocalizations,\n      })),\n    });\n\n    return newRecords.map(data => new ApplicationRoleConnectionMetadata(data));\n  }\n\n  /**\n   * Gets this application's SKUs\n   * @returns {Promise<Collection<Snowflake, SKU>>}\n   */\n  async fetchSKUs() {\n    const skus = await this.client.rest.get(Routes.skus(this.id));\n    return skus.reduce((coll, sku) => coll.set(sku.id, new SKU(this.client, sku)), new Collection());\n  }\n}\n\nmodule.exports = ClientApplication;\n",
    "'use strict';\n\nconst { embedLength } = require('@discordjs/builders');\nconst isEqual = require('fast-deep-equal');\n\n/**\n * Represents an embed.\n */\nclass Embed {\n  constructor(data) {\n    /**\n     * The API embed data.\n     * @type {APIEmbed}\n     * @readonly\n     */\n    this.data = { ...data };\n  }\n\n  /**\n   * An array of fields of this embed.\n   * @type {Array<APIEmbedField>}\n   * @readonly\n   */\n  get fields() {\n    return this.data.fields ?? [];\n  }\n\n  /**\n   * The title of this embed.\n   * @type {?string}\n   * @readonly\n   */\n  get title() {\n    return this.data.title ?? null;\n  }\n\n  /**\n   * The description of this embed.\n   * @type {?string}\n   * @readonly\n   */\n  get description() {\n    return this.data.description ?? null;\n  }\n\n  /**\n   * The URL of this embed.\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    return this.data.url ?? null;\n  }\n\n  /**\n   * The color of this embed.\n   * @type {?number}\n   * @readonly\n   */\n  get color() {\n    return this.data.color ?? null;\n  }\n\n  /**\n   * The timestamp of this embed. This is in an ISO 8601 format.\n   * @type {?string}\n   * @readonly\n   */\n  get timestamp() {\n    return this.data.timestamp ?? null;\n  }\n\n  /**\n   * @typedef {Object} EmbedAssetData\n   * @property {?string} url The URL of the image\n   * @property {?string} proxyURL The proxy URL of the image\n   * @property {?number} height The height of the image\n   * @property {?number} width The width of the image\n   */\n\n  /**\n   * The thumbnail of this embed.\n   * @type {?EmbedAssetData}\n   * @readonly\n   */\n  get thumbnail() {\n    if (!this.data.thumbnail) return null;\n    return {\n      url: this.data.thumbnail.url,\n      proxyURL: this.data.thumbnail.proxy_url,\n      height: this.data.thumbnail.height,\n      width: this.data.thumbnail.width,\n    };\n  }\n\n  /**\n   * The image of this embed.\n   * @type {?EmbedAssetData}\n   * @readonly\n   */\n  get image() {\n    if (!this.data.image) return null;\n    return {\n      url: this.data.image.url,\n      proxyURL: this.data.image.proxy_url,\n      height: this.data.image.height,\n      width: this.data.image.width,\n    };\n  }\n\n  /**\n   * The video of this embed.\n   * @type {?EmbedAssetData}\n   * @readonly\n   */\n  get video() {\n    if (!this.data.video) return null;\n    return {\n      url: this.data.video.url,\n      proxyURL: this.data.video.proxy_url,\n      height: this.data.video.height,\n      width: this.data.video.width,\n    };\n  }\n\n  /**\n   * @typedef {Object} EmbedAuthorData\n   * @property {string} name The name of the author\n   * @property {?string} url The URL of the author\n   * @property {?string} iconURL The icon URL of the author\n   * @property {?string} proxyIconURL The proxy icon URL of the author\n   */\n\n  /**\n   * The author of this embed.\n   * @type {?EmbedAuthorData}\n   * @readonly\n   */\n  get author() {\n    if (!this.data.author) return null;\n    return {\n      name: this.data.author.name,\n      url: this.data.author.url,\n      iconURL: this.data.author.icon_url,\n      proxyIconURL: this.data.author.proxy_icon_url,\n    };\n  }\n\n  /**\n   * The provider of this embed.\n   * @type {?APIEmbedProvider}\n   * @readonly\n   */\n  get provider() {\n    return this.data.provider ?? null;\n  }\n\n  /**\n   * @typedef {Object} EmbedFooterData\n   * @property {string} text The text of the footer\n   * @property {?string} iconURL The URL of the icon\n   * @property {?string} proxyIconURL The proxy URL of the icon\n   */\n\n  /**\n   * The footer of this embed.\n   * @type {?EmbedFooterData}\n   * @readonly\n   */\n  get footer() {\n    if (!this.data.footer) return null;\n    return {\n      text: this.data.footer.text,\n      iconURL: this.data.footer.icon_url,\n      proxyIconURL: this.data.footer.proxy_icon_url,\n    };\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields, footer text, and author name.\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return embedLength(this.data);\n  }\n\n  /**\n   * The hex color of this embed.\n   * @type {?string}\n   * @readonly\n   */\n  get hexColor() {\n    return typeof this.data.color === 'number'\n      ? `#${this.data.color.toString(16).padStart(6, '0')}`\n      : (this.data.color ?? null);\n  }\n\n  /**\n   * Returns the API-compatible JSON for this embed.\n   * @returns {APIEmbed}\n   */\n  toJSON() {\n    return { ...this.data };\n  }\n\n  /**\n   * Whether the given embeds are equal.\n   * @param {Embed|APIEmbed} other The embed to compare against\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Embed) {\n      return isEqual(this.data, other.data);\n    }\n\n    return (\n      this.author?.iconURL === other.author?.icon_url &&\n      this.author?.name === other.author?.name &&\n      this.author?.url === other.author?.url &&\n      this.color === (other.color ?? null) &&\n      this.description === (other.description ?? null) &&\n      this.footer?.iconURL === other.footer?.icon_url &&\n      this.footer?.text === other.footer?.text &&\n      this.image?.url === other.image?.url &&\n      this.thumbnail?.url === other.thumbnail?.url &&\n      (this.timestamp && Date.parse(this.timestamp)) === (other.timestamp ? Date.parse(other.timestamp) : null) &&\n      this.title === (other.title ?? null) &&\n      this.url === (other.url ?? null) &&\n      this.video?.url === other.video?.url &&\n      isEqual(this.fields, other.fields?.map(field => ({ ...field, inline: field.inline ?? false })) ?? []) &&\n      isEqual(this.provider, other.provider ?? null)\n    );\n  }\n}\n\nmodule.exports = Embed;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { FormattingPatterns } = require('discord-api-types/v10');\nconst { flatten } = require('../util/Util');\n\n/**\n * Keeps track of mentions in a {@link Message}.\n */\nclass MessageMentions {\n  /**\n   * A regular expression that matches `@everyone` and `@here`.\n   * The `mention` group property is present on the `exec` result of this expression.\n   * @type {RegExp}\n   * @memberof MessageMentions\n   */\n  static EveryonePattern = /@(?<mention>everyone|here)/;\n\n  /**\n   * A regular expression that matches user mentions like `<@81440962496172032>`.\n   * The `id` group property is present on the `exec` result of this expression.\n   * @type {RegExp}\n   * @memberof MessageMentions\n   */\n  static UsersPattern = FormattingPatterns.UserWithOptionalNickname;\n\n  /**\n   * A regular expression that matches role mentions like `<@&297577916114403338>`.\n   * The `id` group property is present on the `exec` result of this expression.\n   * @type {RegExp}\n   * @memberof MessageMentions\n   */\n  static RolesPattern = FormattingPatterns.Role;\n\n  /**\n   * A regular expression that matches channel mentions like `<#222079895583457280>`.\n   * The `id` group property is present on the `exec` result of this expression.\n   * @type {RegExp}\n   * @memberof MessageMentions\n   */\n  static ChannelsPattern = FormattingPatterns.Channel;\n\n  /**\n   * A global regular expression variant of {@link MessageMentions.ChannelsPattern}.\n   * @type {RegExp}\n   * @memberof MessageMentions\n   * @private\n   */\n  static GlobalChannelsPattern = new RegExp(this.ChannelsPattern.source, 'g');\n\n  /**\n   * A global regular expression variant of {@link MessageMentions.UsersPattern}.\n   * @type {RegExp}\n   * @memberof MessageMentions\n   * @private\n   */\n  static GlobalUsersPattern = new RegExp(this.UsersPattern.source, 'g');\n\n  constructor(message, users, roles, everyone, crosspostedChannels, repliedUser) {\n    /**\n     * The client the message is from\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: message.client });\n\n    /**\n     * The guild the message is in\n     * @type {?Guild}\n     * @readonly\n     */\n    Object.defineProperty(this, 'guild', { value: message.guild });\n\n    /**\n     * The initial message content\n     * @type {string}\n     * @readonly\n     * @private\n     */\n    Object.defineProperty(this, '_content', { value: message.content });\n\n    /**\n     * Whether `@everyone` or `@here` were mentioned\n     * @type {boolean}\n     */\n    this.everyone = Boolean(everyone);\n\n    if (users) {\n      if (users instanceof Collection) {\n        /**\n         * Any users that were mentioned\n         * <info>Order as received from the API, not as they appear in the message content</info>\n         * @type {Collection<Snowflake, User>}\n         */\n        this.users = new Collection(users);\n      } else {\n        this.users = new Collection();\n        for (const mention of users) {\n          if (mention.member && message.guild) {\n            message.guild.members._add(Object.assign(mention.member, { user: mention }));\n          }\n          const user = message.client.users._add(mention);\n          this.users.set(user.id, user);\n        }\n      }\n    } else {\n      this.users = new Collection();\n    }\n\n    if (roles instanceof Collection) {\n      /**\n       * Any roles that were mentioned\n       * <info>Order as received from the API, not as they appear in the message content</info>\n       * @type {Collection<Snowflake, Role>}\n       */\n      this.roles = new Collection(roles);\n    } else if (roles) {\n      this.roles = new Collection();\n      const guild = message.guild;\n      if (guild) {\n        for (const mention of roles) {\n          const role = guild.roles.cache.get(mention);\n          if (role) this.roles.set(role.id, role);\n        }\n      }\n    } else {\n      this.roles = new Collection();\n    }\n\n    /**\n     * Cached members for {@link MessageMentions#members}\n     * @type {?Collection<Snowflake, GuildMember>}\n     * @private\n     */\n    this._members = null;\n\n    /**\n     * Cached channels for {@link MessageMentions#channels}\n     * @type {?Collection<Snowflake, BaseChannel>}\n     * @private\n     */\n    this._channels = null;\n\n    /**\n     * Cached users for {@link MessageMentions#parsedUsers}\n     * @type {?Collection<Snowflake, User>}\n     * @private\n     */\n    this._parsedUsers = null;\n\n    /**\n     * Crossposted channel data.\n     * @typedef {Object} CrosspostedChannel\n     * @property {Snowflake} channelId The mentioned channel's id\n     * @property {Snowflake} guildId The id of the guild that has the channel\n     * @property {ChannelType} type The channel's type\n     * @property {string} name The channel's name\n     */\n\n    if (crosspostedChannels) {\n      if (crosspostedChannels instanceof Collection) {\n        /**\n         * A collection of crossposted channels\n         * <info>Order as received from the API, not as they appear in the message content</info>\n         * @type {Collection<Snowflake, CrosspostedChannel>}\n         */\n        this.crosspostedChannels = new Collection(crosspostedChannels);\n      } else {\n        this.crosspostedChannels = new Collection();\n        for (const crosspostedChannel of crosspostedChannels) {\n          this.crosspostedChannels.set(crosspostedChannel.id, {\n            channelId: crosspostedChannel.id,\n            guildId: crosspostedChannel.guild_id,\n            type: crosspostedChannel.type,\n            name: crosspostedChannel.name,\n          });\n        }\n      }\n    } else {\n      this.crosspostedChannels = new Collection();\n    }\n\n    /**\n     * The author of the message that this message is a reply to\n     * @type {?User}\n     */\n    this.repliedUser = repliedUser ? this.client.users._add(repliedUser) : null;\n  }\n\n  /**\n   * Any members that were mentioned (only in {@link Guild}s)\n   * <info>Order as received from the API, not as they appear in the message content</info>\n   * @type {?Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    if (this._members) return this._members;\n    if (!this.guild) return null;\n    this._members = new Collection();\n    this.users.forEach(user => {\n      const member = this.guild.members.resolve(user);\n      if (member) this._members.set(member.user.id, member);\n    });\n    return this._members;\n  }\n\n  /**\n   * Any channels that were mentioned\n   * <info>Order as they appear first in the message content</info>\n   * @type {Collection<Snowflake, BaseChannel>}\n   * @readonly\n   */\n  get channels() {\n    if (this._channels) return this._channels;\n    this._channels = new Collection();\n    let matches;\n\n    while ((matches = this.constructor.GlobalChannelsPattern.exec(this._content)) !== null) {\n      const channel = this.client.channels.cache.get(matches.groups.id);\n      if (channel) this._channels.set(channel.id, channel);\n    }\n\n    return this._channels;\n  }\n\n  /**\n   * Any user mentions that were included in the message content\n   * <info>Order as they appear first in the message content</info>\n   * @type {Collection<Snowflake, User>}\n   * @readonly\n   */\n  get parsedUsers() {\n    if (this._parsedUsers) return this._parsedUsers;\n    this._parsedUsers = new Collection();\n    let matches;\n    while ((matches = this.constructor.GlobalUsersPattern.exec(this._content)) !== null) {\n      const user = this.client.users.cache.get(matches[1]);\n      if (user) this._parsedUsers.set(user.id, user);\n    }\n    return this._parsedUsers;\n  }\n\n  /**\n   * Options used to check for a mention.\n   * @typedef {Object} MessageMentionsHasOptions\n   * @property {boolean} [ignoreDirect=false] Whether to ignore direct mentions to the item\n   * @property {boolean} [ignoreRoles=false] Whether to ignore role mentions to a guild member\n   * @property {boolean} [ignoreRepliedUser=false] Whether to ignore replied user mention to an user\n   * @property {boolean} [ignoreEveryone=false] Whether to ignore `@everyone`/`@here` mentions\n   */\n\n  /**\n   * Checks if a user, guild member, thread member, role, or channel is mentioned.\n   * Takes into account user mentions, role mentions, channel mentions,\n   * replied user mention, and `@everyone`/`@here` mentions.\n   * @param {UserResolvable|RoleResolvable|ChannelResolvable} data The User/Role/Channel to check for\n   * @param {MessageMentionsHasOptions} [options] The options for the check\n   * @returns {boolean}\n   */\n  has(data, { ignoreDirect = false, ignoreRoles = false, ignoreRepliedUser = false, ignoreEveryone = false } = {}) {\n    const user = this.client.users.resolve(data);\n\n    if (!ignoreEveryone && user && this.everyone) return true;\n\n    const userWasRepliedTo = user && this.repliedUser?.id === user.id;\n\n    if (!ignoreRepliedUser && userWasRepliedTo && this.users.has(user.id)) return true;\n\n    if (!ignoreDirect) {\n      if (user && (!ignoreRepliedUser || this.parsedUsers.has(user.id)) && this.users.has(user.id)) return true;\n\n      const role = this.guild?.roles.resolve(data);\n      if (role && this.roles.has(role.id)) return true;\n\n      const channel = this.client.channels.resolve(data);\n      if (channel && this.channels.has(channel.id)) return true;\n    }\n\n    if (!ignoreRoles) {\n      const member = this.guild?.members.resolve(data);\n      if (member) {\n        for (const mentionedRole of this.roles.values()) if (member.roles.cache.has(mentionedRole.id)) return true;\n      }\n    }\n\n    return false;\n  }\n\n  toJSON() {\n    return flatten(this, {\n      members: true,\n      channels: true,\n    });\n  }\n}\n\nmodule.exports = MessageMentions;\n",
    "'use strict';\n\nconst Base = require('./Base');\nconst { Emoji } = require('./Emoji');\n\n/**\n * Represents an answer to a {@link Poll}\n * @extends {Base}\n */\nclass PollAnswer extends Base {\n  constructor(client, data, poll) {\n    super(client);\n\n    /**\n     * The {@link Poll} this answer is part of\n     * @name PollAnswer#poll\n     * @type {Poll}\n     * @readonly\n     */\n    Object.defineProperty(this, 'poll', { value: poll });\n\n    /**\n     * The id of this answer\n     * @type {number}\n     */\n    this.id = data.answer_id;\n\n    /**\n     * The text of this answer\n     * @type {?string}\n     */\n    this.text = data.poll_media.text ?? null;\n\n    /**\n     * The raw emoji of this answer\n     * @name PollAnswer#_emoji\n     * @type {?APIPartialEmoji}\n     * @private\n     */\n    Object.defineProperty(this, '_emoji', { value: data.poll_media.emoji ?? null });\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    // This `count` field comes from `poll.results.answer_counts`\n    if ('count' in data) {\n      /**\n       * The amount of votes this answer has\n       * @type {number}\n       */\n      this.voteCount = data.count;\n    } else {\n      this.voteCount ??= 0;\n    }\n  }\n\n  /**\n   * The emoji of this answer\n   * @type {?(GuildEmoji|Emoji)}\n   */\n  get emoji() {\n    if (!this._emoji || (!this._emoji.id && !this._emoji.name)) return null;\n    return this.client.emojis.cache.get(this._emoji.id) ?? new Emoji(this.client, this._emoji);\n  }\n\n  /**\n   * Options used for fetching voters of a poll answer.\n   * @typedef {Object} BaseFetchPollAnswerVotersOptions\n   * @property {number} [limit] The maximum number of voters to fetch\n   * @property {Snowflake} [after] The user id to fetch voters after\n   */\n\n  /**\n   * Fetches the users that voted for this answer.\n   * @param {BaseFetchPollAnswerVotersOptions} [options={}] The options for fetching voters\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  fetchVoters({ after, limit } = {}) {\n    return this.poll.message.channel.messages.fetchPollAnswerVoters({\n      messageId: this.poll.message.id,\n      answerId: this.id,\n      after,\n      limit,\n    });\n  }\n}\n\nexports.PollAnswer = PollAnswer;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst { PollAnswer } = require('./PollAnswer');\nconst { DiscordjsError } = require('../errors/DJSError');\nconst { ErrorCodes } = require('../errors/index');\n\n/**\n * Represents a Poll\n * @extends {Base}\n */\nclass Poll extends Base {\n  constructor(client, data, message) {\n    super(client);\n\n    /**\n     * The message that started this poll\n     * @name Poll#message\n     * @type {Message}\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'message', { value: message });\n\n    /**\n     * The media for a poll's question\n     * @typedef {Object} PollQuestionMedia\n     * @property {string} text The text of this question\n     */\n\n    /**\n     * The media for this poll's question\n     * @type {PollQuestionMedia}\n     */\n    this.question = {\n      text: data.question.text,\n    };\n\n    /**\n     * The answers of this poll\n     * @type {Collection<number, PollAnswer>}\n     */\n    this.answers = data.answers.reduce(\n      (acc, answer) => acc.set(answer.answer_id, new PollAnswer(this.client, answer, this)),\n      new Collection(),\n    );\n\n    /**\n     * The timestamp when this poll expires\n     * @type {number}\n     */\n    this.expiresTimestamp = Date.parse(data.expiry);\n\n    /**\n     * Whether this poll allows multiple answers\n     * @type {boolean}\n     */\n    this.allowMultiselect = data.allow_multiselect;\n\n    /**\n     * The layout type of this poll\n     * @type {PollLayoutType}\n     */\n    this.layoutType = data.layout_type;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (data.results) {\n      /**\n       * Whether this poll's results have been precisely counted\n       * @type {boolean}\n       */\n      this.resultsFinalized = data.results.is_finalized;\n\n      for (const answerResult of data.results.answer_counts) {\n        const answer = this.answers.get(answerResult.id);\n        answer?._patch(answerResult);\n      }\n    } else {\n      this.resultsFinalized ??= false;\n    }\n  }\n\n  /**\n   * The date when this poll expires\n   * @type {Date}\n   * @readonly\n   */\n  get expiresAt() {\n    return new Date(this.expiresTimestamp);\n  }\n\n  /**\n   * Ends this poll.\n   * @returns {Promise<Message>}\n   */\n  async end() {\n    if (Date.now() > this.expiresTimestamp) {\n      throw new DiscordjsError(ErrorCodes.PollAlreadyExpired);\n    }\n\n    return this.message.channel.messages.endPoll(this.message.id);\n  }\n}\n\nexports.Poll = Poll;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Collector = require('./interfaces/Collector');\nconst Events = require('../util/Events');\n\n/**\n * @typedef {CollectorOptions} ReactionCollectorOptions\n * @property {number} max The maximum total amount of reactions to collect\n * @property {number} maxEmojis The maximum number of emojis to collect\n * @property {number} maxUsers The maximum number of users to react\n */\n\n/**\n * Collects reactions on messages.\n * Will automatically stop if the message ({@link Client#event:messageDelete messageDelete} or\n * {@link Client#event:messageDeleteBulk messageDeleteBulk}),\n * channel ({@link Client#event:channelDelete channelDelete}),\n * thread ({@link Client#event:threadDelete threadDelete}), or\n * guild ({@link Client#event:guildDelete guildDelete}) is deleted.\n * @extends {Collector}\n */\nclass ReactionCollector extends Collector {\n  /**\n   * @param {Message} message The message upon which to collect reactions\n   * @param {ReactionCollectorOptions} [options={}] The options to apply to this collector\n   */\n  constructor(message, options = {}) {\n    super(message.client, options);\n\n    /**\n     * The message upon which to collect reactions\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * The users that have reacted to this message\n     * @type {Collection}\n     */\n    this.users = new Collection();\n\n    /**\n     * The total number of reactions collected\n     * @type {number}\n     */\n    this.total = 0;\n\n    this.empty = this.empty.bind(this);\n    this._handleChannelDeletion = this._handleChannelDeletion.bind(this);\n    this._handleThreadDeletion = this._handleThreadDeletion.bind(this);\n    this._handleGuildDeletion = this._handleGuildDeletion.bind(this);\n    this._handleMessageDeletion = this._handleMessageDeletion.bind(this);\n\n    const bulkDeleteListener = messages => {\n      if (messages.has(this.message.id)) this.stop('messageDelete');\n    };\n\n    this.client.incrementMaxListeners();\n    this.client.on(Events.MessageReactionAdd, this.handleCollect);\n    this.client.on(Events.MessageReactionRemove, this.handleDispose);\n    this.client.on(Events.MessageReactionRemoveAll, this.empty);\n    this.client.on(Events.MessageDelete, this._handleMessageDeletion);\n    this.client.on(Events.MessageBulkDelete, bulkDeleteListener);\n    this.client.on(Events.ChannelDelete, this._handleChannelDeletion);\n    this.client.on(Events.ThreadDelete, this._handleThreadDeletion);\n    this.client.on(Events.GuildDelete, this._handleGuildDeletion);\n\n    this.once('end', () => {\n      this.client.removeListener(Events.MessageReactionAdd, this.handleCollect);\n      this.client.removeListener(Events.MessageReactionRemove, this.handleDispose);\n      this.client.removeListener(Events.MessageReactionRemoveAll, this.empty);\n      this.client.removeListener(Events.MessageDelete, this._handleMessageDeletion);\n      this.client.removeListener(Events.MessageBulkDelete, bulkDeleteListener);\n      this.client.removeListener(Events.ChannelDelete, this._handleChannelDeletion);\n      this.client.removeListener(Events.ThreadDelete, this._handleThreadDeletion);\n      this.client.removeListener(Events.GuildDelete, this._handleGuildDeletion);\n      this.client.decrementMaxListeners();\n    });\n\n    this.on('collect', (reaction, user) => {\n      /**\n       * Emitted whenever a reaction is newly created on a message. Will emit only when a new reaction is\n       * added to the message, as opposed to {@link Collector#event:collect} which will\n       * be emitted even when a reaction has already been added to the message.\n       * @event ReactionCollector#create\n       * @param {MessageReaction} reaction The reaction that was added\n       * @param {User} user The user that added the reaction\n       */\n      if (reaction.count === 1) {\n        this.emit('create', reaction, user);\n      }\n      this.total++;\n      this.users.set(user.id, user);\n    });\n\n    this.on('remove', (_reaction, user) => {\n      this.total--;\n      if (!this.collected.some(reaction => reaction.users.cache.has(user.id))) this.users.delete(user.id);\n    });\n  }\n\n  /**\n   * Handles an incoming reaction for possible collection.\n   * @param {MessageReaction} reaction The reaction to possibly collect\n   * @param {User} user The user that added the reaction\n   * @returns {?(Snowflake|string)}\n   * @private\n   */\n  collect(reaction) {\n    /**\n     * Emitted whenever a reaction is collected.\n     * @event ReactionCollector#collect\n     * @param {MessageReaction} reaction The reaction that was collected\n     * @param {User} user The user that added the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    return ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Handles a reaction deletion for possible disposal.\n   * @param {MessageReaction} reaction The reaction to possibly dispose of\n   * @param {User} user The user that removed the reaction\n   * @returns {?(Snowflake|string)}\n   */\n  dispose(reaction, user) {\n    /**\n     * Emitted when the reaction had all the users removed and the `dispose` option is set to true.\n     * @event ReactionCollector#dispose\n     * @param {MessageReaction} reaction The reaction that was disposed of\n     * @param {User} user The user that removed the reaction\n     */\n    if (reaction.message.id !== this.message.id) return null;\n\n    /**\n     * Emitted when the reaction had one user removed and the `dispose` option is set to true.\n     * @event ReactionCollector#remove\n     * @param {MessageReaction} reaction The reaction that was removed\n     * @param {User} user The user that removed the reaction\n     */\n    if (this.collected.has(ReactionCollector.key(reaction)) && this.users.has(user.id)) {\n      this.emit('remove', reaction, user);\n    }\n    return reaction.count ? null : ReactionCollector.key(reaction);\n  }\n\n  /**\n   * Empties this reaction collector.\n   */\n  empty() {\n    this.total = 0;\n    this.collected.clear();\n    this.users.clear();\n    this.checkEnd();\n  }\n\n  /**\n   * The reason this collector has ended with, or null if it hasn't ended yet\n   * @type {?string}\n   * @readonly\n   */\n  get endReason() {\n    if (this.options.max && this.total >= this.options.max) return 'limit';\n    if (this.options.maxEmojis && this.collected.size >= this.options.maxEmojis) return 'emojiLimit';\n    if (this.options.maxUsers && this.users.size >= this.options.maxUsers) return 'userLimit';\n    return super.endReason;\n  }\n\n  /**\n   * Handles checking if the message has been deleted, and if so, stops the collector with the reason 'messageDelete'.\n   * @private\n   * @param {Message} message The message that was deleted\n   * @returns {void}\n   */\n  _handleMessageDeletion(message) {\n    if (message.id === this.message.id) {\n      this.stop('messageDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the channel has been deleted, and if so, stops the collector with the reason 'channelDelete'.\n   * @private\n   * @param {GuildChannel} channel The channel that was deleted\n   * @returns {void}\n   */\n  _handleChannelDeletion(channel) {\n    if (channel.id === this.message.channelId || channel.threads?.cache.has(this.message.channelId)) {\n      this.stop('channelDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the thread has been deleted, and if so, stops the collector with the reason 'threadDelete'.\n   * @private\n   * @param {ThreadChannel} thread The thread that was deleted\n   * @returns {void}\n   */\n  _handleThreadDeletion(thread) {\n    if (thread.id === this.message.channelId) {\n      this.stop('threadDelete');\n    }\n  }\n\n  /**\n   * Handles checking if the guild has been deleted, and if so, stops the collector with the reason 'guildDelete'.\n   * @private\n   * @param {Guild} guild The guild that was deleted\n   * @returns {void}\n   */\n  _handleGuildDeletion(guild) {\n    if (guild.id === this.message.guild?.id) {\n      this.stop('guildDelete');\n    }\n  }\n\n  /**\n   * Gets the collector key for a reaction.\n   * @param {MessageReaction} reaction The message reaction to get the key for\n   * @returns {Snowflake|string}\n   */\n  static key(reaction) {\n    return reaction.emoji.id ?? reaction.emoji.name;\n  }\n}\n\nmodule.exports = ReactionCollector;\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst { StickerFormatExtensionMap } = require('../util/Constants');\n\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\nclass Sticker extends Base {\n  constructor(client, sticker) {\n    super(client);\n\n    this._patch(sticker);\n  }\n\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n\n    if ('description' in sticker) {\n      /**\n       * The description of the sticker\n       * @type {?string}\n       */\n      this.description = sticker.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if ('type' in sticker) {\n      /**\n       * The type of the sticker\n       * @type {?StickerType}\n       */\n      this.type = sticker.type;\n    } else {\n      this.type ??= null;\n    }\n\n    if ('format_type' in sticker) {\n      /**\n       * The format of the sticker\n       * @type {StickerFormatType}\n       */\n      this.format = sticker.format_type;\n    }\n\n    if ('name' in sticker) {\n      /**\n       * The name of the sticker\n       * @type {string}\n       */\n      this.name = sticker.name;\n    }\n\n    if ('pack_id' in sticker) {\n      /**\n       * The id of the pack the sticker is from, for standard stickers\n       * @type {?Snowflake}\n       */\n      this.packId = sticker.pack_id;\n    } else {\n      this.packId ??= null;\n    }\n\n    if ('tags' in sticker) {\n      /**\n       * Autocomplete/suggestions for the sticker\n       * @type {?string}\n       */\n      this.tags = sticker.tags;\n    } else {\n      this.tags ??= null;\n    }\n\n    if ('available' in sticker) {\n      /**\n       * Whether or not the guild sticker is available\n       * @type {?boolean}\n       */\n      this.available = sticker.available;\n    } else {\n      this.available ??= null;\n    }\n\n    if ('guild_id' in sticker) {\n      /**\n       * The id of the guild that owns this sticker\n       * @type {?Snowflake}\n       */\n      this.guildId = sticker.guild_id;\n    } else {\n      this.guildId ??= null;\n    }\n\n    if ('user' in sticker) {\n      /**\n       * The user that uploaded the guild sticker\n       * @type {?User}\n       */\n      this.user = this.client.users._add(sticker.user);\n    } else {\n      this.user ??= null;\n    }\n\n    if ('sort_value' in sticker) {\n      /**\n       * The standard sticker's sort order within its pack\n       * @type {?number}\n       */\n      this.sortValue = sticker.sort_value;\n    } else {\n      this.sortValue ??= null;\n    }\n  }\n\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.type;\n  }\n\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is {@link StickerFormatType.Lottie}, it returns\n   * the URL of the Lottie JSON file.</info>\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.client.rest.cdn.sticker(this.id, StickerFormatExtensionMap[this.format]);\n  }\n\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.sticker(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Fetches the pack that contains this sticker.\n   * @returns {Promise<?StickerPack>} The sticker pack or `null` if this sticker does not belong to one.\n   */\n  async fetchPack() {\n    if (!this.packId) return null;\n    return this.client.fetchStickerPacks({ packId: this.packId });\n  }\n\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new DiscordjsError(ErrorCodes.NotGuildSticker);\n    return this.guild.stickers.fetchUser(this);\n  }\n\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditOptions\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   * @property {string} [reason] Reason for editing this sticker\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditOptions} options The options to provide\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(sticker => console.log(`Updated the name of the sticker to ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.stickers.edit(this, options);\n  }\n\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(sticker => console.log(`Deleted sticker ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Sticker) {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.type === this.type &&\n        other.format === this.format &&\n        other.name === this.name &&\n        other.packId === this.packId &&\n        other.tags === this.tags &&\n        other.available === this.available &&\n        other.guildId === this.guildId &&\n        other.sortValue === this.sortValue\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.name === this.name &&\n        other.tags === this.tags\n      );\n    }\n  }\n}\n\nexports.Sticker = Sticker;\n",
    "'use strict';\n\nconst { Emoji } = require('./Emoji');\n\n/**\n * Parent class for {@link GuildEmoji} and {@link GuildPreviewEmoji}.\n * @extends {Emoji}\n * @abstract\n */\nclass BaseGuildEmoji extends Emoji {\n  constructor(client, data, guild) {\n    super(client, data);\n\n    /**\n     * The guild this emoji is a part of\n     * @type {Guild|GuildPreview}\n     */\n    this.guild = guild;\n\n    this.requiresColons = null;\n    this.managed = null;\n    this.available = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) this.name = data.name;\n\n    if ('require_colons' in data) {\n      /**\n       * Whether or not this emoji requires colons surrounding it\n       * @type {?boolean}\n       */\n      this.requiresColons = data.require_colons;\n    }\n\n    if ('managed' in data) {\n      /**\n       * Whether this emoji is managed by an external service\n       * @type {?boolean}\n       */\n      this.managed = data.managed;\n    }\n\n    if ('available' in data) {\n      /**\n       * Whether this emoji is available\n       * @type {?boolean}\n       */\n      this.available = data.available;\n    }\n  }\n}\n\n/**\n * Returns a URL for the emoji.\n * @method imageURL\n * @memberof BaseGuildEmoji\n * @instance\n * @param {BaseImageURLOptions} [options] Options for the image URL\n * @returns {string}\n */\n\n/**\n * Returns a URL for the emoji.\n * @name url\n * @memberof BaseGuildEmoji\n * @instance\n * @type {string}\n * @readonly\n * @deprecated Use {@link BaseGuildEmoji#imageURL} instead.\n */\n\nmodule.exports = BaseGuildEmoji;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst DataManager = require('./DataManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { Role } = require('../structures/Role');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n * @extends {DataManager}\n */\nclass GuildEmojiRoleManager extends DataManager {\n  constructor(emoji) {\n    super(emoji.client, Role);\n\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  async add(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n\n    const resolvedRoles = [];\n    for (const role of roleOrRoles.values()) {\n      const resolvedRole = this.guild.roles.resolveId(role);\n      if (!resolvedRole) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n      }\n      resolvedRoles.push(resolvedRole);\n    }\n\n    const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  async remove(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n\n    const resolvedRoleIds = [];\n    for (const role of roleOrRoles.values()) {\n      const roleId = this.guild.roles.resolveId(role);\n      if (!roleId) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n      }\n      resolvedRoleIds.push(roleId);\n    }\n\n    const newRoles = [...this.cache.keys()].filter(id => !resolvedRoleIds.includes(id));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({ roles });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch([...this.cache.keys()]);\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = GuildEmojiRoleManager;\n",
    "'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildEmoji = require('./BaseGuildEmoji');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst GuildEmojiRoleManager = require('../managers/GuildEmojiRoleManager');\n\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\nclass GuildEmoji extends BaseGuildEmoji {\n  constructor(client, data, guild) {\n    super(client, data, guild);\n\n    /**\n     * The user who created this emoji\n     * @type {?User}\n     */\n    this.author = null;\n\n    /**\n     * Array of role ids this emoji is active for\n     * @name GuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', { value: [], writable: true });\n\n    this._patch(data);\n  }\n\n  /**\n   * The guild this emoji is part of\n   * @type {Guild}\n   * @name GuildEmoji#guild\n   */\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if (data.user) this.author = this.client.users._add(data.user);\n    if (data.roles) this._roles = data.roles;\n  }\n\n  /**\n   * Whether the emoji is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return !this.managed && this.guild.members.me.permissions.has(PermissionFlagsBits.ManageGuildExpressions);\n  }\n\n  /**\n   * A manager for roles this emoji is active for.\n   * @type {GuildEmojiRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildEmojiRoleManager(this);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n  fetchAuthor() {\n    return this.guild.emojis.fetchAuthor(this);\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} GuildEmojiEditOptions\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n   * @property {string} [reason] Reason for editing this emoji\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {GuildEmojiEditOptions} options The options to provide\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(emoji => console.log(`Edited emoji ${emoji}`))\n   *   .catch(console.error);\n   */\n  edit(options) {\n    return this.guild.emojis.edit(this.id, options);\n  }\n\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] Reason for changing the emoji's name\n   * @returns {Promise<GuildEmoji>}\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Deletes the emoji.\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  async delete(reason) {\n    await this.guild.emojis.delete(this.id, reason);\n    return this;\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {GuildEmoji|APIEmoji} other The emoji to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof GuildEmoji) {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.available === this.available &&\n        other.requiresColons === this.requiresColons &&\n        other.roles.cache.size === this.roles.cache.size &&\n        other.roles.cache.every(role => this.roles.cache.has(role.id))\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.roles.length === this.roles.cache.size &&\n        other.roles.every(role => this.roles.cache.has(role))\n      );\n    }\n  }\n}\n\nmodule.exports = GuildEmoji;\n",
    "'use strict';\n\nconst { Emoji } = require('./Emoji');\nconst { flatten } = require('../util/Util');\n\n/**\n * Represents a limited emoji set used for both custom and unicode emojis. Custom emojis\n * will use this class opposed to the Emoji class when the client doesn't know enough\n * information about them.\n * @extends {Emoji}\n */\nclass ReactionEmoji extends Emoji {\n  constructor(reaction, emoji) {\n    super(reaction.message.client, emoji);\n    /**\n     * The message reaction this emoji refers to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  toJSON() {\n    return flatten(this, { identifier: true });\n  }\n\n  valueOf() {\n    return this.id;\n  }\n}\n\nmodule.exports = ReactionEmoji;\n",
    "'use strict';\n\nconst { UserFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link User#flags} bitfield.\n * @extends {BitField}\n */\nclass UserFlagsBitField extends BitField {\n  /**\n   * Numeric user flags.\n   * @type {UserFlags}\n   * @memberof UserFlagsBitField\n   */\n  static Flags = UserFlags;\n}\n\n/**\n * @name UserFlagsBitField\n * @kind constructor\n * @memberof UserFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name UserFlagsBitField#bitfield\n */\n\nmodule.exports = UserFlagsBitField;\n",
    "'use strict';\n\nconst { userMention } = require('@discordjs/formatters');\nconst { calculateUserDefaultAvatarIndex } = require('@discordjs/rest');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst UserFlagsBitField = require('../util/UserFlagsBitField');\nconst { emitDeprecationWarningForUserFetchFlags } = require('../util/Util');\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass User extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this.bot = null;\n\n    this.system = null;\n\n    this.flags = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else {\n      this.username ??= null;\n    }\n\n    if ('global_name' in data) {\n      /**\n       * The global name of this user\n       * @type {?string}\n       */\n      this.globalName = data.global_name;\n    } else {\n      this.globalName ??= null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n\n    if ('discriminator' in data) {\n      /**\n       * The discriminator of this user\n       * <info>`'0'`, or a 4-digit stringified number if they're using the legacy username system</info>\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else {\n      this.discriminator ??= null;\n    }\n\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else {\n      this.avatar ??= null;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The user banner's hash\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    } else if (this.banner !== null) {\n      this.banner ??= undefined;\n    }\n\n    if ('accent_color' in data) {\n      /**\n       * The base 10 accent color of the user's banner\n       * <info>The user must be force fetched for this property to be present or be updated</info>\n       * @type {?number}\n       */\n      this.accentColor = data.accent_color;\n    } else if (this.accentColor !== null) {\n      this.accentColor ??= undefined;\n    }\n\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlagsBitField}\n       */\n      this.flags = new UserFlagsBitField(data.public_flags);\n    }\n\n    if ('avatar_decoration' in data) {\n      /**\n       * The user avatar decoration's hash\n       * @type {?string}\n       * @deprecated Use `avatarDecorationData` instead\n       */\n      this.avatarDecoration = data.avatar_decoration;\n    } else {\n      this.avatarDecoration ??= null;\n    }\n\n    /**\n     * @typedef {Object} AvatarDecorationData\n     * @property {string} asset The avatar decoration hash\n     * @property {Snowflake} skuId The id of the avatar decoration's SKU\n     */\n\n    if (data.avatar_decoration_data) {\n      /**\n       * The user avatar decoration's data\n       * @type {?AvatarDecorationData}\n       */\n      this.avatarDecorationData = {\n        asset: data.avatar_decoration_data.asset,\n        skuId: data.avatar_decoration_data.sku_id,\n      };\n    } else {\n      this.avatarDecorationData = null;\n    }\n  }\n\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL(options = {}) {\n    return this.avatar && this.client.rest.cdn.avatar(this.id, this.avatar, options);\n  }\n\n  /**\n   * A link to the user's avatar decoration.\n   * @param {BaseImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarDecorationURL(options = {}) {\n    if (this.avatarDecorationData) {\n      return this.client.rest.cdn.avatarDecoration(this.avatarDecorationData.asset);\n    }\n\n    return this.avatarDecoration && this.client.rest.cdn.avatarDecoration(this.id, this.avatarDecoration, options);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    const index = this.discriminator === '0' ? calculateUserDefaultAvatarIndex(this.id) : this.discriminator % 5;\n    return this.client.rest.cdn.defaultAvatar(index);\n  }\n\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n\n  /**\n   * The hexadecimal version of the user accent color, with a leading hash\n   * <info>The user must be force fetched for this property to be present</info>\n   * @type {?string}\n   * @readonly\n   */\n  get hexAccentColor() {\n    if (typeof this.accentColor !== 'number') return this.accentColor;\n    return `#${this.accentColor.toString(16).padStart(6, '0')}`;\n  }\n\n  /**\n   * A link to the user's banner. See {@link User#banner} for more info\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL(options = {}) {\n    return this.banner && this.client.rest.cdn.banner(this.id, this.banner, options);\n  }\n\n  /**\n   * The tag of this user\n   * <info>This user's username, or their legacy tag (e.g. `hydrabolt#0001`)\n   * if they're using the legacy username system</info>\n   * @type {?string}\n   * @readonly\n   */\n  get tag() {\n    return typeof this.username === 'string'\n      ? this.discriminator === '0'\n        ? this.username\n        : `${this.username}#${this.discriminator}`\n      : null;\n  }\n\n  /**\n   * The global name of this user, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n  get displayName() {\n    return this.globalName ?? this.username;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM(force = false) {\n    return this.client.users.createDM(this.id, { force });\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.client.users.deleteDM(this.id);\n  }\n\n  /**\n   * Checks if the user is equal to another.\n   * It compares id, username, discriminator, avatar, banner, accent color, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    return (\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.globalName === user.globalName &&\n      this.avatar === user.avatar &&\n      this.flags?.bitfield === user.flags?.bitfield &&\n      this.banner === user.banner &&\n      this.accentColor === user.accentColor &&\n      this.avatarDecoration === user.avatarDecoration &&\n      this.avatarDecorationData?.asset === user.avatarDecorationData?.asset &&\n      this.avatarDecorationData?.skuId === user.avatarDecorationData?.skuId\n    );\n  }\n\n  /**\n   * Compares the user with an API user object\n   * @param {APIUser} user The API user object to compare\n   * @returns {boolean}\n   * @private\n   */\n  _equals(user) {\n    return (\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.globalName === user.global_name &&\n      this.avatar === user.avatar &&\n      this.flags?.bitfield === user.public_flags &&\n      ('banner' in user ? this.banner === user.banner : true) &&\n      ('accent_color' in user ? this.accentColor === user.accent_color : true) &&\n      ('avatar_decoration' in user ? this.avatarDecoration === user.avatar_decoration : true) &&\n      ('avatar_decoration_data' in user\n        ? this.avatarDecorationData?.asset === user.avatar_decoration_data?.asset &&\n          this.avatarDecorationData?.skuId === user.avatar_decoration_data?.sku_id\n        : true)\n    );\n  }\n\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlagsBitField>}\n   * @deprecated <warn>This method is deprecated and will be removed in the next major version.\n   * Flags may still be retrieved via {@link User#fetch}.</warn>\n   */\n  fetchFlags(force = false) {\n    emitDeprecationWarningForUserFetchFlags(this.constructor.name);\n    return this.client.users.fetchFlags(this.id, { force });\n  }\n\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n  fetch(force = true) {\n    return this.client.users.fetch(this.id, { force });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return userMention(this.id);\n  }\n\n  toJSON(...props) {\n    const json = super.toJSON(\n      {\n        createdTimestamp: true,\n        defaultAvatarURL: true,\n        hexAccentColor: true,\n        tag: true,\n      },\n      ...props,\n    );\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    json.bannerURL = this.banner ? this.bannerURL() : this.banner;\n    return json;\n  }\n}\n\n/**\n * Sends a message to this user.\n * @method send\n * @memberof User\n * @instance\n * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n * @returns {Promise<Message>}\n * @example\n * // Send a direct message\n * user.send('Hello!')\n *   .then(message => console.log(`Sent message: ${message.content} to ${user.tag}`))\n *   .catch(console.error);\n */\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { ReactionType, Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst User = require('../structures/User');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {CachedManager}\n */\nclass ReactionUserManager extends CachedManager {\n  constructor(reaction, iterable) {\n    super(reaction.client, User, iterable);\n\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Options used to fetch users who gave a reaction.\n   * @typedef {Object} FetchReactionUsersOptions\n   * @property {ReactionType} [type=ReactionType.Normal] The reaction type to fetch\n   * @property {number} [limit=100] The maximum amount of users to fetch, defaults to `100`\n   * @property {Snowflake} [after] Limit fetching users to those with an id greater than the supplied id\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.\n   * @param {FetchReactionUsersOptions} [options] Options for fetching the users\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch({ type = ReactionType.Normal, limit = 100, after } = {}) {\n    const message = this.reaction.message;\n    const query = makeURLSearchParams({ limit, after, type });\n    const data = await this.client.rest.get(\n      Routes.channelMessageReaction(message.channelId, message.id, this.reaction.emoji.identifier),\n      { query },\n    );\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users._add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove(user = this.client.user) {\n    const userId = this.client.users.resolveId(user);\n    if (!userId) throw new DiscordjsError(ErrorCodes.ReactionResolveUser);\n    const message = this.reaction.message;\n    const route =\n      userId === this.client.user.id\n        ? Routes.channelMessageOwnReaction(message.channelId, message.id, this.reaction.emoji.identifier)\n        : Routes.channelMessageUserReaction(message.channelId, message.id, this.reaction.emoji.identifier, userId);\n    await this.client.rest.delete(route);\n    return this.reaction;\n  }\n}\n\nmodule.exports = ReactionUserManager;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst ApplicationEmoji = require('./ApplicationEmoji');\nconst GuildEmoji = require('./GuildEmoji');\nconst ReactionEmoji = require('./ReactionEmoji');\nconst ReactionUserManager = require('../managers/ReactionUserManager');\nconst { flatten } = require('../util/Util');\n\n/**\n * Represents a reaction to a message.\n */\nclass MessageReaction {\n  constructor(client, data, message) {\n    /**\n     * The client that instantiated this message reaction\n     * @name MessageReaction#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The message that this reaction refers to\n     * @type {Message}\n     */\n    this.message = message;\n\n    /**\n     * Whether the client has given this reaction\n     * @type {boolean}\n     */\n    this.me = data.me;\n\n    /**\n     * Whether the client has super-reacted using this emoji\n     * @type {boolean}\n     */\n    this.meBurst = Boolean(data.me_burst);\n\n    /**\n     * A manager of the users that have given this reaction\n     * @type {ReactionUserManager}\n     */\n    this.users = new ReactionUserManager(this, this.me ? [client.user] : []);\n\n    this._emoji = new ReactionEmoji(this, data.emoji);\n\n    this.burstColors = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if (data.burst_colors) {\n      /**\n       * Hexadecimal colors used for this super reaction\n       * @type {?string[]}\n       */\n      this.burstColors = data.burst_colors;\n    }\n\n    if ('count' in data) {\n      /**\n       * The number of people that have given the same reaction\n       * @type {?number}\n       */\n      this.count ??= data.count;\n    }\n\n    if ('count_details' in data) {\n      /**\n       * The reaction count details object contains information about super and normal reaction counts.\n       * @typedef {Object} ReactionCountDetailsData\n       * @property {number} burst Count of super reactions\n       * @property {number} normal Count of normal reactions\n       */\n\n      /**\n       * The reaction count details object contains information about super and normal reaction counts.\n       * @type {ReactionCountDetailsData}\n       */\n      this.countDetails = {\n        burst: data.count_details.burst,\n        normal: data.count_details.normal,\n      };\n    } else {\n      this.countDetails ??= { burst: 0, normal: 0 };\n    }\n  }\n\n  /**\n   * Makes the client user react with this reaction\n   * @returns {Promise<MessageReaction>}\n   */\n  react() {\n    return this.message.react(this.emoji);\n  }\n\n  /**\n   * Removes all users from this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove() {\n    await this.client.rest.delete(\n      Routes.channelMessageReaction(this.message.channelId, this.message.id, this._emoji.identifier),\n    );\n    return this;\n  }\n\n  /**\n   * The emoji of this reaction. Either a {@link GuildEmoji} object for known custom emojis,\n   * {@link ApplicationEmoji} for application emojis, or a {@link ReactionEmoji} object\n   * which has fewer properties. Whatever the prototype of the emoji, it will still have\n   * `name`, `id`, `identifier` and `toString()`\n   * @type {GuildEmoji|ReactionEmoji|ApplicationEmoji}\n   * @readonly\n   */\n  get emoji() {\n    if (this._emoji instanceof GuildEmoji) return this._emoji;\n    if (this._emoji instanceof ApplicationEmoji) return this._emoji;\n    // Check to see if the emoji has become known to the client\n    if (this._emoji.id) {\n      const applicationEmojis = this.message.client.application.emojis.cache;\n      if (applicationEmojis.has(this._emoji.id)) {\n        const emoji = applicationEmojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n      const emojis = this.message.client.emojis.cache;\n      if (emojis.has(this._emoji.id)) {\n        const emoji = emojis.get(this._emoji.id);\n        this._emoji = emoji;\n        return emoji;\n      }\n    }\n    return this._emoji;\n  }\n\n  /**\n   * Whether or not this reaction is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.count === null;\n  }\n\n  /**\n   * Fetch this reaction.\n   * @returns {Promise<MessageReaction>}\n   */\n  async fetch() {\n    const message = await this.message.fetch();\n    const existing = message.reactions.cache.get(this.emoji.id ?? this.emoji.name);\n    // The reaction won't get set when it has been completely removed\n    this._patch(existing ?? { count: 0 });\n    return this;\n  }\n\n  toJSON() {\n    return flatten(this, { emoji: 'emojiId', message: 'messageId' });\n  }\n\n  valueOf() {\n    return this._emoji.id ?? this._emoji.name;\n  }\n\n  _add(user, burst) {\n    if (this.partial) return;\n    this.users.cache.set(user.id, user);\n    if (!this.me || user.id !== this.message.client.user.id || this.count === 0) {\n      this.count++;\n      if (burst) this.countDetails.burst++;\n      else this.countDetails.normal++;\n    }\n    if (user.id === this.message.client.user.id) {\n      if (burst) this.meBurst = true;\n      else this.me = true;\n    }\n  }\n  _remove(user, burst) {\n    if (this.partial) return;\n    this.users.cache.delete(user.id);\n    if (!this.me || user.id !== this.message.client.user.id) {\n      this.count--;\n      if (burst) this.countDetails.burst--;\n      else this.countDetails.normal--;\n    }\n    if (user.id === this.message.client.user.id) {\n      if (burst) this.meBurst = false;\n      else this.me = false;\n    }\n    if (this.count <= 0 && this.users.cache.size === 0) {\n      this.message.reactions.cache.delete(this.emoji.id ?? this.emoji.name);\n    }\n  }\n}\n\nmodule.exports = MessageReaction;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {CachedManager}\n */\nclass ReactionManager extends CachedManager {\n  constructor(message, iterable) {\n    super(message.client, MessageReaction, iterable);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.emoji.id ?? data.emoji.name, extras: [this.message] });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * * The Unicode representation of an emoji\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.\n   * @method resolveId\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  async removeAll() {\n    await this.client.rest.delete(Routes.channelMessageAllReactions(this.message.channelId, this.message.id));\n    return this.message;\n  }\n}\n\nmodule.exports = ReactionManager;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { messageLink } = require('@discordjs/formatters');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst {\n  InteractionType,\n  ChannelType,\n  MessageType,\n  MessageFlags,\n  PermissionFlagsBits,\n  MessageReferenceType,\n} = require('discord-api-types/v10');\nconst Attachment = require('./Attachment');\nconst Base = require('./Base');\nconst ClientApplication = require('./ClientApplication');\nconst Embed = require('./Embed');\nconst InteractionCollector = require('./InteractionCollector');\nconst Mentions = require('./MessageMentions');\nconst MessagePayload = require('./MessagePayload');\nconst { Poll } = require('./Poll.js');\nconst ReactionCollector = require('./ReactionCollector');\nconst { Sticker } = require('./Sticker');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst ReactionManager = require('../managers/ReactionManager');\nconst { createComponent } = require('../util/Components');\nconst { NonSystemMessageTypes, MaxBulkDeletableMessageAge, UndeletableMessageTypes } = require('../util/Constants');\nconst MessageFlagsBitField = require('../util/MessageFlagsBitField');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst { _transformAPIMessageInteractionMetadata } = require('../util/Transformers.js');\nconst { cleanContent, resolvePartialEmoji, transformResolved } = require('../util/Util');\n\n/**\n * Represents a message on Discord.\n * @extends {Base}\n */\nclass Message extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the channel the message was sent in\n     * @type {Snowflake}\n     */\n    this.channelId = data.channel_id;\n\n    /**\n     * The id of the guild the message was sent in, if any\n     * @type {?Snowflake}\n     */\n    this.guildId = data.guild_id ?? this.channel?.guild?.id ?? null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The message's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The timestamp the message was sent at\n     * @type {number}\n     */\n    this.createdTimestamp = DiscordSnowflake.timestampFrom(this.id);\n\n    if ('type' in data) {\n      /**\n       * The type of the message\n       * @type {?MessageType}\n       */\n      this.type = data.type;\n\n      /**\n       * Whether or not this message was sent by Discord, not actually a user (e.g. pin notifications)\n       * @type {?boolean}\n       */\n      this.system = !NonSystemMessageTypes.includes(this.type);\n    } else {\n      this.system ??= null;\n      this.type ??= null;\n    }\n\n    if ('content' in data) {\n      /**\n       * The content of the message.\n       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\n       * in a guild for messages that do not mention the client.</info>\n       * @type {?string}\n       */\n      this.content = data.content;\n    } else {\n      this.content ??= null;\n    }\n\n    if ('author' in data) {\n      /**\n       * The author of the message\n       * @type {?User}\n       */\n      this.author = this.client.users._add(data.author, !data.webhook_id);\n    } else {\n      this.author ??= null;\n    }\n\n    if ('pinned' in data) {\n      /**\n       * Whether or not this message is pinned\n       * @type {?boolean}\n       */\n      this.pinned = Boolean(data.pinned);\n    } else {\n      this.pinned ??= null;\n    }\n\n    if ('tts' in data) {\n      /**\n       * Whether or not the message was Text-To-Speech\n       * @type {?boolean}\n       */\n      this.tts = data.tts;\n    } else {\n      this.tts ??= null;\n    }\n\n    if ('nonce' in data) {\n      /**\n       * A random number or string used for checking message delivery\n       * <warn>This is only received after the message was sent successfully, and\n       * lost if re-fetched</warn>\n       * @type {?string}\n       */\n      this.nonce = data.nonce;\n    } else {\n      this.nonce ??= null;\n    }\n\n    if ('embeds' in data) {\n      /**\n       * An array of embeds in the message - e.g. YouTube Player.\n       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\n       * in a guild for messages that do not mention the client.</info>\n       * @type {Embed[]}\n       */\n      this.embeds = data.embeds.map(embed => new Embed(embed));\n    } else {\n      this.embeds = this.embeds?.slice() ?? [];\n    }\n\n    if ('components' in data) {\n      /**\n       * An array of action rows in the message.\n       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\n       * in a guild for messages that do not mention the client.</info>\n       * @type {ActionRow[]}\n       */\n      this.components = data.components.map(component => createComponent(component));\n    } else {\n      this.components = this.components?.slice() ?? [];\n    }\n\n    if ('attachments' in data) {\n      /**\n       * A collection of attachments in the message - e.g. Pictures - mapped by their ids.\n       * <info>This property requires the {@link GatewayIntentBits.MessageContent} privileged intent\n       * in a guild for messages that do not mention the client.</info>\n       * @type {Collection<Snowflake, Attachment>}\n       */\n      this.attachments = new Collection();\n      if (data.attachments) {\n        for (const attachment of data.attachments) {\n          this.attachments.set(attachment.id, new Attachment(attachment));\n        }\n      }\n    } else {\n      this.attachments = new Collection(this.attachments);\n    }\n\n    if ('sticker_items' in data || 'stickers' in data) {\n      /**\n       * A collection of stickers in the message\n       * @type {Collection<Snowflake, Sticker>}\n       */\n      this.stickers = new Collection(\n        (data.sticker_items ?? data.stickers)?.map(sticker => [sticker.id, new Sticker(this.client, sticker)]),\n      );\n    } else {\n      this.stickers = new Collection(this.stickers);\n    }\n\n    if ('position' in data) {\n      /**\n       * A generally increasing integer (there may be gaps or duplicates) that represents\n       * the approximate position of the message in a thread.\n       * @type {?number}\n       */\n      this.position = data.position;\n    } else {\n      this.position ??= null;\n    }\n\n    if ('role_subscription_data' in data) {\n      /**\n       * Role subscription data found on {@link MessageType.RoleSubscriptionPurchase} messages.\n       * @typedef {Object} RoleSubscriptionData\n       * @property {Snowflake} roleSubscriptionListingId The id of the SKU and listing the user is subscribed to\n       * @property {string} tierName The name of the tier the user is subscribed to\n       * @property {number} totalMonthsSubscribed The total number of months the user has been subscribed for\n       * @property {boolean} isRenewal Whether this notification is a renewal\n       */\n\n      /**\n       * The data of the role subscription purchase or renewal.\n       * <info>This is present on {@link MessageType.RoleSubscriptionPurchase} messages.</info>\n       * @type {?RoleSubscriptionData}\n       */\n      this.roleSubscriptionData = {\n        roleSubscriptionListingId: data.role_subscription_data.role_subscription_listing_id,\n        tierName: data.role_subscription_data.tier_name,\n        totalMonthsSubscribed: data.role_subscription_data.total_months_subscribed,\n        isRenewal: data.role_subscription_data.is_renewal,\n      };\n    } else {\n      this.roleSubscriptionData ??= null;\n    }\n\n    if ('resolved' in data) {\n      /**\n       * Resolved data from auto-populated select menus.\n       * @typedef {Object} CommandInteractionResolvedData\n       */\n      this.resolved = transformResolved(\n        { client: this.client, guild: this.guild, channel: this.channel },\n        data.resolved,\n      );\n    } else {\n      this.resolved ??= null;\n    }\n\n    // Discord sends null if the message has not been edited\n    if (data.edited_timestamp) {\n      /**\n       * The timestamp the message was last edited at (if applicable)\n       * @type {?number}\n       */\n      this.editedTimestamp = Date.parse(data.edited_timestamp);\n    } else {\n      this.editedTimestamp ??= null;\n    }\n\n    if ('reactions' in data) {\n      /**\n       * A manager of the reactions belonging to this message\n       * @type {ReactionManager}\n       */\n      this.reactions = new ReactionManager(this);\n      if (data.reactions?.length > 0) {\n        for (const reaction of data.reactions) {\n          this.reactions._add(reaction);\n        }\n      }\n    } else {\n      this.reactions ??= new ReactionManager(this);\n    }\n\n    if (!this.mentions) {\n      /**\n       * All valid mentions that the message contains\n       * @type {MessageMentions}\n       */\n      this.mentions = new Mentions(\n        this,\n        data.mentions,\n        data.mention_roles,\n        data.mention_everyone,\n        data.mention_channels,\n        data.referenced_message?.author,\n      );\n    } else {\n      this.mentions = new Mentions(\n        this,\n        data.mentions ?? this.mentions.users,\n        data.mention_roles ?? this.mentions.roles,\n        data.mention_everyone ?? this.mentions.everyone,\n        data.mention_channels ?? this.mentions.crosspostedChannels,\n        data.referenced_message?.author ?? this.mentions.repliedUser,\n      );\n    }\n\n    if ('webhook_id' in data) {\n      /**\n       * The id of the webhook that sent the message, if applicable\n       * @type {?Snowflake}\n       */\n      this.webhookId = data.webhook_id;\n    } else {\n      this.webhookId ??= null;\n    }\n\n    if ('application' in data) {\n      /**\n       * Supplemental application information for group activities\n       * @type {?ClientApplication}\n       */\n      this.groupActivityApplication = new ClientApplication(this.client, data.application);\n    } else {\n      this.groupActivityApplication ??= null;\n    }\n\n    if ('application_id' in data) {\n      /**\n       * The id of the application of the interaction that sent this message, if any\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    } else {\n      this.applicationId ??= null;\n    }\n\n    if ('activity' in data) {\n      /**\n       * Group activity\n       * @type {?MessageActivity}\n       */\n      this.activity = {\n        partyId: data.activity.party_id,\n        type: data.activity.type,\n      };\n    } else {\n      this.activity ??= null;\n    }\n\n    if ('thread' in data) {\n      this.client.channels._add(data.thread, this.guild);\n    }\n\n    if (this.member && data.member) {\n      this.member._patch(data.member);\n    } else if (data.member && this.guild && this.author) {\n      this.guild.members._add(Object.assign(data.member, { user: this.author }));\n    }\n\n    if ('flags' in data) {\n      /**\n       * Flags that are applied to the message\n       * @type {Readonly<MessageFlagsBitField>}\n       */\n      this.flags = new MessageFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags = new MessageFlagsBitField(this.flags).freeze();\n    }\n\n    /**\n     * Reference data sent in a message that contains ids identifying the referenced message.\n     * This can be present in the following types of message:\n     * * Crossposted messages (`MessageFlags.Crossposted`)\n     * * {@link MessageType.ChannelPinnedMessage}\n     * * {@link MessageType.ChannelFollowAdd}\n     * * {@link MessageType.Reply}\n     * * {@link MessageType.ThreadStarterMessage}\n     * @see {@link https://discord.com/developers/docs/resources/message#message-object-message-types}\n     * @typedef {Object} MessageReference\n     * @property {Snowflake} channelId The channel id that was referenced\n     * @property {Snowflake|undefined} guildId The guild id that was referenced\n     * @property {Snowflake|undefined} messageId The message id that was referenced\n     * @property {MessageReferenceType} type The type of message reference\n     */\n\n    if ('message_reference' in data) {\n      /**\n       * Message reference data\n       * @type {?MessageReference}\n       */\n      this.reference = {\n        channelId: data.message_reference.channel_id,\n        guildId: data.message_reference.guild_id,\n        messageId: data.message_reference.message_id,\n        type: data.message_reference.type,\n      };\n    } else {\n      this.reference ??= null;\n    }\n\n    if (data.referenced_message) {\n      this.channel?.messages._add({ guild_id: data.message_reference?.guild_id, ...data.referenced_message });\n    }\n\n    if (data.interaction_metadata) {\n      /**\n       * Partial data of the interaction that a message is a result of\n       * @typedef {Object} MessageInteractionMetadata\n       * @property {Snowflake} id The interaction's id\n       * @property {InteractionType} type The type of the interaction\n       * @property {User} user The user that invoked the interaction\n       * @property {APIAuthorizingIntegrationOwnersMap} authorizingIntegrationOwners\n       * Ids for installation context(s) related to an interaction\n       * @property {?Snowflake} originalResponseMessageId\n       * Id of the original response message. Present only on follow-up messages\n       * @property {?Snowflake} interactedMessageId\n       * Id of the message that contained interactive component.\n       * Present only on messages created from component interactions\n       * @property {?MessageInteractionMetadata} triggeringInteractionMetadata\n       * Metadata for the interaction that was used to open the modal. Present only on modal submit interactions\n       */\n\n      /**\n       * Partial data of the interaction that this message is a result of\n       * @type {?MessageInteractionMetadata}\n       */\n      this.interactionMetadata = _transformAPIMessageInteractionMetadata(this.client, data.interaction_metadata);\n    } else {\n      this.interactionMetadata ??= null;\n    }\n\n    /**\n     * Partial data of the interaction that a message is a reply to\n     * @typedef {Object} MessageInteraction\n     * @property {Snowflake} id The interaction's id\n     * @property {InteractionType} type The type of the interaction\n     * @property {string} commandName The name of the interaction's application command,\n     * as well as the subcommand and subcommand group, where applicable\n     * @property {User} user The user that invoked the interaction\n     * @deprecated Use {@link Message#interactionMetadata} instead.\n     */\n\n    if (data.interaction) {\n      /**\n       * Partial data of the interaction that this message is a reply to\n       * @type {?MessageInteraction}\n       * @deprecated Use {@link Message#interactionMetadata} instead.\n       */\n      this.interaction = {\n        id: data.interaction.id,\n        type: data.interaction.type,\n        commandName: data.interaction.name,\n        user: this.client.users._add(data.interaction.user),\n      };\n    } else {\n      this.interaction ??= null;\n    }\n\n    if (data.poll) {\n      /**\n       * The poll that was sent with the message\n       * @type {?Poll}\n       */\n      this.poll = new Poll(this.client, data.poll, this);\n    } else {\n      this.poll ??= null;\n    }\n\n    if (data.message_snapshots) {\n      /**\n       * The message snapshots associated with the message reference\n       * @type {Collection<Snowflake, Message>}\n       */\n      this.messageSnapshots = data.message_snapshots.reduce((coll, snapshot) => {\n        const channel = this.client.channels.resolve(this.reference.channelId);\n        const snapshotData = {\n          ...snapshot.message,\n          id: this.reference.messageId,\n          channel_id: this.reference.channelId,\n          guild_id: this.reference.guildId,\n        };\n\n        return coll.set(\n          this.reference.messageId,\n          channel ? channel.messages._add(snapshotData) : new this.constructor(this.client, snapshotData),\n        );\n      }, new Collection());\n    } else {\n      this.messageSnapshots ??= new Collection();\n    }\n\n    /**\n     * A call associated with a message\n     * @typedef {Object} MessageCall\n     * @property {Readonly<?Date>} endedAt The time the call ended\n     * @property {?number} endedTimestamp The timestamp the call ended\n     * @property {Snowflake[]} participants The ids of the users that participated in the call\n     */\n\n    if (data.call) {\n      /**\n       * The call associated with the message\n       * @type {?MessageCall}\n       */\n      this.call = {\n        endedTimestamp: data.call.ended_timestamp ? Date.parse(data.call.ended_timestamp) : null,\n        participants: data.call.participants,\n        get endedAt() {\n          return this.endedTimestamp && new Date(this.endedTimestamp);\n        },\n      };\n    } else {\n      this.call ??= null;\n    }\n  }\n\n  /**\n   * The channel that the message was sent in\n   * @type {TextBasedChannels}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * Whether or not this message is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.content !== 'string' || !this.author;\n  }\n\n  /**\n   * Represents the author of the message as a guild member.\n   * Only available if the message comes from a guild where the author is still a member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild?.members.resolve(this.author) ?? null;\n  }\n\n  /**\n   * The time the message was sent at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The time the message was last edited at (if applicable)\n   * @type {?Date}\n   * @readonly\n   */\n  get editedAt() {\n    return this.editedTimestamp && new Date(this.editedTimestamp);\n  }\n\n  /**\n   * The guild the message was sent in (if in a guild channel)\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId) ?? this.channel?.guild ?? null;\n  }\n\n  /**\n   * Whether this message has a thread associated with it\n   * @type {boolean}\n   * @readonly\n   */\n  get hasThread() {\n    return this.flags.has(MessageFlags.HasThread);\n  }\n\n  /**\n   * The thread started by this message\n   * <info>This property is not suitable for checking whether a message has a thread,\n   * use {@link Message#hasThread} instead.</info>\n   * @type {?ThreadChannel}\n   * @readonly\n   */\n  get thread() {\n    return this.channel?.threads?.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The URL to jump to this message\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.inGuild() ? messageLink(this.channelId, this.id, this.guildId) : messageLink(this.channelId, this.id);\n  }\n\n  /**\n   * The message contents with all mentions replaced by the equivalent text.\n   * If mentions cannot be resolved to a name, the relevant mention in the message content will not be converted.\n   * @type {?string}\n   * @readonly\n   */\n  get cleanContent() {\n    // eslint-disable-next-line eqeqeq\n    return this.content != null && this.channel ? cleanContent(this.content, this.channel) : null;\n  }\n\n  /**\n   * Creates a reaction collector.\n   * @param {ReactionCollectorOptions} [options={}] Options to send to the collector\n   * @returns {ReactionCollector}\n   * @example\n   * // Create a reaction collector\n   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someId';\n   * const collector = message.createReactionCollector({ filter, time: 15_000 });\n   * collector.on('collect', r => console.log(`Collected ${r.emoji.name}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createReactionCollector(options = {}) {\n    return new ReactionCollector(this, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {ReactionCollectorOptions} AwaitReactionsOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createReactionCollector but in promise form.\n   * Resolves with a collection of reactions that pass the specified filter.\n   * @param {AwaitReactionsOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<string | Snowflake, MessageReaction>>}\n   * @example\n   * // Create a reaction collector\n   * const filter = (reaction, user) => reaction.emoji.name === '👌' && user.id === 'someId'\n   * message.awaitReactions({ filter, time: 15_000 })\n   *   .then(collected => console.log(`Collected ${collected.size} reactions`))\n   *   .catch(console.error);\n   */\n  awaitReactions(options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createReactionCollector(options);\n      collector.once('end', (reactions, reason) => {\n        if (options.errors?.includes(reason)) reject(reactions);\n        else resolve(reactions);\n      });\n    });\n  }\n\n  /**\n   * @typedef {CollectorOptions} MessageComponentCollectorOptions\n   * @property {ComponentType} [componentType] The type of component to listen for\n   * @property {number} [max] The maximum total amount of interactions to collect\n   * @property {number} [maxComponents] The maximum number of components to collect\n   * @property {number} [maxUsers] The maximum number of users to interact\n   */\n\n  /**\n   * Creates a message component interaction collector.\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   * @example\n   * // Create a message component interaction collector\n   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\n   * const collector = message.createMessageComponentCollector({ filter, time: 15_000 });\n   * collector.on('collect', i => console.log(`Collected ${i.customId}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createMessageComponentCollector(options = {}) {\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionType: InteractionType.MessageComponent,\n      message: this,\n    });\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {Object} AwaitMessageComponentOptions\n   * @property {CollectorFilter} [filter] The filter applied to this collector\n   * @property {number} [time] Time to wait for an interaction before rejecting\n   * @property {ComponentType} [componentType] The type of component interaction to collect\n   * @property {number} [idle] Time to wait without another message component interaction before ending the collector\n   * @property {boolean} [dispose] Whether to remove the message component interaction after collecting\n   * @property {InteractionResponse} [interactionResponse] The interaction response to collect interactions from\n   */\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   * @example\n   * // Collect a message component interaction\n   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\n   * message.awaitMessageComponent({ filter, time: 15_000 })\n   *   .then(interaction => console.log(`${interaction.customId} was clicked!`))\n   *   .catch(console.error);\n   */\n  awaitMessageComponent(options = {}) {\n    const _options = { ...options, max: 1 };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);\n        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Whether the message is editable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    const precheck = Boolean(\n      this.author.id === this.client.user.id &&\n        (!this.guild || this.channel?.viewable) &&\n        this.reference?.type !== MessageReferenceType.Forward,\n    );\n\n    // Regardless of permissions thread messages cannot be edited if\n    // the thread is archived or the thread is locked and the bot does not have permission to manage threads.\n    if (this.channel?.isThread()) {\n      if (this.channel.archived) return false;\n      if (this.channel.locked) {\n        const permissions = this.channel.permissionsFor(this.client.user);\n        if (!permissions?.has(PermissionFlagsBits.ManageThreads, true)) return false;\n      }\n    }\n\n    return precheck;\n  }\n\n  /**\n   * Whether the message is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    if (UndeletableMessageTypes.includes(this.type)) return false;\n\n    if (!this.guild) {\n      return this.author.id === this.client.user.id;\n    }\n    // DMChannel does not have viewable property, so check viewable after proved that message is on a guild.\n    if (!this.channel?.viewable) {\n      return false;\n    }\n\n    const permissions = this.channel?.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows deleting even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    // The auto moderation action message author is the reference message author\n    return (\n      (this.type !== MessageType.AutoModerationAction && this.author.id === this.client.user.id) ||\n      (permissions.has(PermissionFlagsBits.ManageMessages, false) && !this.guild.members.me.isCommunicationDisabled())\n    );\n  }\n\n  /**\n   * Whether the message is bulk deletable by the client user\n   * @type {boolean}\n   * @readonly\n   * @example\n   * // Filter for bulk deletable messages\n   * channel.bulkDelete(messages.filter(message => message.bulkDeletable));\n   */\n  get bulkDeletable() {\n    return (\n      (this.inGuild() &&\n        Date.now() - this.createdTimestamp < MaxBulkDeletableMessageAge &&\n        this.deletable &&\n        this.channel?.permissionsFor(this.client.user).has(PermissionFlagsBits.ManageMessages, false)) ??\n      false\n    );\n  }\n\n  /**\n   * Whether the message is pinnable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get pinnable() {\n    const { channel } = this;\n    return Boolean(\n      !this.system &&\n        (!this.guild ||\n          (channel?.viewable &&\n            channel?.permissionsFor(this.client.user)?.has(PermissionFlagsBits.ManageMessages, false))),\n    );\n  }\n\n  /**\n   * Fetches the Message this crosspost/reply/pin-add references, if available to the client\n   * @returns {Promise<Message>}\n   */\n  async fetchReference() {\n    if (!this.reference) throw new DiscordjsError(ErrorCodes.MessageReferenceMissing);\n    const { channelId, messageId } = this.reference;\n    if (!messageId) throw new DiscordjsError(ErrorCodes.MessageReferenceMissing);\n    const channel = this.client.channels.resolve(channelId);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    const message = await channel.messages.fetch(messageId);\n    return message;\n  }\n\n  /**\n   * Whether the message is crosspostable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get crosspostable() {\n    const bitfield =\n      PermissionFlagsBits.SendMessages |\n      (this.author.id === this.client.user.id ? PermissionsBitField.DefaultBit : PermissionFlagsBits.ManageMessages);\n    const { channel } = this;\n    return Boolean(\n      channel?.type === ChannelType.GuildAnnouncement &&\n        !this.flags.has(MessageFlags.Crossposted) &&\n        this.type === MessageType.Default &&\n        !this.poll &&\n        channel.viewable &&\n        channel.permissionsFor(this.client.user)?.has(bitfield, false),\n    );\n  }\n\n  /**\n   * Edits the content of the message.\n   * @param {string|MessagePayload|MessageEditOptions} options The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // Update the content of a message\n   * message.edit('This is my new content!')\n   *   .then(msg => console.log(`Updated the content of a message to ${msg.content}`))\n   *   .catch(console.error);\n   */\n  async edit(options) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    return this.channel.messages.edit(this, options);\n  }\n\n  /**\n   * Publishes a message in an announcement channel to all channels following it.\n   * @returns {Promise<Message>}\n   * @example\n   * // Crosspost a message\n   * if (message.channel.type === ChannelType.GuildAnnouncement) {\n   *   message.crosspost()\n   *     .then(() => console.log('Crossposted message'))\n   *     .catch(console.error);\n   * }\n   */\n  async crosspost() {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    return this.channel.messages.crosspost(this.id);\n  }\n\n  /**\n   * Pins this message to the channel's pinned messages.\n   * @param {string} [reason] Reason for pinning\n   * @returns {Promise<Message>}\n   * @example\n   * // Pin a message\n   * message.pin()\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async pin(reason) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    await this.channel.messages.pin(this.id, reason);\n    return this;\n  }\n\n  /**\n   * Unpins this message from the channel's pinned messages.\n   * @param {string} [reason] Reason for unpinning\n   * @returns {Promise<Message>}\n   * @example\n   * // Unpin a message\n   * message.unpin()\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async unpin(reason) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    await this.channel.messages.unpin(this.id, reason);\n    return this;\n  }\n\n  /**\n   * Adds a reaction to the message.\n   * @param {EmojiIdentifierResolvable} emoji The emoji to react with\n   * @returns {Promise<MessageReaction>}\n   * @example\n   * // React to a message with a unicode emoji\n   * message.react('🤔')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // React to a message with a custom emoji\n   * message.react(message.guild.emojis.cache.get('123456789012345678'))\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async react(emoji) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    await this.channel.messages.react(this.id, emoji);\n\n    return this.client.actions.MessageReactionAdd.handle(\n      {\n        [this.client.actions.injectedUser]: this.client.user,\n        [this.client.actions.injectedChannel]: this.channel,\n        [this.client.actions.injectedMessage]: this,\n        emoji: resolvePartialEmoji(emoji),\n      },\n      true,\n    ).reaction;\n  }\n\n  /**\n   * Deletes the message.\n   * @returns {Promise<Message>}\n   * @example\n   * // Delete a message\n   * message.delete()\n   *   .then(msg => console.log(`Deleted message from ${msg.author.username}`))\n   *   .catch(console.error);\n   */\n  async delete() {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    await this.channel.messages.delete(this.id);\n    return this;\n  }\n\n  /**\n   * Options provided when sending a message as an inline reply.\n   * @typedef {BaseMessageCreateOptions} MessageReplyOptions\n   * @property {boolean} [failIfNotExists=this.client.options.failIfNotExists] Whether to error if the referenced\n   * message does not exist (creates a standard message in this case when false)\n   */\n\n  /**\n   * Send an inline reply to this message.\n   * @param {string|MessagePayload|MessageReplyOptions} options The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // Reply to a message\n   * message.reply('This is a reply!')\n   *   .then(() => console.log(`Replied to message \"${message.content}\"`))\n   *   .catch(console.error);\n   */\n  async reply(options) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    let data;\n\n    if (options instanceof MessagePayload) {\n      data = options;\n    } else {\n      data = MessagePayload.create(this, options, {\n        reply: {\n          messageReference: this,\n          failIfNotExists: options?.failIfNotExists ?? this.client.options.failIfNotExists,\n        },\n      });\n    }\n    return this.channel.send(data);\n  }\n\n  /**\n   * Forwards this message\n   *\n   * @param {TextBasedChannelResolvable} channel The channel to forward this message to.\n   * @returns {Promise<Message>}\n   */\n  forward(channel) {\n    const resolvedChannel = this.client.channels.resolve(channel);\n    if (!resolvedChannel) throw new DiscordjsError(ErrorCodes.InvalidType, 'channel', 'TextBasedChannelResolvable');\n    return resolvedChannel.send({\n      forward: {\n        message: this.id,\n        channel: this.channelId,\n        guild: this.guildId,\n      },\n    });\n  }\n\n  /**\n   * Options for starting a thread on a message.\n   * @typedef {Object} StartThreadOptions\n   * @property {string} name The name of the new thread\n   * @property {ThreadAutoArchiveDuration} [autoArchiveDuration=this.channel.defaultAutoArchiveDuration] The amount of\n   * time after which the thread should automatically archive in case of no recent activity\n   * @property {string} [reason] Reason for creating the thread\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the thread in seconds\n   */\n\n  /**\n   * Create a new public thread from this message\n   * @see GuildTextThreadManager#create\n   * @param {StartThreadOptions} [options] Options for starting a thread on this message\n   * @returns {Promise<ThreadChannel>}\n   */\n  async startThread(options = {}) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    if (![ChannelType.GuildText, ChannelType.GuildAnnouncement].includes(this.channel.type)) {\n      throw new DiscordjsError(ErrorCodes.MessageThreadParent);\n    }\n    if (this.hasThread) throw new DiscordjsError(ErrorCodes.MessageExistingThread);\n    return this.channel.threads.create({ ...options, startMessage: this });\n  }\n\n  /**\n   * Fetch this message.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<Message>}\n   */\n  async fetch(force = true) {\n    if (!this.channel) throw new DiscordjsError(ErrorCodes.ChannelNotCached);\n    return this.channel.messages.fetch({ message: this.id, force });\n  }\n\n  /**\n   * Fetches the webhook used to create this message.\n   * @returns {Promise<?Webhook>}\n   */\n  async fetchWebhook() {\n    if (!this.webhookId) throw new DiscordjsError(ErrorCodes.WebhookMessage);\n    if (this.webhookId === this.applicationId) throw new DiscordjsError(ErrorCodes.WebhookApplication);\n    return this.client.fetchWebhook(this.webhookId);\n  }\n\n  /**\n   * Suppresses or unsuppresses embeds on a message.\n   * @param {boolean} [suppress=true] If the embeds should be suppressed or not\n   * @returns {Promise<Message>}\n   */\n  suppressEmbeds(suppress = true) {\n    const flags = new MessageFlagsBitField(this.flags.bitfield);\n\n    if (suppress) {\n      flags.add(MessageFlags.SuppressEmbeds);\n    } else {\n      flags.remove(MessageFlags.SuppressEmbeds);\n    }\n\n    return this.edit({ flags });\n  }\n\n  /**\n   * Removes the attachments from this message.\n   * @returns {Promise<Message>}\n   */\n  removeAttachments() {\n    return this.edit({ attachments: [] });\n  }\n\n  /**\n   * Resolves a component by a custom id.\n   * @param {string} customId The custom id to resolve against\n   * @returns {?MessageActionRowComponent}\n   */\n  resolveComponent(customId) {\n    return this.components.flatMap(row => row.components).find(component => component.customId === customId) ?? null;\n  }\n\n  /**\n   * Used mainly internally. Whether two messages are identical in properties. If you want to compare messages\n   * without checking all the properties, use `message.id === message2.id`, which is much more efficient. This\n   * method allows you to see if there are differences in content, embeds, attachments, nonce and tts properties.\n   * @param {Message} message The message to compare it to\n   * @param {APIMessage} rawData Raw data passed through the WebSocket about this message\n   * @returns {boolean}\n   */\n  equals(message, rawData) {\n    if (!message) return false;\n    const embedUpdate = !message.author && !message.attachments;\n    if (embedUpdate) return this.id === message.id && this.embeds.length === message.embeds.length;\n\n    let equal =\n      this.id === message.id &&\n      this.author.id === message.author.id &&\n      this.content === message.content &&\n      this.nonce === message.nonce &&\n      this.tts === message.tts &&\n      this.attachments.size === message.attachments.size &&\n      this.embeds.length === message.embeds.length &&\n      this.attachments.every(attachment => message.attachments.has(attachment.id)) &&\n      this.embeds.every((embed, index) => embed.equals(message.embeds[index]));\n\n    if (equal && rawData) {\n      equal =\n        this.mentions.everyone === message.mentions.everyone &&\n        this.createdTimestamp === Date.parse(rawData.timestamp) &&\n        this.editedTimestamp === Date.parse(rawData.edited_timestamp);\n    }\n\n    return equal;\n  }\n\n  /**\n   * Whether this message is from a guild.\n   * @returns {boolean}\n   */\n  inGuild() {\n    return Boolean(this.guildId);\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the message's content instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Message: This is a message!\n   * console.log(`Message: ${message}`);\n   */\n  toString() {\n    return this.content;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      channel: 'channelId',\n      author: 'authorId',\n      groupActivityApplication: 'groupActivityApplicationId',\n      guild: 'guildId',\n      cleanContent: true,\n      member: false,\n      reactions: false,\n    });\n  }\n}\n\nexports.Message = Message;\n",
    "'use strict';\n\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { lazy } = require('@discordjs/util');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes, WebhookType } = require('discord-api-types/v10');\nconst MessagePayload = require('./MessagePayload');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst { resolveImage } = require('../util/DataResolver');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a webhook.\n */\nclass Webhook {\n  constructor(client, data) {\n    /**\n     * The client that instantiated the webhook\n     * @name Webhook#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of the webhook\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    /**\n     * The token for the webhook, unavailable for follower webhooks and webhooks owned by another application.\n     * @name Webhook#token\n     * @type {?string}\n     */\n    Object.defineProperty(this, 'token', {\n      value: data.token ?? null,\n      writable: true,\n      configurable: true,\n    });\n\n    if ('avatar' in data) {\n      /**\n       * The avatar for the webhook\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    }\n\n    /**\n     * The webhook's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('type' in data) {\n      /**\n       * The type of the webhook\n       * @type {WebhookType}\n       */\n      this.type = data.type;\n    }\n\n    if ('guild_id' in data) {\n      /**\n       * The guild the webhook belongs to\n       * @type {Snowflake}\n       */\n      this.guildId = data.guild_id;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel the webhook belongs to\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('user' in data) {\n      /**\n       * The owner of the webhook\n       * @type {?(User|APIUser)}\n       */\n      this.owner = this.client.users?._add(data.user) ?? data.user;\n    } else {\n      this.owner ??= null;\n    }\n\n    if ('application_id' in data) {\n      /**\n       * The application that created this webhook\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    } else {\n      this.applicationId ??= null;\n    }\n\n    if ('source_guild' in data) {\n      /**\n       * The source guild of the webhook\n       * @type {?(Guild|APIGuild)}\n       */\n      this.sourceGuild = this.client.guilds?.cache.get(data.source_guild.id) ?? data.source_guild;\n    } else {\n      this.sourceGuild ??= null;\n    }\n\n    if ('source_channel' in data) {\n      /**\n       * The source channel of the webhook\n       * @type {?(NewsChannel|APIChannel)}\n       */\n      this.sourceChannel = this.client.channels?.cache.get(data.source_channel?.id) ?? data.source_channel;\n    } else {\n      this.sourceChannel ??= null;\n    }\n  }\n\n  /**\n   * Options that can be passed into send.\n   * @typedef {BaseMessageOptionsWithPoll} WebhookMessageCreateOptions\n   * @property {boolean} [tts=false] Whether the message should be spoken aloud\n   * @property {MessageFlags} [flags] Which flags to set for the message.\n   * <info>Only the {@link MessageFlags.SuppressEmbeds} flag can be set.</info>\n   * @property {string} [username=this.name] Username override for the message\n   * @property {string} [avatarURL] Avatar URL override for the message\n   * @property {Snowflake} [threadId] The id of the thread in the channel to send to.\n   * <info>For interaction webhooks, this property is ignored</info>\n   * @property {string} [threadName] Name of the thread to create (only available if the webhook is in a forum channel)\n   * @property {Snowflake[]} [appliedTags]\n   * The tags to apply to the created thread (only available if the webhook is in a forum channel)\n   */\n\n  /**\n   * Options that can be passed into editMessage.\n   * @typedef {MessageEditOptions} WebhookMessageEditOptions\n   * @property {Snowflake} [threadId] The id of the thread this message belongs to\n   * <info>For interaction webhooks, this property is ignored</info>\n   */\n\n  /**\n   * The channel the webhook belongs to\n   * @type {?(TextChannel|VoiceChannel|StageChannel|NewsChannel|ForumChannel|MediaChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * Sends a message with this webhook.\n   * @param {string|MessagePayload|WebhookMessageCreateOptions} options The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // Send a basic message\n   * webhook.send('hello!')\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a basic message in a thread\n   * webhook.send({ content: 'hello!', threadId: '836856309672348295' })\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a remote file\n   * webhook.send({\n   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send a local file\n   * webhook.send({\n   *   files: [{\n   *     attachment: 'entire/path/to/file.jpg',\n   *     name: 'file.jpg'\n   *   }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send an embed with a local image inside\n   * webhook.send({\n   *   content: 'This is an embed',\n   *   embeds: [{\n   *     thumbnail: {\n   *          url: 'attachment://file.jpg'\n   *       }\n   *    }],\n   *    files: [{\n   *       attachment: 'entire/path/to/file.jpg',\n   *       name: 'file.jpg'\n   *    }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async send(options) {\n    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);\n\n    let messagePayload;\n\n    if (options instanceof MessagePayload) {\n      messagePayload = options.resolveBody();\n    } else {\n      messagePayload = MessagePayload.create(this, options).resolveBody();\n    }\n\n    const query = makeURLSearchParams({\n      wait: true,\n      thread_id: messagePayload.options.threadId,\n    });\n\n    const { body, files } = await messagePayload.resolveFiles();\n    const d = await this.client.rest.post(Routes.webhook(this.id, this.token), {\n      body,\n      files,\n      query,\n      auth: false,\n    });\n\n    if (!this.client.channels) return d;\n    return this.client.channels.cache.get(d.channel_id)?.messages._add(d, false) ?? new (getMessage())(this.client, d);\n  }\n\n  /**\n   * Sends a raw slack message with this webhook.\n   * @param {Object} body The raw body to send\n   * @returns {Promise<boolean>}\n   * @example\n   * // Send a slack message\n   * webhook.sendSlackMessage({\n   *   'username': 'Wumpus',\n   *   'attachments': [{\n   *     'pretext': 'this looks pretty cool',\n   *     'color': '#F0F',\n   *     'footer_icon': 'http://snek.s3.amazonaws.com/topSnek.png',\n   *     'footer': 'Powered by sneks',\n   *     'ts': Date.now() / 1_000\n   *   }]\n   * }).catch(console.error);\n   * @see {@link https://api.slack.com/messaging/webhooks}\n   */\n  async sendSlackMessage(body) {\n    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);\n\n    const data = await this.client.rest.post(Routes.webhookPlatform(this.id, this.token, 'slack'), {\n      query: makeURLSearchParams({ wait: true }),\n      auth: false,\n      body,\n    });\n    return data.toString() === 'ok';\n  }\n\n  /**\n   * Options used to edit a {@link Webhook}.\n   * @typedef {Object} WebhookEditOptions\n   * @property {string} [name=this.name] The new name for the webhook\n   * @property {?(BufferResolvable)} [avatar] The new avatar for the webhook\n   * @property {GuildTextChannelResolvable|VoiceChannel|StageChannel|ForumChannel|MediaChannel} [channel]\n   * The new channel for the webhook\n   * @property {string} [reason] Reason for editing the webhook\n   */\n\n  /**\n   * Edits this webhook.\n   * @param {WebhookEditOptions} options Options for editing the webhook\n   * @returns {Promise<Webhook>}\n   */\n  async edit({ name = this.name, avatar, channel, reason }) {\n    if (avatar && !(typeof avatar === 'string' && avatar.startsWith('data:'))) {\n      avatar = await resolveImage(avatar);\n    }\n    channel &&= channel.id ?? channel;\n    const data = await this.client.rest.patch(Routes.webhook(this.id, channel ? undefined : this.token), {\n      body: { name, avatar, channel_id: channel },\n      reason,\n      auth: !this.token || Boolean(channel),\n    });\n\n    this.name = data.name;\n    this.avatar = data.avatar;\n    this.channelId = data.channel_id;\n    return this;\n  }\n\n  /**\n   * Options that can be passed into fetchMessage.\n   * @typedef {options} WebhookFetchMessageOptions\n   * @property {boolean} [cache=true] Whether to cache the message.\n   * @property {Snowflake} [threadId] The id of the thread this message belongs to.\n   * <info>For interaction webhooks, this property is ignored</info>\n   */\n\n  /**\n   * Gets a message that was sent by this webhook.\n   * @param {Snowflake|'@original'} message The id of the message to fetch\n   * @param {WebhookFetchMessageOptions} [options={}] The options to provide to fetch the message.\n   * @returns {Promise<Message>} Returns the message sent by this webhook\n   */\n  async fetchMessage(message, { threadId } = {}) {\n    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);\n\n    const data = await this.client.rest.get(Routes.webhookMessage(this.id, this.token, message), {\n      query: threadId ? makeURLSearchParams({ thread_id: threadId }) : undefined,\n      auth: false,\n    });\n\n    if (!this.client.channels) return data;\n    return (\n      this.client.channels.cache.get(data.channel_id)?.messages._add(data, false) ??\n      new (getMessage())(this.client, data)\n    );\n  }\n\n  /**\n   * Edits a message that was sent by this webhook.\n   * @param {MessageResolvable|'@original'} message The message to edit\n   * @param {string|MessagePayload|WebhookMessageEditOptions} options The options to provide\n   * @returns {Promise<Message>} Returns the message edited by this webhook\n   */\n  async editMessage(message, options) {\n    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);\n\n    let messagePayload;\n\n    if (options instanceof MessagePayload) messagePayload = options;\n    else messagePayload = MessagePayload.create(this, options);\n\n    const { body, files } = await messagePayload.resolveBody().resolveFiles();\n\n    const d = await this.client.rest.patch(\n      Routes.webhookMessage(this.id, this.token, typeof message === 'string' ? message : message.id),\n      {\n        body,\n        files,\n        query: messagePayload.options.threadId\n          ? makeURLSearchParams({ thread_id: messagePayload.options.threadId })\n          : undefined,\n        auth: false,\n      },\n    );\n\n    const channelManager = this.client.channels;\n    if (!channelManager) return d;\n\n    const messageManager = channelManager.cache.get(d.channel_id)?.messages;\n    if (!messageManager) return new (getMessage())(this.client, d);\n\n    const existing = messageManager.cache.get(d.id);\n    if (!existing) return messageManager._add(d);\n\n    const clone = existing._clone();\n    clone._patch(d);\n    return clone;\n  }\n\n  /**\n   * Deletes the webhook.\n   * @param {string} [reason] Reason for deleting this webhook\n   * @returns {Promise<void>}\n   */\n  delete(reason) {\n    return this.client.deleteWebhook(this.id, { token: this.token, reason });\n  }\n\n  /**\n   * Delete a message that was sent by this webhook.\n   * @param {MessageResolvable|'@original'} message The message to delete\n   * @param {Snowflake} [threadId] The id of the thread this message belongs to\n   * @returns {Promise<void>}\n   */\n  async deleteMessage(message, threadId) {\n    if (!this.token) throw new DiscordjsError(ErrorCodes.WebhookTokenUnavailable);\n\n    await this.client.rest.delete(\n      Routes.webhookMessage(this.id, this.token, typeof message === 'string' ? message : message.id),\n      {\n        query: threadId ? makeURLSearchParams({ thread_id: threadId }) : undefined,\n        auth: false,\n      },\n    );\n  }\n\n  /**\n   * The timestamp the webhook was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the webhook was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL of this webhook\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return this.client.options.rest.api + Routes.webhook(this.id, this.token);\n  }\n\n  /**\n   * A link to the webhook's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL(options = {}) {\n    return this.avatar && this.client.rest.cdn.avatar(this.id, this.avatar, options);\n  }\n\n  /**\n   * Whether this webhook is created by a user.\n   * @returns {boolean}\n   */\n  isUserCreated() {\n    return Boolean(this.type === WebhookType.Incoming && this.owner && !this.owner.bot);\n  }\n\n  /**\n   * Whether this webhook is created by an application.\n   * @returns {boolean}\n   */\n  isApplicationCreated() {\n    return this.type === WebhookType.Application;\n  }\n\n  /**\n   * Whether or not this webhook is a channel follower webhook.\n   * @returns {boolean}\n   */\n  isChannelFollower() {\n    return this.type === WebhookType.ChannelFollower;\n  }\n\n  /**\n   * Whether or not this webhook is an incoming webhook.\n   * @returns {boolean}\n   */\n  isIncoming() {\n    return this.type === WebhookType.Incoming;\n  }\n\n  static applyToClass(structure, ignore = []) {\n    for (const prop of [\n      'send',\n      'sendSlackMessage',\n      'fetchMessage',\n      'edit',\n      'editMessage',\n      'delete',\n      'deleteMessage',\n      'createdTimestamp',\n      'createdAt',\n      'url',\n    ]) {\n      if (ignore.includes(prop)) continue;\n      Object.defineProperty(structure.prototype, prop, Object.getOwnPropertyDescriptor(Webhook.prototype, prop));\n    }\n  }\n}\n\nmodule.exports = Webhook;\n",
    "'use strict';\n\nconst BaseClient = require('./BaseClient');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst Webhook = require('../structures/Webhook');\nconst { parseWebhookURL } = require('../util/Util');\n\n/**\n * The webhook client.\n * @implements {Webhook}\n * @extends {BaseClient}\n */\nclass WebhookClient extends BaseClient {\n  /**\n   * Represents the credentials used for a webhook in the form of its id and token.\n   * @typedef {Object} WebhookClientDataIdWithToken\n   * @property {Snowflake} id The webhook's id\n   * @property {string} token The webhook's token\n   */\n\n  /**\n   * Represents the credentials used for a webhook in the form of a URL.\n   * @typedef {Object} WebhookClientDataURL\n   * @property {string} url The full URL for the webhook\n   */\n\n  /**\n   * Represents the credentials used for a webhook.\n   * @typedef {WebhookClientDataIdWithToken|WebhookClientDataURL} WebhookClientData\n   */\n\n  /**\n   * Options for a webhook client.\n   * @typedef {Object} WebhookClientOptions\n   * @property {MessageMentionOptions} [allowedMentions] Default value for {@link BaseMessageOptions#allowedMentions}\n   * @property {RESTOptions} [rest] Options for the REST manager\n   */\n\n  /**\n   * @param {WebhookClientData} data The data of the webhook\n   * @param {WebhookClientOptions} [options] Options for the webhook client\n   */\n  constructor(data, options) {\n    super(options);\n    Object.defineProperty(this, 'client', { value: this });\n    let { id, token } = data;\n\n    if ('url' in data) {\n      const parsed = parseWebhookURL(data.url);\n      if (!parsed) {\n        throw new DiscordjsError(ErrorCodes.WebhookURLInvalid);\n      }\n\n      ({ id, token } = parsed);\n    }\n\n    this.id = id;\n    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });\n  }\n\n  /**\n   * The options the webhook client was instantiated with.\n   * @type {WebhookClientOptions}\n   * @name WebhookClient#options\n   */\n\n  // These are here only for documentation purposes - they are implemented by Webhook\n  /* eslint-disable no-empty-function, valid-jsdoc */\n  /**\n   * Sends a message with this webhook.\n   * @param {string|MessagePayload|WebhookMessageCreateOptions} options The content for the reply\n   * @returns {Promise<APIMessage>}\n   */\n  send() {}\n\n  /**\n   * Gets a message that was sent by this webhook.\n   * @param {Snowflake} message The id of the message to fetch\n   * @param {WebhookFetchMessageOptions} [options={}] The options to provide to fetch the message.\n   * @returns {Promise<APIMessage>} Returns the message sent by this webhook\n   */\n  fetchMessage() {}\n\n  /**\n   * Edits a message that was sent by this webhook.\n   * @param {MessageResolvable} message The message to edit\n   * @param {string|MessagePayload|WebhookMessageEditOptions} options The options to provide\n   * @returns {Promise<APIMessage>} Returns the message edited by this webhook\n   */\n  editMessage() {}\n\n  sendSlackMessage() {}\n  edit() {}\n  delete() {}\n  deleteMessage() {}\n  get createdTimestamp() {}\n  get createdAt() {}\n  get url() {}\n}\n\nWebhook.applyToClass(WebhookClient);\n\nmodule.exports = WebhookClient;\n",
    "'use strict';\n\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Represents the voice state for a Guild Member.\n * @extends {Base}\n */\nclass VoiceState extends Base {\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('deaf' in data) {\n      /**\n       * Whether this member is deafened server-wide\n       * @type {?boolean}\n       */\n      this.serverDeaf = data.deaf;\n    } else {\n      this.serverDeaf ??= null;\n    }\n\n    if ('mute' in data) {\n      /**\n       * Whether this member is muted server-wide\n       * @type {?boolean}\n       */\n      this.serverMute = data.mute;\n    } else {\n      this.serverMute ??= null;\n    }\n\n    if ('self_deaf' in data) {\n      /**\n       * Whether this member is self-deafened\n       * @type {?boolean}\n       */\n      this.selfDeaf = data.self_deaf;\n    } else {\n      this.selfDeaf ??= null;\n    }\n\n    if ('self_mute' in data) {\n      /**\n       * Whether this member is self-muted\n       * @type {?boolean}\n       */\n      this.selfMute = data.self_mute;\n    } else {\n      this.selfMute ??= null;\n    }\n\n    if ('self_video' in data) {\n      /**\n       * Whether this member's camera is enabled\n       * @type {?boolean}\n       */\n      this.selfVideo = data.self_video;\n    } else {\n      this.selfVideo ??= null;\n    }\n\n    if ('session_id' in data) {\n      /**\n       * The session id for this member's connection\n       * @type {?string}\n       */\n      this.sessionId = data.session_id;\n    } else {\n      this.sessionId ??= null;\n    }\n\n    // The self_stream is property is omitted if false, check for another property\n    // here to avoid incorrectly clearing this when partial data is specified\n    if ('self_video' in data) {\n      /**\n       * Whether this member is streaming using \"Screen Share\"\n       * @type {?boolean}\n       */\n      this.streaming = data.self_stream ?? false;\n    } else {\n      this.streaming ??= null;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n       * @type {?Snowflake}\n       */\n      this.channelId = data.channel_id;\n    } else {\n      this.channelId ??= null;\n    }\n\n    if ('suppress' in data) {\n      /**\n       * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n       * @type {?boolean}\n       */\n      this.suppress = data.suppress;\n    } else {\n      this.suppress ??= null;\n    }\n\n    if ('request_to_speak_timestamp' in data) {\n      /**\n       * The time at which the member requested to speak. This property is specific to stage channels only.\n       * @type {?number}\n       */\n      this.requestToSpeakTimestamp = data.request_to_speak_timestamp && Date.parse(data.request_to_speak_timestamp);\n    } else {\n      this.requestToSpeakTimestamp ??= null;\n    }\n\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} [mute=true] Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute = true, reason) {\n    return this.guild.members.edit(this.id, { mute, reason });\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} [deaf=true] Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf = true, reason) {\n    return this.guild.members.edit(this.id, { deaf, reason });\n  }\n\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {?GuildVoiceChannelResolvable} channel Channel to move the member to, or `null` if you want to\n   * disconnect them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.guild.members.edit(this.id, { channel, reason });\n  }\n\n  /**\n   * Data to edit the logged in user's own voice state with, when in a stage channel\n   * @typedef {Object} VoiceStateEditOptions\n   * @property {boolean} [requestToSpeak] Whether or not the client is requesting to become a speaker.\n   * <info>Only available to the logged in user's own voice state.</info>\n   * @property {boolean} [suppressed] Whether or not the user should be suppressed.\n   */\n\n  /**\n   * Edits this voice state. Currently only available when in a stage channel\n   * @param {VoiceStateEditOptions} options The options to provide\n   * @returns {Promise<VoiceState>}\n   */\n  async edit(options) {\n    if (this.channel?.type !== ChannelType.GuildStageVoice) throw new DiscordjsError(ErrorCodes.VoiceNotStageChannel);\n\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n\n    if (target !== '@me' && options.requestToSpeak !== undefined) {\n      throw new DiscordjsError(ErrorCodes.VoiceStateNotOwn);\n    }\n\n    if (!['boolean', 'undefined'].includes(typeof options.requestToSpeak)) {\n      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'requestToSpeak');\n    }\n\n    if (!['boolean', 'undefined'].includes(typeof options.suppressed)) {\n      throw new DiscordjsTypeError(ErrorCodes.VoiceStateInvalidType, 'suppressed');\n    }\n\n    await this.client.rest.patch(Routes.guildVoiceState(this.guild.id, target), {\n      body: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: options.requestToSpeak\n          ? new Date().toISOString()\n          : options.requestToSpeak === false\n            ? null\n            : undefined,\n        suppress: options.suppressed,\n      },\n    });\n    return this;\n  }\n\n  /**\n   * Fetches this voice state.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<VoiceState>}\n   */\n  fetch(force = true) {\n    return this.guild.voiceStates.fetch(this.id, { force });\n  }\n\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} [requestToSpeak=true] Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.members.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.members.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<VoiceState>}\n   */\n  setRequestToSpeak(requestToSpeak = true) {\n    return this.edit({ requestToSpeak });\n  }\n\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} [suppressed=true] Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.members.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.members.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<VoiceState>}\n   */\n  setSuppressed(suppressed = true) {\n    return this.edit({ suppressed });\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel',\n    });\n  }\n}\n\nmodule.exports = VoiceState;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst DataManager = require('./DataManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { Role } = require('../structures/Role');\n\n/**\n * Manages API methods for roles of a GuildMember and stores their cache.\n * @extends {DataManager}\n */\nclass GuildMemberRoleManager extends DataManager {\n  constructor(member) {\n    super(member.client, Role);\n\n    /**\n     * The GuildMember this manager belongs to\n     * @type {GuildMember}\n     */\n    this.member = member;\n\n    /**\n     * The Guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = member.guild;\n  }\n\n  /**\n   * The roles of this member\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    const everyone = this.guild.roles.everyone;\n    return this.guild.roles.cache.filter(role => this.member._roles.includes(role.id)).set(everyone.id, everyone);\n  }\n\n  /**\n   * The role of the member used to hoist them in a separate category in the users list\n   * @type {?Role}\n   * @readonly\n   */\n  get hoist() {\n    const hoistedRoles = this.cache.filter(role => role.hoist);\n    if (!hoistedRoles.size) return null;\n    return hoistedRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member used to set their role icon\n   * @type {?Role}\n   * @readonly\n   */\n  get icon() {\n    const iconRoles = this.cache.filter(role => role.icon || role.unicodeEmoji);\n    if (!iconRoles.size) return null;\n    return iconRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member used to set their color\n   * @type {?Role}\n   * @readonly\n   */\n  get color() {\n    const coloredRoles = this.cache.filter(role => role.color);\n    if (!coloredRoles.size) return null;\n    return coloredRoles.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev));\n  }\n\n  /**\n   * The role of the member with the highest position\n   * @type {Role}\n   * @readonly\n   */\n  get highest() {\n    return this.cache.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this.cache.first());\n  }\n\n  /**\n   * The premium subscriber role of the guild, if present on the member\n   * @type {?Role}\n   * @readonly\n   */\n  get premiumSubscriberRole() {\n    return this.cache.find(role => role.tags?.premiumSubscriberRole) ?? null;\n  }\n\n  /**\n   * The managed role this member created when joining the guild, if any\n   * <info>Only ever available on bots</info>\n   * @type {?Role}\n   * @readonly\n   */\n  get botRole() {\n    if (!this.member.user.bot) return null;\n    return this.cache.find(role => role.tags?.botId === this.member.user.id) ?? null;\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the member.\n   *\n   * <info>Uses the idempotent PUT route for singular roles, otherwise PATCHes the underlying guild member</info>\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @param {string} [reason] Reason for adding the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async add(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      const resolvedRoles = [];\n      for (const role of roleOrRoles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n\n      const newRoles = [...new Set(resolvedRoles.concat(...this.cache.keys()))];\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'roles',\n          'Role, Snowflake or Array or Collection of Roles or Snowflakes',\n        );\n      }\n\n      await this.client.rest.put(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), { reason });\n\n      const clone = this.member._clone();\n      clone._roles = [...this.cache.keys(), roleOrRoles];\n      return clone;\n    }\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the member.\n   *\n   * <info>Uses the idempotent DELETE route for singular roles, otherwise PATCHes the underlying guild member</info>\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @param {string} [reason] Reason for removing the role(s)\n   * @returns {Promise<GuildMember>}\n   */\n  async remove(roleOrRoles, reason) {\n    if (roleOrRoles instanceof Collection || Array.isArray(roleOrRoles)) {\n      const resolvedRoles = [];\n      for (const role of roleOrRoles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n\n      const newRoles = this.cache.filter(role => !resolvedRoles.includes(role.id));\n      return this.set(newRoles, reason);\n    } else {\n      roleOrRoles = this.guild.roles.resolveId(roleOrRoles);\n      if (roleOrRoles === null) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'roles',\n          'Role, Snowflake or Array or Collection of Roles or Snowflakes',\n        );\n      }\n\n      await this.client.rest.delete(Routes.guildMemberRole(this.guild.id, this.member.id, roleOrRoles), { reason });\n\n      const clone = this.member._clone();\n      const newRoles = this.cache.filter(role => role.id !== roleOrRoles);\n      clone._roles = [...newRoles.keys()];\n      return clone;\n    }\n  }\n\n  /**\n   * Sets the roles applied to the member.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @param {string} [reason] Reason for applying the roles\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set the member's roles to a single role\n   * guildMember.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all the roles from a member\n   * guildMember.roles.set([])\n   *   .then(member => console.log(`Member roles is now of ${member.roles.cache.size} size`))\n   *   .catch(console.error);\n   */\n  set(roles, reason) {\n    return this.member.edit({ roles, reason });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.member);\n    clone.member._roles = [...this.cache.keys()];\n    return clone;\n  }\n}\n\nmodule.exports = GuildMemberRoleManager;\n",
    "'use strict';\n\nconst { GuildMemberFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link GuildMember#flags} bitfield.\n * @extends {BitField}\n */\nclass GuildMemberFlagsBitField extends BitField {\n  /**\n   * Numeric guild guild member flags.\n   * @type {GuildMemberFlags}\n   * @memberof GuildMemberFlagsBitField\n   */\n  static Flags = GuildMemberFlags;\n}\n\n/**\n * @name GuildMemberFlagsBitField\n * @kind constructor\n * @memberof GuildMemberFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name GuildMemberFlagsBitField#bitfield\n */\n\n/**\n * Data that can be resolved to give a guild member flag bitfield. This can be:\n * * A string (see {@link GuildMemberFlagsBitField.Flags})\n * * A guild member flag\n * * An instance of GuildMemberFlagsBitField\n * * An Array of GuildMemberFlagsResolvable\n * @typedef {string|number|GuildMemberFlagsBitField|GuildMemberFlagsResolvable[]} GuildMemberFlagsResolvable\n */\n\nexports.GuildMemberFlagsBitField = GuildMemberFlagsBitField;\n",
    "'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst VoiceState = require('./VoiceState');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\nconst { GuildMemberFlagsBitField } = require('../util/GuildMemberFlagsBitField');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass GuildMember extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The last timestamp this member started boosting the guild\n     * @type {?number}\n     */\n    this.premiumSinceTimestamp = null;\n\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n    this.nickname = null;\n\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {?boolean}\n     */\n    this.pending = null;\n\n    /**\n     * The timestamp this member's timeout will be removed\n     * @type {?number}\n     */\n    this.communicationDisabledUntilTimestamp = null;\n\n    /**\n     * The role ids of the member\n     * @name GuildMember#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', { value: [], writable: true });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('nick' in data) this.nickname = data.nick;\n    if ('avatar' in data) {\n      /**\n       * The guild member's avatar hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n\n    if ('banner' in data) {\n      /**\n       * The guild member's banner hash.\n       * @type {?string}\n       */\n      this.banner = data.banner;\n    } else {\n      this.banner ??= null;\n    }\n\n    if ('joined_at' in data) this.joinedTimestamp = Date.parse(data.joined_at);\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? Date.parse(data.premium_since) : null;\n    }\n    if ('roles' in data) this._roles = data.roles;\n\n    if ('pending' in data) {\n      this.pending = data.pending;\n    } else if (!this.partial) {\n      // See https://github.com/discordjs/discord.js/issues/6546 for more info.\n      this.pending ??= false;\n    }\n\n    if ('communication_disabled_until' in data) {\n      this.communicationDisabledUntilTimestamp =\n        data.communication_disabled_until && Date.parse(data.communication_disabled_until);\n    }\n\n    if ('flags' in data) {\n      /**\n       * The flags of this member\n       * @type {Readonly<GuildMemberFlagsBitField>}\n       */\n      this.flags = new GuildMemberFlagsBitField(data.flags).freeze();\n    } else {\n      this.flags ??= new GuildMemberFlagsBitField().freeze();\n    }\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.joinedTimestamp === null;\n  }\n\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, { user_id: this.id });\n  }\n\n  /**\n   * A link to the member's guild avatar.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  avatarURL(options = {}) {\n    return this.avatar && this.client.rest.cdn.guildMemberAvatar(this.guild.id, this.id, this.avatar, options);\n  }\n\n  /**\n   * A link to the member's banner.\n   * @param {ImageURLOptions} [options={}] Options for the banner URL\n   * @returns {?string}\n   */\n  bannerURL(options = {}) {\n    return this.banner && this.client.rest.cdn.guildMemberBanner(this.guild.id, this.id, this.banner, options);\n  }\n\n  /**\n   * A link to the member's guild avatar if they have one.\n   * Otherwise, a link to their {@link User#displayAvatarURL} will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.user.displayAvatarURL(options);\n  }\n\n  /**\n   * A link to the member's guild banner if they have one.\n   * Otherwise, a link to their {@link User#bannerURL} will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  displayBannerURL(options) {\n    return this.bannerURL(options) ?? this.user.bannerURL(options);\n  }\n\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The time this member's timeout will be removed\n   * @type {?Date}\n   * @readonly\n   */\n  get communicationDisabledUntil() {\n    return this.communicationDisabledUntilTimestamp && new Date(this.communicationDisabledUntilTimestamp);\n  }\n\n  /**\n   * The last time this member started boosting the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get premiumSince() {\n    return this.premiumSinceTimestamp && new Date(this.premiumSinceTimestamp);\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.guild.presences.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The displayed role color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n\n  /**\n   * The displayed role color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The DM between the client's user and this member\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.users.dmChannel(this.id);\n  }\n\n  /**\n   * The nickname of this member, or their user display name if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname ?? this.user.displayName;\n  }\n\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<PermissionsBitField>}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new PermissionsBitField(PermissionsBitField.All).freeze();\n    return new PermissionsBitField(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.guild.members.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.KickMembers);\n  }\n\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    if (!this.guild.members.me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    return this.manageable && this.guild.members.me.permissions.has(PermissionFlagsBits.BanMembers);\n  }\n\n  /**\n   * Whether this member is moderatable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get moderatable() {\n    return (\n      !this.permissions.has(PermissionFlagsBits.Administrator) &&\n      this.manageable &&\n      (this.guild.members.me?.permissions.has(PermissionFlagsBits.ModerateMembers) ?? false)\n    );\n  }\n\n  /**\n   * Whether this member is currently timed out\n   * @returns {boolean}\n   */\n  isCommunicationDisabled() {\n    return this.communicationDisabledUntilTimestamp > Date.now();\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<PermissionsBitField>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditOptions} options The options to provide\n   * @returns {Promise<GuildMember>}\n   */\n  edit(options) {\n    return this.guild.members.edit(this, options);\n  }\n\n  /**\n   * Sets the flags for this member.\n   * @param {GuildMemberFlagsResolvable} flags The flags to set\n   * @param {string} [reason] Reason for setting the flags\n   * @returns {Promise<GuildMember>}\n   */\n  setFlags(flags, reason) {\n    return this.edit({ flags, reason });\n  }\n\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Set a nickname for a guild member\n   * guildMember.setNickname('cool nickname', 'Needed a new nickname')\n   *   .then(member => console.log(`Set nickname of ${member.user.username}`))\n   *   .catch(console.error);\n   * @example\n   * // Remove a nickname for a guild member\n   * guildMember.setNickname(null, 'No nicknames allowed!')\n   *   .then(member => console.log(`Removed nickname for ${member.user.username}`))\n   *   .catch(console.error);\n   */\n  setNickname(nick, reason) {\n    return this.edit({ nick, reason });\n  }\n\n  /**\n   * Creates a DM channel between the client and this member.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  createDM(force = false) {\n    return this.user.createDM(force);\n  }\n\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Ban a guild member, deleting a week's worth of messages\n   * guildMember.ban({ deleteMessageSeconds: 60 * 60 * 24 * 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.bans.create(this, options);\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {?DateResolvable} communicationDisabledUntil The date or timestamp\n   * for the member's communication to be disabled until. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.disableCommunicationUntil(Date.now() + (5 * 60 * 1000), 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove the timeout of a guild member\n   * guildMember.disableCommunicationUntil(null)\n   *   .then(member => console.log(`Removed timeout for ${member.displayName}`))\n   *   .catch(console.error);\n   */\n  disableCommunicationUntil(communicationDisabledUntil, reason) {\n    return this.edit({ communicationDisabledUntil, reason });\n  }\n\n  /**\n   * Times this guild member out.\n   * @param {?number} timeout The duration in milliseconds\n   * for the member's communication to be disabled. Provide `null` to remove the timeout.\n   * @param {string} [reason] The reason for this timeout.\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // Time a guild member out for 5 minutes\n   * guildMember.timeout(5 * 60 * 1000, 'They deserved it')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  timeout(timeout, reason) {\n    return this.disableCommunicationUntil(timeout && Date.now() + timeout, reason);\n  }\n\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n  fetch(force = true) {\n    return this.guild.members.fetch({ user: this.id, cache: true, force });\n  }\n\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n  equals(member) {\n    return (\n      member instanceof this.constructor &&\n      this.id === member.id &&\n      this.partial === member.partial &&\n      this.guild.id === member.guild.id &&\n      this.joinedTimestamp === member.joinedTimestamp &&\n      this.nickname === member.nickname &&\n      this.avatar === member.avatar &&\n      this.banner === member.banner &&\n      this.pending === member.pending &&\n      this.communicationDisabledUntilTimestamp === member.communicationDisabledUntilTimestamp &&\n      this.flags.bitfield === member.flags.bitfield &&\n      (this._roles === member._roles ||\n        (this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i])))\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return this.user.toString();\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true,\n    });\n    json.avatarURL = this.avatarURL();\n    json.bannerURL = this.bannerURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    json.displayBannerURL = this.displayBannerURL();\n    return json;\n  }\n}\n\n/**\n * Sends a message to this user.\n * @method send\n * @memberof GuildMember\n * @instance\n * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n * @returns {Promise<Message>}\n * @example\n * // Send a direct message\n * guildMember.send('Hello!')\n *   .then(message => console.log(`Sent message: ${message.content} to ${guildMember.displayName}`))\n *   .catch(console.error);\n */\n\nTextBasedChannel.applyToClass(GuildMember);\n\nexports.GuildMember = GuildMember;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { Message } = require('../structures/Message');\nconst MessagePayload = require('../structures/MessagePayload');\nconst { MakeCacheOverrideSymbol } = require('../util/Symbols');\nconst { resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Manages API methods for Messages and holds their cache.\n * @extends {CachedManager}\n * @abstract\n */\nclass MessageManager extends CachedManager {\n  static [MakeCacheOverrideSymbol] = MessageManager;\n\n  constructor(channel, iterable) {\n    super(channel.client, Message, iterable);\n\n    /**\n     * The channel that the messages belong to\n     * @type {TextBasedChannels}\n     */\n    this.channel = channel;\n  }\n\n  /**\n   * The cache of Messages\n   * @type {Collection<Snowflake, Message>}\n   * @name MessageManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache);\n  }\n\n  /**\n   * Data that can be resolved to a Message object. This can be:\n   * * A Message\n   * * A Snowflake\n   * @typedef {Message|Snowflake} MessageResolvable\n   */\n\n  /**\n   * Options used to fetch a message.\n   * @typedef {BaseFetchOptions} FetchMessageOptions\n   * @property {MessageResolvable} message The message to fetch\n   */\n\n  /**\n   * Options used to fetch multiple messages.\n   * <info>The `before`, `after`, and `around` parameters are mutually exclusive.</info>\n   * @typedef {Object} FetchMessagesOptions\n   * @property {number} [limit] The maximum number of messages to return\n   * @property {Snowflake} [before] Consider only messages before this id\n   * @property {Snowflake} [after] Consider only messages after this id\n   * @property {Snowflake} [around] Consider only messages around this id\n   * @property {boolean} [cache] Whether to cache the fetched messages\n   */\n\n  /**\n   * Fetches message(s) from a channel.\n   * <info>The returned Collection does not contain reaction users of the messages if they were not cached.\n   * Those need to be fetched separately in such a case.</info>\n   * @param {MessageResolvable|FetchMessageOptions|FetchMessagesOptions} [options] Options for fetching message(s)\n   * @returns {Promise<Message|Collection<Snowflake, Message>>}\n   * @example\n   * // Fetch a message\n   * channel.messages.fetch('99539446449315840')\n   *   .then(message => console.log(message.content))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a maximum of 10 messages without caching\n   * channel.messages.fetch({ limit: 10, cache: false })\n   *   .then(messages => console.log(`Received ${messages.size} messages`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a maximum of 10 messages without caching around a message id\n   * channel.messages.fetch({ limit: 10, cache: false, around: '99539446449315840' })\n   *   .then(messages => console.log(`Received ${messages.size} messages`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch messages and filter by a user id\n   * channel.messages.fetch()\n   *   .then(messages => console.log(`${messages.filter(message =>\n   *          message.author.id === '84484653687267328').size} messages`))\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const { message, cache, force } = options;\n    const resolvedMessage = this.resolveId(message ?? options);\n    if (resolvedMessage) return this._fetchSingle({ message: resolvedMessage, cache, force });\n    return this._fetchMany(options);\n  }\n\n  async _fetchSingle({ message, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(message);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.channelMessage(this.channel.id, message));\n    return this._add(data, cache);\n  }\n\n  async _fetchMany(options = {}) {\n    const data = await this.client.rest.get(Routes.channelMessages(this.channel.id), {\n      query: makeURLSearchParams(options),\n    });\n\n    return data.reduce((_data, message) => _data.set(message.id, this._add(message, options.cache)), new Collection());\n  }\n\n  /**\n   * Fetches the pinned messages of this channel and returns a collection of them.\n   * <info>The returned Collection does not contain any reaction data of the messages.\n   * Those need to be fetched separately.</info>\n   * @param {boolean} [cache=true] Whether to cache the message(s)\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Get pinned messages\n   * channel.messages.fetchPinned()\n   *   .then(messages => console.log(`Received ${messages.size} messages`))\n   *   .catch(console.error);\n   */\n  async fetchPinned(cache = true) {\n    const data = await this.client.rest.get(Routes.channelPins(this.channel.id));\n    const messages = new Collection();\n    for (const message of data) messages.set(message.id, this._add(message, cache));\n    return messages;\n  }\n\n  /**\n   * Resolves a {@link MessageResolvable} to a {@link Message} object.\n   * @method resolve\n   * @memberof MessageManager\n   * @instance\n   * @param {MessageResolvable} message The message resolvable to resolve\n   * @returns {?Message}\n   */\n\n  /**\n   * Resolves a {@link MessageResolvable} to a {@link Message} id.\n   * @method resolveId\n   * @memberof MessageManager\n   * @instance\n   * @param {MessageResolvable} message The message resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Data used to reference an attachment.\n   * @typedef {Object} MessageEditAttachmentData\n   * @property {Snowflake} id The id of the attachment\n   */\n\n  /**\n   * Options that can be passed to edit a message.\n   * @typedef {BaseMessageOptions} MessageEditOptions\n   * @property {Array<Attachment|MessageEditAttachmentData>} [attachments] An array of attachments to keep.\n   * All attachments will be kept if omitted\n   * @property {MessageFlags} [flags] Which flags to set for the message\n   * <info>Only the {@link MessageFlags.SuppressEmbeds} flag can be modified.</info>\n   */\n\n  /**\n   * Edits a message, even if it's not cached.\n   * @param {MessageResolvable} message The message to edit\n   * @param {string|MessageEditOptions|MessagePayload} options The options to edit the message\n   * @returns {Promise<Message>}\n   */\n  async edit(message, options) {\n    const messageId = this.resolveId(message);\n    if (!messageId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');\n\n    const { body, files } = await (\n      options instanceof MessagePayload\n        ? options\n        : MessagePayload.create(message instanceof Message ? message : this, options)\n    )\n      .resolveBody()\n      .resolveFiles();\n    const d = await this.client.rest.patch(Routes.channelMessage(this.channel.id, messageId), { body, files });\n\n    const existing = this.cache.get(messageId);\n    if (existing) {\n      const clone = existing._clone();\n      clone._patch(d);\n      return clone;\n    }\n    return this._add(d);\n  }\n\n  /**\n   * Publishes a message in an announcement channel to all channels following it, even if it's not cached.\n   * @param {MessageResolvable} message The message to publish\n   * @returns {Promise<Message>}\n   */\n  async crosspost(message) {\n    message = this.resolveId(message);\n    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');\n\n    const data = await this.client.rest.post(Routes.channelMessageCrosspost(this.channel.id, message));\n    return this.cache.get(data.id) ?? this._add(data);\n  }\n\n  /**\n   * Pins a message to the channel's pinned messages, even if it's not cached.\n   * @param {MessageResolvable} message The message to pin\n   * @param {string} [reason] Reason for pinning\n   * @returns {Promise<void>}\n   */\n  async pin(message, reason) {\n    message = this.resolveId(message);\n    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');\n\n    await this.client.rest.put(Routes.channelPin(this.channel.id, message), { reason });\n  }\n\n  /**\n   * Unpins a message from the channel's pinned messages, even if it's not cached.\n   * @param {MessageResolvable} message The message to unpin\n   * @param {string} [reason] Reason for unpinning\n   * @returns {Promise<void>}\n   */\n  async unpin(message, reason) {\n    message = this.resolveId(message);\n    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');\n\n    await this.client.rest.delete(Routes.channelPin(this.channel.id, message), { reason });\n  }\n\n  /**\n   * Adds a reaction to a message, even if it's not cached.\n   * @param {MessageResolvable} message The message to react to\n   * @param {EmojiIdentifierResolvable} emoji The emoji to react with\n   * @returns {Promise<void>}\n   */\n  async react(message, emoji) {\n    message = this.resolveId(message);\n    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');\n\n    emoji = resolvePartialEmoji(emoji);\n    if (!emoji) throw new DiscordjsTypeError(ErrorCodes.EmojiType, 'emoji', 'EmojiIdentifierResolvable');\n\n    const emojiId = emoji.id\n      ? `${emoji.animated ? 'a:' : ''}${emoji.name}:${emoji.id}`\n      : encodeURIComponent(emoji.name);\n\n    await this.client.rest.put(Routes.channelMessageOwnReaction(this.channel.id, message, emojiId));\n  }\n\n  /**\n   * Deletes a message, even if it's not cached.\n   * @param {MessageResolvable} message The message to delete\n   * @returns {Promise<void>}\n   */\n  async delete(message) {\n    message = this.resolveId(message);\n    if (!message) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'message', 'MessageResolvable');\n\n    await this.client.rest.delete(Routes.channelMessage(this.channel.id, message));\n  }\n\n  /**\n   * Ends a poll.\n   * @param {Snowflake} messageId The id of the message\n   * @returns {Promise<Message>}\n   */\n  async endPoll(messageId) {\n    const message = await this.client.rest.post(Routes.expirePoll(this.channel.id, messageId));\n    return this._add(message, false);\n  }\n\n  /**\n   * Options used for fetching voters of an answer in a poll.\n   * @typedef {BaseFetchPollAnswerVotersOptions} FetchPollAnswerVotersOptions\n   * @param {Snowflake} messageId The id of the message\n   * @param {number} answerId The id of the answer\n   */\n\n  /**\n   * Fetches the users that voted for a poll answer.\n   * @param {FetchPollAnswerVotersOptions} options The options for fetching the poll answer voters\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetchPollAnswerVoters({ messageId, answerId, after, limit }) {\n    const voters = await this.client.rest.get(Routes.pollAnswerVoters(this.channel.id, messageId, answerId), {\n      query: makeURLSearchParams({ limit, after }),\n    });\n\n    return voters.users.reduce((acc, user) => acc.set(user.id, this.client.users._add(user, false)), new Collection());\n  }\n}\n\nmodule.exports = MessageManager;\n",
    "'use strict';\n\nconst Webhook = require('./Webhook');\n\n/**\n * Represents a webhook for an Interaction\n * @implements {Webhook}\n */\nclass InteractionWebhook {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {Snowflake} id The application's id\n   * @param {string} token The interaction's token\n   */\n  constructor(client, id, token) {\n    /**\n     * The client that instantiated the interaction webhook\n     * @name InteractionWebhook#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n    this.id = id;\n    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });\n  }\n\n  // These are here only for documentation purposes - they are implemented by Webhook\n  /* eslint-disable no-empty-function */\n  /**\n   * Sends a message with this webhook.\n   * @param {string|MessagePayload|InteractionReplyOptions} options The content for the reply\n   * @returns {Promise<Message>}\n   */\n\n  send() {}\n\n  /**\n   * Gets a message that was sent by this webhook.\n   * @param {Snowflake|'@original'} message The id of the message to fetch\n   * @returns {Promise<Message>} Returns the message sent by this webhook\n   */\n\n  fetchMessage() {}\n\n  /**\n   * Edits a message that was sent by this webhook.\n   * @param {MessageResolvable|'@original'} message The message to edit\n   * @param {string|MessagePayload|WebhookMessageEditOptions} options The options to provide\n   * @returns {Promise<Message>} Returns the message edited by this webhook\n   */\n\n  editMessage() {}\n  deleteMessage() {}\n  get url() {}\n}\n\nWebhook.applyToClass(InteractionWebhook, ['sendSlackMessage', 'edit', 'delete', 'createdTimestamp', 'createdAt']);\n\nmodule.exports = InteractionWebhook;\n",
    "'use strict';\n\nconst { Buffer } = require('node:buffer');\nconst { lazy, isJSONEncodable } = require('@discordjs/util');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { MessageFlags, MessageReferenceType } = require('discord-api-types/v10');\nconst ActionRowBuilder = require('./ActionRowBuilder');\nconst { DiscordjsError, DiscordjsRangeError, ErrorCodes } = require('../errors');\nconst { resolveFile } = require('../util/DataResolver');\nconst MessageFlagsBitField = require('../util/MessageFlagsBitField');\nconst { basename, verifyString, resolvePartialEmoji } = require('../util/Util');\n\nconst getBaseInteraction = lazy(() => require('./BaseInteraction'));\n\n/**\n * Represents a message to be sent to the API.\n */\nclass MessagePayload {\n  /**\n   * @param {MessageTarget} target The target for this message to be sent to\n   * @param {MessagePayloadOption} options The payload of this message\n   */\n  constructor(target, options) {\n    /**\n     * The target for this message to be sent to\n     * @type {MessageTarget}\n     */\n    this.target = target;\n\n    /**\n     * The payload of this message.\n     * @type {MessagePayloadOption}\n     */\n    this.options = options;\n\n    /**\n     * Body sendable to the API\n     * @type {?APIMessage}\n     */\n    this.body = null;\n\n    /**\n     * Files sendable to the API\n     * @type {?RawFile[]}\n     */\n    this.files = null;\n  }\n\n  /**\n   * Whether or not the target is a {@link Webhook} or a {@link WebhookClient}\n   * @type {boolean}\n   * @readonly\n   */\n  get isWebhook() {\n    const Webhook = require('./Webhook');\n    const WebhookClient = require('../client/WebhookClient');\n    return this.target instanceof Webhook || this.target instanceof WebhookClient;\n  }\n\n  /**\n   * Whether or not the target is a {@link User}\n   * @type {boolean}\n   * @readonly\n   */\n  get isUser() {\n    const User = require('./User');\n    const { GuildMember } = require('./GuildMember');\n    return this.target instanceof User || this.target instanceof GuildMember;\n  }\n\n  /**\n   * Whether or not the target is a {@link Message}\n   * @type {boolean}\n   * @readonly\n   */\n  get isMessage() {\n    const { Message } = require('./Message');\n    return this.target instanceof Message;\n  }\n\n  /**\n   * Whether or not the target is a {@link MessageManager}\n   * @type {boolean}\n   * @readonly\n   */\n  get isMessageManager() {\n    const MessageManager = require('../managers/MessageManager');\n    return this.target instanceof MessageManager;\n  }\n\n  /**\n   * Whether or not the target is an {@link BaseInteraction} or an {@link InteractionWebhook}\n   * @type {boolean}\n   * @readonly\n   * @deprecated This will no longer serve a purpose in the next major version.\n   */\n  get isInteraction() {\n    const BaseInteraction = getBaseInteraction();\n    const InteractionWebhook = require('./InteractionWebhook');\n    return this.target instanceof BaseInteraction || this.target instanceof InteractionWebhook;\n  }\n\n  /**\n   * Makes the content of this message.\n   * @returns {?string}\n   */\n  makeContent() {\n    let content;\n    if (this.options.content === null) {\n      content = '';\n    } else if (this.options.content !== undefined) {\n      content = verifyString(this.options.content, DiscordjsRangeError, ErrorCodes.MessageContentType, true);\n    }\n\n    return content;\n  }\n\n  /**\n   * Resolves the body.\n   * @returns {MessagePayload}\n   */\n  resolveBody() {\n    if (this.body) return this;\n    const isInteraction = this.isInteraction;\n    const isWebhook = this.isWebhook;\n\n    const content = this.makeContent();\n    const tts = Boolean(this.options.tts);\n\n    let nonce;\n    if (this.options.nonce !== undefined) {\n      nonce = this.options.nonce;\n      if (typeof nonce === 'number' ? !Number.isInteger(nonce) : typeof nonce !== 'string') {\n        throw new DiscordjsRangeError(ErrorCodes.MessageNonceType);\n      }\n    }\n\n    let enforce_nonce = Boolean(this.options.enforceNonce);\n\n    // If `nonce` isn't provided, generate one & set `enforceNonce`\n    // Unless `enforceNonce` is explicitly set to `false`(not just falsy)\n    if (nonce === undefined) {\n      if (this.options.enforceNonce !== false && this.target.client.options.enforceNonce) {\n        nonce = DiscordSnowflake.generate().toString();\n        enforce_nonce = true;\n      } else if (enforce_nonce) {\n        throw new DiscordjsError(ErrorCodes.MessageNonceRequired);\n      }\n    }\n\n    const components = this.options.components?.map(component =>\n      (isJSONEncodable(component) ? component : new ActionRowBuilder(component)).toJSON(),\n    );\n\n    let username;\n    let avatarURL;\n    let threadName;\n    let appliedTags;\n    if (isWebhook) {\n      username = this.options.username ?? this.target.name;\n      if (this.options.avatarURL) avatarURL = this.options.avatarURL;\n      if (this.options.threadName) threadName = this.options.threadName;\n      if (this.options.appliedTags) appliedTags = this.options.appliedTags;\n    }\n\n    let flags;\n    if (\n      // eslint-disable-next-line eqeqeq\n      this.options.flags != null ||\n      (this.isMessage && this.options.reply === undefined) ||\n      this.isMessageManager\n    ) {\n      flags = new MessageFlagsBitField(this.options.flags).bitfield;\n    }\n\n    if (isInteraction && this.options.ephemeral) {\n      flags |= MessageFlags.Ephemeral;\n    }\n\n    let allowedMentions =\n      this.options.allowedMentions === undefined\n        ? this.target.client.options.allowedMentions\n        : this.options.allowedMentions;\n\n    if (allowedMentions?.repliedUser !== undefined) {\n      allowedMentions = { ...allowedMentions, replied_user: allowedMentions.repliedUser };\n      delete allowedMentions.repliedUser;\n    }\n\n    let message_reference;\n    if (typeof this.options.reply === 'object') {\n      const reference = this.options.reply.messageReference;\n      const message_id = this.isMessage ? (reference.id ?? reference) : this.target.messages.resolveId(reference);\n      if (message_id) {\n        message_reference = {\n          message_id,\n          fail_if_not_exists: this.options.reply.failIfNotExists ?? this.target.client.options.failIfNotExists,\n        };\n      }\n    }\n\n    if (typeof this.options.forward === 'object') {\n      const reference = this.options.forward.message;\n      const channel_id = reference.channelId ?? this.target.client.channels.resolveId(this.options.forward.channel);\n      const guild_id = reference.guildId ?? this.target.client.guilds.resolveId(this.options.forward.guild);\n      const message_id = this.target.messages.resolveId(reference);\n      if (message_id) {\n        if (!channel_id) throw new DiscordjsError(ErrorCodes.InvalidType, 'channelId', 'TextBasedChannelResolvable');\n        message_reference = {\n          type: MessageReferenceType.Forward,\n          message_id,\n          channel_id,\n          guild_id: guild_id ?? undefined,\n        };\n      }\n    }\n\n    const attachments = this.options.files?.map((file, index) => ({\n      id: index.toString(),\n      description: file.description,\n    }));\n    if (Array.isArray(this.options.attachments)) {\n      this.options.attachments.push(...(attachments ?? []));\n    } else {\n      this.options.attachments = attachments;\n    }\n\n    let poll;\n    if (this.options.poll) {\n      poll = {\n        question: {\n          text: this.options.poll.question.text,\n        },\n        answers: this.options.poll.answers.map(answer => ({\n          poll_media: { text: answer.text, emoji: resolvePartialEmoji(answer.emoji) },\n        })),\n        duration: this.options.poll.duration,\n        allow_multiselect: this.options.poll.allowMultiselect,\n        layout_type: this.options.poll.layoutType,\n      };\n    }\n\n    this.body = {\n      content,\n      tts,\n      nonce,\n      enforce_nonce,\n      embeds: this.options.embeds?.map(embed =>\n        isJSONEncodable(embed) ? embed.toJSON() : this.target.client.options.jsonTransformer(embed),\n      ),\n      components,\n      username,\n      avatar_url: avatarURL,\n      allowed_mentions: content === undefined && message_reference === undefined ? undefined : allowedMentions,\n      flags,\n      message_reference,\n      attachments: this.options.attachments,\n      sticker_ids: this.options.stickers?.map(sticker => sticker.id ?? sticker),\n      thread_name: threadName,\n      applied_tags: appliedTags,\n      poll,\n    };\n    return this;\n  }\n\n  /**\n   * Resolves files.\n   * @returns {Promise<MessagePayload>}\n   */\n  async resolveFiles() {\n    if (this.files) return this;\n\n    this.files = await Promise.all(this.options.files?.map(file => this.constructor.resolveFile(file)) ?? []);\n    return this;\n  }\n\n  /**\n   * Resolves a single file into an object sendable to the API.\n   * @param {AttachmentPayload|BufferResolvable|Stream} fileLike Something that could be resolved to a file\n   * @returns {Promise<RawFile>}\n   */\n  static async resolveFile(fileLike) {\n    let attachment;\n    let name;\n\n    const findName = thing => {\n      if (typeof thing === 'string') {\n        return basename(thing);\n      }\n\n      if (thing.path) {\n        return basename(thing.path);\n      }\n\n      return 'file.jpg';\n    };\n\n    const ownAttachment =\n      typeof fileLike === 'string' || fileLike instanceof Buffer || typeof fileLike.pipe === 'function';\n    if (ownAttachment) {\n      attachment = fileLike;\n      name = findName(attachment);\n    } else {\n      attachment = fileLike.attachment;\n      name = fileLike.name ?? findName(attachment);\n    }\n\n    const { data, contentType } = await resolveFile(attachment);\n    return { data, name, contentType };\n  }\n\n  /**\n   * Creates a {@link MessagePayload} from user-level arguments.\n   * @param {MessageTarget} target Target to send to\n   * @param {string|MessagePayloadOption} options Options or content to use\n   * @param {MessagePayloadOption} [extra={}] Extra options to add onto specified options\n   * @returns {MessagePayload}\n   */\n  static create(target, options, extra = {}) {\n    return new this(\n      target,\n      typeof options !== 'object' || options === null ? { content: options, ...extra } : { ...options, ...extra },\n    );\n  }\n}\n\nmodule.exports = MessagePayload;\n\n/**\n * A target for a message.\n * @typedef {TextBasedChannels|User|GuildMember|Webhook|WebhookClient|BaseInteraction|InteractionWebhook|\n * Message|MessageManager} MessageTarget\n */\n\n/**\n * A possible payload option.\n * @typedef {MessageCreateOptions|MessageEditOptions|WebhookMessageCreateOptions|WebhookMessageEditOptions|\n * InteractionReplyOptions|InteractionUpdateOptions} MessagePayloadOption\n */\n\n/**\n * @external RawFile\n * @see {@link https://discord.js.org/docs/packages/rest/stable/RawFile:Interface}\n */\n",
    "'use strict';\n\nconst MessageManager = require('./MessageManager');\n\n/**\n * Manages API methods for messages in a guild and holds their cache.\n * @extends {MessageManager}\n */\nclass GuildMessageManager extends MessageManager {\n  /**\n   * The channel that the messages belong to\n   * @name GuildMessageManager#channel\n   * @type {GuildTextBasedChannel}\n   */\n}\n\nmodule.exports = GuildMessageManager;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { InteractionType, Routes } = require('discord-api-types/v10');\nconst { DiscordjsTypeError, DiscordjsError, ErrorCodes } = require('../../errors');\nconst { MaxBulkDeletableMessageAge } = require('../../util/Constants');\nconst InteractionCollector = require('../InteractionCollector');\nconst MessageCollector = require('../MessageCollector');\nconst MessagePayload = require('../MessagePayload');\n\n/**\n * Interface for classes that have text-channel-like features.\n * @interface\n */\nclass TextBasedChannel {\n  constructor() {\n    /**\n     * A manager of the messages sent to this channel\n     * @type {GuildMessageManager}\n     */\n    this.messages = new GuildMessageManager(this);\n\n    /**\n     * The channel's last message id, if one was sent\n     * @type {?Snowflake}\n     */\n    this.lastMessageId = null;\n\n    /**\n     * The timestamp when the last pinned message was pinned, if there was one\n     * @type {?number}\n     */\n    this.lastPinTimestamp = null;\n  }\n\n  /**\n   * The Message object of the last message in the channel, if one was sent\n   * @type {?Message}\n   * @readonly\n   */\n  get lastMessage() {\n    return this.messages.resolve(this.lastMessageId);\n  }\n\n  /**\n   * The date when the last pinned message was pinned, if there was one\n   * @type {?Date}\n   * @readonly\n   */\n  get lastPinAt() {\n    return this.lastPinTimestamp && new Date(this.lastPinTimestamp);\n  }\n\n  /**\n   * Represents the data for a poll answer.\n   * @typedef {Object} PollAnswerData\n   * @property {string} text The text for the poll answer\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji for the poll answer\n   */\n\n  /**\n   * Represents the data for a poll.\n   * @typedef {Object} PollData\n   * @property {PollQuestionMedia} question The question for the poll\n   * @property {PollAnswerData[]} answers The answers for the poll\n   * @property {number} duration The duration in hours for the poll\n   * @property {boolean} allowMultiselect Whether the poll allows multiple answers\n   * @property {PollLayoutType} [layoutType] The layout type for the poll\n   */\n\n  /**\n   * The base message options for messages.\n   * @typedef {Object} BaseMessageOptions\n   * @property {?string} [content=''] The content for the message. This can only be `null` when editing a message.\n   * @property {Array<(EmbedBuilder|Embed|APIEmbed)>} [embeds] The embeds for the message\n   * @property {MessageMentionOptions} [allowedMentions] Which mentions should be parsed from the message content\n   * (see {@link https://discord.com/developers/docs/resources/message#allowed-mentions-object here} for more details)\n   * @property {Array<(AttachmentBuilder|Attachment|AttachmentPayload|BufferResolvable)>} [files]\n   * The files to send with the message.\n   * @property {Array<(ActionRowBuilder|ActionRow|APIActionRowComponent)>} [components]\n   * Action rows containing interactive components for the message (buttons, select menus)\n   */\n\n  /**\n   * The base message options for messages including a poll.\n   * @typedef {BaseMessageOptions} BaseMessageOptionsWithPoll\n   * @property {PollData} [poll] The poll to send with the message\n   */\n\n  /**\n   * Options for sending a message with a reply.\n   * @typedef {Object} ReplyOptions\n   * @property {MessageResolvable} messageReference The message to reply to (must be in the same channel and not system)\n   * @property {boolean} [failIfNotExists=this.client.options.failIfNotExists] Whether to error if the referenced\n   * message does not exist (creates a standard message in this case when false)\n   */\n\n  /**\n   * The options for sending a message.\n   * @typedef {BaseMessageOptionsWithPoll} BaseMessageCreateOptions\n   * @property {boolean} [tts=false] Whether the message should be spoken aloud\n   * @property {string} [nonce] The nonce for the message\n   * <info>This property is required if `enforceNonce` set to `true`.</info>\n   * @property {boolean} [enforceNonce] Whether the nonce should be checked for uniqueness in the past few minutes.\n   * If another message was created by the same author with the same nonce,\n   * that message will be returned and no new message will be created\n   * @property {StickerResolvable[]} [stickers=[]] The stickers to send in the message\n   * @property {MessageFlags} [flags] Which flags to set for the message.\n   * <info>Only `MessageFlags.SuppressEmbeds` and `MessageFlags.SuppressNotifications` can be set.</info>\n   */\n\n  /**\n   * @typedef {Object} ForwardOptions\n   * @property {MessageResolvable} message The originating message\n   * @property {TextBasedChannelResolvable} [channel] The channel of the originating message\n   * @property {GuildResolvable} [guild] The guild of the originating message\n   */\n\n  /**\n   * The options for sending a message.\n   * @typedef {BaseMessageCreateOptions} MessageCreateOptions\n   * @property {ReplyOptions} [reply] The options for replying to a message\n   * @property {ForwardOptions} [forward] The options for forwarding a message\n   */\n\n  /**\n   * Options provided to control parsing of mentions by Discord\n   * @typedef {Object} MessageMentionOptions\n   * @property {MessageMentionTypes[]} [parse] Types of mentions to be parsed\n   * @property {Snowflake[]} [users] Snowflakes of Users to be parsed as mentions\n   * @property {Snowflake[]} [roles] Snowflakes of Roles to be parsed as mentions\n   * @property {boolean} [repliedUser=true] Whether the author of the Message being replied to should be pinged\n   */\n\n  /**\n   * Types of mentions to enable in MessageMentionOptions.\n   * - `roles`\n   * - `users`\n   * - `everyone`\n   * @typedef {string} MessageMentionTypes\n   */\n\n  /**\n   * Sends a message to this channel.\n   * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n   * @returns {Promise<Message>}\n   * @example\n   * // Send a basic message\n   * channel.send('hello!')\n   *   .then(message => console.log(`Sent message: ${message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Send a remote file\n   * channel.send({\n   *   files: ['https://cdn.discordapp.com/icons/222078108977594368/6e1019b3179d71046e463a75915e7244.png?size=2048']\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Send a local file\n   * channel.send({\n   *   files: [{\n   *     attachment: 'entire/path/to/file.jpg',\n   *     name: 'file.jpg',\n   *     description: 'A description of the file'\n   *   }]\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async send(options) {\n    const User = require('../User');\n    const { GuildMember } = require('../GuildMember');\n\n    if (this instanceof User || this instanceof GuildMember) {\n      const dm = await this.createDM();\n      return dm.send(options);\n    }\n\n    let messagePayload;\n\n    if (options instanceof MessagePayload) {\n      messagePayload = options.resolveBody();\n    } else {\n      messagePayload = MessagePayload.create(this, options).resolveBody();\n    }\n\n    const { body, files } = await messagePayload.resolveFiles();\n    const d = await this.client.rest.post(Routes.channelMessages(this.id), { body, files });\n\n    return this.messages.cache.get(d.id) ?? this.messages._add(d);\n  }\n\n  /**\n   * Sends a typing indicator in the channel.\n   * @returns {Promise<void>} Resolves upon the typing status being sent\n   * @example\n   * // Start typing in a channel\n   * channel.sendTyping();\n   */\n  async sendTyping() {\n    await this.client.rest.post(Routes.channelTyping(this.id));\n  }\n\n  /**\n   * Creates a Message Collector.\n   * @param {MessageCollectorOptions} [options={}] The options to pass to the collector\n   * @returns {MessageCollector}\n   * @example\n   * // Create a message collector\n   * const filter = message => message.content.includes('discord');\n   * const collector = channel.createMessageCollector({ filter, time: 15_000 });\n   * collector.on('collect', message => console.log(`Collected ${message.content}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createMessageCollector(options = {}) {\n    return new MessageCollector(this, options);\n  }\n\n  /**\n   * An object containing the same properties as CollectorOptions, but a few more:\n   * @typedef {MessageCollectorOptions} AwaitMessagesOptions\n   * @property {string[]} [errors] Stop/end reasons that cause the promise to reject\n   */\n\n  /**\n   * Similar to createMessageCollector but in promise form.\n   * Resolves with a collection of messages that pass the specified filter.\n   * @param {AwaitMessagesOptions} [options={}] Optional options to pass to the internal collector\n   * @returns {Promise<Collection<Snowflake, Message>>}\n   * @example\n   * // Await !vote messages\n   * const filter = m => m.content.startsWith('!vote');\n   * // Errors: ['time'] treats ending because of the time limit as an error\n   * channel.awaitMessages({ filter, max: 4, time: 60_000, errors: ['time'] })\n   *   .then(collected => console.log(collected.size))\n   *   .catch(collected => console.log(`After a minute, only ${collected.size} out of 4 voted.`));\n   */\n  awaitMessages(options = {}) {\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageCollector(options);\n      collector.once('end', (collection, reason) => {\n        if (options.errors?.includes(reason)) {\n          reject(collection);\n        } else {\n          resolve(collection);\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a component interaction collector.\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   * @example\n   * // Create a button interaction collector\n   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\n   * const collector = channel.createMessageComponentCollector({ filter, time: 15_000 });\n   * collector.on('collect', interaction => console.log(`Collected ${interaction.customId}`));\n   * collector.on('end', collected => console.log(`Collected ${collected.size} items`));\n   */\n  createMessageComponentCollector(options = {}) {\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionType: InteractionType.MessageComponent,\n      channel: this,\n    });\n  }\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   * @example\n   * // Collect a message component interaction\n   * const filter = (interaction) => interaction.customId === 'button' && interaction.user.id === 'someId';\n   * channel.awaitMessageComponent({ filter, time: 15_000 })\n   *   .then(interaction => console.log(`${interaction.customId} was clicked!`))\n   *   .catch(console.error);\n   */\n  awaitMessageComponent(options = {}) {\n    const _options = { ...options, max: 1 };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);\n        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Bulk deletes given messages that are newer than two weeks.\n   * @param {Collection<Snowflake, Message>|MessageResolvable[]|number} messages\n   * Messages or number of messages to delete\n   * @param {boolean} [filterOld=false] Filter messages to remove those which are older than two weeks automatically\n   * @returns {Promise<Collection<Snowflake, Message|undefined>>} Returns the deleted messages\n   * @example\n   * // Bulk delete messages\n   * channel.bulkDelete(5)\n   *   .then(messages => console.log(`Bulk deleted ${messages.size} messages`))\n   *   .catch(console.error);\n   */\n  async bulkDelete(messages, filterOld = false) {\n    if (Array.isArray(messages) || messages instanceof Collection) {\n      let messageIds =\n        messages instanceof Collection ? [...messages.keys()] : messages.map(message => message.id ?? message);\n      if (filterOld) {\n        messageIds = messageIds.filter(\n          id => Date.now() - DiscordSnowflake.timestampFrom(id) < MaxBulkDeletableMessageAge,\n        );\n      }\n      if (messageIds.length === 0) return new Collection();\n      if (messageIds.length === 1) {\n        const message = this.client.actions.MessageDelete.getMessage(\n          {\n            message_id: messageIds[0],\n          },\n          this,\n        );\n        await this.client.rest.delete(Routes.channelMessage(this.id, messageIds[0]));\n        return message ? new Collection([[message.id, message]]) : new Collection();\n      }\n      await this.client.rest.post(Routes.channelBulkDelete(this.id), { body: { messages: messageIds } });\n      return messageIds.reduce(\n        (col, id) =>\n          col.set(\n            id,\n            this.client.actions.MessageDeleteBulk.getMessage(\n              {\n                message_id: id,\n              },\n              this,\n            ),\n          ),\n        new Collection(),\n      );\n    }\n    if (!isNaN(messages)) {\n      const msgs = await this.messages.fetch({ limit: messages });\n      return this.bulkDelete(msgs, filterOld);\n    }\n    throw new DiscordjsTypeError(ErrorCodes.MessageBulkDeleteType);\n  }\n\n  /**\n   * Fetches all webhooks for the channel.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * channel.fetchWebhooks()\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n  fetchWebhooks() {\n    return this.guild.channels.fetchWebhooks(this.id);\n  }\n\n  /**\n   * Options used to create a {@link Webhook}.\n   * @typedef {Object} ChannelWebhookCreateOptions\n   * @property {string} name The name of the webhook\n   * @property {?(BufferResolvable|Base64Resolvable)} [avatar] Avatar for the webhook\n   * @property {string} [reason] Reason for creating the webhook\n   */\n\n  /**\n   * Creates a webhook for the channel.\n   * @param {ChannelWebhookCreateOptions} [options] Options for creating the webhook\n   * @returns {Promise<Webhook>} Returns the created Webhook\n   * @example\n   * // Create a webhook for the current channel\n   * channel.createWebhook({\n   *   name: 'Snek',\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  createWebhook(options) {\n    return this.guild.channels.createWebhook({ channel: this.id, ...options });\n  }\n\n  /**\n   * Sets the rate limit per user (slowmode) for this channel.\n   * @param {number} rateLimitPerUser The new rate limit in seconds\n   * @param {string} [reason] Reason for changing the channel's rate limit\n   * @returns {Promise<this>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({ rateLimitPerUser, reason });\n  }\n\n  /**\n   * Sets whether this channel is flagged as NSFW.\n   * @param {boolean} [nsfw=true] Whether the channel should be considered NSFW\n   * @param {string} [reason] Reason for changing the channel's NSFW flag\n   * @returns {Promise<this>}\n   */\n  setNSFW(nsfw = true, reason) {\n    return this.edit({ nsfw, reason });\n  }\n\n  static applyToClass(structure, full = false, ignore = []) {\n    const props = ['send'];\n    if (full) {\n      props.push(\n        'lastMessage',\n        'lastPinAt',\n        'bulkDelete',\n        'sendTyping',\n        'createMessageCollector',\n        'awaitMessages',\n        'createMessageComponentCollector',\n        'awaitMessageComponent',\n        'fetchWebhooks',\n        'createWebhook',\n        'setRateLimitPerUser',\n        'setNSFW',\n      );\n    }\n    for (const prop of props) {\n      if (ignore.includes(prop)) continue;\n      Object.defineProperty(\n        structure.prototype,\n        prop,\n        Object.getOwnPropertyDescriptor(TextBasedChannel.prototype, prop),\n      );\n    }\n  }\n}\n\nmodule.exports = TextBasedChannel;\n\n// Fixes Circular\n// eslint-disable-next-line import/order\nconst GuildMessageManager = require('../../managers/GuildMessageManager');\n",
    "'use strict';\n\nconst MessageManager = require('./MessageManager');\n\n/**\n * Manages API methods for messages in direct message channels and holds their cache.\n * @extends {MessageManager}\n */\nclass DMMessageManager extends MessageManager {\n  /**\n   * The channel that the messages belong to\n   * @name DMMessageManager#channel\n   * @type {DMChannel}\n   */\n}\n\nmodule.exports = DMMessageManager;\n",
    "'use strict';\n\nconst { userMention } = require('@discordjs/formatters');\nconst { ChannelType } = require('discord-api-types/v10');\nconst { BaseChannel } = require('./BaseChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst DMMessageManager = require('../managers/DMMessageManager');\nconst Partials = require('../util/Partials');\n\n/**\n * Represents a direct message channel between two users.\n * @extends {BaseChannel}\n * @implements {TextBasedChannel}\n */\nclass DMChannel extends BaseChannel {\n  constructor(client, data) {\n    super(client, data);\n\n    // Override the channel type so partials have a known type\n    this.type = ChannelType.DM;\n\n    /**\n     * A manager of the messages belonging to this channel\n     * @type {DMMessageManager}\n     */\n    this.messages = new DMMessageManager(this);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if (data.recipients) {\n      const recipient = data.recipients[0];\n\n      /**\n       * The recipient's id\n       * @type {Snowflake}\n       */\n      this.recipientId = recipient.id;\n\n      if ('username' in recipient || this.client.options.partials.includes(Partials.User)) {\n        this.client.users._add(recipient);\n      }\n    }\n\n    if ('last_message_id' in data) {\n      /**\n       * The channel's last message id, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n\n    if ('last_pin_timestamp' in data) {\n      /**\n       * The timestamp when the last pinned message was pinned, if there was one\n       * @type {?number}\n       */\n      this.lastPinTimestamp = Date.parse(data.last_pin_timestamp);\n    } else {\n      this.lastPinTimestamp ??= null;\n    }\n  }\n\n  /**\n   * Whether this DMChannel is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.lastMessageId === undefined;\n  }\n\n  /**\n   * The recipient on the other end of the DM\n   * @type {?User}\n   * @readonly\n   */\n  get recipient() {\n    return this.client.users.resolve(this.recipientId);\n  }\n\n  /**\n   * Fetch this DMChannel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  fetch(force = true) {\n    return this.client.users.createDM(this.recipientId, { force });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the recipient's mention instead of the\n   * DMChannel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return userMention(this.recipientId);\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  // Doesn't work on DM channels; bulkDelete() {}\n  // Doesn't work on DM channels; fetchWebhooks() {}\n  // Doesn't work on DM channels; createWebhook() {}\n  // Doesn't work on DM channels; setRateLimitPerUser() {}\n  // Doesn't work on DM channels; setNSFW() {}\n}\n\nTextBasedChannel.applyToClass(DMChannel, true, [\n  'bulkDelete',\n  'fetchWebhooks',\n  'createWebhook',\n  'setRateLimitPerUser',\n  'setNSFW',\n]);\n\nmodule.exports = DMChannel;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst ThreadManager = require('./ThreadManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst MessagePayload = require('../structures/MessagePayload');\n\n/**\n * Manages API methods for threads in forum channels and stores their cache.\n * @extends {ThreadManager}\n */\nclass GuildForumThreadManager extends ThreadManager {\n  /**\n   * The channel this Manager belongs to\n   * @name GuildForumThreadManager#channel\n   * @type {ForumChannel}\n   */\n\n  /**\n   * @typedef {BaseMessageOptions} GuildForumThreadMessageCreateOptions\n   * @property {StickerResolvable} [stickers] The stickers to send with the message\n   * @property {BitFieldResolvable} [flags] The flags to send with the message\n   * <info>Only `MessageFlags.SuppressEmbeds` and `MessageFlags.SuppressNotifications` can be set.</info>\n   */\n\n  /**\n   * Options for creating a thread.\n   * @typedef {StartThreadOptions} GuildForumThreadCreateOptions\n   * @property {GuildForumThreadMessageCreateOptions|MessagePayload} message The message associated with the thread post\n   * @property {Snowflake[]} [appliedTags] The tags to apply to the thread\n   */\n\n  /**\n   * Creates a new thread in the channel.\n   * @param {GuildForumThreadCreateOptions} [options] Options to create a new thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Create a new forum post\n   * forum.threads\n   *   .create({\n   *     name: 'Food Talk',\n   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *     message: {\n   *      content: 'Discuss your favorite food!',\n   *     },\n   *     reason: 'Needed a separate thread for food',\n   *   })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   */\n  async create({\n    name,\n    autoArchiveDuration = this.channel.defaultAutoArchiveDuration,\n    message,\n    reason,\n    rateLimitPerUser,\n    appliedTags,\n  } = {}) {\n    if (!message) {\n      throw new DiscordjsTypeError(ErrorCodes.GuildForumMessageRequired);\n    }\n\n    const { body, files } = await (message instanceof MessagePayload ? message : MessagePayload.create(this, message))\n      .resolveBody()\n      .resolveFiles();\n\n    const data = await this.client.rest.post(Routes.threads(this.channel.id), {\n      body: {\n        name,\n        auto_archive_duration: autoArchiveDuration,\n        rate_limit_per_user: rateLimitPerUser,\n        applied_tags: appliedTags,\n        message: body,\n      },\n      files,\n      reason,\n    });\n\n    return this.client.actions.ThreadCreate.handle(data).thread;\n  }\n}\n\nmodule.exports = GuildForumThreadManager;\n",
    "'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildForumThreadManager = require('../managers/GuildForumThreadManager');\nconst { transformAPIGuildForumTag, transformAPIGuildDefaultReaction } = require('../util/Channels');\n\n/**\n * @typedef {Object} GuildForumTagEmoji\n * @property {?Snowflake} id The id of a guild's custom emoji\n * @property {?string} name The unicode character of the emoji\n */\n\n/**\n * @typedef {Object} GuildForumTag\n * @property {Snowflake} id The id of the tag\n * @property {string} name The name of the tag\n * @property {boolean} moderated Whether this tag can only be added to or removed from threads\n * by a member with the `ManageThreads` permission\n * @property {?GuildForumTagEmoji} emoji The emoji of this tag\n */\n\n/**\n * @typedef {Object} GuildForumTagData\n * @property {Snowflake} [id] The id of the tag\n * @property {string} name The name of the tag\n * @property {boolean} [moderated] Whether this tag can only be added to or removed from threads\n * by a member with the `ManageThreads` permission\n * @property {?GuildForumTagEmoji} [emoji] The emoji of this tag\n */\n\n/**\n * @typedef {Object} DefaultReactionEmoji\n * @property {?Snowflake} id The id of a guild's custom emoji\n * @property {?string} name The unicode character of the emoji\n */\n\n/**\n * Represents symbols utilized by thread-only channels.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n * @abstract\n */\nclass ThreadOnlyChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n\n    /**\n     * A manager of the threads belonging to this channel\n     * @type {GuildForumThreadManager}\n     */\n    this.threads = new GuildForumThreadManager(this);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n    if ('available_tags' in data) {\n      /**\n       * The set of tags that can be used in this channel.\n       * @type {GuildForumTag[]}\n       */\n      this.availableTags = data.available_tags.map(tag => transformAPIGuildForumTag(tag));\n    } else {\n      this.availableTags ??= [];\n    }\n\n    if ('default_reaction_emoji' in data) {\n      /**\n       * The emoji to show in the add reaction button on a thread in a guild forum channel\n       * @type {?DefaultReactionEmoji}\n       */\n      this.defaultReactionEmoji = data.default_reaction_emoji\n        ? transformAPIGuildDefaultReaction(data.default_reaction_emoji)\n        : null;\n    } else {\n      this.defaultReactionEmoji ??= null;\n    }\n\n    if ('default_thread_rate_limit_per_user' in data) {\n      /**\n       * The initial rate limit per user (slowmode) to set on newly created threads in a channel.\n       * @type {?number}\n       */\n      this.defaultThreadRateLimitPerUser = data.default_thread_rate_limit_per_user;\n    } else {\n      this.defaultThreadRateLimitPerUser ??= null;\n    }\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel.\n       * @type {?number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    } else {\n      this.rateLimitPerUser ??= null;\n    }\n\n    if ('default_auto_archive_duration' in data) {\n      /**\n       * The default auto archive duration for newly created threads in this channel.\n       * @type {?ThreadAutoArchiveDuration}\n       */\n      this.defaultAutoArchiveDuration = data.default_auto_archive_duration;\n    } else {\n      this.defaultAutoArchiveDuration ??= null;\n    }\n\n    if ('nsfw' in data) {\n      /**\n       * If this channel is considered NSFW.\n       * @type {boolean}\n       */\n      this.nsfw = data.nsfw;\n    } else {\n      this.nsfw ??= false;\n    }\n\n    if ('topic' in data) {\n      /**\n       * The topic of this channel.\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('default_sort_order' in data) {\n      /**\n       * The default sort order mode used to order posts\n       * @type {?SortOrderType}\n       */\n      this.defaultSortOrder = data.default_sort_order;\n    } else {\n      this.defaultSortOrder ??= null;\n    }\n  }\n\n  /**\n   * Sets the available tags for this forum channel\n   * @param {GuildForumTagData[]} availableTags The tags to set as available in this channel\n   * @param {string} [reason] Reason for changing the available tags\n   * @returns {Promise<this>}\n   */\n  setAvailableTags(availableTags, reason) {\n    return this.edit({ availableTags, reason });\n  }\n\n  /**\n   * Sets the default reaction emoji for this channel\n   * @param {?DefaultReactionEmoji} defaultReactionEmoji The emoji to set as the default reaction emoji\n   * @param {string} [reason] Reason for changing the default reaction emoji\n   * @returns {Promise<this>}\n   */\n  setDefaultReactionEmoji(defaultReactionEmoji, reason) {\n    return this.edit({ defaultReactionEmoji, reason });\n  }\n\n  /**\n   * Sets the default rate limit per user (slowmode) for new threads in this channel\n   * @param {number} defaultThreadRateLimitPerUser The rate limit to set on newly created threads in this channel\n   * @param {string} [reason] Reason for changing the default rate limit\n   * @returns {Promise<this>}\n   */\n  setDefaultThreadRateLimitPerUser(defaultThreadRateLimitPerUser, reason) {\n    return this.edit({ defaultThreadRateLimitPerUser, reason });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {InviteCreateOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n\n  /**\n   * Sets the default auto archive duration for all newly created threads in this channel.\n   * @param {ThreadAutoArchiveDuration} defaultAutoArchiveDuration The new default auto archive duration\n   * @param {string} [reason] Reason for changing the channel's default auto archive duration\n   * @returns {Promise<this>}\n   */\n  setDefaultAutoArchiveDuration(defaultAutoArchiveDuration, reason) {\n    return this.edit({ defaultAutoArchiveDuration, reason });\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<this>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic, reason });\n  }\n\n  /**\n   * Sets the default sort order mode used to order posts\n   * @param {?SortOrderType} defaultSortOrder The default sort order mode to set on this channel\n   * @param {string} [reason] Reason for changing the default sort order\n   * @returns {Promise<this>}\n   */\n  setDefaultSortOrder(defaultSortOrder, reason) {\n    return this.edit({ defaultSortOrder, reason });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  createWebhook() {}\n  fetchWebhooks() {}\n  setNSFW() {}\n  setRateLimitPerUser() {}\n}\n\nTextBasedChannel.applyToClass(ThreadOnlyChannel, true, [\n  'send',\n  'lastMessage',\n  'lastPinAt',\n  'bulkDelete',\n  'sendTyping',\n  'createMessageCollector',\n  'awaitMessages',\n  'createMessageComponentCollector',\n  'awaitMessageComponent',\n]);\n\nmodule.exports = ThreadOnlyChannel;\n",
    "'use strict';\n\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link ThreadMember#flags} bitfield.\n * @extends {BitField}\n */\nclass ThreadMemberFlagsBitField extends BitField {\n  /**\n   * Numeric thread member flags. There are currently no bitflags relevant to bots for this.\n   * @type {Object<string, number>}\n   * @memberof ThreadMemberFlagsBitField\n   */\n  static Flags = {};\n}\n\n/**\n * @name ThreadMemberFlagsBitField\n * @kind constructor\n * @memberof ThreadMemberFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name ThreadMemberFlagsBitField#bitfield\n */\n\nmodule.exports = ThreadMemberFlagsBitField;\n",
    "'use strict';\n\nconst Base = require('./Base');\nconst ThreadMemberFlagsBitField = require('../util/ThreadMemberFlagsBitField');\nconst { emitDeprecationWarningForRemoveThreadMember } = require('../util/Util');\n\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\nclass ThreadMember extends Base {\n  constructor(thread, data, extra = {}) {\n    super(thread.client);\n\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The flags for this thread member. This will be `null` if partial.\n     * @type {?ThreadMemberFlagsBitField}\n     */\n    this.flags = null;\n\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n\n    this._patch(data, extra);\n  }\n\n  _patch(data, extra = {}) {\n    if ('join_timestamp' in data) this.joinedTimestamp = Date.parse(data.join_timestamp);\n    if ('flags' in data) this.flags = new ThreadMemberFlagsBitField(data.flags).freeze();\n\n    if ('member' in data) {\n      /**\n       * The guild member associated with this thread member.\n       * @type {?GuildMember}\n       * @private\n       */\n      this.member = this.thread.guild.members._add(data.member, extra.cache);\n    } else {\n      this.member ??= null;\n    }\n  }\n\n  /**\n   * Whether this thread member is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return this.flags === null;\n  }\n\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get guildMember() {\n    return this.member ?? this.thread.guild.members.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp && new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * <warn>This parameter is **deprecated**. Reasons cannot be used.</warn>\n   * @returns {Promise<ThreadMember>}\n   */\n  async remove(reason) {\n    if (reason !== undefined) {\n      emitDeprecationWarningForRemoveThreadMember(this.constructor.name);\n    }\n\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n}\n\nmodule.exports = ThreadMember;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst ThreadMember = require('../structures/ThreadMember');\nconst { emitDeprecationWarningForRemoveThreadMember } = require('../util/Util');\n\nlet deprecationEmittedForAdd = false;\n\n/**\n * Manages API methods for GuildMembers and stores their cache.\n * @extends {CachedManager}\n */\nclass ThreadMemberManager extends CachedManager {\n  constructor(thread, iterable) {\n    super(thread.client, ThreadMember, iterable);\n\n    /**\n     * The thread this manager belongs to\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, ThreadMember>}\n   * @name ThreadMemberManager#cache\n   */\n\n  _add(data, cache = true) {\n    const existing = this.cache.get(data.user_id);\n    if (cache) existing?._patch(data, { cache });\n    if (existing) return existing;\n\n    const member = new ThreadMember(this.thread, data, { cache });\n    if (cache) this.cache.set(data.user_id, member);\n    return member;\n  }\n\n  /**\n   * Fetches the client user as a ThreadMember of the thread.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<ThreadMember>}\n   */\n  fetchMe(options) {\n    return this.fetch({ ...options, member: this.client.user.id });\n  }\n\n  /**\n   * The client user as a ThreadMember of this ThreadChannel\n   * @type {?ThreadMember}\n   * @readonly\n   */\n  get me() {\n    return this.cache.get(this.client.user.id) ?? null;\n  }\n\n  /**\n   * Data that resolves to give a ThreadMember object. This can be:\n   * * A ThreadMember object\n   * * A User resolvable\n   * @typedef {ThreadMember|UserResolvable} ThreadMemberResolvable\n   */\n\n  /**\n   * Resolves a {@link ThreadMemberResolvable} to a {@link ThreadMember} object.\n   * @param {ThreadMemberResolvable} member The user that is part of the thread\n   * @returns {?GuildMember}\n   */\n  resolve(member) {\n    const memberResolvable = super.resolve(member);\n    if (memberResolvable) return memberResolvable;\n    const userId = this.client.users.resolveId(member);\n    if (userId) return super.cache.get(userId) ?? null;\n    return null;\n  }\n\n  /**\n   * Resolves a {@link ThreadMemberResolvable} to a {@link ThreadMember} id string.\n   * @param {ThreadMemberResolvable} member The user that is part of the guild\n   * @returns {?Snowflake}\n   */\n  resolveId(member) {\n    const memberResolvable = super.resolveId(member);\n    if (memberResolvable) return memberResolvable;\n    const userResolvable = this.client.users.resolveId(member);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n\n  /**\n   * Adds a member to the thread.\n   * @param {UserResolvable|'@me'} member The member to add\n   * @param {string} [reason] The reason for adding this member\n   * <warn>This parameter is **deprecated**. Reasons cannot be used.</warn>\n   * @returns {Promise<Snowflake>}\n   */\n  async add(member, reason) {\n    if (reason !== undefined && !deprecationEmittedForAdd) {\n      process.emitWarning(\n        // eslint-disable-next-line max-len\n        'The reason parameter of ThreadMemberManager#add() is deprecated as Discord does not parse them. It will be removed in the next major version.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForAdd = true;\n    }\n\n    const id = member === '@me' ? member : this.client.users.resolveId(member);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'member', 'UserResolvable');\n    await this.client.rest.put(Routes.threadMembers(this.thread.id, id), { reason });\n    return id;\n  }\n\n  /**\n   * Remove a user from the thread.\n   * @param {UserResolvable|'@me'} member The member to remove\n   * @param {string} [reason] The reason for removing this member from the thread\n   * <warn>This parameter is **deprecated**. Reasons cannot be used.</warn>\n   * @returns {Promise<Snowflake>}\n   */\n  async remove(member, reason) {\n    if (reason !== undefined) {\n      emitDeprecationWarningForRemoveThreadMember(this.constructor.name);\n    }\n\n    const id = member === '@me' ? member : this.client.users.resolveId(member);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'member', 'UserResolvable');\n    await this.client.rest.delete(Routes.threadMembers(this.thread.id, id), { reason });\n    return id;\n  }\n\n  /**\n   * Options used to fetch a thread member.\n   * @typedef {BaseFetchOptions} FetchThreadMemberOptions\n   * @property {ThreadMemberResolvable} member The thread member to fetch\n   * @property {boolean} [withMember] Whether to also return the guild member associated with this thread member\n   */\n\n  /**\n   * Options used to fetch multiple thread members with guild member data.\n   * <info>With `withMember` set to `true`, pagination is enabled.</info>\n   * @typedef {Object} FetchThreadMembersWithGuildMemberDataOptions\n   * @property {true} withMember Whether to also return the guild member data\n   * @property {Snowflake} [after] Consider only thread members after this id\n   * @property {number} [limit] The maximum number of thread members to return\n   * @property {boolean} [cache] Whether to cache the fetched thread members and guild members\n   */\n\n  /**\n   * Options used to fetch multiple thread members without guild member data.\n   * @typedef {Object} FetchThreadMembersWithoutGuildMemberDataOptions\n   * @property {false} [withMember] Whether to also return the guild member data\n   * @property {boolean} [cache] Whether to cache the fetched thread members\n   */\n\n  /**\n   * Options used to fetch multiple thread members.\n   * @typedef {FetchThreadMembersWithGuildMemberDataOptions|\n   * FetchThreadMembersWithoutGuildMemberDataOptions} FetchThreadMembersOptions\n   */\n\n  /**\n   * Fetches thread member(s) from Discord.\n   * <info>This method requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>\n   * @param {ThreadMemberResolvable|FetchThreadMemberOptions|FetchThreadMembersOptions} [options]\n   * Options for fetching thread member(s)\n   * @returns {Promise<ThreadMember|Collection<Snowflake, ThreadMember>>}\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const { member, withMember, cache, force } = options;\n    const resolvedMember = this.resolveId(member ?? options);\n    if (resolvedMember) return this._fetchSingle({ member: resolvedMember, withMember, cache, force });\n    return this._fetchMany(options);\n  }\n\n  async _fetchSingle({ member, withMember, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(member);\n      if (existing) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.threadMembers(this.thread.id, member), {\n      query: makeURLSearchParams({ with_member: withMember }),\n    });\n\n    return this._add(data, cache);\n  }\n\n  async _fetchMany({ withMember, after, limit, cache } = {}) {\n    const data = await this.client.rest.get(Routes.threadMembers(this.thread.id), {\n      query: makeURLSearchParams({ with_member: withMember, after, limit }),\n    });\n\n    return data.reduce((col, member) => col.set(member.user_id, this._add(member, cache)), new Collection());\n  }\n}\n\nmodule.exports = ThreadMemberManager;\n",
    "'use strict';\n\nconst { DiscordAPIError } = require('@discordjs/rest');\nconst { lazy } = require('@discordjs/util');\nconst { RESTJSONErrorCodes, ChannelFlags, ChannelType, PermissionFlagsBits, Routes } = require('discord-api-types/v10');\nconst { BaseChannel } = require('./BaseChannel');\nconst getThreadOnlyChannel = lazy(() => require('./ThreadOnlyChannel'));\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { DiscordjsRangeError, ErrorCodes } = require('../errors');\nconst GuildMessageManager = require('../managers/GuildMessageManager');\nconst ThreadMemberManager = require('../managers/ThreadMemberManager');\nconst ChannelFlagsBitField = require('../util/ChannelFlagsBitField');\n\n/**\n * Represents a thread channel on Discord.\n * @extends {BaseChannel}\n * @implements {TextBasedChannel}\n */\nclass ThreadChannel extends BaseChannel {\n  constructor(guild, data, client) {\n    super(guild?.client ?? client, data, false);\n\n    /**\n     * The guild the thread is in\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The id of the guild the channel is in\n     * @type {Snowflake}\n     */\n    this.guildId = guild?.id ?? data.guild_id;\n\n    /**\n     * The id of the member who created this thread\n     * @type {Snowflake}\n     */\n    this.ownerId = data.owner_id;\n\n    /**\n     * A manager of the messages sent to this thread\n     * @type {GuildMessageManager}\n     */\n    this.messages = new GuildMessageManager(this);\n\n    /**\n     * A manager of the members that are part of this thread\n     * @type {ThreadMemberManager}\n     */\n    this.members = new ThreadMemberManager(this);\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('message' in data) this.messages._add(data.message);\n\n    if ('name' in data) {\n      /**\n       * The name of the thread\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('guild_id' in data) {\n      this.guildId = data.guild_id;\n    }\n\n    if ('parent_id' in data) {\n      /**\n       * The id of the parent channel of this thread\n       * @type {?Snowflake}\n       */\n      this.parentId = data.parent_id;\n    } else {\n      this.parentId ??= null;\n    }\n\n    if ('thread_metadata' in data) {\n      /**\n       * Whether the thread is locked\n       * @type {?boolean}\n       */\n      this.locked = data.thread_metadata.locked ?? false;\n\n      /**\n       * Whether members without the {@link PermissionFlagsBits.ManageThreads} permission\n       * can invite other members to this thread.\n       * <info>This property is always `null` in public threads.</info>\n       * @type {?boolean}\n       */\n      this.invitable = this.type === ChannelType.PrivateThread ? (data.thread_metadata.invitable ?? false) : null;\n\n      /**\n       * Whether the thread is archived\n       * @type {?boolean}\n       */\n      this.archived = data.thread_metadata.archived;\n\n      /**\n       * The amount of time (in minutes) after which the thread will automatically archive in case of no recent activity\n       * @type {?ThreadAutoArchiveDuration}\n       */\n      this.autoArchiveDuration = data.thread_metadata.auto_archive_duration;\n\n      /**\n       * The timestamp when the thread's archive status was last changed\n       * <info>If the thread was never archived or unarchived, this is the timestamp at which the thread was\n       * created</info>\n       * @type {?number}\n       */\n      this.archiveTimestamp = Date.parse(data.thread_metadata.archive_timestamp);\n\n      if ('create_timestamp' in data.thread_metadata) {\n        // Note: this is needed because we can't assign directly to getters\n        this._createdTimestamp = Date.parse(data.thread_metadata.create_timestamp);\n      }\n    } else {\n      this.locked ??= null;\n      this.archived ??= null;\n      this.autoArchiveDuration ??= null;\n      this.archiveTimestamp ??= null;\n      this.invitable ??= null;\n    }\n\n    this._createdTimestamp ??= this.type === ChannelType.PrivateThread ? super.createdTimestamp : null;\n\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in this thread, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    } else {\n      this.lastMessageId ??= null;\n    }\n\n    if ('last_pin_timestamp' in data) {\n      /**\n       * The timestamp when the last pinned message was pinned, if there was one\n       * @type {?number}\n       */\n      this.lastPinTimestamp = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;\n    } else {\n      this.lastPinTimestamp ??= null;\n    }\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this thread in seconds\n       * @type {?number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user ?? 0;\n    } else {\n      this.rateLimitPerUser ??= null;\n    }\n\n    if ('message_count' in data) {\n      /**\n       * The approximate count of messages in this thread\n       * <info>Threads created before July 1, 2022 may have an inaccurate count.\n       * If you need an approximate value higher than that, use `ThreadChannel#messages.cache.size`</info>\n       * @type {?number}\n       */\n      this.messageCount = data.message_count;\n    } else {\n      this.messageCount ??= null;\n    }\n\n    if ('member_count' in data) {\n      /**\n       * The approximate count of users in this thread\n       * <info>This stops counting at 50. If you need an approximate value higher than that, use\n       * `ThreadChannel#members.cache.size`</info>\n       * @type {?number}\n       */\n      this.memberCount = data.member_count;\n    } else {\n      this.memberCount ??= null;\n    }\n\n    if ('total_message_sent' in data) {\n      /**\n       * The number of messages ever sent in a thread, similar to {@link ThreadChannel#messageCount} except it\n       * will not decrement whenever a message is deleted\n       * @type {?number}\n       */\n      this.totalMessageSent = data.total_message_sent;\n    } else {\n      this.totalMessageSent ??= null;\n    }\n\n    if (data.member && this.client.user) this.members._add({ user_id: this.client.user.id, ...data.member });\n    if (data.messages) for (const message of data.messages) this.messages._add(message);\n\n    if ('applied_tags' in data) {\n      /**\n       * The tags applied to this thread\n       * @type {Snowflake[]}\n       */\n      this.appliedTags = data.applied_tags;\n    } else {\n      this.appliedTags ??= [];\n    }\n  }\n\n  /**\n   * The timestamp when this thread was created. This isn't available for threads\n   * created before 2022-01-09\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this._createdTimestamp;\n  }\n\n  /**\n   * A collection of associated guild member objects of this thread's members\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get guildMembers() {\n    return this.members.cache.mapValues(member => member.guildMember);\n  }\n\n  /**\n   * The time at which this thread's archive status was last changed\n   * <info>If the thread was never archived or unarchived, this is the time at which the thread was created</info>\n   * @type {?Date}\n   * @readonly\n   */\n  get archivedAt() {\n    return this.archiveTimestamp && new Date(this.archiveTimestamp);\n  }\n\n  /**\n   * The time the thread was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The parent channel of this thread\n   * @type {?(NewsChannel|TextChannel|ForumChannel|MediaChannel)}\n   * @readonly\n   */\n  get parent() {\n    return this.guild.channels.resolve(this.parentId);\n  }\n\n  /**\n   * Makes the client user join the thread.\n   * @returns {Promise<ThreadChannel>}\n   */\n  async join() {\n    await this.members.add('@me');\n    return this;\n  }\n\n  /**\n   * Makes the client user leave the thread.\n   * @returns {Promise<ThreadChannel>}\n   */\n  async leave() {\n    await this.members.remove('@me');\n    return this;\n  }\n\n  /**\n   * Gets the overall set of permissions for a member or role in this thread's parent channel, taking overwrites into\n   * account.\n   * @param {GuildMemberResolvable|RoleResolvable} memberOrRole The member or role to obtain the overall permissions for\n   * @param {boolean} [checkAdmin=true] Whether having the {@link PermissionFlagsBits.Administrator} permission\n   * will return all permissions\n   * @returns {?Readonly<PermissionsBitField>}\n   */\n  permissionsFor(memberOrRole, checkAdmin) {\n    return this.parent?.permissionsFor(memberOrRole, checkAdmin) ?? null;\n  }\n\n  /**\n   * Options used to fetch a thread owner.\n   * @typedef {BaseFetchOptions} FetchThreadOwnerOptions\n   * @property {boolean} [withMember] Whether to also return the guild member associated with this thread member\n   */\n\n  /**\n   * Fetches the owner of this thread. If the thread member object isn't needed,\n   * use {@link ThreadChannel#ownerId} instead.\n   * @param {FetchThreadOwnerOptions} [options] Options for fetching the owner\n   * @returns {Promise<?ThreadMember>}\n   */\n  async fetchOwner(options) {\n    // TODO: Remove that catch in the next major version\n    const member = await this.members._fetchSingle({ ...options, member: this.ownerId }).catch(error => {\n      if (error instanceof DiscordAPIError && error.code === RESTJSONErrorCodes.UnknownMember) {\n        return null;\n      }\n\n      throw error;\n    });\n\n    return member;\n  }\n\n  /**\n   * Fetches the message that started this thread, if any.\n   * <info>The `Promise` will reject if the original message in a forum post is deleted\n   * or when the original message in the parent channel is deleted.\n   * If you just need the id of that message, use {@link BaseChannel#id} instead.</info>\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<?Message<true>>}\n   */\n  async fetchStarterMessage(options) {\n    const channel = this.parent instanceof getThreadOnlyChannel() ? this : this.parent;\n    return channel?.messages.fetch({ message: this.id, ...options }) ?? null;\n  }\n\n  /**\n   * The options used to edit a thread channel\n   * @typedef {Object} ThreadEditOptions\n   * @property {string} [name] The new name for the thread\n   * @property {boolean} [archived] Whether the thread is archived\n   * @property {ThreadAutoArchiveDuration} [autoArchiveDuration] The amount of time after which the thread\n   * should automatically archive in case of no recent activity\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the thread in seconds\n   * @property {boolean} [locked] Whether the thread is locked\n   * @property {boolean} [invitable] Whether non-moderators can add other non-moderators to a thread\n   * <info>Can only be edited on {@link ChannelType.PrivateThread}</info>\n   * @property {Snowflake[]} [appliedTags] The tags to apply to the thread\n   * @property {ChannelFlagsResolvable} [flags] The flags to set on the channel\n   * @property {string} [reason] Reason for editing the thread\n   */\n\n  /**\n   * Edits this thread.\n   * @param {ThreadEditOptions} options The options to provide\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Edit a thread\n   * thread.edit({ name: 'new-thread' })\n   *   .then(editedThread => console.log(editedThread))\n   *   .catch(console.error);\n   */\n  async edit(options) {\n    const newData = await this.client.rest.patch(Routes.channel(this.id), {\n      body: {\n        name: (options.name ?? this.name).trim(),\n        archived: options.archived,\n        auto_archive_duration: options.autoArchiveDuration,\n        rate_limit_per_user: options.rateLimitPerUser,\n        locked: options.locked,\n        invitable: this.type === ChannelType.PrivateThread ? options.invitable : undefined,\n        applied_tags: options.appliedTags,\n        flags: 'flags' in options ? ChannelFlagsBitField.resolve(options.flags) : undefined,\n      },\n      reason: options.reason,\n    });\n\n    return this.client.actions.ChannelUpdate.handle(newData).updated;\n  }\n\n  /**\n   * Sets whether the thread is archived.\n   * @param {boolean} [archived=true] Whether the thread is archived\n   * @param {string} [reason] Reason for archiving or unarchiving\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Archive the thread\n   * thread.setArchived(true)\n   *   .then(newThread => console.log(`Thread is now ${newThread.archived ? 'archived' : 'active'}`))\n   *   .catch(console.error);\n   */\n  setArchived(archived = true, reason) {\n    return this.edit({ archived, reason });\n  }\n\n  /**\n   * Sets the duration after which the thread will automatically archive in case of no recent activity.\n   * @param {ThreadAutoArchiveDuration} autoArchiveDuration The amount of time after which the thread\n   * should automatically archive in case of no recent activity\n   * @param {string} [reason] Reason for changing the auto archive duration\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Set the thread's auto archive time to 1 hour\n   * thread.setAutoArchiveDuration(ThreadAutoArchiveDuration.OneHour)\n   *   .then(newThread => {\n   *     console.log(`Thread will now archive after ${newThread.autoArchiveDuration} minutes of inactivity`);\n   *    });\n   *   .catch(console.error);\n   */\n  setAutoArchiveDuration(autoArchiveDuration, reason) {\n    return this.edit({ autoArchiveDuration, reason });\n  }\n\n  /**\n   * Sets whether members without the {@link PermissionFlagsBits.ManageThreads} permission\n   * can invite other members to this thread.\n   * @param {boolean} [invitable=true] Whether non-moderators can invite non-moderators to this thread\n   * @param {string} [reason] Reason for changing invite\n   * @returns {Promise<ThreadChannel>}\n   */\n  async setInvitable(invitable = true, reason) {\n    if (this.type !== ChannelType.PrivateThread) {\n      throw new DiscordjsRangeError(ErrorCodes.ThreadInvitableType, this.type);\n    }\n    return this.edit({ invitable, reason });\n  }\n\n  /**\n   * Sets whether the thread can be **unarchived** by anyone with the\n   * {@link PermissionFlagsBits.SendMessages} permission. When a thread is locked, only members with the\n   * {@link PermissionFlagsBits.ManageThreads} permission can unarchive it.\n   * @param {boolean} [locked=true] Whether the thread is locked\n   * @param {string} [reason] Reason for locking or unlocking the thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Set the thread to locked\n   * thread.setLocked(true)\n   *   .then(newThread => console.log(`Thread is now ${newThread.locked ? 'locked' : 'unlocked'}`))\n   *   .catch(console.error);\n   */\n  setLocked(locked = true, reason) {\n    return this.edit({ locked, reason });\n  }\n\n  /**\n   * Sets a new name for this thread.\n   * @param {string} name The new name for the thread\n   * @param {string} [reason] Reason for changing the thread's name\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Change the thread's name\n   * thread.setName('not_general')\n   *   .then(newThread => console.log(`Thread's new name is ${newThread.name}`))\n   *   .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets the rate limit per user (slowmode) for this thread.\n   * @param {number} rateLimitPerUser The new rate limit in seconds\n   * @param {string} [reason] Reason for changing the thread's rate limit\n   * @returns {Promise<ThreadChannel>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({ rateLimitPerUser, reason });\n  }\n\n  /**\n   * Set the applied tags for this channel (only applicable to forum threads)\n   * @param {Snowflake[]} appliedTags The tags to set for this channel\n   * @param {string} [reason] Reason for changing the thread's applied tags\n   * @returns {Promise<ThreadChannel>}\n   */\n  setAppliedTags(appliedTags, reason) {\n    return this.edit({ appliedTags, reason });\n  }\n\n  /**\n   * Pins this thread from the forum channel (only applicable to forum threads).\n   * @param {string} [reason] Reason for pinning\n   * @returns {Promise<ThreadChannel>}\n   */\n  pin(reason) {\n    return this.edit({ flags: this.flags.add(ChannelFlags.Pinned), reason });\n  }\n\n  /**\n   * Unpins this thread from the forum channel (only applicable to forum threads).\n   * @param {string} [reason] Reason for unpinning\n   * @returns {Promise<ThreadChannel>}\n   */\n  unpin(reason) {\n    return this.edit({ flags: this.flags.remove(ChannelFlags.Pinned), reason });\n  }\n\n  /**\n   * Whether the client user is a member of the thread.\n   * @type {boolean}\n   * @readonly\n   */\n  get joined() {\n    return this.members.cache.has(this.client.user?.id);\n  }\n\n  /**\n   * Whether the thread is editable by the client user (name, archived, autoArchiveDuration)\n   * @type {boolean}\n   * @readonly\n   */\n  get editable() {\n    return (\n      (this.ownerId === this.client.user.id && (this.type !== ChannelType.PrivateThread || this.joined)) ||\n      this.manageable\n    );\n  }\n\n  /**\n   * Whether the thread is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    return (\n      !this.archived &&\n      !this.joined &&\n      this.permissionsFor(this.client.user)?.has(\n        this.type === ChannelType.PrivateThread ? PermissionFlagsBits.ManageThreads : PermissionFlagsBits.ViewChannel,\n        false,\n      )\n    );\n  }\n\n  /**\n   * Whether the thread is manageable by the client user, for deleting or editing rateLimitPerUser or locked.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows managing even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.ManageThreads, false)\n    );\n  }\n\n  /**\n   * Whether the thread is viewable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get viewable() {\n    if (this.client.user.id === this.guild.ownerId) return true;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    return permissions.has(PermissionFlagsBits.ViewChannel, false);\n  }\n\n  /**\n   * Whether the client user can send messages in this thread\n   * @type {boolean}\n   * @readonly\n   */\n  get sendable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows sending even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      !(this.archived && this.locked && !this.manageable) &&\n      (this.type !== ChannelType.PrivateThread || this.joined || this.manageable) &&\n      permissions.has(PermissionFlagsBits.SendMessagesInThreads, false) &&\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now()\n    );\n  }\n\n  /**\n   * Whether the thread is unarchivable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get unarchivable() {\n    return this.archived && this.sendable && (!this.locked || this.manageable);\n  }\n\n  /**\n   * Deletes this thread.\n   * @param {string} [reason] Reason for deleting this thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Delete the thread\n   * thread.delete('cleaning out old threads')\n   *   .then(deletedThread => console.log(deletedThread))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.channels.delete(this.id, reason);\n    return this;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  // Doesn't work on Thread channels; setRateLimitPerUser() {}\n  // Doesn't work on Thread channels; setNSFW() {}\n}\n\nTextBasedChannel.applyToClass(ThreadChannel, true, ['fetchWebhooks', 'setRateLimitPerUser', 'setNSFW']);\n\nmodule.exports = ThreadChannel;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst ThreadChannel = require('../structures/ThreadChannel');\nconst { MakeCacheOverrideSymbol } = require('../util/Symbols');\n\n/**\n * Manages API methods for thread-based channels and stores their cache.\n * @extends {CachedManager}\n */\nclass ThreadManager extends CachedManager {\n  static [MakeCacheOverrideSymbol] = ThreadManager;\n\n  constructor(channel, iterable) {\n    super(channel.client, ThreadChannel, iterable);\n\n    /**\n     * The channel this Manager belongs to\n     * @type {TextChannel|NewsChannel|ForumChannel|MediaChannel}\n     */\n    this.channel = channel;\n  }\n\n  /**\n   * Data that can be resolved to a Thread Channel object. This can be:\n   * * A ThreadChannel object\n   * * A Snowflake\n   * @typedef {ThreadChannel|Snowflake} ThreadChannelResolvable\n   */\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, ThreadChannel>}\n   * @name ThreadManager#cache\n   */\n\n  _add(thread) {\n    const existing = this.cache.get(thread.id);\n    if (existing) return existing;\n    this.cache.set(thread.id, thread);\n    return thread;\n  }\n\n  /**\n   * Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} object.\n   * @method resolve\n   * @memberof ThreadManager\n   * @instance\n   * @param {ThreadChannelResolvable} thread The ThreadChannel resolvable to resolve\n   * @returns {?ThreadChannel}\n   */\n\n  /**\n   * Resolves a {@link ThreadChannelResolvable} to a {@link ThreadChannel} id.\n   * @method resolveId\n   * @memberof ThreadManager\n   * @instance\n   * @param {ThreadChannelResolvable} thread The ThreadChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Options for fetching multiple threads.\n   * @typedef {Object} FetchThreadsOptions\n   * @property {FetchArchivedThreadOptions} [archived] Options used to fetch archived threads\n   */\n\n  /**\n   * Obtains a thread from Discord, or the channel cache if it's already available.\n   * @param {ThreadChannelResolvable|FetchThreadsOptions} [options] The options to fetch threads. If it is a\n   * ThreadChannelResolvable then the specified thread will be fetched. Fetches all active threads if `undefined`\n   * @param {BaseFetchOptions} [cacheOptions] Additional options for this fetch. <warn>The `force` field gets ignored\n   * if `options` is not a {@link ThreadChannelResolvable}</warn>\n   * @returns {Promise<?(ThreadChannel|FetchedThreads|FetchedThreadsMore)>}\n   * {@link FetchedThreads} if active & {@link FetchedThreadsMore} if archived.\n   * @example\n   * // Fetch a thread by its id\n   * channel.threads.fetch('831955138126104859')\n   *   .then(channel => console.log(channel.name))\n   *   .catch(console.error);\n   */\n  fetch(options, { cache, force } = {}) {\n    if (!options) return this.fetchActive(cache);\n    const channel = this.client.channels.resolveId(options);\n    if (channel) return this.client.channels.fetch(channel, { cache, force });\n    if (options.archived) {\n      return this.fetchArchived(options.archived, cache);\n    }\n    return this.fetchActive(cache);\n  }\n\n  /**\n   * Data that can be resolved to a Date object. This can be:\n   * * A Date object\n   * * A number representing a timestamp\n   * * An {@link https://en.wikipedia.org/wiki/ISO_8601 ISO 8601} string\n   * @typedef {Date|number|string} DateResolvable\n   */\n\n  /**\n   * The options used to fetch archived threads.\n   * @typedef {Object} FetchArchivedThreadOptions\n   * @property {string} [type='public'] The type of threads to fetch (`public` or `private`)\n   * @property {boolean} [fetchAll=false] Whether to fetch **all** archived threads when `type` is `private`\n   * <info>This property requires the {@link PermissionFlagsBits.ManageThreads} permission if `true`.</info>\n   * @property {DateResolvable|ThreadChannelResolvable} [before] Only return threads that were archived before this Date\n   * or Snowflake\n   * <warn>Must be a {@link ThreadChannelResolvable} when `type` is `private` and `fetchAll` is `false`.</warn>\n   * @property {number} [limit] Maximum number of threads to return\n   */\n\n  /**\n   * Data returned from fetching multiple threads.\n   * @typedef {FetchedThreads} FetchedThreadsMore\n   * @property {?boolean} hasMore Whether there are potentially additional threads that require a subsequent call\n   */\n\n  /**\n   * Obtains a set of archived threads from Discord.\n   * <info>This method requires the {@link PermissionFlagsBits.ReadMessageHistory} permission\n   * in the parent channel.</info>\n   * @param {FetchArchivedThreadOptions} [options] The options to fetch archived threads\n   * @param {boolean} [cache=true] Whether to cache the new thread objects if they aren't already\n   * @returns {Promise<FetchedThreadsMore>}\n   */\n  async fetchArchived({ type = 'public', fetchAll = false, before, limit } = {}, cache = true) {\n    let path = Routes.channelThreads(this.channel.id, type);\n    if (type === 'private' && !fetchAll) {\n      path = Routes.channelJoinedArchivedThreads(this.channel.id);\n    }\n    let timestamp;\n    let id;\n    const query = makeURLSearchParams({ limit });\n    if (before !== undefined) {\n      if (before instanceof ThreadChannel || /^\\d{17,19}$/.test(String(before))) {\n        id = this.resolveId(before);\n        timestamp = this.resolve(before)?.archivedAt?.toISOString();\n        const toUse = type === 'private' && !fetchAll ? id : timestamp;\n        if (toUse) {\n          query.set('before', toUse);\n        }\n      } else {\n        try {\n          timestamp = new Date(before).toISOString();\n          if (type === 'public' || fetchAll) {\n            query.set('before', timestamp);\n          }\n        } catch {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'before', 'DateResolvable or ThreadChannelResolvable');\n        }\n      }\n    }\n\n    const raw = await this.client.rest.get(path, { query });\n    return this.constructor._mapThreads(raw, this.client, { parent: this.channel, cache });\n  }\n\n  /**\n   * Obtains all active threads in the channel.\n   * @param {boolean} [cache=true] Whether to cache the fetched data\n   * @returns {Promise<FetchedThreads>}\n   */\n  async fetchActive(cache = true) {\n    const data = await this.channel.guild.channels.rawFetchGuildActiveThreads();\n    return this.constructor._mapThreads(data, this.client, { parent: this.channel, cache });\n  }\n\n  static _mapThreads(rawThreads, client, { parent, guild, cache }) {\n    const threads = rawThreads.threads.reduce((coll, raw) => {\n      const thread = client.channels._add(raw, guild ?? parent?.guild, { cache });\n      if (parent && thread.parentId !== parent.id) return coll;\n      return coll.set(thread.id, thread);\n    }, new Collection());\n\n    // Discord sends the thread id as id in this object\n    const threadMembers = rawThreads.members.reduce((coll, raw) => {\n      const thread = threads.get(raw.id);\n      return thread ? coll.set(raw.user_id, thread.members._add(raw)) : coll;\n    }, new Collection());\n\n    const response = { threads, members: threadMembers };\n\n    // The GET `/guilds/{guild.id}/threads/active` route does not return `has_more`.\n    if ('has_more' in rawThreads) response.hasMore = rawThreads.has_more;\n    return response;\n  }\n}\n\nmodule.exports = ThreadManager;\n",
    "'use strict';\n\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst ThreadManager = require('./ThreadManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Manages API methods for {@link ThreadChannel} objects and stores their cache.\n * @extends {ThreadManager}\n */\nclass GuildTextThreadManager extends ThreadManager {\n  /**\n   * The channel this Manager belongs to\n   * @name GuildTextThreadManager#channel\n   * @type {TextChannel|NewsChannel}\n   */\n\n  /**\n   * Options for creating a thread. <warn>Only one of `startMessage` or `type` can be defined.</warn>\n   * @typedef {StartThreadOptions} GuildTextThreadCreateOptions\n   * @property {MessageResolvable} [startMessage] The message to start a thread from.\n   * <warn>If this is defined, then the `type` of thread gets inferred automatically and cannot be changed.</warn>\n   * @property {ThreadChannelTypes} [type] The type of thread to create.\n   * Defaults to {@link ChannelType.PublicThread} if created in a {@link TextChannel}\n   * <warn>When creating threads in a {@link NewsChannel}, this is ignored and is always\n   * {@link ChannelType.AnnouncementThread}</warn>\n   * @property {boolean} [invitable] Whether non-moderators can add other non-moderators to the thread\n   * <info>Can only be set when type will be {@link ChannelType.PrivateThread}</info>\n   */\n\n  /**\n   * Creates a new thread in the channel.\n   * @param {GuildTextThreadCreateOptions} [options] Options to create a new thread\n   * @returns {Promise<ThreadChannel>}\n   * @example\n   * // Create a new public thread\n   * channel.threads\n   *   .create({\n   *     name: 'food-talk',\n   *     autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *     reason: 'Needed a separate thread for food',\n   *   })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   * @example\n   * // Create a new private thread\n   * channel.threads\n   *   .create({\n   *      name: 'mod-talk',\n   *      autoArchiveDuration: ThreadAutoArchiveDuration.OneHour,\n   *      type: ChannelType.PrivateThread,\n   *      reason: 'Needed a separate thread for moderation',\n   *    })\n   *   .then(threadChannel => console.log(threadChannel))\n   *   .catch(console.error);\n   */\n  async create({\n    name,\n    autoArchiveDuration = this.channel.defaultAutoArchiveDuration,\n    startMessage,\n    type,\n    invitable,\n    reason,\n    rateLimitPerUser,\n  } = {}) {\n    let resolvedType =\n      this.channel.type === ChannelType.GuildAnnouncement ? ChannelType.AnnouncementThread : ChannelType.PublicThread;\n    let startMessageId;\n    if (startMessage) {\n      startMessageId = this.channel.messages.resolveId(startMessage);\n      if (!startMessageId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'startMessage', 'MessageResolvable');\n    } else if (this.channel.type !== ChannelType.GuildAnnouncement) {\n      resolvedType = type ?? resolvedType;\n    }\n\n    const data = await this.client.rest.post(Routes.threads(this.channel.id, startMessageId), {\n      body: {\n        name,\n        auto_archive_duration: autoArchiveDuration,\n        type: resolvedType,\n        invitable: resolvedType === ChannelType.PrivateThread ? invitable : undefined,\n        rate_limit_per_user: rateLimitPerUser,\n      },\n      reason,\n    });\n\n    return this.client.actions.ThreadCreate.handle(data).thread;\n  }\n}\n\nmodule.exports = GuildTextThreadManager;\n",
    "'use strict';\n\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildMessageManager = require('../managers/GuildMessageManager');\nconst GuildTextThreadManager = require('../managers/GuildTextThreadManager');\n\n/**\n * Represents a text-based guild channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass BaseGuildTextChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n\n    /**\n     * A manager of the messages sent to this channel\n     * @type {GuildMessageManager}\n     */\n    this.messages = new GuildMessageManager(this);\n\n    /**\n     * A manager of the threads belonging to this channel\n     * @type {GuildTextThreadManager}\n     */\n    this.threads = new GuildTextThreadManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     */\n    this.nsfw = Boolean(data.nsfw);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('topic' in data) {\n      /**\n       * The topic of the text channel\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('nsfw' in data) {\n      this.nsfw = Boolean(data.nsfw);\n    }\n\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n\n    if ('last_pin_timestamp' in data) {\n      /**\n       * The timestamp when the last pinned message was pinned, if there was one\n       * @type {?number}\n       */\n      this.lastPinTimestamp = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;\n    }\n\n    if ('default_auto_archive_duration' in data) {\n      /**\n       * The default auto archive duration for newly created threads in this channel\n       * @type {?ThreadAutoArchiveDuration}\n       */\n      this.defaultAutoArchiveDuration = data.default_auto_archive_duration;\n    }\n\n    if ('default_thread_rate_limit_per_user' in data) {\n      /**\n       * The initial rate limit per user (slowmode) to set on newly created threads in a channel.\n       * @type {?number}\n       */\n      this.defaultThreadRateLimitPerUser = data.default_thread_rate_limit_per_user;\n    } else {\n      this.defaultThreadRateLimitPerUser ??= null;\n    }\n\n    if ('messages' in data) {\n      for (const message of data.messages) this.messages._add(message);\n    }\n  }\n\n  /**\n   * Sets the default auto archive duration for all newly created threads in this channel.\n   * @param {ThreadAutoArchiveDuration} defaultAutoArchiveDuration The new default auto archive duration\n   * @param {string} [reason] Reason for changing the channel's default auto archive duration\n   * @returns {Promise<TextChannel>}\n   */\n  setDefaultAutoArchiveDuration(defaultAutoArchiveDuration, reason) {\n    return this.edit({ defaultAutoArchiveDuration, reason });\n  }\n\n  /**\n   * Sets the type of this channel.\n   * <info>Only conversion between {@link TextChannel} and {@link NewsChannel} is supported.</info>\n   * @param {ChannelType.GuildText|ChannelType.GuildAnnouncement} type The new channel type\n   * @param {string} [reason] Reason for changing the channel's type\n   * @returns {Promise<GuildChannel>}\n   */\n  setType(type, reason) {\n    return this.edit({ type, reason });\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic, reason });\n  }\n\n  /**\n   * Data that can be resolved to an Application. This can be:\n   * * An Application\n   * * An Activity with associated Application\n   * * A Snowflake\n   * @typedef {Application|Snowflake} ApplicationResolvable\n   */\n\n  /**\n   * Options used to create an invite to a guild channel.\n   * @typedef {Object} InviteCreateOptions\n   * @property {boolean} [temporary] Whether members that joined via the invite should be automatically\n   * kicked after 24 hours if they have not yet received a role\n   * @property {number} [maxAge] How long the invite should last (in seconds, 0 for forever)\n   * @property {number} [maxUses] Maximum number of uses\n   * @property {boolean} [unique] Create a unique invite, or use an existing one with similar settings\n   * @property {UserResolvable} [targetUser] The user whose stream to display for this invite,\n   * required if `targetType` is {@link InviteTargetType.Stream}, the user must be streaming in the channel\n   * @property {ApplicationResolvable} [targetApplication] The embedded application to open for this invite,\n   * required if `targetType` is {@link InviteTargetType.Stream}, the application must have the\n   * {@link InviteTargetType.EmbeddedApplication} flag\n   * @property {InviteTargetType} [targetType] The type of the target for this voice channel invite\n   * @property {string} [reason] The reason for creating the invite\n   */\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {InviteCreateOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether or not to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache = true) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  fetchWebhooks() {}\n  createWebhook() {}\n  setRateLimitPerUser() {}\n  setNSFW() {}\n}\n\nTextBasedChannel.applyToClass(BaseGuildTextChannel, true);\n\nmodule.exports = BaseGuildTextChannel;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst BaseGuildTextChannel = require('./BaseGuildTextChannel');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents a guild news channel on Discord.\n * @extends {BaseGuildTextChannel}\n */\nclass NewsChannel extends BaseGuildTextChannel {\n  /**\n   * Adds the target to this channel's followers.\n   * @param {TextChannelResolvable} channel The channel where the webhook should be created\n   * @param {string} [reason] Reason for creating the webhook\n   * @returns {Promise<NewsChannel>}\n   * @example\n   * if (channel.type === ChannelType.GuildAnnouncement) {\n   *   channel.addFollower('222197033908436994', 'Important announcements')\n   *     .then(() => console.log('Added follower'))\n   *     .catch(console.error);\n   * }\n   */\n  async addFollower(channel, reason) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n    await this.client.rest.post(Routes.channelFollowers(this.id), { body: { webhook_channel_id: channelId }, reason });\n    return this;\n  }\n}\n\nmodule.exports = NewsChannel;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst GuildChannel = require('./GuildChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst GuildMessageManager = require('../managers/GuildMessageManager');\n\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n * @implements {TextBasedChannel}\n */\nclass BaseGuildVoiceChannel extends GuildChannel {\n  constructor(guild, data, client) {\n    super(guild, data, client, false);\n    /**\n     * A manager of the messages sent to this channel\n     * @type {GuildMessageManager}\n     */\n    this.messages = new GuildMessageManager(this);\n\n    /**\n     * If the guild considers this channel NSFW\n     * @type {boolean}\n     */\n    this.nsfw = Boolean(data.nsfw);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if ('rtc_region' in data) {\n      /**\n       * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n       * @type {?string}\n       */\n      this.rtcRegion = data.rtc_region;\n    }\n\n    if ('bitrate' in data) {\n      /**\n       * The bitrate of this voice-based channel\n       * @type {number}\n       */\n      this.bitrate = data.bitrate;\n    }\n\n    if ('user_limit' in data) {\n      /**\n       * The maximum amount of users allowed in this channel.\n       * @type {number}\n       */\n      this.userLimit = data.user_limit;\n    }\n\n    if ('video_quality_mode' in data) {\n      /**\n       * The camera video quality mode of the channel.\n       * @type {?VideoQualityMode}\n       */\n      this.videoQualityMode = data.video_quality_mode;\n    } else {\n      this.videoQualityMode ??= null;\n    }\n\n    if ('last_message_id' in data) {\n      /**\n       * The last message id sent in the channel, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    }\n\n    if ('messages' in data) {\n      for (const message of data.messages) this.messages._add(message);\n    }\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel in seconds\n       * @type {number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    }\n\n    if ('nsfw' in data) {\n      this.nsfw = data.nsfw;\n    }\n  }\n\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!this.viewable) return false;\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n\n    // This flag allows joining even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.Connect, false)\n    );\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {InviteCreateOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * @param {boolean} [cache=true] Whether to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache = true) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n\n  /**\n   * Sets the bitrate of the channel.\n   * @param {number} bitrate The new bitrate\n   * @param {string} [reason] Reason for changing the channel's bitrate\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the bitrate of a voice channel\n   * channel.setBitrate(48_000)\n   *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setBitrate(bitrate, reason) {\n    return this.edit({ bitrate, reason });\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @param {string} [reason] The reason for modifying this region.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to sydney\n   * channel.setRTCRegion('sydney');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null, 'We want to let Discord decide.');\n   */\n  setRTCRegion(rtcRegion, reason) {\n    return this.edit({ rtcRegion, reason });\n  }\n\n  /**\n   * Sets the user limit of the channel.\n   * @param {number} userLimit The new user limit\n   * @param {string} [reason] Reason for changing the user limit\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the user limit of a voice channel\n   * channel.setUserLimit(42)\n   *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n   *   .catch(console.error);\n   */\n  setUserLimit(userLimit, reason) {\n    return this.edit({ userLimit, reason });\n  }\n\n  /**\n   * Sets the camera video quality mode of the channel.\n   * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n   * @param {string} [reason] Reason for changing the camera video quality mode.\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   */\n  setVideoQualityMode(videoQualityMode, reason) {\n    return this.edit({ videoQualityMode, reason });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  send() {}\n  sendTyping() {}\n  createMessageCollector() {}\n  awaitMessages() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n  bulkDelete() {}\n  fetchWebhooks() {}\n  createWebhook() {}\n  setRateLimitPerUser() {}\n  setNSFW() {}\n}\n\nTextBasedChannel.applyToClass(BaseGuildVoiceChannel, true, ['lastPinAt']);\n\nmodule.exports = BaseGuildVoiceChannel;\n",
    "'use strict';\n\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild stage channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass StageChannel extends BaseGuildVoiceChannel {\n  _patch(data) {\n    super._patch(data);\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage channel\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n  }\n\n  /**\n   * The stage instance of this stage channel, if it exists\n   * @type {?StageInstance}\n   * @readonly\n   */\n  get stageInstance() {\n    return this.guild.stageInstances.cache.find(stageInstance => stageInstance.channelId === this.id) ?? null;\n  }\n\n  /**\n   * Creates a stage instance associated with this stage channel.\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   */\n  createStageInstance(options) {\n    return this.guild.stageInstances.create(this.id, options);\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<StageChannel>}\n   * @example\n   * // Set a new channel topic\n   * stageChannel.setTopic('needs more rate limiting')\n   *   .then(channel => console.log(`Channel's new topic is ${channel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic, reason });\n  }\n}\n\n/**\n * Sets the bitrate of the channel.\n * @method setBitrate\n * @memberof StageChannel\n * @instance\n * @param {number} bitrate The new bitrate\n * @param {string} [reason] Reason for changing the channel's bitrate\n * @returns {Promise<StageChannel>}\n * @example\n * // Set the bitrate of a voice channel\n * stageChannel.setBitrate(48_000)\n *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof StageChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<StageChannel>}\n * @example\n * // Set the RTC region to sydney\n * stageChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * stageChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\n/**\n * Sets the user limit of the channel.\n * @method setUserLimit\n * @memberof StageChannel\n * @instance\n * @param {number} userLimit The new user limit\n * @param {string} [reason] Reason for changing the user limit\n * @returns {Promise<StageChannel>}\n * @example\n * // Set the user limit of a voice channel\n * stageChannel.setUserLimit(42)\n *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the camera video quality mode of the channel.\n * @method setVideoQualityMode\n * @memberof StageChannel\n * @instance\n * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n * @param {string} [reason] Reason for changing the camera video quality mode.\n * @returns {Promise<StageChannel>}\n */\n\nmodule.exports = StageChannel;\n",
    "'use strict';\n\nconst BaseGuildTextChannel = require('./BaseGuildTextChannel');\n\n/**\n * Represents a guild text channel on Discord.\n * @extends {BaseGuildTextChannel}\n */\nclass TextChannel extends BaseGuildTextChannel {\n  _patch(data) {\n    super._patch(data);\n\n    if ('rate_limit_per_user' in data) {\n      /**\n       * The rate limit per user (slowmode) for this channel in seconds\n       * @type {number}\n       */\n      this.rateLimitPerUser = data.rate_limit_per_user;\n    }\n  }\n\n  /**\n   * Sets the rate limit per user (slowmode) for this channel.\n   * @param {number} rateLimitPerUser The new rate limit in seconds\n   * @param {string} [reason] Reason for changing the channel's rate limit\n   * @returns {Promise<TextChannel>}\n   */\n  setRateLimitPerUser(rateLimitPerUser, reason) {\n    return this.edit({ rateLimitPerUser, reason });\n  }\n}\n\nmodule.exports = TextChannel;\n",
    "'use strict';\n\nconst { PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild voice channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass VoiceChannel extends BaseGuildVoiceChannel {\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!super.joinable) return false;\n    if (this.full && !this.permissionsFor(this.client.user).has(PermissionFlagsBits.MoveMembers, false)) return false;\n    return true;\n  }\n\n  /**\n   * Checks if the client has permission to send audio to the voice channel\n   * @type {boolean}\n   * @readonly\n   */\n  get speakable() {\n    const permissions = this.permissionsFor(this.client.user);\n    if (!permissions) return false;\n    // This flag allows speaking even if timed out\n    if (permissions.has(PermissionFlagsBits.Administrator, false)) return true;\n\n    return (\n      this.guild.members.me.communicationDisabledUntilTimestamp < Date.now() &&\n      permissions.has(PermissionFlagsBits.Speak, false)\n    );\n  }\n}\n\n/**\n * Sets the bitrate of the channel.\n * @method setBitrate\n * @memberof VoiceChannel\n * @instance\n * @param {number} bitrate The new bitrate\n * @param {string} [reason] Reason for changing the channel's bitrate\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the bitrate of a voice channel\n * voiceChannel.setBitrate(48_000)\n *   .then(channel => console.log(`Set bitrate to ${channel.bitrate}bps for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the RTC region of the channel.\n * @method setRTCRegion\n * @memberof VoiceChannel\n * @instance\n * @param {?string} rtcRegion The new region of the channel. Set to `null` to remove a specific region for the channel\n * @param {string} [reason] The reason for modifying this region.\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the RTC region to sydney\n * voiceChannel.setRTCRegion('sydney');\n * @example\n * // Remove a fixed region for this channel - let Discord decide automatically\n * voiceChannel.setRTCRegion(null, 'We want to let Discord decide.');\n */\n\n/**\n * Sets the user limit of the channel.\n * @method setUserLimit\n * @memberof VoiceChannel\n * @instance\n * @param {number} userLimit The new user limit\n * @param {string} [reason] Reason for changing the user limit\n * @returns {Promise<VoiceChannel>}\n * @example\n * // Set the user limit of a voice channel\n * voiceChannel.setUserLimit(42)\n *   .then(channel => console.log(`Set user limit to ${channel.userLimit} for ${channel.name}`))\n *   .catch(console.error);\n */\n\n/**\n * Sets the camera video quality mode of the channel.\n * @method setVideoQualityMode\n * @memberof VoiceChannel\n * @instance\n * @param {VideoQualityMode} videoQualityMode The new camera video quality mode.\n * @param {string} [reason] Reason for changing the camera video quality mode.\n * @returns {Promise<VoiceChannel>}\n */\n\nmodule.exports = VoiceChannel;\n",
    "'use strict';\n\nconst { BaseChannel } = require('./BaseChannel');\n\n/**\n * Represents a channel that displays a directory of guilds.\n * @extends {BaseChannel}\n */\nclass DirectoryChannel extends BaseChannel {\n  constructor(guild, data, client) {\n    super(client, data);\n\n    /**\n     * The guild the channel is in\n     * @type {InviteGuild}\n     */\n    this.guild = guild;\n\n    /**\n     * The id of the guild the channel is in\n     * @type {Snowflake}\n     */\n    this.guildId = guild.id;\n  }\n\n  _patch(data) {\n    super._patch(data);\n    /**\n     * The channel's name\n     * @type {string}\n     */\n    this.name = data.name;\n  }\n}\n\nmodule.exports = DirectoryChannel;\n",
    "'use strict';\n\nconst MessageManager = require('./MessageManager');\n\n/**\n * Manages API methods for messages in group direct message channels and holds their cache.\n * @extends {MessageManager}\n */\nclass PartialGroupDMMessageManager extends MessageManager {\n  /**\n   * The channel that the messages belong to\n   * @name PartialGroupDMMessageManager#channel\n   * @type {PartialGroupDMChannel}\n   */\n}\n\nmodule.exports = PartialGroupDMMessageManager;\n",
    "'use strict';\n\nconst { BaseChannel } = require('./BaseChannel');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst PartialGroupDMMessageManager = require('../managers/PartialGroupDMMessageManager');\n\n/**\n * Represents a Partial Group DM Channel on Discord.\n * @extends {BaseChannel}\n * @implements {TextBasedChannel}\n */\nclass PartialGroupDMChannel extends BaseChannel {\n  constructor(client, data) {\n    super(client, data);\n\n    // No flags are present when fetching partial group DM channels.\n    this.flags = null;\n\n    /**\n     * The name of this Group DM Channel\n     * @type {?string}\n     */\n    this.name = data.name;\n\n    /**\n     * The hash of the channel icon\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * Recipient data received in a {@link PartialGroupDMChannel}.\n     * @typedef {Object} PartialRecipient\n     * @property {string} username The username of the recipient\n     */\n\n    /**\n     * The recipients of this Group DM Channel.\n     * @type {PartialRecipient[]}\n     */\n    this.recipients = data.recipients;\n\n    /**\n     * A manager of the messages belonging to this channel\n     * @type {PartialGroupDMMessageManager}\n     */\n    this.messages = new PartialGroupDMMessageManager(this);\n\n    if ('owner_id' in data) {\n      /**\n       * The user id of the owner of this Group DM Channel\n       * @type {?Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    } else {\n      this.ownerId ??= null;\n    }\n\n    if ('last_message_id' in data) {\n      /**\n       * The channel's last message id, if one was sent\n       * @type {?Snowflake}\n       */\n      this.lastMessageId = data.last_message_id;\n    } else {\n      this.lastMessageId ??= null;\n    }\n\n    if ('last_pin_timestamp' in data) {\n      /**\n       * The timestamp when the last pinned message was pinned, if there was one\n       * @type {?number}\n       */\n      this.lastPinTimestamp = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;\n    } else {\n      this.lastPinTimestamp ??= null;\n    }\n  }\n\n  /**\n   * The URL to this channel's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.channelIcon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches the owner of this Group DM Channel.\n   * @param {BaseFetchOptions} [options] The options for fetching the user\n   * @returns {Promise<User>}\n   */\n  async fetchOwner(options) {\n    if (!this.ownerId) {\n      throw new DiscordjsError(ErrorCodes.FetchOwnerId, 'group DM');\n    }\n\n    return this.client.users.fetch(this.ownerId, options);\n  }\n\n  async delete() {\n    throw new DiscordjsError(ErrorCodes.DeleteGroupDMChannel);\n  }\n\n  async fetch() {\n    throw new DiscordjsError(ErrorCodes.FetchGroupDMChannel);\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  get lastMessage() {}\n  get lastPinAt() {}\n  createMessageComponentCollector() {}\n  awaitMessageComponent() {}\n}\n\nTextBasedChannel.applyToClass(PartialGroupDMChannel, true, [\n  'bulkDelete',\n  'send',\n  'sendTyping',\n  'createMessageCollector',\n  'awaitMessages',\n  'fetchWebhooks',\n  'createWebhook',\n  'setRateLimitPerUser',\n  'setNSFW',\n]);\n\nmodule.exports = PartialGroupDMChannel;\n",
    "'use strict';\n\nconst ThreadOnlyChannel = require('./ThreadOnlyChannel');\n\n/**\n * Represents a forum channel.\n * @extends {ThreadOnlyChannel}\n */\nclass ForumChannel extends ThreadOnlyChannel {\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The default layout type used to display posts\n     * @type {ForumLayoutType}\n     */\n    this.defaultForumLayout = data.default_forum_layout;\n  }\n\n  /**\n   * Sets the default forum layout type used to display posts\n   * @param {ForumLayoutType} defaultForumLayout The default forum layout type to set on this channel\n   * @param {string} [reason] Reason for changing the default forum layout\n   * @returns {Promise<ForumChannel>}\n   */\n  setDefaultForumLayout(defaultForumLayout, reason) {\n    return this.edit({ defaultForumLayout, reason });\n  }\n}\n\nmodule.exports = ForumChannel;\n",
    "'use strict';\n\nconst ThreadOnlyChannel = require('./ThreadOnlyChannel');\n\n/**\n * Represents a media channel.\n * @extends {ThreadOnlyChannel}\n */\nclass MediaChannel extends ThreadOnlyChannel {}\n\nmodule.exports = MediaChannel;\n",
    "'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst { ChannelType } = require('discord-api-types/v10');\n\nconst getCategoryChannel = lazy(() => require('../structures/CategoryChannel'));\nconst getDMChannel = lazy(() => require('../structures/DMChannel'));\nconst getNewsChannel = lazy(() => require('../structures/NewsChannel'));\nconst getStageChannel = lazy(() => require('../structures/StageChannel'));\nconst getTextChannel = lazy(() => require('../structures/TextChannel'));\nconst getThreadChannel = lazy(() => require('../structures/ThreadChannel'));\nconst getVoiceChannel = lazy(() => require('../structures/VoiceChannel'));\nconst getDirectoryChannel = lazy(() => require('../structures/DirectoryChannel'));\nconst getPartialGroupDMChannel = lazy(() => require('../structures/PartialGroupDMChannel'));\nconst getForumChannel = lazy(() => require('../structures/ForumChannel'));\nconst getMediaChannel = lazy(() => require('../structures/MediaChannel'));\n\n/**\n * Extra options for creating a channel.\n * @typedef {Object} CreateChannelOptions\n * @property {boolean} [allowFromUnknownGuild] Whether to allow creating a channel from an unknown guild\n * @private\n */\n\n/**\n * Creates a discord.js channel from data received from the API.\n * @param {Client} client The client\n * @param {APIChannel} data The data of the channel to create\n * @param {Guild} [guild] The guild where this channel belongs\n * @param {CreateChannelOptions} [extras] Extra information to supply for creating this channel\n * @returns {BaseChannel} Any kind of channel.\n * @ignore\n */\nfunction createChannel(client, data, guild, { allowUnknownGuild } = {}) {\n  let channel;\n  if (!data.guild_id && !guild) {\n    if ((data.recipients && data.type !== ChannelType.GroupDM) || data.type === ChannelType.DM) {\n      channel = new (getDMChannel())(client, data);\n    } else if (data.type === ChannelType.GroupDM) {\n      channel = new (getPartialGroupDMChannel())(client, data);\n    }\n  } else {\n    guild ??= client.guilds.cache.get(data.guild_id);\n\n    if (guild || allowUnknownGuild) {\n      switch (data.type) {\n        case ChannelType.GuildText: {\n          channel = new (getTextChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildVoice: {\n          channel = new (getVoiceChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildCategory: {\n          channel = new (getCategoryChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildAnnouncement: {\n          channel = new (getNewsChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.GuildStageVoice: {\n          channel = new (getStageChannel())(guild, data, client);\n          break;\n        }\n        case ChannelType.AnnouncementThread:\n        case ChannelType.PublicThread:\n        case ChannelType.PrivateThread: {\n          channel = new (getThreadChannel())(guild, data, client);\n          if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n          break;\n        }\n        case ChannelType.GuildDirectory:\n          channel = new (getDirectoryChannel())(guild, data, client);\n          break;\n        case ChannelType.GuildForum:\n          channel = new (getForumChannel())(guild, data, client);\n          break;\n        case ChannelType.GuildMedia:\n          channel = new (getMediaChannel())(guild, data, client);\n          break;\n      }\n      if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n    }\n  }\n  return channel;\n}\n\n/**\n * Transforms an API guild forum tag to camel-cased guild forum tag.\n * @param {APIGuildForumTag} tag The tag to transform\n * @returns {GuildForumTag}\n * @ignore\n */\nfunction transformAPIGuildForumTag(tag) {\n  return {\n    id: tag.id,\n    name: tag.name,\n    moderated: tag.moderated,\n    emoji:\n      (tag.emoji_id ?? tag.emoji_name)\n        ? {\n            id: tag.emoji_id,\n            name: tag.emoji_name,\n          }\n        : null,\n  };\n}\n\n/**\n * Transforms a camel-cased guild forum tag to an API guild forum tag.\n * @param {GuildForumTag} tag The tag to transform\n * @returns {APIGuildForumTag}\n * @ignore\n */\nfunction transformGuildForumTag(tag) {\n  return {\n    id: tag.id,\n    name: tag.name,\n    moderated: tag.moderated,\n    emoji_id: tag.emoji?.id ?? null,\n    emoji_name: tag.emoji?.name ?? null,\n  };\n}\n\n/**\n * Transforms an API guild forum default reaction object to a\n * camel-cased guild forum default reaction object.\n * @param {APIGuildForumDefaultReactionEmoji} defaultReaction The default reaction to transform\n * @returns {DefaultReactionEmoji}\n * @ignore\n */\nfunction transformAPIGuildDefaultReaction(defaultReaction) {\n  return {\n    id: defaultReaction.emoji_id,\n    name: defaultReaction.emoji_name,\n  };\n}\n\n/**\n * Transforms a camel-cased guild forum default reaction object to an\n * API guild forum default reaction object.\n * @param {DefaultReactionEmoji} defaultReaction The default reaction to transform\n * @returns {APIGuildForumDefaultReactionEmoji}\n * @ignore\n */\nfunction transformGuildDefaultReaction(defaultReaction) {\n  return {\n    emoji_id: defaultReaction.id,\n    emoji_name: defaultReaction.name,\n  };\n}\n\nmodule.exports = {\n  createChannel,\n  transformAPIGuildForumTag,\n  transformGuildForumTag,\n  transformAPIGuildDefaultReaction,\n  transformGuildDefaultReaction,\n};\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst { createChannel } = require('../../util/Channels');\n\nclass ChannelUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    let channel = client.channels.cache.get(data.id);\n\n    if (channel) {\n      const old = channel._update(data);\n\n      if (channel.type !== data.type) {\n        const newChannel = createChannel(this.client, data, channel.guild);\n\n        if (!newChannel) {\n          this.client.channels.cache.delete(channel.id);\n          return {};\n        }\n\n        if (channel.isTextBased() && newChannel.isTextBased()) {\n          for (const [id, message] of channel.messages.cache) newChannel.messages.cache.set(id, message);\n        }\n\n        channel = newChannel;\n        this.client.channels.cache.set(channel.id, channel);\n      }\n\n      return {\n        old,\n        updated: channel,\n      };\n    } else {\n      client.channels._add(data);\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = ChannelUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass EntitlementCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const entitlement = client.application.entitlements._add(data);\n\n    /**\n     * Emitted whenever an entitlement is created.\n     * @event Client#entitlementCreate\n     * @param {Entitlement} entitlement The entitlement that was created\n     */\n    client.emit(Events.EntitlementCreate, entitlement);\n\n    return {};\n  }\n}\n\nmodule.exports = EntitlementCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass EntitlementDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const entitlement = client.application.entitlements._add(data, false);\n\n    client.application.entitlements.cache.delete(entitlement.id);\n\n    /**\n     * Emitted whenever an entitlement is deleted.\n     * <warn>Entitlements are not deleted when they expire.\n     * This is only triggered when Discord issues a refund or deletes the entitlement manually.</warn>\n     * @event Client#entitlementDelete\n     * @param {Entitlement} entitlement The entitlement that was deleted\n     */\n    client.emit(Events.EntitlementDelete, entitlement);\n\n    return {};\n  }\n}\n\nmodule.exports = EntitlementDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass EntitlementUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const oldEntitlement = client.application.entitlements.cache.get(data.id)?._clone() ?? null;\n    const newEntitlement = client.application.entitlements._add(data);\n\n    /**\n     * Emitted whenever an entitlement is updated - i.e. when a user's subscription renews.\n     * @event Client#entitlementUpdate\n     * @param {?Entitlement} oldEntitlement The entitlement before the update\n     * @param {Entitlement} newEntitlement The entitlement after the update\n     */\n    client.emit(Events.EntitlementUpdate, oldEntitlement, newEntitlement);\n\n    return {};\n  }\n}\n\nmodule.exports = EntitlementUpdateAction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst { _transformAPIAutoModerationAction } = require('../util/Transformers');\n\n/**\n * Represents an auto moderation rule.\n * @extends {Base}\n */\nclass AutoModerationRule extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The id of this auto moderation rule.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The guild this auto moderation rule is for.\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The user that created this auto moderation rule.\n     * @type {Snowflake}\n     */\n    this.creatorId = data.creator_id;\n\n    /**\n     * The trigger type of this auto moderation rule.\n     * @type {AutoModerationRuleTriggerType}\n     */\n    this.triggerType = data.trigger_type;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('name' in data) {\n      /**\n       * The name of this auto moderation rule.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('event_type' in data) {\n      /**\n       * The event type of this auto moderation rule.\n       * @type {AutoModerationRuleEventType}\n       */\n      this.eventType = data.event_type;\n    }\n\n    if ('trigger_metadata' in data) {\n      /**\n       * Additional data used to determine whether an auto moderation rule should be triggered.\n       * @typedef {Object} AutoModerationTriggerMetadata\n       * @property {string[]} keywordFilter The substrings that will be searched for in the content\n       * @property {string[]} regexPatterns The regular expression patterns which will be matched against the content\n       * <info>Only Rust-flavored regular expressions are supported.</info>\n       * @property {AutoModerationRuleKeywordPresetType[]} presets\n       * The internally pre-defined wordsets which will be searched for in the content\n       * @property {string[]} allowList The substrings that will be exempt from triggering\n       * {@link AutoModerationRuleTriggerType.Keyword},\n       * {@link AutoModerationRuleTriggerType.KeywordPreset},\n       * and {@link AutoModerationRuleTriggerType.MemberProfile}\n       * @property {?number} mentionTotalLimit The total number of role & user mentions allowed per message\n       * @property {boolean} mentionRaidProtectionEnabled Whether mention raid protection is enabled\n       */\n\n      /**\n       * The trigger metadata of the rule.\n       * @type {AutoModerationTriggerMetadata}\n       */\n      this.triggerMetadata = {\n        keywordFilter: data.trigger_metadata.keyword_filter ?? [],\n        regexPatterns: data.trigger_metadata.regex_patterns ?? [],\n        presets: data.trigger_metadata.presets ?? [],\n        allowList: data.trigger_metadata.allow_list ?? [],\n        mentionTotalLimit: data.trigger_metadata.mention_total_limit ?? null,\n        mentionRaidProtectionEnabled: data.trigger_metadata.mention_raid_protection_enabled ?? false,\n      };\n    }\n\n    if ('actions' in data) {\n      /**\n       * An object containing information about an auto moderation rule action.\n       * @typedef {Object} AutoModerationAction\n       * @property {AutoModerationActionType} type The type of this auto moderation rule action\n       * @property {AutoModerationActionMetadata} metadata Additional metadata needed during execution\n       */\n\n      /**\n       * Additional data used when an auto moderation rule is executed.\n       * @typedef {Object} AutoModerationActionMetadata\n       * @property {?Snowflake} channelId The id of the channel to which content will be logged\n       * @property {?number} durationSeconds The timeout duration in seconds\n       * @property {?string} customMessage The custom message that is shown whenever a message is blocked\n       */\n\n      /**\n       * The actions of this auto moderation rule.\n       * @type {AutoModerationAction[]}\n       */\n      this.actions = data.actions.map(action => _transformAPIAutoModerationAction(action));\n    }\n\n    if ('enabled' in data) {\n      /**\n       * Whether this auto moderation rule is enabled.\n       * @type {boolean}\n       */\n      this.enabled = data.enabled;\n    }\n\n    if ('exempt_roles' in data) {\n      /**\n       * The roles exempt by this auto moderation rule.\n       * @type {Collection<Snowflake, Role>}\n       */\n      this.exemptRoles = new Collection(\n        data.exempt_roles.map(exemptRole => [exemptRole, this.guild.roles.cache.get(exemptRole)]),\n      );\n    }\n\n    if ('exempt_channels' in data) {\n      /**\n       * The channels exempt by this auto moderation rule.\n       * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}\n       */\n      this.exemptChannels = new Collection(\n        data.exempt_channels.map(exemptChannel => [exemptChannel, this.guild.channels.cache.get(exemptChannel)]),\n      );\n    }\n  }\n\n  /**\n   * Edits this auto moderation rule.\n   * @param {AutoModerationRuleEditOptions} options Options for editing this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  edit(options) {\n    return this.guild.autoModerationRules.edit(this.id, options);\n  }\n\n  /**\n   * Deletes this auto moderation rule.\n   * @param {string} [reason] The reason for deleting this auto moderation rule\n   * @returns {Promise<void>}\n   */\n  delete(reason) {\n    return this.guild.autoModerationRules.delete(this.id, reason);\n  }\n\n  /**\n   * Sets the name for this auto moderation rule.\n   * @param {string} name The name of this auto moderation rule\n   * @param {string} [reason] The reason for changing the name of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Sets the event type for this auto moderation rule.\n   * @param {AutoModerationRuleEventType} eventType The event type of this auto moderation rule\n   * @param {string} [reason] The reason for changing the event type of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setEventType(eventType, reason) {\n    return this.edit({ eventType, reason });\n  }\n\n  /**\n   * Sets the keyword filter for this auto moderation rule.\n   * @param {string[]} keywordFilter The keyword filter of this auto moderation rule\n   * @param {string} [reason] The reason for changing the keyword filter of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setKeywordFilter(keywordFilter, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, keywordFilter }, reason });\n  }\n\n  /**\n   * Sets the regular expression patterns for this auto moderation rule.\n   * @param {string[]} regexPatterns The regular expression patterns of this auto moderation rule\n   * <info>Only Rust-flavored regular expressions are supported.</info>\n   * @param {string} [reason] The reason for changing the regular expression patterns of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setRegexPatterns(regexPatterns, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, regexPatterns }, reason });\n  }\n\n  /**\n   * Sets the presets for this auto moderation rule.\n   * @param {AutoModerationRuleKeywordPresetType[]} presets The presets of this auto moderation rule\n   * @param {string} [reason] The reason for changing the presets of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setPresets(presets, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, presets }, reason });\n  }\n\n  /**\n   * Sets the allow list for this auto moderation rule.\n   * @param {string[]} allowList The substrings that will be exempt from triggering\n   * {@link AutoModerationRuleTriggerType.Keyword},\n   * {@link AutoModerationRuleTriggerType.KeywordPreset},\n   * and {@link AutoModerationRuleTriggerType.MemberProfile}\n   * @param {string} [reason] The reason for changing the allow list of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setAllowList(allowList, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, allowList }, reason });\n  }\n\n  /**\n   * Sets the mention total limit for this auto moderation rule.\n   * @param {number} mentionTotalLimit The total number of unique role and user mentions allowed per message\n   * @param {string} [reason] The reason for changing the mention total limit of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setMentionTotalLimit(mentionTotalLimit, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, mentionTotalLimit }, reason });\n  }\n\n  /**\n   * Sets whether to enable mention raid protection for this auto moderation rule.\n   * @param {boolean} mentionRaidProtectionEnabled\n   * Whether to enable mention raid protection for this auto moderation rule\n   * @param {string} [reason] The reason for changing the mention raid protection of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setMentionRaidProtectionEnabled(mentionRaidProtectionEnabled, reason) {\n    return this.edit({ triggerMetadata: { ...this.triggerMetadata, mentionRaidProtectionEnabled }, reason });\n  }\n\n  /**\n   * Sets the actions for this auto moderation rule.\n   * @param {AutoModerationActionOptions[]} actions The actions of this auto moderation rule\n   * @param {string} [reason] The reason for changing the actions of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setActions(actions, reason) {\n    return this.edit({ actions, reason });\n  }\n\n  /**\n   * Sets whether this auto moderation rule should be enabled.\n   * @param {boolean} [enabled=true] Whether to enable this auto moderation rule\n   * @param {string} [reason] The reason for enabling or disabling this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setEnabled(enabled = true, reason) {\n    return this.edit({ enabled, reason });\n  }\n\n  /**\n   * Sets the exempt roles for this auto moderation rule.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]\n   * The roles that should not be affected by the auto moderation rule\n   * @param {string} [reason] The reason for changing the exempt roles of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setExemptRoles(exemptRoles, reason) {\n    return this.edit({ exemptRoles, reason });\n  }\n\n  /**\n   * Sets the exempt channels for this auto moderation rule.\n   * @param {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]\n   * The channels that should not be affected by the auto moderation rule\n   * @param {string} [reason] The reason for changing the exempt channels of this auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  setExemptChannels(exemptChannels, reason) {\n    return this.edit({ exemptChannels, reason });\n  }\n}\n\nmodule.exports = AutoModerationRule;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst { Emoji } = require('./Emoji.js');\n\n/**\n * Represents the data of an option from a prompt of a guilds onboarding.\n * @extends {Base}\n */\nclass GuildOnboardingPromptOption extends Base {\n  constructor(client, data, guildId) {\n    super(client);\n\n    /**\n     * The id of the guild this onboarding prompt option is from\n     * @type {Snowflake}\n     */\n    this.guildId = guildId;\n\n    const guild = this.guild;\n\n    /**\n     * The id of the option\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The channels a member is added to when the option is selected\n     * @type {Collection<Snowflake, GuildChannel>}\n     */\n    this.channels = data.channel_ids.reduce(\n      (channels, channelId) => channels.set(channelId, guild.channels.cache.get(channelId)),\n      new Collection(),\n    );\n\n    /**\n     * The roles assigned to a member when the option is selected\n     * @type {Collection<Snowflake, Role>}\n     */\n    this.roles = data.role_ids.reduce(\n      (roles, roleId) => roles.set(roleId, guild.roles.cache.get(roleId)),\n      new Collection(),\n    );\n\n    /**\n     * The raw emoji of the option\n     * @type {APIPartialEmoji}\n     * @private\n     */\n    this._emoji = data.emoji;\n\n    /**\n     * The title of the option\n     * @type {string}\n     */\n    this.title = data.title;\n\n    /**\n     * The description of the option\n     * @type {?string}\n     */\n    this.description = data.description;\n  }\n\n  /**\n   * The guild this onboarding prompt option is from\n   * @type {Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId);\n  }\n\n  /**\n   * The emoji of this onboarding prompt option\n   * @type {?(GuildEmoji|Emoji)}\n   */\n  get emoji() {\n    if (!this._emoji.id && !this._emoji.name) return null;\n    return this.client.emojis.cache.get(this._emoji.id) ?? new Emoji(this.client, this._emoji);\n  }\n}\n\nexports.GuildOnboardingPromptOption = GuildOnboardingPromptOption;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst { GuildOnboardingPromptOption } = require('./GuildOnboardingPromptOption');\n\n/**\n * Represents the data of a prompt of a guilds onboarding.\n * @extends {Base}\n */\nclass GuildOnboardingPrompt extends Base {\n  constructor(client, data, guildId) {\n    super(client);\n\n    /**\n     * The id of the guild this onboarding prompt is from\n     * @type {Snowflake}\n     */\n    this.guildId = guildId;\n\n    /**\n     * The id of the prompt\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The options available within the prompt\n     * @type {Collection<Snowflake, GuildOnboardingPromptOption>}\n     */\n    this.options = data.options.reduce(\n      (options, option) => options.set(option.id, new GuildOnboardingPromptOption(client, option, guildId)),\n      new Collection(),\n    );\n\n    /**\n     * The title of the prompt\n     * @type {string}\n     */\n    this.title = data.title;\n\n    /**\n     * Whether users are limited to selecting one option for the prompt\n     * @type {boolean}\n     */\n    this.singleSelect = data.single_select;\n\n    /**\n     * Whether the prompt is required before a user completes the onboarding flow\n     * @type {boolean}\n     */\n    this.required = data.required;\n\n    /**\n     * Whether the prompt is present in the onboarding flow.\n     * If `false`, the prompt will only appear in the Channels & Roles tab\n     * @type {boolean}\n     */\n    this.inOnboarding = data.in_onboarding;\n\n    /**\n     * The type of the prompt\n     * @type {GuildOnboardingPromptType}\n     */\n    this.type = data.type;\n  }\n\n  /**\n   * The guild this onboarding prompt is from\n   * @type {Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId);\n  }\n}\n\nexports.GuildOnboardingPrompt = GuildOnboardingPrompt;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {Snowflake|string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n * The type of an {@link Integration}. This can be:\n * * `twitch`\n * * `youtube`\n * * `discord`\n * * `guild_subscription`\n * @typedef {string} IntegrationType\n */\n\n/**\n * Represents a guild integration.\n * @extends {Base}\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake|string}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type\n     * @type {IntegrationType}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {?boolean}\n     */\n    this.enabled = data.enabled ?? null;\n\n    if ('syncing' in data) {\n      /**\n       * Whether this integration is syncing\n       * @type {?boolean}\n       */\n      this.syncing = data.syncing;\n    } else {\n      this.syncing ??= null;\n    }\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {?Role}\n     */\n    this.role = this.guild.roles.resolve(data.role_id);\n\n    if ('enable_emoticons' in data) {\n      /**\n       * Whether emoticons should be synced for this integration (twitch only currently)\n       * @type {?boolean}\n       */\n      this.enableEmoticons = data.enable_emoticons;\n    } else {\n      this.enableEmoticons ??= null;\n    }\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user);\n    } else {\n      this.user ??= null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    if ('synced_at' in data) {\n      /**\n       * The timestamp at which this integration was last synced at\n       * @type {?number}\n       */\n      this.syncedTimestamp = Date.parse(data.synced_at);\n    } else {\n      this.syncedTimestamp ??= null;\n    }\n\n    if ('subscriber_count' in data) {\n      /**\n       * How many subscribers this integration has\n       * @type {?number}\n       */\n      this.subscriberCount = data.subscriber_count;\n    } else {\n      this.subscriberCount ??= null;\n    }\n\n    if ('revoked' in data) {\n      /**\n       * Whether this integration has been revoked\n       * @type {?boolean}\n       */\n      this.revoked = data.revoked;\n    } else {\n      this.revoked ??= null;\n    }\n\n    this._patch(data);\n  }\n\n  /**\n   * The date at which this integration was last synced at\n   * @type {?Date}\n   * @readonly\n   */\n  get syncedAt() {\n    return this.syncedTimestamp && new Date(this.syncedTimestamp);\n  }\n\n  /**\n   * All roles that are managed by this integration\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get roles() {\n    const roles = this.guild.roles.cache;\n    return roles.filter(role => role.tags?.integrationId === this.id);\n  }\n\n  _patch(data) {\n    if ('expire_behavior' in data) {\n      /**\n       * The behavior of expiring subscribers\n       * @type {?IntegrationExpireBehavior}\n       */\n      this.expireBehavior = data.expire_behavior;\n    } else {\n      this.expireBehavior ??= null;\n    }\n\n    if ('expire_grace_period' in data) {\n      /**\n       * The grace period (in days) before expiring subscribers\n       * @type {?number}\n       */\n      this.expireGracePeriod = data.expire_grace_period;\n    } else {\n      this.expireGracePeriod ??= null;\n    }\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else {\n      this.application ??= null;\n    }\n\n    if ('scopes' in data) {\n      /**\n       * The scopes this application has been authorized for\n       * @type {OAuth2Scopes[]}\n       */\n      this.scopes = data.scopes;\n    } else {\n      this.scopes ??= [];\n    }\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  async delete(reason) {\n    await this.client.rest.delete(Routes.guildIntegration(this.guild.id, this.id), { reason });\n    return this;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleId',\n      guild: 'guildId',\n      user: 'userId',\n    });\n  }\n}\n\nmodule.exports = Integration;\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\n\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('guild_id' in data) {\n      /**\n       * The id of the guild associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.guildId = data.guild_id;\n    }\n\n    if ('channel_id' in data) {\n      /**\n       * The id of the channel associated with the stage channel\n       * @type {Snowflake}\n       */\n      this.channelId = data.channel_id;\n    }\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage instance\n       * @type {string}\n       */\n      this.topic = data.topic;\n    }\n\n    if ('privacy_level' in data) {\n      /**\n       * The privacy level of the stage instance\n       * @type {StageInstancePrivacyLevel}\n       */\n      this.privacyLevel = data.privacy_level;\n    }\n\n    if ('discoverable_disabled' in data) {\n      /**\n       * Whether or not stage discovery is disabled\n       * @type {?boolean}\n       * @deprecated See https://github.com/discord/discord-api-docs/pull/4296 for more information\n       */\n      this.discoverableDisabled = data.discoverable_disabled;\n    } else {\n      this.discoverableDisabled ??= null;\n    }\n\n    if ('guild_scheduled_event_id' in data) {\n      /**\n       * The associated guild scheduled event id of this stage instance\n       * @type {?Snowflake}\n       */\n      this.guildScheduledEventId = data.guild_scheduled_event_id;\n    } else {\n      this.guildScheduledEventId ??= null;\n    }\n  }\n\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The associated guild scheduled event of this stage instance\n   * @type {?GuildScheduledEvent}\n   * @readonly\n   */\n  get guildScheduledEvent() {\n    return this.guild?.scheduledEvents.resolve(this.guildScheduledEventId) ?? null;\n  }\n\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n    const clone = this._clone();\n    return clone;\n  }\n\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, { topic });\n  }\n\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\n\nexports.StageInstance = StageInstance;\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { AuditLogOptionsType, AuditLogEvent } = require('discord-api-types/v10');\nconst AutoModerationRule = require('./AutoModerationRule');\nconst { GuildOnboardingPrompt } = require('./GuildOnboardingPrompt');\nconst { GuildScheduledEvent } = require('./GuildScheduledEvent');\nconst Integration = require('./Integration');\nconst Invite = require('./Invite');\nconst { StageInstance } = require('./StageInstance');\nconst { Sticker } = require('./Sticker');\nconst Webhook = require('./Webhook');\nconst Partials = require('../util/Partials');\nconst { flatten } = require('../util/Util');\n\nconst Targets = {\n  All: 'All',\n  Guild: 'Guild',\n  GuildScheduledEvent: 'GuildScheduledEvent',\n  Channel: 'Channel',\n  User: 'User',\n  Role: 'Role',\n  Invite: 'Invite',\n  Webhook: 'Webhook',\n  Emoji: 'Emoji',\n  Message: 'Message',\n  Integration: 'Integration',\n  StageInstance: 'StageInstance',\n  Sticker: 'Sticker',\n  Thread: 'Thread',\n  ApplicationCommand: 'ApplicationCommand',\n  AutoModeration: 'AutoModeration',\n  GuildOnboarding: 'GuildOnboarding',\n  GuildOnboardingPrompt: 'GuildOnboardingPrompt',\n  Unknown: 'Unknown',\n};\n\n/**\n * The target of a guild audit log entry. It can be one of:\n * * A guild\n * * A channel\n * * A user\n * * A role\n * * An invite\n * * A webhook\n * * An emoji\n * * A message\n * * An integration\n * * A stage instance\n * * A sticker\n * * A guild scheduled event\n * * A thread\n * * An application command\n * * An auto moderation rule\n * * A guild onboarding prompt\n * * An object with an id key if target was deleted or fake entity\n * * An object where the keys represent either the new value or the old value\n * @typedef {?(Object|Guild|BaseChannel|User|Role|Invite|Webhook|GuildEmoji|Message|Integration|StageInstance|Sticker|\n * GuildScheduledEvent|ApplicationCommand|AutoModerationRule|GuildOnboardingPrompt)} AuditLogEntryTarget\n */\n\n/**\n * The action type of an entry, e.g. `Create`. Here are the available types:\n * * Create\n * * Delete\n * * Update\n * * All\n * @typedef {string} AuditLogActionType\n */\n\n/**\n * The target type of an entry. Here are the available types:\n * * Guild\n * * Channel\n * * User\n * * Role\n * * Invite\n * * Webhook\n * * Emoji\n * * Message\n * * Integration\n * * StageInstance\n * * Sticker\n * * Thread\n * * GuildScheduledEvent\n * * ApplicationCommandPermission\n * * GuildOnboarding\n * * GuildOnboardingPrompt\n * * Unknown\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Constructs an object of known properties for a structure from an array of changes.\n * @param {AuditLogChange[]} changes The array of changes\n * @param {Object} [initialData={}] The initial data passed to the function\n * @returns {Object}\n * @ignore\n */\nfunction changesReduce(changes, initialData = {}) {\n  return changes.reduce((accumulator, change) => {\n    accumulator[change.key] = change.new ?? change.old;\n    return accumulator;\n  }, initialData);\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  /**\n   * Key mirror of all available audit log targets.\n   * @type {Object<string, string>}\n   * @memberof GuildAuditLogsEntry\n   */\n  static Targets = Targets;\n\n  constructor(guild, data, logs) {\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = GuildAuditLogsEntry.targetType(data.action_type);\n    const targetType = this.targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogsEntry.actionType(data.action_type);\n\n    /**\n     * The type of action that occurred.\n     * @type {AuditLogEvent}\n     */\n    this.action = data.action_type;\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason ?? null;\n\n    /**\n     * The id of the user that executed this entry\n     * @type {?Snowflake}\n     */\n    this.executorId = data.user_id;\n\n    /**\n     * The user that executed this entry\n     * @type {?User}\n     */\n    this.executor = data.user_id\n      ? guild.client.options.partials.includes(Partials.User)\n        ? guild.client.users._add({ id: data.user_id })\n        : (guild.client.users.cache.get(data.user_id) ?? null)\n      : null;\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {Object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * <warn>For application command permissions updates the key is the id of the user, channel,\n     * role, or a permission constant that was updated instead of an actual property name</warn>\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {AuditLogChange[]}\n     */\n    this.changes =\n      data.changes?.map(change => ({\n        key: change.key,\n        ...('old_value' in change ? { old: change.old_value } : {}),\n        ...('new_value' in change ? { new: change.new_value } : {}),\n      })) ?? [];\n\n    /**\n     * The entry's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?(Object|Role|GuildMember)}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case AuditLogEvent.MemberPrune:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days),\n        };\n        break;\n\n      case AuditLogEvent.MemberMove:\n      case AuditLogEvent.MessageDelete:\n      case AuditLogEvent.MessageBulkDelete:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },\n          count: Number(data.options.count),\n        };\n        break;\n\n      case AuditLogEvent.MessagePin:\n      case AuditLogEvent.MessageUnpin:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },\n          messageId: data.options.message_id,\n        };\n        break;\n\n      case AuditLogEvent.MemberDisconnect:\n        this.extra = {\n          count: Number(data.options.count),\n        };\n        break;\n\n      case AuditLogEvent.ChannelOverwriteCreate:\n      case AuditLogEvent.ChannelOverwriteUpdate:\n      case AuditLogEvent.ChannelOverwriteDelete:\n        switch (data.options.type) {\n          case AuditLogOptionsType.Role:\n            this.extra = guild.roles.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: AuditLogOptionsType.Role,\n            };\n            break;\n\n          case AuditLogOptionsType.Member:\n            this.extra = guild.members.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              type: AuditLogOptionsType.Member,\n            };\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      case AuditLogEvent.StageInstanceCreate:\n      case AuditLogEvent.StageInstanceDelete:\n      case AuditLogEvent.StageInstanceUpdate:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? { id: data.options?.channel_id },\n        };\n        break;\n\n      case AuditLogEvent.ApplicationCommandPermissionUpdate:\n        this.extra = {\n          applicationId: data.options.application_id,\n        };\n        break;\n\n      case AuditLogEvent.AutoModerationBlockMessage:\n      case AuditLogEvent.AutoModerationFlagToChannel:\n      case AuditLogEvent.AutoModerationUserCommunicationDisabled:\n        this.extra = {\n          autoModerationRuleName: data.options.auto_moderation_rule_name,\n          autoModerationRuleTriggerType: data.options.auto_moderation_rule_trigger_type,\n          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? { id: data.options?.channel_id },\n        };\n        break;\n\n      case AuditLogEvent.MemberKick:\n      case AuditLogEvent.MemberRoleUpdate: {\n        if (data.integration_type) {\n          this.extra = {\n            integrationType: data.integration_type,\n          };\n        }\n        break;\n      }\n\n      default:\n        break;\n    }\n\n    /**\n     * The id of the target of this entry\n     * @type {?Snowflake}\n     */\n    this.targetId = data.target_id;\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.Unknown) {\n      this.target = changesReduce(this.changes);\n      this.target.id = data.target_id;\n      // MemberDisconnect and similar types do not provide a target_id.\n    } else if (targetType === Targets.User && data.target_id) {\n      this.target = guild.client.options.partials.includes(Partials.User)\n        ? guild.client.users._add({ id: data.target_id })\n        : (guild.client.users.cache.get(data.target_id) ?? null);\n    } else if (targetType === Targets.Guild) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.Webhook) {\n      this.target =\n        logs?.webhooks.get(data.target_id) ??\n        new Webhook(\n          guild.client,\n          changesReduce(this.changes, {\n            id: data.target_id,\n            guild_id: guild.id,\n          }),\n        );\n    } else if (targetType === Targets.Invite) {\n      const inviteChange = this.changes.find(({ key }) => key === 'code');\n\n      this.target =\n        guild.invites.cache.get(inviteChange.new ?? inviteChange.old) ??\n        new Invite(guild.client, changesReduce(this.changes, { guild }));\n    } else if (targetType === Targets.Message) {\n      // Discord sends a channel id for the MessageBulkDelete action type.\n      this.target =\n        data.action_type === AuditLogEvent.MessageBulkDelete\n          ? (guild.channels.cache.get(data.target_id) ?? { id: data.target_id })\n          : (guild.client.users.cache.get(data.target_id) ?? null);\n    } else if (targetType === Targets.Integration) {\n      this.target =\n        logs?.integrations.get(data.target_id) ??\n        new Integration(guild.client, changesReduce(this.changes, { id: data.target_id }), guild);\n    } else if (targetType === Targets.Channel || targetType === Targets.Thread) {\n      this.target = guild.channels.cache.get(data.target_id) ?? changesReduce(this.changes, { id: data.target_id });\n    } else if (targetType === Targets.StageInstance) {\n      this.target =\n        guild.stageInstances.cache.get(data.target_id) ??\n        new StageInstance(\n          guild.client,\n          changesReduce(this.changes, {\n            id: data.target_id,\n            channel_id: data.options?.channel_id,\n            guild_id: guild.id,\n          }),\n        );\n    } else if (targetType === Targets.Sticker) {\n      this.target =\n        guild.stickers.cache.get(data.target_id) ??\n        new Sticker(guild.client, changesReduce(this.changes, { id: data.target_id }));\n    } else if (targetType === Targets.GuildScheduledEvent) {\n      this.target =\n        guild.scheduledEvents.cache.get(data.target_id) ??\n        new GuildScheduledEvent(guild.client, changesReduce(this.changes, { id: data.target_id, guild_id: guild.id }));\n    } else if (targetType === Targets.ApplicationCommand) {\n      this.target = logs?.applicationCommands.get(data.target_id) ?? { id: data.target_id };\n    } else if (targetType === Targets.AutoModeration) {\n      this.target =\n        guild.autoModerationRules.cache.get(data.target_id) ??\n        new AutoModerationRule(\n          guild.client,\n          changesReduce(this.changes, { id: data.target_id, guild_id: guild.id }),\n          guild,\n        );\n    } else if (targetType === Targets.GuildOnboardingPrompt) {\n      this.target =\n        data.action_type === AuditLogEvent.OnboardingPromptCreate\n          ? new GuildOnboardingPrompt(guild.client, changesReduce(this.changes, { id: data.target_id }), guild.id)\n          : changesReduce(this.changes, { id: data.target_id });\n    } else if (targetType === Targets.GuildOnboarding) {\n      this.target = changesReduce(this.changes, { id: data.target_id });\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`]?.cache.get(data.target_id) ?? { id: data.target_id };\n    }\n  }\n\n  /**\n   * Finds the target type of a guild audit log entry.\n   * @param {AuditLogEvent} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.Guild;\n    if (target < 20) return Targets.Channel;\n    if (target < 30) return Targets.User;\n    if (target < 40) return Targets.Role;\n    if (target < 50) return Targets.Invite;\n    if (target < 60) return Targets.Webhook;\n    if (target < 70) return Targets.Emoji;\n    if (target < 80) return Targets.Message;\n    if (target < 83) return Targets.Integration;\n    if (target < 86) return Targets.StageInstance;\n    if (target < 100) return Targets.Sticker;\n    if (target < 110) return Targets.GuildScheduledEvent;\n    if (target < 120) return Targets.Thread;\n    if (target < 130) return Targets.ApplicationCommand;\n    if (target >= 140 && target < 150) return Targets.AutoModeration;\n    if (target >= 163 && target <= 165) return Targets.GuildOnboardingPrompt;\n    if (target >= 160 && target < 170) return Targets.GuildOnboarding;\n    return Targets.Unknown;\n  }\n\n  /**\n   * Finds the action type from the guild audit log entry action.\n   * @param {AuditLogEvent} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if (\n      [\n        AuditLogEvent.ChannelCreate,\n        AuditLogEvent.ChannelOverwriteCreate,\n        AuditLogEvent.MemberBanRemove,\n        AuditLogEvent.BotAdd,\n        AuditLogEvent.RoleCreate,\n        AuditLogEvent.InviteCreate,\n        AuditLogEvent.WebhookCreate,\n        AuditLogEvent.EmojiCreate,\n        AuditLogEvent.MessagePin,\n        AuditLogEvent.IntegrationCreate,\n        AuditLogEvent.StageInstanceCreate,\n        AuditLogEvent.StickerCreate,\n        AuditLogEvent.GuildScheduledEventCreate,\n        AuditLogEvent.ThreadCreate,\n        AuditLogEvent.AutoModerationRuleCreate,\n        AuditLogEvent.AutoModerationBlockMessage,\n        AuditLogEvent.OnboardingPromptCreate,\n        AuditLogEvent.OnboardingCreate,\n      ].includes(action)\n    ) {\n      return 'Create';\n    }\n\n    if (\n      [\n        AuditLogEvent.ChannelDelete,\n        AuditLogEvent.ChannelOverwriteDelete,\n        AuditLogEvent.MemberKick,\n        AuditLogEvent.MemberPrune,\n        AuditLogEvent.MemberBanAdd,\n        AuditLogEvent.MemberDisconnect,\n        AuditLogEvent.RoleDelete,\n        AuditLogEvent.InviteDelete,\n        AuditLogEvent.WebhookDelete,\n        AuditLogEvent.EmojiDelete,\n        AuditLogEvent.MessageDelete,\n        AuditLogEvent.MessageBulkDelete,\n        AuditLogEvent.MessageUnpin,\n        AuditLogEvent.IntegrationDelete,\n        AuditLogEvent.StageInstanceDelete,\n        AuditLogEvent.StickerDelete,\n        AuditLogEvent.GuildScheduledEventDelete,\n        AuditLogEvent.ThreadDelete,\n        AuditLogEvent.AutoModerationRuleDelete,\n        AuditLogEvent.OnboardingPromptDelete,\n      ].includes(action)\n    ) {\n      return 'Delete';\n    }\n\n    if (\n      [\n        AuditLogEvent.GuildUpdate,\n        AuditLogEvent.ChannelUpdate,\n        AuditLogEvent.ChannelOverwriteUpdate,\n        AuditLogEvent.MemberUpdate,\n        AuditLogEvent.MemberRoleUpdate,\n        AuditLogEvent.MemberMove,\n        AuditLogEvent.RoleUpdate,\n        AuditLogEvent.InviteUpdate,\n        AuditLogEvent.WebhookUpdate,\n        AuditLogEvent.EmojiUpdate,\n        AuditLogEvent.IntegrationUpdate,\n        AuditLogEvent.StageInstanceUpdate,\n        AuditLogEvent.StickerUpdate,\n        AuditLogEvent.GuildScheduledEventUpdate,\n        AuditLogEvent.ThreadUpdate,\n        AuditLogEvent.ApplicationCommandPermissionUpdate,\n        AuditLogEvent.AutoModerationRuleUpdate,\n        AuditLogEvent.OnboardingPromptUpdate,\n        AuditLogEvent.OnboardingUpdate,\n      ].includes(action)\n    ) {\n      return 'Update';\n    }\n\n    return 'All';\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return flatten(this, { createdTimestamp: true });\n  }\n}\n\nmodule.exports = GuildAuditLogsEntry;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst GuildAuditLogsEntry = require('../../structures/GuildAuditLogsEntry');\nconst Events = require('../../util/Events');\n\nclass GuildAuditLogEntryCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let auditLogEntry;\n\n    if (guild) {\n      auditLogEntry = new GuildAuditLogsEntry(guild, data);\n\n      /**\n       * Emitted whenever a guild audit log entry is created.\n       * @event Client#guildAuditLogEntryCreate\n       * @param {GuildAuditLogsEntry} auditLogEntry The entry that was created\n       * @param {Guild} guild The guild where the entry was created\n       */\n      client.emit(Events.GuildAuditLogEntryCreate, auditLogEntry, guild);\n    }\n\n    return { auditLogEntry };\n  }\n}\n\nmodule.exports = GuildAuditLogEntryCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildBanAdd extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    /**\n     * Emitted whenever a member is banned from a guild.\n     * @event Client#guildBanAdd\n     * @param {GuildBan} ban The ban that occurred\n     */\n    if (guild) client.emit(Events.GuildBanAdd, guild.bans._add(data));\n  }\n}\n\nmodule.exports = GuildBanAdd;\n",
    "'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a ban in a guild on Discord.\n * @extends {Base}\n */\nclass GuildBan extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild in which the ban is\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user this ban applies to\n       * @type {User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('reason' in data) {\n      /**\n       * The reason for the ban\n       * @type {?string}\n       */\n      this.reason = data.reason;\n    }\n  }\n\n  /**\n   * Whether this GuildBan is partial. If the reason is not provided the value is null\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !('reason' in this);\n  }\n\n  /**\n   * Fetches this GuildBan.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildBan>}\n   */\n  fetch(force = true) {\n    return this.guild.bans.fetch({ user: this.user, cache: true, force });\n  }\n}\n\nmodule.exports = GuildBan;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst GuildBan = require('../../structures/GuildBan');\nconst Events = require('../../util/Events');\n\nclass GuildBanRemove extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    /**\n     * Emitted whenever a member is unbanned from a guild.\n     * @event Client#guildBanRemove\n     * @param {GuildBan} ban The ban that was removed\n     */\n    if (guild) {\n      const ban = guild.bans.cache.get(data.user.id) ?? new GuildBan(client, data, guild);\n      guild.bans.cache.delete(ban.user.id);\n      client.emit(Events.GuildBanRemove, ban);\n    }\n  }\n}\n\nmodule.exports = GuildBanRemove;\n",
    "'use strict';\n\nconst Action = require('./Action');\n\nclass GuildChannelsPositionUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      for (const partialChannel of data.channels) {\n        const channel = guild.channels.cache.get(partialChannel.id);\n        if (channel) channel.rawPosition = partialChannel.position;\n      }\n    }\n\n    return { guild };\n  }\n}\n\nmodule.exports = GuildChannelsPositionUpdate;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n        client.emit(Events.GuildUnavailable, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return;\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels._remove(channel.id);\n      client.voice.adapters.get(data.id)?.destroy();\n\n      // Delete guild\n      client.guilds.cache.delete(guild.id);\n\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n      client.emit(Events.GuildDelete, guild);\n    }\n  }\n}\n\nmodule.exports = GuildDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildEmojiCreateAction extends Action {\n  handle(guild, createdEmoji) {\n    const already = guild.emojis.cache.has(createdEmoji.id);\n    const emoji = guild.emojis._add(createdEmoji);\n    /**\n     * Emitted whenever a custom emoji is created in a guild.\n     * @event Client#emojiCreate\n     * @param {GuildEmoji} emoji The emoji that was created\n     */\n    if (!already) this.client.emit(Events.GuildEmojiCreate, emoji);\n    return { emoji };\n  }\n}\n\nmodule.exports = GuildEmojiCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildEmojiDeleteAction extends Action {\n  handle(emoji) {\n    emoji.guild.emojis.cache.delete(emoji.id);\n    /**\n     * Emitted whenever a custom emoji is deleted in a guild.\n     * @event Client#emojiDelete\n     * @param {GuildEmoji} emoji The emoji that was deleted\n     */\n    this.client.emit(Events.GuildEmojiDelete, emoji);\n    return { emoji };\n  }\n}\n\nmodule.exports = GuildEmojiDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildEmojiUpdateAction extends Action {\n  handle(current, data) {\n    const old = current._update(data);\n    /**\n     * Emitted whenever a custom emoji is updated in a guild.\n     * @event Client#emojiUpdate\n     * @param {GuildEmoji} oldEmoji The old emoji\n     * @param {GuildEmoji} newEmoji The new emoji\n     */\n    this.client.emit(Events.GuildEmojiUpdate, old, current);\n    return { emoji: current };\n  }\n}\n\nmodule.exports = GuildEmojiUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\n\nclass GuildEmojisUpdateAction extends Action {\n  handle(data) {\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild?.emojis) return;\n\n    const deletions = new Map(guild.emojis.cache);\n\n    for (const emoji of data.emojis) {\n      // Determine type of emoji event\n      const cachedEmoji = guild.emojis.cache.get(emoji.id);\n      if (cachedEmoji) {\n        deletions.delete(emoji.id);\n        if (!cachedEmoji.equals(emoji)) {\n          // Emoji updated\n          this.client.actions.GuildEmojiUpdate.handle(cachedEmoji, emoji);\n        }\n      } else {\n        // Emoji added\n        this.client.actions.GuildEmojiCreate.handle(guild, emoji);\n      }\n    }\n\n    for (const emoji of deletions.values()) {\n      // Emoji deleted\n      this.client.actions.GuildEmojiDelete.handle(emoji);\n    }\n  }\n}\n\nmodule.exports = GuildEmojisUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildIntegrationsUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    /**\n     * Emitted whenever a guild integration is updated\n     * @event Client#guildIntegrationsUpdate\n     * @param {Guild} guild The guild whose integrations were updated\n     */\n    if (guild) client.emit(Events.GuildIntegrationsUpdate, guild);\n  }\n}\n\nmodule.exports = GuildIntegrationsUpdate;\n",
    "'use strict';\n\nconst { createEnum } = require('./Enums');\n\n/**\n * @typedef {Object} Status\n * @property {number} Ready\n * @property {number} Connecting\n * @property {number} Reconnecting\n * @property {number} Idle\n * @property {number} Nearly\n * @property {number} Disconnected\n * @property {number} WaitingForGuilds\n * @property {number} Identifying\n * @property {number} Resuming\n */\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {Status}\n * @ignore\n */\nmodule.exports = createEnum([\n  'Ready',\n  'Connecting',\n  'Reconnecting',\n  'Idle',\n  'Nearly',\n  'Disconnected',\n  'WaitingForGuilds',\n  'Identifying',\n  'Resuming',\n]);\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Status = require('../../util/Status');\n\nclass GuildMemberRemoveAction extends Action {\n  handle(data, shard) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let member = null;\n    if (guild) {\n      member = this.getMember({ user: data.user }, guild);\n      guild.memberCount--;\n      if (member) {\n        guild.members.cache.delete(member.id);\n        /**\n         * Emitted whenever a member leaves a guild, or is kicked.\n         * @event Client#guildMemberRemove\n         * @param {GuildMember} member The member that has left/been kicked from the guild\n         */\n        if (shard.status === Status.Ready) client.emit(Events.GuildMemberRemove, member);\n      }\n      guild.presences.cache.delete(data.user.id);\n      guild.voiceStates.cache.delete(data.user.id);\n    }\n    return { guild, member };\n  }\n}\n\nmodule.exports = GuildMemberRemoveAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Status = require('../../util/Status');\n\nclass GuildMemberUpdateAction extends Action {\n  handle(data, shard) {\n    const { client } = this;\n    if (data.user.username) {\n      const user = client.users.cache.get(data.user.id);\n      if (!user) {\n        client.users._add(data.user);\n      } else if (!user._equals(data.user)) {\n        client.actions.UserUpdate.handle(data.user);\n      }\n    }\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const member = this.getMember({ user: data.user }, guild);\n      if (member) {\n        const old = member._update(data);\n        /**\n         * Emitted whenever a guild member changes - i.e. new role, removed role, nickname.\n         * @event Client#guildMemberUpdate\n         * @param {GuildMember} oldMember The member before the update\n         * @param {GuildMember} newMember The member after the update\n         */\n        if (shard.status === Status.Ready && !member.equals(old)) client.emit(Events.GuildMemberUpdate, old, member);\n      } else {\n        const newMember = guild.members._add(data);\n        /**\n         * Emitted whenever a member becomes available.\n         * @event Client#guildMemberAvailable\n         * @param {GuildMember} member The member that became available\n         */\n        this.client.emit(Events.GuildMemberAvailable, newMember);\n      }\n    }\n  }\n}\n\nmodule.exports = GuildMemberUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildRoleCreate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let role;\n    if (guild) {\n      const already = guild.roles.cache.has(data.role.id);\n      role = guild.roles._add(data.role);\n      /**\n       * Emitted whenever a role is created.\n       * @event Client#roleCreate\n       * @param {Role} role The role that was created\n       */\n      if (!already) client.emit(Events.GuildRoleCreate, role);\n    }\n    return { role };\n  }\n}\n\nmodule.exports = GuildRoleCreate;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildRoleDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    let role;\n\n    if (guild) {\n      role = guild.roles.cache.get(data.role_id);\n      if (role) {\n        guild.roles.cache.delete(data.role_id);\n        /**\n         * Emitted whenever a guild role is deleted.\n         * @event Client#roleDelete\n         * @param {Role} role The role that was deleted\n         */\n        client.emit(Events.GuildRoleDelete, role);\n      }\n    }\n\n    return { role };\n  }\n}\n\nmodule.exports = GuildRoleDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildRoleUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      let old = null;\n\n      const role = guild.roles.cache.get(data.role.id);\n      if (role) {\n        old = role._update(data.role);\n        /**\n         * Emitted whenever a guild role is updated.\n         * @event Client#roleUpdate\n         * @param {Role} oldRole The role before the update\n         * @param {Role} newRole The role after the update\n         */\n        client.emit(Events.GuildRoleUpdate, old, role);\n      }\n\n      return {\n        old,\n        updated: role,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = GuildRoleUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\n\nclass GuildRolesPositionUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      for (const partialRole of data.roles) {\n        const role = guild.roles.cache.get(partialRole.id);\n        if (role) role.rawPosition = partialRole.position;\n      }\n    }\n\n    return { guild };\n  }\n}\n\nmodule.exports = GuildRolesPositionUpdate;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildScheduledEventCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      const guildScheduledEvent = guild.scheduledEvents._add(data);\n\n      /**\n       * Emitted whenever a guild scheduled event is created.\n       * @event Client#guildScheduledEventCreate\n       * @param {GuildScheduledEvent} guildScheduledEvent The created guild scheduled event\n       */\n      client.emit(Events.GuildScheduledEventCreate, guildScheduledEvent);\n\n      return { guildScheduledEvent };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = GuildScheduledEventCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildScheduledEventDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const guildScheduledEvent = this.getScheduledEvent(data, guild);\n      if (guildScheduledEvent) {\n        guild.scheduledEvents.cache.delete(guildScheduledEvent.id);\n\n        /**\n         * Emitted whenever a guild scheduled event is deleted.\n         * @event Client#guildScheduledEventDelete\n         * @param {GuildScheduledEvent} guildScheduledEvent The deleted guild scheduled event\n         */\n        client.emit(Events.GuildScheduledEventDelete, guildScheduledEvent);\n\n        return { guildScheduledEvent };\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = GuildScheduledEventDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildScheduledEventUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const oldGuildScheduledEvent = guild.scheduledEvents.cache.get(data.id)?._clone() ?? null;\n      const newGuildScheduledEvent = guild.scheduledEvents._add(data);\n\n      /**\n       * Emitted whenever a guild scheduled event gets updated.\n       * @event Client#guildScheduledEventUpdate\n       * @param {?GuildScheduledEvent} oldGuildScheduledEvent The guild scheduled event object before the update\n       * @param {GuildScheduledEvent} newGuildScheduledEvent The guild scheduled event object after the update\n       */\n      client.emit(Events.GuildScheduledEventUpdate, oldGuildScheduledEvent, newGuildScheduledEvent);\n\n      return { oldGuildScheduledEvent, newGuildScheduledEvent };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = GuildScheduledEventUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildScheduledEventUserAddAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const guildScheduledEvent = this.getScheduledEvent(data, guild);\n      const user = this.getUser(data);\n\n      if (guildScheduledEvent && user) {\n        /**\n         * Emitted whenever a user subscribes to a guild scheduled event\n         * @event Client#guildScheduledEventUserAdd\n         * @param {GuildScheduledEvent} guildScheduledEvent The guild scheduled event\n         * @param {User} user The user who subscribed\n         */\n        client.emit(Events.GuildScheduledEventUserAdd, guildScheduledEvent, user);\n\n        return { guildScheduledEvent, user };\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = GuildScheduledEventUserAddAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildScheduledEventUserRemoveAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      const guildScheduledEvent = this.getScheduledEvent(data, guild);\n      const user = this.getUser(data);\n\n      if (guildScheduledEvent && user) {\n        /**\n         * Emitted whenever a user unsubscribes from a guild scheduled event\n         * @event Client#guildScheduledEventUserRemove\n         * @param {GuildScheduledEvent} guildScheduledEvent The guild scheduled event\n         * @param {User} user The user who unsubscribed\n         */\n        client.emit(Events.GuildScheduledEventUserRemove, guildScheduledEvent, user);\n\n        return { guildScheduledEvent, user };\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = GuildScheduledEventUserRemoveAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildStickerCreateAction extends Action {\n  handle(guild, createdSticker) {\n    const already = guild.stickers.cache.has(createdSticker.id);\n    const sticker = guild.stickers._add(createdSticker);\n    /**\n     * Emitted whenever a custom sticker is created in a guild.\n     * @event Client#stickerCreate\n     * @param {Sticker} sticker The sticker that was created\n     */\n    if (!already) this.client.emit(Events.GuildStickerCreate, sticker);\n    return { sticker };\n  }\n}\n\nmodule.exports = GuildStickerCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildStickerDeleteAction extends Action {\n  handle(sticker) {\n    sticker.guild.stickers.cache.delete(sticker.id);\n    /**\n     * Emitted whenever a custom sticker is deleted in a guild.\n     * @event Client#stickerDelete\n     * @param {Sticker} sticker The sticker that was deleted\n     */\n    this.client.emit(Events.GuildStickerDelete, sticker);\n    return { sticker };\n  }\n}\n\nmodule.exports = GuildStickerDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildStickerUpdateAction extends Action {\n  handle(current, data) {\n    const old = current._update(data);\n    /**\n     * Emitted whenever a custom sticker is updated in a guild.\n     * @event Client#stickerUpdate\n     * @param {Sticker} oldSticker The old sticker\n     * @param {Sticker} newSticker The new sticker\n     */\n    this.client.emit(Events.GuildStickerUpdate, old, current);\n    return { sticker: current };\n  }\n}\n\nmodule.exports = GuildStickerUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\n\nclass GuildStickersUpdateAction extends Action {\n  handle(data) {\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild?.stickers) return;\n\n    const deletions = new Map(guild.stickers.cache);\n\n    for (const sticker of data.stickers) {\n      // Determine type of sticker event\n      const cachedSticker = guild.stickers.cache.get(sticker.id);\n      if (cachedSticker) {\n        deletions.delete(sticker.id);\n        if (!cachedSticker.equals(sticker)) {\n          // Sticker updated\n          this.client.actions.GuildStickerUpdate.handle(cachedSticker, sticker);\n        }\n      } else {\n        // Sticker added\n        this.client.actions.GuildStickerCreate.handle(guild, sticker);\n      }\n    }\n\n    for (const sticker of deletions.values()) {\n      // Sticker deleted\n      this.client.actions.GuildStickerDelete.handle(sticker);\n    }\n  }\n}\n\nmodule.exports = GuildStickersUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass GuildUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      const old = guild._update(data);\n      /**\n       * Emitted whenever a guild is updated - e.g. name change.\n       * @event Client#guildUpdate\n       * @param {Guild} oldGuild The guild before the update\n       * @param {Guild} newGuild The guild after the update\n       */\n      client.emit(Events.GuildUpdate, old, guild);\n      return {\n        old,\n        updated: guild,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = GuildUpdateAction;\n",
    "'use strict';\n\nconst { ApplicationCommandOptionType } = require('discord-api-types/v10');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * A resolver for command interaction options.\n */\nclass CommandInteractionOptionResolver {\n  constructor(client, options, resolved) {\n    /**\n     * The client that instantiated this.\n     * @name CommandInteractionOptionResolver#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The name of the subcommand group.\n     * @type {?string}\n     * @private\n     */\n    this._group = null;\n\n    /**\n     * The name of the subcommand.\n     * @type {?string}\n     * @private\n     */\n    this._subcommand = null;\n\n    /**\n     * The bottom-level options for the interaction.\n     * If there is a subcommand (or subcommand and group), this is the options for the subcommand.\n     * @type {CommandInteractionOption[]}\n     * @private\n     */\n    this._hoistedOptions = options;\n\n    // Hoist subcommand group if present\n    if (this._hoistedOptions[0]?.type === ApplicationCommandOptionType.SubcommandGroup) {\n      this._group = this._hoistedOptions[0].name;\n      this._hoistedOptions = this._hoistedOptions[0].options ?? [];\n    }\n    // Hoist subcommand if present\n    if (this._hoistedOptions[0]?.type === ApplicationCommandOptionType.Subcommand) {\n      this._subcommand = this._hoistedOptions[0].name;\n      this._hoistedOptions = this._hoistedOptions[0].options ?? [];\n    }\n\n    /**\n     * The interaction options array.\n     * @name CommandInteractionOptionResolver#data\n     * @type {ReadonlyArray<CommandInteractionOption>}\n     * @readonly\n     */\n    Object.defineProperty(this, 'data', { value: Object.freeze([...options]) });\n\n    /**\n     * The interaction resolved data\n     * @name CommandInteractionOptionResolver#resolved\n     * @type {?Readonly<CommandInteractionResolvedData>}\n     */\n    Object.defineProperty(this, 'resolved', { value: resolved ? Object.freeze(resolved) : null });\n  }\n\n  /**\n   * Gets an option by its name.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?CommandInteractionOption} The option, if found.\n   */\n  get(name, required = false) {\n    const option = this._hoistedOptions.find(opt => opt.name === name);\n    if (!option) {\n      if (required) {\n        throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionNotFound, name);\n      }\n      return null;\n    }\n    return option;\n  }\n\n  /**\n   * Gets an option by name and property and checks its type.\n   * @param {string} name The name of the option.\n   * @param {ApplicationCommandOptionType[]} allowedTypes The allowed types of the option.\n   * @param {string[]} properties The properties to check for for `required`.\n   * @param {boolean} required Whether to throw an error if the option is not found.\n   * @returns {?CommandInteractionOption} The option, if found.\n   * @private\n   */\n  _getTypedOption(name, allowedTypes, properties, required) {\n    const option = this.get(name, required);\n    if (!option) {\n      return null;\n    } else if (!allowedTypes.includes(option.type)) {\n      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionType, name, option.type, allowedTypes.join(', '));\n    } else if (required && properties.every(prop => option[prop] === null || option[prop] === undefined)) {\n      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionEmpty, name, option.type);\n    }\n    return option;\n  }\n\n  /**\n   * Gets the selected subcommand.\n   * @param {boolean} [required=true] Whether to throw an error if there is no subcommand.\n   * @returns {?string} The name of the selected subcommand, or null if not set and not required.\n   */\n  getSubcommand(required = true) {\n    if (required && !this._subcommand) {\n      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionNoSubcommand);\n    }\n    return this._subcommand;\n  }\n\n  /**\n   * Gets the selected subcommand group.\n   * @param {boolean} [required=false] Whether to throw an error if there is no subcommand group.\n   * @returns {?string} The name of the selected subcommand group, or null if not set and not required.\n   */\n  getSubcommandGroup(required = false) {\n    if (required && !this._group) {\n      throw new DiscordjsTypeError(ErrorCodes.CommandInteractionOptionNoSubcommandGroup);\n    }\n    return this._group;\n  }\n\n  /**\n   * Gets a boolean option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?boolean} The value of the option, or null if not set and not required.\n   */\n  getBoolean(name, required = false) {\n    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Boolean], ['value'], required);\n    return option?.value ?? null;\n  }\n\n  /**\n   * Gets a channel option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @param {ChannelType[]} [channelTypes=[]] The allowed types of channels. If empty, all channel types are allowed.\n   * @returns {?(GuildChannel|ThreadChannel|APIChannel)}\n   * The value of the option, or null if not set and not required.\n   */\n  getChannel(name, required = false, channelTypes = []) {\n    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Channel], ['channel'], required);\n    const channel = option?.channel ?? null;\n\n    if (channel && channelTypes.length > 0 && !channelTypes.includes(channel.type)) {\n      throw new DiscordjsTypeError(\n        ErrorCodes.CommandInteractionOptionInvalidChannelType,\n        name,\n        channel.type,\n        channelTypes.join(', '),\n      );\n    }\n\n    return channel;\n  }\n\n  /**\n   * Gets a string option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?string} The value of the option, or null if not set and not required.\n   */\n  getString(name, required = false) {\n    const option = this._getTypedOption(name, [ApplicationCommandOptionType.String], ['value'], required);\n    return option?.value ?? null;\n  }\n\n  /**\n   * Gets an integer option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?number} The value of the option, or null if not set and not required.\n   */\n  getInteger(name, required = false) {\n    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Integer], ['value'], required);\n    return option?.value ?? null;\n  }\n\n  /**\n   * Gets a number option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?number} The value of the option, or null if not set and not required.\n   */\n  getNumber(name, required = false) {\n    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Number], ['value'], required);\n    return option?.value ?? null;\n  }\n\n  /**\n   * Gets a user option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?User} The value of the option, or null if not set and not required.\n   */\n  getUser(name, required = false) {\n    const option = this._getTypedOption(\n      name,\n      [ApplicationCommandOptionType.User, ApplicationCommandOptionType.Mentionable],\n      ['user'],\n      required,\n    );\n    return option?.user ?? null;\n  }\n\n  /**\n   * Gets a member option.\n   * @param {string} name The name of the option.\n   * @returns {?(GuildMember|APIGuildMember)}\n   * The value of the option, or null if the user is not present in the guild or the option is not set.\n   */\n  getMember(name) {\n    const option = this._getTypedOption(\n      name,\n      [ApplicationCommandOptionType.User, ApplicationCommandOptionType.Mentionable],\n      ['member'],\n      false,\n    );\n    return option?.member ?? null;\n  }\n\n  /**\n   * Gets a role option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?(Role|APIRole)} The value of the option, or null if not set and not required.\n   */\n  getRole(name, required = false) {\n    const option = this._getTypedOption(\n      name,\n      [ApplicationCommandOptionType.Role, ApplicationCommandOptionType.Mentionable],\n      ['role'],\n      required,\n    );\n    return option?.role ?? null;\n  }\n\n  /**\n   * Gets an attachment option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?Attachment} The value of the option, or null if not set and not required.\n   */\n  getAttachment(name, required = false) {\n    const option = this._getTypedOption(name, [ApplicationCommandOptionType.Attachment], ['attachment'], required);\n    return option?.attachment ?? null;\n  }\n\n  /**\n   * Gets a mentionable option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?(User|GuildMember|APIGuildMember|Role|APIRole)}\n   * The value of the option, or null if not set and not required.\n   */\n  getMentionable(name, required = false) {\n    const option = this._getTypedOption(\n      name,\n      [ApplicationCommandOptionType.Mentionable],\n      ['user', 'member', 'role'],\n      required,\n    );\n    return option?.member ?? option?.user ?? option?.role ?? null;\n  }\n\n  /**\n   * Gets a message option.\n   * @param {string} name The name of the option.\n   * @param {boolean} [required=false] Whether to throw an error if the option is not found.\n   * @returns {?Message}\n   * The value of the option, or null if not set and not required.\n   */\n  getMessage(name, required = false) {\n    const option = this._getTypedOption(name, ['_MESSAGE'], ['message'], required);\n    return option?.message ?? null;\n  }\n\n  /**\n   * The full autocomplete option object.\n   * @typedef {Object} AutocompleteFocusedOption\n   * @property {string} name The name of the option\n   * @property {ApplicationCommandOptionType} type The type of the application command option\n   * @property {string} value The value of the option\n   * @property {boolean} focused Whether this option is currently in focus for autocomplete\n   */\n\n  /**\n   * Gets the focused option.\n   * @param {boolean} [getFull=false] Whether to get the full option object\n   * @returns {string|AutocompleteFocusedOption}\n   * The value of the option, or the whole option if getFull is true\n   */\n  getFocused(getFull = false) {\n    const focusedOption = this._hoistedOptions.find(option => option.focused);\n    if (!focusedOption) throw new DiscordjsTypeError(ErrorCodes.AutocompleteInteractionOptionNoFocusedOption);\n    return getFull ? focusedOption : focusedOption.value;\n  }\n}\n\nmodule.exports = CommandInteractionOptionResolver;\n",
    "'use strict';\n\nconst { InteractionResponseType, Routes } = require('discord-api-types/v10');\nconst BaseInteraction = require('./BaseInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an autocomplete interaction.\n * @extends {BaseInteraction}\n */\nclass AutocompleteInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name AutocompleteInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n    this.commandId = data.data.id;\n\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n    this.commandName = data.data.name;\n\n    /**\n     * The invoked application command's type\n     * @type {ApplicationCommandType}\n     */\n    this.commandType = data.data.type;\n\n    /**\n     * The id of the guild the invoked application command is registered to\n     * @type {?Snowflake}\n     */\n    this.commandGuildId = data.data.guild_id ?? null;\n\n    /**\n     * Whether this interaction has already received a response\n     * @type {boolean}\n     */\n    this.responded = false;\n\n    /**\n     * The options passed to the command\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(this.client, data.data.options ?? []);\n  }\n\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n\n  /**\n   * Sends results for the autocomplete of this interaction.\n   * @param {ApplicationCommandOptionChoiceData[]} options The options for the autocomplete\n   * @returns {Promise<void>}\n   * @example\n   * // respond to autocomplete interaction\n   * interaction.respond([\n   *  {\n   *    name: 'Option 1',\n   *    value: 'option1',\n   *  },\n   * ])\n   *  .then(() => console.log('Successfully responded to the autocomplete interaction'))\n   *  .catch(console.error);\n   */\n  async respond(options) {\n    if (this.responded) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n\n    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.ApplicationCommandAutocompleteResult,\n        data: {\n          choices: options.map(({ nameLocalizations, ...option }) => ({\n            ...this.client.options.jsonTransformer(option),\n            name_localizations: nameLocalizations,\n          })),\n        },\n      },\n      auth: false,\n    });\n    this.responded = true;\n  }\n}\n\nmodule.exports = AutocompleteInteraction;\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\n\n/**\n * Represents an interaction callback response from Discord\n */\nclass InteractionCallback {\n  constructor(client, data) {\n    /**\n     * The client that instantiated this.\n     * @name InteractionCallback#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The id of the original interaction response\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of the original interaction\n     * @type {InteractionType}\n     */\n    this.type = data.type;\n\n    /**\n     * The instance id of the Activity if one was launched or joined\n     * @type {?string}\n     */\n    this.activityInstanceId = data.activity_instance_id ?? null;\n\n    /**\n     * The id of the message that was created by the interaction\n     * @type {?Snowflake}\n     */\n    this.responseMessageId = data.response_message_id ?? null;\n\n    /**\n     * Whether the message is in a loading state\n     * @type {?boolean}\n     */\n    this.responseMessageLoading = data.response_message_loading ?? null;\n\n    /**\n     * Whether the response message was ephemeral\n     * @type {?boolean}\n     */\n    this.responseMessageEphemeral = data.response_message_ephemeral ?? null;\n  }\n\n  /**\n   * The timestamp the original interaction was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the original interaction was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\n\nmodule.exports = InteractionCallback;\n",
    "'use strict';\n\nconst { lazy } = require('@discordjs/util');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents the resource that was created by the interaction response.\n */\nclass InteractionCallbackResource {\n  constructor(client, data) {\n    /**\n     * The client that instantiated this\n     * @name InteractionCallbackResource#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The interaction callback type\n     * @type {InteractionResponseType}\n     */\n    this.type = data.type;\n\n    /**\n     * The Activity launched by an interaction\n     * @typedef {Object} ActivityInstance\n     * @property {string} id The instance id of the Activity\n     */\n\n    /**\n     * Represents the Activity launched by this interaction\n     * @type {?ActivityInstance}\n     */\n    this.activityInstance = data.activity_instance ?? null;\n\n    if ('message' in data) {\n      /**\n       * The message created by the interaction\n       * @type {?Message}\n       */\n      this.message =\n        this.client.channels.cache.get(data.message.channel_id)?.messages._add(data.message) ??\n        new (getMessage())(client, data.message);\n    } else {\n      this.message = null;\n    }\n  }\n}\n\nmodule.exports = InteractionCallbackResource;\n",
    "'use strict';\n\nconst InteractionCallback = require('./InteractionCallback');\nconst InteractionCallbackResource = require('./InteractionCallbackResource');\n\n/**\n * Represents an interaction's response\n */\nclass InteractionCallbackResponse {\n  constructor(client, data) {\n    /**\n     * The client that instantiated this\n     * @name InteractionCallbackResponse#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The interaction object associated with the interaction callback response\n     * @type {InteractionCallback}\n     */\n    this.interaction = new InteractionCallback(client, data.interaction);\n\n    /**\n     * The resource that was created by the interaction response\n     * @type {?InteractionCallbackResource}\n     */\n    this.resource = data.resource ? new InteractionCallbackResource(client, data.resource) : null;\n  }\n}\n\nmodule.exports = InteractionCallbackResponse;\n",
    "'use strict';\n\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { InteractionType } = require('discord-api-types/v10');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\n\n/**\n * Represents an interaction's response\n */\nclass InteractionResponse {\n  constructor(interaction, id) {\n    /**\n     * The interaction associated with the interaction response\n     * @type {BaseInteraction}\n     */\n    this.interaction = interaction;\n    /**\n     * The id of the original interaction response\n     * @type {Snowflake}\n     */\n    this.id = id ?? interaction.id;\n    this.client = interaction.client;\n  }\n\n  /**\n   * The timestamp the interaction response was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the interaction response was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Collects a single component interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitMessageComponentOptions} [options={}] Options to pass to the internal collector\n   * @returns {Promise<MessageComponentInteraction>}\n   */\n  awaitMessageComponent(options = {}) {\n    const _options = { ...options, max: 1 };\n    return new Promise((resolve, reject) => {\n      const collector = this.createMessageComponentCollector(_options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);\n        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  /**\n   * Creates a message component interaction collector\n   * @param {MessageComponentCollectorOptions} [options={}] Options to send to the collector\n   * @returns {InteractionCollector}\n   */\n  createMessageComponentCollector(options = {}) {\n    return new InteractionCollector(this.client, {\n      ...options,\n      interactionResponse: this,\n      interactionType: InteractionType.MessageComponent,\n    });\n  }\n\n  /**\n   * Fetches the response as a {@link Message} object.\n   * @returns {Promise<Message>}\n   */\n  fetch() {\n    return this.interaction.fetchReply();\n  }\n\n  /**\n   * Deletes the response.\n   * @returns {Promise<void>}\n   */\n  delete() {\n    return this.interaction.deleteReply();\n  }\n\n  /**\n   * Edits the response.\n   * @param {string|MessagePayload|WebhookMessageEditOptions} options The new options for the response.\n   * @returns {Promise<Message>}\n   */\n  edit(options) {\n    return this.interaction.editReply(options);\n  }\n}\n\n// eslint-disable-next-line import/order\nconst InteractionCollector = require('./InteractionCollector');\nmodule.exports = InteractionResponse;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { deprecate } = require('node:util');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { InteractionResponseType, MessageFlags, Routes, InteractionType } = require('discord-api-types/v10');\nconst { DiscordjsError, ErrorCodes } = require('../../errors');\nconst MessageFlagsBitField = require('../../util/MessageFlagsBitField');\nconst InteractionCallbackResponse = require('../InteractionCallbackResponse');\nconst InteractionCollector = require('../InteractionCollector');\nconst InteractionResponse = require('../InteractionResponse');\nconst MessagePayload = require('../MessagePayload');\n\nlet deprecationEmittedForEphemeralOption = false;\nlet deprecationEmittedForFetchReplyOption = false;\n\n/**\n * @typedef {Object} ModalComponentData\n * @property {string} title The title of the modal\n * @property {string} customId The custom id of the modal\n * @property {ActionRow[]} components The components within this modal\n */\n\n/**\n * Interface for classes that support shared interaction response types.\n * @interface\n */\nclass InteractionResponses {\n  /**\n   * Options for deferring the reply to an {@link BaseInteraction}.\n   * @typedef {Object} InteractionDeferReplyOptions\n   * @property {boolean} [ephemeral] Whether the reply should be ephemeral.\n   * <warn>This option is deprecated. Use `flags` instead.</warn>\n   * @property {MessageFlagsResolvable} [flags] Flags for the reply.\n   * <info>Only `MessageFlags.Ephemeral` can be set.</info>\n   * @property {boolean} [withResponse] Whether to return an {@link InteractionCallbackResponse} as the response\n   * @property {boolean} [fetchReply] Whether to fetch the reply\n   * <warn>This option is deprecated. Use `withResponse` or fetch the response instead.</warn>\n   */\n\n  /**\n   * Options for deferring and updating the reply to a {@link MessageComponentInteraction}.\n   * @typedef {Object} InteractionDeferUpdateOptions\n   * @property {boolean} [withResponse] Whether to return an {@link InteractionCallbackResponse} as the response\n   * @property {boolean} [fetchReply] Whether to fetch the reply\n   * <warn>This option is deprecated. Use `withResponse` or fetch the response instead.</warn>\n   */\n\n  /**\n   * Options for a reply to a {@link BaseInteraction}.\n   * @typedef {BaseMessageOptionsWithPoll} InteractionReplyOptions\n   * @property {boolean} [ephemeral] Whether the reply should be ephemeral.\n   * <warn>This option is deprecated. Use `flags` instead.</warn>\n   * @property {boolean} [tts=false] Whether the message should be spoken aloud\n   * @property {boolean} [withResponse] Whether to return an {@link InteractionCallbackResponse} as the response\n   * @property {boolean} [fetchReply] Whether to fetch the reply\n   * <warn>This option is deprecated. Use `withResponse` or fetch the response instead.</warn>\n   * @property {MessageFlagsResolvable} [flags] Which flags to set for the message.\n   * <info>Only `MessageFlags.Ephemeral`, `MessageFlags.SuppressEmbeds`, and `MessageFlags.SuppressNotifications`\n   * can be set.</info>\n   */\n\n  /**\n   * Options for updating the message received from a {@link MessageComponentInteraction}.\n   * @typedef {MessageEditOptions} InteractionUpdateOptions\n   * @property {boolean} [withResponse] Whether to return an {@link InteractionCallbackResponse} as the response\n   * @property {boolean} [fetchReply] Whether to fetch the reply\n   * <warn>This option is deprecated. Use `withResponse` or fetch the response instead.</warn>\n   */\n\n  /**\n   * Options for showing a modal in response to a {@link BaseInteraction}\n   * @typedef {Object} ShowModalOptions\n   * @property {boolean} [withResponse] Whether to return an {@link InteractionCallbackResponse} as the response\n   */\n\n  /**\n   * Defers the reply to this interaction.\n   * @param {InteractionDeferReplyOptions} [options] Options for deferring the reply to this interaction\n   * @returns {Promise<InteractionCallbackResponse|Message|InteractionResponse>}\n   * @example\n   * // Defer the reply to this interaction\n   * interaction.deferReply()\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Defer to send an ephemeral reply later\n   * interaction.deferReply({ flags: MessageFlags.Ephemeral })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async deferReply(options = {}) {\n    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n\n    if ('ephemeral' in options) {\n      if (!deprecationEmittedForEphemeralOption) {\n        process.emitWarning(\n          `Supplying \"ephemeral\" for interaction response options is deprecated. Utilize flags instead.`,\n        );\n\n        deprecationEmittedForEphemeralOption = true;\n      }\n    }\n\n    if ('fetchReply' in options) {\n      if (!deprecationEmittedForFetchReplyOption) {\n        process.emitWarning(\n          // eslint-disable-next-line max-len\n          `Supplying \"fetchReply\" for interaction response options is deprecated. Utilize \"withResponse\" instead or fetch the response after using the method.`,\n        );\n\n        deprecationEmittedForFetchReplyOption = true;\n      }\n    }\n\n    const flags = new MessageFlagsBitField(options.flags);\n\n    if (options.ephemeral) {\n      flags.add(MessageFlags.Ephemeral);\n    }\n\n    const response = await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.DeferredChannelMessageWithSource,\n        data: {\n          flags: flags.bitfield,\n        },\n      },\n      auth: false,\n      query: makeURLSearchParams({ with_response: options.withResponse ?? false }),\n    });\n\n    this.deferred = true;\n    this.ephemeral = flags.has(MessageFlags.Ephemeral);\n\n    return options.withResponse\n      ? new InteractionCallbackResponse(this.client, response)\n      : options.fetchReply\n        ? this.fetchReply()\n        : new InteractionResponse(this);\n  }\n\n  /**\n   * Creates a reply to this interaction.\n   * <info>Use the `withResponse` option to get the interaction callback response.</info>\n   * @param {string|MessagePayload|InteractionReplyOptions} options The options for the reply\n   * @returns {Promise<InteractionCallbackResponse|Message|InteractionResponse>}\n   * @example\n   * // Reply to the interaction and fetch the response\n   * interaction.reply({ content: 'Pong!', withResponse: true })\n   *   .then((response) => console.log(`Reply sent with content ${response.resource.message.content}`))\n   *   .catch(console.error);\n   * @example\n   * // Create an ephemeral reply with an embed\n   * const embed = new EmbedBuilder().setDescription('Pong!');\n   *\n   * interaction.reply({ embeds: [embed], flags: MessageFlags.Ephemeral })\n   *   .then(() => console.log('Reply sent.'))\n   *   .catch(console.error);\n   */\n  async reply(options) {\n    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n\n    if (typeof options !== 'string') {\n      if ('ephemeral' in options) {\n        if (!deprecationEmittedForEphemeralOption) {\n          process.emitWarning(\n            `Supplying \"ephemeral\" for interaction response options is deprecated. Utilize flags instead.`,\n          );\n\n          deprecationEmittedForEphemeralOption = true;\n        }\n      }\n\n      if ('fetchReply' in options) {\n        if (!deprecationEmittedForFetchReplyOption) {\n          process.emitWarning(\n            // eslint-disable-next-line max-len\n            `Supplying \"fetchReply\" for interaction response options is deprecated. Utilize \"withResponse\" instead or fetch the response after using the method.`,\n          );\n\n          deprecationEmittedForFetchReplyOption = true;\n        }\n      }\n    }\n\n    let messagePayload;\n    if (options instanceof MessagePayload) messagePayload = options;\n    else messagePayload = MessagePayload.create(this, options);\n\n    const { body: data, files } = await messagePayload.resolveBody().resolveFiles();\n\n    const response = await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.ChannelMessageWithSource,\n        data,\n      },\n      files,\n      auth: false,\n      query: makeURLSearchParams({ with_response: options.withResponse ?? false }),\n    });\n\n    this.ephemeral = Boolean(data.flags & MessageFlags.Ephemeral);\n    this.replied = true;\n\n    return options.withResponse\n      ? new InteractionCallbackResponse(this.client, response)\n      : options.fetchReply\n        ? this.fetchReply()\n        : new InteractionResponse(this);\n  }\n\n  /**\n   * Fetches a reply to this interaction.\n   * @see Webhook#fetchMessage\n   * @param {Snowflake|'@original'} [message='@original'] The response to fetch\n   * @returns {Promise<Message>}\n   * @example\n   * // Fetch the initial reply to this interaction\n   * interaction.fetchReply()\n   *   .then(reply => console.log(`Replied with ${reply.content}`))\n   *   .catch(console.error);\n   */\n  fetchReply(message = '@original') {\n    return this.webhook.fetchMessage(message);\n  }\n\n  /**\n   * Options that can be passed into {@link InteractionResponses#editReply}.\n   * @typedef {WebhookMessageEditOptions} InteractionEditReplyOptions\n   * @property {MessageResolvable|'@original'} [message='@original'] The response to edit\n   */\n\n  /**\n   * Edits a reply to this interaction.\n   * @see Webhook#editMessage\n   * @param {string|MessagePayload|InteractionEditReplyOptions} options The new options for the message\n   * @returns {Promise<Message>}\n   * @example\n   * // Edit the initial reply to this interaction\n   * interaction.editReply('New content')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async editReply(options) {\n    if (!this.deferred && !this.replied) throw new DiscordjsError(ErrorCodes.InteractionNotReplied);\n    const msg = await this.webhook.editMessage(options.message ?? '@original', options);\n    this.replied = true;\n    return msg;\n  }\n\n  /**\n   * Deletes a reply to this interaction.\n   * @see Webhook#deleteMessage\n   * @param {MessageResolvable|'@original'} [message='@original'] The response to delete\n   * @returns {Promise<void>}\n   * @example\n   * // Delete the initial reply to this interaction\n   * interaction.deleteReply()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async deleteReply(message = '@original') {\n    if (!this.deferred && !this.replied) throw new DiscordjsError(ErrorCodes.InteractionNotReplied);\n\n    await this.webhook.deleteMessage(message);\n  }\n\n  /**\n   * Send a follow-up message to this interaction.\n   * @param {string|MessagePayload|InteractionReplyOptions} options The options for the reply\n   * @returns {Promise<Message>}\n   */\n  async followUp(options) {\n    if (!this.deferred && !this.replied) throw new DiscordjsError(ErrorCodes.InteractionNotReplied);\n    const msg = await this.webhook.send(options);\n    this.replied = true;\n    return msg;\n  }\n\n  /**\n   * Defers an update to the message to which the component was attached.\n   * @param {InteractionDeferUpdateOptions} [options] Options for deferring the update to this interaction\n   * @returns {Promise<InteractionCallbackResponse|Message|InteractionResponse>}\n   * @example\n   * // Defer updating and reset the component's loading state\n   * interaction.deferUpdate()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async deferUpdate(options = {}) {\n    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n\n    if ('fetchReply' in options) {\n      if (!deprecationEmittedForFetchReplyOption) {\n        process.emitWarning(\n          // eslint-disable-next-line max-len\n          `Supplying \"fetchReply\" for interaction response options is deprecated. Utilize \"withResponse\" instead or fetch the response after using the method.`,\n        );\n\n        deprecationEmittedForFetchReplyOption = true;\n      }\n    }\n\n    const response = await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.DeferredMessageUpdate,\n      },\n      auth: false,\n      query: makeURLSearchParams({ with_response: options.withResponse ?? false }),\n    });\n    this.deferred = true;\n\n    return options.withResponse\n      ? new InteractionCallbackResponse(this.client, response)\n      : options.fetchReply\n        ? this.fetchReply()\n        : new InteractionResponse(this, this.message?.interactionMetadata?.id);\n  }\n\n  /**\n   * Updates the original message of the component on which the interaction was received on.\n   * @param {string|MessagePayload|InteractionUpdateOptions} options The options for the updated message\n   * @returns {Promise<InteractionCallbackResponse|Message|void>}\n   * @example\n   * // Remove the components from the message\n   * interaction.update({\n   *   content: \"A component interaction was received\",\n   *   components: []\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async update(options) {\n    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n\n    if (typeof options !== 'string' && 'fetchReply' in options) {\n      if (!deprecationEmittedForFetchReplyOption) {\n        process.emitWarning(\n          // eslint-disable-next-line max-len\n          `Supplying \"fetchReply\" for interaction response options is deprecated. Utilize \"withResponse\" instead or fetch the response after using the method.`,\n        );\n\n        deprecationEmittedForFetchReplyOption = true;\n      }\n    }\n\n    let messagePayload;\n    if (options instanceof MessagePayload) messagePayload = options;\n    else messagePayload = MessagePayload.create(this, options);\n\n    const { body: data, files } = await messagePayload.resolveBody().resolveFiles();\n\n    const response = await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.UpdateMessage,\n        data,\n      },\n      files,\n      auth: false,\n      query: makeURLSearchParams({ with_response: options.withResponse ?? false }),\n    });\n    this.replied = true;\n\n    return options.withResponse\n      ? new InteractionCallbackResponse(this.client, response)\n      : options.fetchReply\n        ? this.fetchReply()\n        : new InteractionResponse(this, this.message.interactionMetadata?.id);\n  }\n\n  /**\n   * Shows a modal component\n   * @param {ModalBuilder|ModalComponentData|APIModalInteractionResponseCallbackData} modal The modal to show\n   * @param {ShowModalOptions} [options={}] The options for sending this interaction response\n   * @returns {Promise<InteractionCallbackResponse|undefined>}\n   */\n  async showModal(modal, options = {}) {\n    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n    const response = await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.Modal,\n        data: isJSONEncodable(modal) ? modal.toJSON() : this.client.options.jsonTransformer(modal),\n      },\n      auth: false,\n      query: makeURLSearchParams({ with_response: options.withResponse ?? false }),\n    });\n    this.replied = true;\n\n    return options.withResponse ? new InteractionCallbackResponse(this.client, response) : undefined;\n  }\n\n  /**\n   * Responds to the interaction with an upgrade button.\n   * <info>Only available for applications with monetization enabled.</info>\n   * @deprecated Sending a premium-style button is the new Discord behaviour.\n   * @returns {Promise<void>}\n   */\n  async sendPremiumRequired() {\n    if (this.deferred || this.replied) throw new DiscordjsError(ErrorCodes.InteractionAlreadyReplied);\n    await this.client.rest.post(Routes.interactionCallback(this.id, this.token), {\n      body: {\n        type: InteractionResponseType.PremiumRequired,\n      },\n      auth: false,\n    });\n    this.replied = true;\n  }\n\n  /**\n   * An object containing the same properties as {@link CollectorOptions}, but a few less:\n   * @typedef {Object} AwaitModalSubmitOptions\n   * @property {CollectorFilter} [filter] The filter applied to this collector\n   * @property {number} time Time in milliseconds to wait for an interaction before rejecting\n   */\n\n  /**\n   * Collects a single modal submit interaction that passes the filter.\n   * The Promise will reject if the time expires.\n   * @param {AwaitModalSubmitOptions} options Options to pass to the internal collector\n   * @returns {Promise<ModalSubmitInteraction>}\n   * @example\n   * // Collect a modal submit interaction\n   * const filter = (interaction) => interaction.customId === 'modal';\n   * interaction.awaitModalSubmit({ filter, time: 15_000 })\n   *   .then(interaction => console.log(`${interaction.customId} was submitted!`))\n   *   .catch(console.error);\n   */\n  async awaitModalSubmit(options) {\n    if (typeof options.time !== 'number') throw new DiscordjsError(ErrorCodes.InvalidType, 'time', 'number');\n    const _options = { ...options, max: 1, interactionType: InteractionType.ModalSubmit };\n    return new Promise((resolve, reject) => {\n      const collector = new InteractionCollector(this.client, _options);\n      collector.once('end', (interactions, reason) => {\n        const interaction = interactions.first();\n        if (interaction) resolve(interaction);\n        else reject(new DiscordjsError(ErrorCodes.InteractionCollectorError, reason));\n      });\n    });\n  }\n\n  static applyToClass(structure, ignore = []) {\n    const props = [\n      'deferReply',\n      'reply',\n      'fetchReply',\n      'editReply',\n      'deleteReply',\n      'followUp',\n      'deferUpdate',\n      'update',\n      'showModal',\n      'sendPremiumRequired',\n      'awaitModalSubmit',\n    ];\n\n    for (const prop of props) {\n      if (ignore.includes(prop)) continue;\n      Object.defineProperty(\n        structure.prototype,\n        prop,\n        Object.getOwnPropertyDescriptor(InteractionResponses.prototype, prop),\n      );\n    }\n  }\n}\n\nInteractionResponses.prototype.sendPremiumRequired = deprecate(\n  InteractionResponses.prototype.sendPremiumRequired,\n  // eslint-disable-next-line max-len\n  'InteractionResponses#sendPremiumRequired() is deprecated. Sending a premium-style button is the new Discord behaviour.',\n);\n\nmodule.exports = InteractionResponses;\n",
    "'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a message component interaction.\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n */\nclass MessageComponentInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name MessageComponentInteraction#channelId\n     */\n\n    /**\n     * The message to which the component was attached\n     * @type {Message}\n     */\n    this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(client, data.message);\n\n    /**\n     * The custom id of the component which was interacted with\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n\n    /**\n     * The type of component which was interacted with\n     * @type {ComponentType}\n     */\n    this.componentType = data.data.component_type;\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Components that can be placed in an action row for messages.\n   * * ButtonComponent\n   * * StringSelectMenuComponent\n   * * UserSelectMenuComponent\n   * * RoleSelectMenuComponent\n   * * MentionableSelectMenuComponent\n   * * ChannelSelectMenuComponent\n   * @typedef {ButtonComponent|StringSelectMenuComponent|UserSelectMenuComponent|\n   * RoleSelectMenuComponent|MentionableSelectMenuComponent|ChannelSelectMenuComponent} MessageActionRowComponent\n   */\n\n  /**\n   * The component which was interacted with\n   * @type {MessageActionRowComponent|APIMessageActionRowComponent}\n   * @readonly\n   */\n  get component() {\n    return this.message.components\n      .flatMap(row => row.components)\n      .find(component => (component.customId ?? component.custom_id) === this.customId);\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n  showModal() {}\n  sendPremiumRequired() {}\n  awaitModalSubmit() {}\n}\n\nInteractionResponses.applyToClass(MessageComponentInteraction);\n\nmodule.exports = MessageComponentInteraction;\n",
    "'use strict';\n\nconst MessageComponentInteraction = require('./MessageComponentInteraction');\n\n/**\n * Represents a button interaction.\n * @extends {MessageComponentInteraction}\n */\nclass ButtonInteraction extends MessageComponentInteraction {}\n\nmodule.exports = ButtonInteraction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst MessageComponentInteraction = require('./MessageComponentInteraction');\n\n/**\n * Represents a {@link ComponentType.ChannelSelect} select menu interaction.\n * @extends {MessageComponentInteraction}\n */\nclass ChannelSelectMenuInteraction extends MessageComponentInteraction {\n  constructor(client, data) {\n    super(client, data);\n    const { resolved, values } = data.data;\n\n    /**\n     * An array of the selected channel ids\n     * @type {Snowflake[]}\n     */\n    this.values = values ?? [];\n\n    /**\n     * Collection of the selected channels\n     * @type {Collection<Snowflake, BaseChannel|APIChannel>}\n     */\n    this.channels = new Collection();\n\n    for (const channel of Object.values(resolved?.channels ?? {})) {\n      this.channels.set(channel.id, this.client.channels._add(channel, this.guild) ?? channel);\n    }\n  }\n}\n\nmodule.exports = ChannelSelectMenuInteraction;\n",
    "'use strict';\n\nconst Attachment = require('./Attachment');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\n/**\n * Represents a command interaction.\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n * @abstract\n */\nclass CommandInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name CommandInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n    this.commandId = data.data.id;\n\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n    this.commandName = data.data.name;\n\n    /**\n     * The invoked application command's type\n     * @type {ApplicationCommandType}\n     */\n    this.commandType = data.data.type;\n\n    /**\n     * The id of the guild the invoked application command is registered to\n     * @type {?Snowflake}\n     */\n    this.commandGuildId = data.data.guild_id ?? null;\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n\n  /**\n   * Represents the resolved data of a received command interaction.\n   * @typedef {Object} CommandInteractionResolvedData\n   * @property {Collection<Snowflake, User>} [users] The resolved users\n   * @property {Collection<Snowflake, GuildMember|APIGuildMember>} [members] The resolved guild members\n   * @property {Collection<Snowflake, Role|APIRole>} [roles] The resolved roles\n   * @property {Collection<Snowflake, BaseChannel|APIChannel>} [channels] The resolved channels\n   * @property {Collection<Snowflake, Message|APIMessage>} [messages] The resolved messages\n   * @property {Collection<Snowflake, Attachment>} [attachments] The resolved attachments\n   */\n\n  /**\n   * Represents an option of a received command interaction.\n   * @typedef {Object} CommandInteractionOption\n   * @property {string} name The name of the option\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {boolean} [autocomplete] Whether the autocomplete interaction is enabled for a\n   * {@link ApplicationCommandOptionType.String}, {@link ApplicationCommandOptionType.Integer} or\n   * {@link ApplicationCommandOptionType.Number} option\n   * @property {string|number|boolean} [value] The value of the option\n   * @property {CommandInteractionOption[]} [options] Additional options if this option is a\n   * subcommand (group)\n   * @property {User} [user] The resolved user\n   * @property {GuildMember|APIGuildMember} [member] The resolved member\n   * @property {GuildChannel|ThreadChannel|APIChannel} [channel] The resolved channel\n   * @property {Role|APIRole} [role] The resolved role\n   * @property {Attachment} [attachment] The resolved attachment\n   */\n\n  /**\n   * Transforms an option received from the API.\n   * @param {APIApplicationCommandOption} option The received option\n   * @param {APIInteractionDataResolved} resolved The resolved interaction data\n   * @returns {CommandInteractionOption}\n   * @private\n   */\n  transformOption(option, resolved) {\n    const result = {\n      name: option.name,\n      type: option.type,\n    };\n\n    if ('value' in option) result.value = option.value;\n    if ('options' in option) result.options = option.options.map(opt => this.transformOption(opt, resolved));\n\n    if (resolved) {\n      const user = resolved.users?.[option.value];\n      if (user) result.user = this.client.users._add(user);\n\n      const member = resolved.members?.[option.value];\n      if (member) result.member = this.guild?.members._add({ user, ...member }) ?? member;\n\n      const channel = resolved.channels?.[option.value];\n      if (channel) result.channel = this.client.channels._add(channel, this.guild) ?? channel;\n\n      const role = resolved.roles?.[option.value];\n      if (role) result.role = this.guild?.roles._add(role) ?? role;\n\n      const attachment = resolved.attachments?.[option.value];\n      if (attachment) result.attachment = new Attachment(attachment);\n    }\n\n    return result;\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  showModal() {}\n  sendPremiumRequired() {}\n  awaitModalSubmit() {}\n}\n\nInteractionResponses.applyToClass(CommandInteraction, ['deferUpdate', 'update']);\n\nmodule.exports = CommandInteraction;\n",
    "'use strict';\n\nconst CommandInteraction = require('./CommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst { transformResolved } = require('../util/Util');\n\n/**\n * Represents a command interaction.\n * @extends {CommandInteraction}\n */\nclass ChatInputCommandInteraction extends CommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The options passed to the command.\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      data.data.options?.map(option => this.transformOption(option, data.data.resolved)) ?? [],\n      transformResolved({ client: this.client, guild: this.guild, channel: this.channel }, data.data.resolved),\n    );\n  }\n\n  /**\n   * Returns a string representation of the command interaction.\n   * This can then be copied by a user and executed again in a new command while keeping the option order.\n   * @returns {string}\n   */\n  toString() {\n    const properties = [\n      this.commandName,\n      this.options._group,\n      this.options._subcommand,\n      ...this.options._hoistedOptions.map(option => `${option.name}:${option.value}`),\n    ];\n    return `/${properties.filter(Boolean).join(' ')}`;\n  }\n}\n\nmodule.exports = ChatInputCommandInteraction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst MessageComponentInteraction = require('./MessageComponentInteraction');\nconst Events = require('../util/Events');\n\n/**\n * Represents a {@link ComponentType.MentionableSelect} select menu interaction.\n * @extends {MessageComponentInteraction}\n */\nclass MentionableSelectMenuInteraction extends MessageComponentInteraction {\n  constructor(client, data) {\n    super(client, data);\n    const { resolved, values } = data.data;\n    const { members, users, roles } = resolved ?? {};\n\n    /**\n     * An array of the selected user and role ids\n     * @type {Snowflake[]}\n     */\n    this.values = values ?? [];\n\n    /**\n     * Collection of the selected users\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * Collection of the selected users\n     * @type {Collection<Snowflake, GuildMember|APIGuildMember>}\n     */\n    this.members = new Collection();\n\n    /**\n     * Collection of the selected roles\n     * @type {Collection<Snowflake, Role|APIRole>}\n     */\n    this.roles = new Collection();\n\n    if (members) {\n      for (const [id, member] of Object.entries(members)) {\n        const user = users[id];\n        if (!user) {\n          this.client.emit(\n            Events.Debug,\n            `[MentionableSelectMenuInteraction] Received a member without a user, skipping ${id}`,\n          );\n\n          continue;\n        }\n\n        this.members.set(id, this.guild?.members._add({ user, ...member }) ?? { user, ...member });\n      }\n    }\n\n    if (users) {\n      for (const user of Object.values(users)) {\n        this.users.set(user.id, this.client.users._add(user));\n      }\n    }\n\n    if (roles) {\n      for (const role of Object.values(roles)) {\n        this.roles.set(role.id, this.guild?.roles._add(role) ?? role);\n      }\n    }\n  }\n}\n\nmodule.exports = MentionableSelectMenuInteraction;\n",
    "'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst { ApplicationCommandOptionType } = require('discord-api-types/v10');\nconst CommandInteraction = require('./CommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst { transformResolved } = require('../util/Util');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * Represents a context menu interaction.\n * @extends {CommandInteraction}\n */\nclass ContextMenuCommandInteraction extends CommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The target of the interaction, parsed into options\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      this.resolveContextMenuOptions(data.data),\n      transformResolved({ client: this.client, guild: this.guild, channel: this.channel }, data.data.resolved),\n    );\n\n    /**\n     * The id of the target of this interaction\n     * @type {Snowflake}\n     */\n    this.targetId = data.data.target_id;\n  }\n\n  /**\n   * Resolves and transforms options received from the API for a context menu interaction.\n   * @param {APIApplicationCommandInteractionData} data The interaction data\n   * @returns {CommandInteractionOption[]}\n   * @private\n   */\n  resolveContextMenuOptions({ target_id, resolved }) {\n    const result = [];\n\n    if (resolved.users?.[target_id]) {\n      result.push(\n        this.transformOption({ name: 'user', type: ApplicationCommandOptionType.User, value: target_id }, resolved),\n      );\n    }\n\n    if (resolved.messages?.[target_id]) {\n      result.push({\n        name: 'message',\n        type: '_MESSAGE',\n        value: target_id,\n        message:\n          this.channel?.messages._add(resolved.messages[target_id]) ??\n          new (getMessage())(this.client, resolved.messages[target_id]),\n      });\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = ContextMenuCommandInteraction;\n",
    "'use strict';\n\nconst ContextMenuCommandInteraction = require('./ContextMenuCommandInteraction');\n\n/**\n * Represents a message context menu interaction.\n * @extends {ContextMenuCommandInteraction}\n */\nclass MessageContextMenuCommandInteraction extends ContextMenuCommandInteraction {\n  /**\n   * The message this interaction was sent from\n   * @type {Message|APIMessage}\n   * @readonly\n   */\n  get targetMessage() {\n    return this.options.getMessage('message');\n  }\n}\n\nmodule.exports = MessageContextMenuCommandInteraction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { ComponentType } = require('discord-api-types/v10');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Represents the serialized fields from a modal submit interaction\n */\nclass ModalSubmitFields {\n  constructor(components) {\n    /**\n     * The components within the modal\n     * @type {ActionRowModalData[]}\n     */\n    this.components = components;\n\n    /**\n     * The extracted fields from the modal\n     * @type {Collection<string, ModalData>}\n     */\n    this.fields = components.reduce((accumulator, next) => {\n      next.components.forEach(component => accumulator.set(component.customId, component));\n      return accumulator;\n    }, new Collection());\n  }\n\n  /**\n   * Gets a field given a custom id from a component\n   * @param {string} customId The custom id of the component\n   * @param {ComponentType} [type] The type of the component\n   * @returns {ModalData}\n   */\n  getField(customId, type) {\n    const field = this.fields.get(customId);\n    if (!field) throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldNotFound, customId);\n\n    if (type !== undefined && type !== field.type) {\n      throw new DiscordjsTypeError(ErrorCodes.ModalSubmitInteractionFieldType, customId, field.type, type);\n    }\n\n    return field;\n  }\n\n  /**\n   * Gets the value of a text input component given a custom id\n   * @param {string} customId The custom id of the text input component\n   * @returns {string}\n   */\n  getTextInputValue(customId) {\n    return this.getField(customId, ComponentType.TextInput).value;\n  }\n}\n\nmodule.exports = ModalSubmitFields;\n",
    "'use strict';\n\nconst { lazy } = require('@discordjs/util');\nconst BaseInteraction = require('./BaseInteraction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst ModalSubmitFields = require('./ModalSubmitFields');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\nconst getMessage = lazy(() => require('./Message').Message);\n\n/**\n * @typedef {Object} ModalData\n * @property {string} value The value of the field\n * @property {ComponentType} type The component type of the field\n * @property {string} customId The custom id of the field\n */\n\n/**\n * @typedef {Object} ActionRowModalData\n * @property {ModalData[]} components The components of this action row\n * @property {ComponentType} type The component type of the action row\n */\n\n/**\n * Represents a modal interaction\n * @extends {BaseInteraction}\n * @implements {InteractionResponses}\n */\nclass ModalSubmitInteraction extends BaseInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The custom id of the modal.\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n\n    if ('message' in data) {\n      /**\n       * The message associated with this interaction\n       * @type {?Message}\n       */\n      this.message = this.channel?.messages._add(data.message) ?? new (getMessage())(this.client, data.message);\n    } else {\n      this.message = null;\n    }\n\n    /**\n     * The components within the modal\n     * @type {ActionRowModalData[]}\n     */\n    this.components = data.data.components?.map(component => ModalSubmitInteraction.transformComponent(component));\n\n    /**\n     * The fields within the modal\n     * @type {ModalSubmitFields}\n     */\n    this.fields = new ModalSubmitFields(this.components);\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Transforms component data to discord.js-compatible data\n   * @param {*} rawComponent The data to transform\n   * @returns {ModalData[]}\n   */\n  static transformComponent(rawComponent) {\n    return rawComponent.components\n      ? {\n          type: rawComponent.type,\n          components: rawComponent.components.map(component => this.transformComponent(component)),\n        }\n      : {\n          value: rawComponent.value,\n          type: rawComponent.type,\n          customId: rawComponent.custom_id,\n        };\n  }\n\n  /**\n   * Whether this is from a {@link MessageComponentInteraction}.\n   * @returns {boolean}\n   */\n  isFromMessage() {\n    return Boolean(this.message);\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n  sendPremiumRequired() {}\n}\n\nInteractionResponses.applyToClass(ModalSubmitInteraction, 'showModal');\n\nmodule.exports = ModalSubmitInteraction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst MessageComponentInteraction = require('./MessageComponentInteraction');\n\n/**\n * Represents a {@link ComponentType.RoleSelect} select menu interaction.\n * @extends {MessageComponentInteraction}\n */\nclass RoleSelectMenuInteraction extends MessageComponentInteraction {\n  constructor(client, data) {\n    super(client, data);\n    const { resolved, values } = data.data;\n\n    /**\n     * An array of the selected role ids\n     * @type {Snowflake[]}\n     */\n    this.values = values ?? [];\n\n    /**\n     * Collection of the selected roles\n     * @type {Collection<Snowflake, Role|APIRole>}\n     */\n    this.roles = new Collection();\n\n    for (const role of Object.values(resolved?.roles ?? {})) {\n      this.roles.set(role.id, this.guild?.roles._add(role) ?? role);\n    }\n  }\n}\n\nmodule.exports = RoleSelectMenuInteraction;\n",
    "'use strict';\n\nconst MessageComponentInteraction = require('./MessageComponentInteraction');\n\n/**\n * Represents a {@link ComponentType.StringSelect} select menu interaction.\n * @extends {MessageComponentInteraction}\n */\nclass StringSelectMenuInteraction extends MessageComponentInteraction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The values selected\n     * @type {string[]}\n     */\n    this.values = data.data.values ?? [];\n  }\n}\n\nmodule.exports = StringSelectMenuInteraction;\n",
    "'use strict';\n\nconst ContextMenuCommandInteraction = require('./ContextMenuCommandInteraction');\n\n/**\n * Represents a user context menu interaction.\n * @extends {ContextMenuCommandInteraction}\n */\nclass UserContextMenuCommandInteraction extends ContextMenuCommandInteraction {\n  /**\n   * The target user from this interaction\n   * @type {User}\n   * @readonly\n   */\n  get targetUser() {\n    return this.options.getUser('user');\n  }\n\n  /**\n   * The target member from this interaction\n   * @type {?(GuildMember|APIGuildMember)}\n   * @readonly\n   */\n  get targetMember() {\n    return this.options.getMember('user');\n  }\n}\n\nmodule.exports = UserContextMenuCommandInteraction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst MessageComponentInteraction = require('./MessageComponentInteraction');\nconst Events = require('../util/Events');\n\n/**\n * Represents a {@link ComponentType.UserSelect} select menu interaction.\n * @extends {MessageComponentInteraction}\n */\nclass UserSelectMenuInteraction extends MessageComponentInteraction {\n  constructor(client, data) {\n    super(client, data);\n    const { resolved, values } = data.data;\n\n    /**\n     * An array of the selected user ids\n     * @type {Snowflake[]}\n     */\n    this.values = values ?? [];\n\n    /**\n     * Collection of the selected users\n     * @type {Collection<Snowflake, User>}\n     */\n    this.users = new Collection();\n\n    /**\n     * Collection of the selected members\n     * @type {Collection<Snowflake, GuildMember|APIGuildMember>}\n     */\n    this.members = new Collection();\n\n    for (const user of Object.values(resolved?.users ?? {})) {\n      this.users.set(user.id, this.client.users._add(user));\n    }\n\n    for (const [id, member] of Object.entries(resolved?.members ?? {})) {\n      const user = resolved.users[id];\n\n      if (!user) {\n        this.client.emit(Events.Debug, `[UserSelectMenuInteraction] Received a member without a user, skipping ${id}`);\n        continue;\n      }\n\n      this.members.set(id, this.guild?.members._add({ user, ...member }) ?? { user, ...member });\n    }\n  }\n}\n\nmodule.exports = UserSelectMenuInteraction;\n",
    "'use strict';\n\nconst { InteractionType, ComponentType, ApplicationCommandType } = require('discord-api-types/v10');\nconst Action = require('./Action');\nconst AutocompleteInteraction = require('../../structures/AutocompleteInteraction');\nconst ButtonInteraction = require('../../structures/ButtonInteraction');\nconst ChannelSelectMenuInteraction = require('../../structures/ChannelSelectMenuInteraction');\nconst ChatInputCommandInteraction = require('../../structures/ChatInputCommandInteraction');\nconst MentionableSelectMenuInteraction = require('../../structures/MentionableSelectMenuInteraction');\nconst MessageContextMenuCommandInteraction = require('../../structures/MessageContextMenuCommandInteraction');\nconst ModalSubmitInteraction = require('../../structures/ModalSubmitInteraction');\nconst RoleSelectMenuInteraction = require('../../structures/RoleSelectMenuInteraction');\nconst StringSelectMenuInteraction = require('../../structures/StringSelectMenuInteraction');\nconst UserContextMenuCommandInteraction = require('../../structures/UserContextMenuCommandInteraction');\nconst UserSelectMenuInteraction = require('../../structures/UserSelectMenuInteraction');\nconst Events = require('../../util/Events');\n\nclass InteractionCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    // Resolve and cache partial channels for Interaction#channel getter\n    const channel = data.channel && this.getChannel(data.channel);\n\n    // Do not emit this for interactions that cache messages that are non-text-based.\n    let InteractionClass;\n\n    switch (data.type) {\n      case InteractionType.ApplicationCommand:\n        switch (data.data.type) {\n          case ApplicationCommandType.ChatInput:\n            InteractionClass = ChatInputCommandInteraction;\n            break;\n          case ApplicationCommandType.User:\n            InteractionClass = UserContextMenuCommandInteraction;\n            break;\n          case ApplicationCommandType.Message:\n            if (channel && !channel.isTextBased()) return;\n            InteractionClass = MessageContextMenuCommandInteraction;\n            break;\n          default:\n            client.emit(\n              Events.Debug,\n              `[INTERACTION] Received application command interaction with unknown type: ${data.data.type}`,\n            );\n            return;\n        }\n        break;\n      case InteractionType.MessageComponent:\n        if (channel && !channel.isTextBased()) return;\n\n        switch (data.data.component_type) {\n          case ComponentType.Button:\n            InteractionClass = ButtonInteraction;\n            break;\n          case ComponentType.StringSelect:\n            InteractionClass = StringSelectMenuInteraction;\n            break;\n          case ComponentType.UserSelect:\n            InteractionClass = UserSelectMenuInteraction;\n            break;\n          case ComponentType.RoleSelect:\n            InteractionClass = RoleSelectMenuInteraction;\n            break;\n          case ComponentType.MentionableSelect:\n            InteractionClass = MentionableSelectMenuInteraction;\n            break;\n          case ComponentType.ChannelSelect:\n            InteractionClass = ChannelSelectMenuInteraction;\n            break;\n          default:\n            client.emit(\n              Events.Debug,\n              `[INTERACTION] Received component interaction with unknown type: ${data.data.component_type}`,\n            );\n            return;\n        }\n        break;\n      case InteractionType.ApplicationCommandAutocomplete:\n        InteractionClass = AutocompleteInteraction;\n        break;\n      case InteractionType.ModalSubmit:\n        InteractionClass = ModalSubmitInteraction;\n        break;\n      default:\n        client.emit(Events.Debug, `[INTERACTION] Received interaction with unknown type: ${data.type}`);\n        return;\n    }\n\n    const interaction = new InteractionClass(client, data);\n\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interactionCreate\n     * @param {BaseInteraction} interaction The interaction which was created\n     */\n    client.emit(Events.InteractionCreate, interaction);\n  }\n}\n\nmodule.exports = InteractionCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass InviteCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!channel) return false;\n\n    const inviteData = Object.assign(data, { channel, guild });\n    const invite = guild.invites._add(inviteData);\n\n    /**\n     * Emitted when an invite is created.\n     * <info>This event requires the {@link PermissionFlagsBits.ManageChannels} permission for the channel.</info>\n     * @event Client#inviteCreate\n     * @param {Invite} invite The invite that was created\n     */\n    client.emit(Events.InviteCreate, invite);\n    return { invite };\n  }\n}\n\nmodule.exports = InviteCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Invite = require('../../structures/Invite');\nconst Events = require('../../util/Events');\n\nclass InviteDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!channel) return false;\n\n    const inviteData = Object.assign(data, { channel, guild });\n    const invite = new Invite(client, inviteData);\n    guild.invites.cache.delete(invite.code);\n\n    /**\n     * Emitted when an invite is deleted.\n     * <info>This event requires the {@link PermissionFlagsBits.ManageChannels} permission for the channel.</info>\n     * @event Client#inviteDelete\n     * @param {Invite} invite The invite that was deleted\n     */\n    client.emit(Events.InviteDelete, invite);\n    return { invite };\n  }\n}\n\nmodule.exports = InviteDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel({\n      id: data.channel_id,\n      author: data.author,\n      ...('guild_id' in data && { guild_id: data.guild_id }),\n    });\n    if (channel) {\n      if (!channel.isTextBased()) return {};\n\n      if (channel.isThread()) {\n        channel.messageCount++;\n        channel.totalMessageSent++;\n      }\n\n      const existing = channel.messages.cache.get(data.id);\n      if (existing && existing.author?.id !== this.client.user.id) return { message: existing };\n      const message = existing ?? channel.messages._add(data);\n      channel.lastMessageId = data.id;\n\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#messageCreate\n       * @param {Message} message The created message\n       */\n      client.emit(Events.MessageCreate, message);\n\n      return { message };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = MessageCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessageDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    let message;\n    if (channel) {\n      if (!channel.isTextBased()) return {};\n\n      if (channel.isThread()) channel.messageCount--;\n\n      message = this.getMessage(data, channel);\n      if (message) {\n        channel.messages.cache.delete(message.id);\n        /**\n         * Emitted whenever a message is deleted.\n         * @event Client#messageDelete\n         * @param {Message} message The deleted message\n         */\n        client.emit(Events.MessageDelete, message);\n      }\n    }\n\n    return { message };\n  }\n}\n\nmodule.exports = MessageDeleteAction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessageDeleteBulkAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n\n    if (channel) {\n      if (!channel.isTextBased()) return {};\n\n      if (channel.isThread()) channel.messageCount -= data.ids.length;\n\n      const ids = data.ids;\n      const messages = new Collection();\n      for (const id of ids) {\n        const message = this.getMessage(\n          {\n            id,\n            guild_id: data.guild_id,\n          },\n          channel,\n          false,\n        );\n        if (message) {\n          messages.set(message.id, message);\n          channel.messages.cache.delete(id);\n        }\n      }\n\n      /**\n       * Emitted whenever messages are deleted in bulk.\n       * @event Client#messageDeleteBulk\n       * @param {Collection<Snowflake, Message>} messages The deleted messages, mapped by their id\n       * @param {GuildTextBasedChannel} channel The channel that the messages were deleted in\n       */\n      if (messages.size > 0) client.emit(Events.MessageBulkDelete, messages, channel);\n      return { messages };\n    }\n    return {};\n  }\n}\n\nmodule.exports = MessageDeleteBulkAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessagePollVoteAddAction extends Action {\n  handle(data) {\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    if (!channel?.isTextBased()) return false;\n\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    const { poll } = message;\n\n    const answer = poll?.answers.get(data.answer_id);\n    if (!answer) return false;\n\n    answer.voteCount++;\n\n    /**\n     * Emitted whenever a user votes in a poll.\n     * @event Client#messagePollVoteAdd\n     * @param {PollAnswer} pollAnswer The answer that was voted on\n     * @param {Snowflake} userId The id of the user that voted\n     */\n    this.client.emit(Events.MessagePollVoteAdd, answer, data.user_id);\n\n    return { poll };\n  }\n}\n\nmodule.exports = MessagePollVoteAddAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessagePollVoteRemoveAction extends Action {\n  handle(data) {\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    if (!channel?.isTextBased()) return false;\n\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    const { poll } = message;\n\n    const answer = poll?.answers.get(data.answer_id);\n    if (!answer) return false;\n\n    answer.voteCount--;\n\n    /**\n     * Emitted whenever a user removes their vote in a poll.\n     * @event Client#messagePollVoteRemove\n     * @param {PollAnswer} pollAnswer The answer where the vote was removed\n     * @param {Snowflake} userId The id of the user that removed their vote\n     */\n    this.client.emit(Events.MessagePollVoteRemove, answer, data.user_id);\n\n    return { poll };\n  }\n}\n\nmodule.exports = MessagePollVoteRemoveAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Partials = require('../../util/Partials');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     burst: boolean\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data, fromStructure = false) {\n    if (!data.emoji) return false;\n\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel({\n      id: data.channel_id,\n      ...('guild_id' in data && { guild_id: data.guild_id }),\n      user_id: data.user_id,\n      ...this.spreadInjectedData(data),\n    });\n\n    if (!channel?.isTextBased()) return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    const includePartial = this.client.options.partials.includes(Partials.Reaction);\n    if (message.partial && !includePartial) return false;\n    const reaction = message.reactions._add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id,\n      burst_colors: data.burst_colors,\n    });\n    if (!reaction) return false;\n    reaction._add(user, data.burst);\n    if (fromStructure) return { message, reaction, user };\n    /**\n     * Provides additional information about altered reaction\n     * @typedef {Object} MessageReactionEventDetails\n     * @property {ReactionType} type The type of the reaction\n     * @property {boolean} burst Determines whether a super reaction was used\n     */\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     * @param {MessageReactionEventDetails} details Details of adding the reaction\n     */\n    this.client.emit(Events.MessageReactionAdd, reaction, user, { type: data.type, burst: data.burst });\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionAdd;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     guild_id: 'id' }\n*/\n\nclass MessageReactionRemove extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n\n    const user = this.getUser(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel({\n      id: data.channel_id,\n      ...('guild_id' in data && { guild_id: data.guild_id }),\n      user_id: data.user_id,\n    });\n    if (!channel?.isTextBased()) return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    const reaction = this.getReaction(data, message, user);\n    if (!reaction) return false;\n    reaction._remove(user, data.burst);\n    /**\n     * Emitted whenever a reaction is removed from a cached message.\n     * @event Client#messageReactionRemove\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user whose emoji or reaction emoji was removed\n     * @param {MessageReactionEventDetails} details Details of removing the reaction\n     */\n    this.client.emit(Events.MessageReactionRemove, reaction, user, { type: data.type, burst: data.burst });\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionRemove;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessageReactionRemoveAll extends Action {\n  handle(data) {\n    // Verify channel\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    if (!channel?.isTextBased()) return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Copy removed reactions to emit for the event.\n    const removed = message.reactions.cache.clone();\n\n    message.reactions.cache.clear();\n    this.client.emit(Events.MessageReactionRemoveAll, message, removed);\n\n    return { message };\n  }\n}\n\n/**\n * Emitted whenever all reactions are removed from a cached message.\n * @event Client#messageReactionRemoveAll\n * @param {Message} message The message the reactions were removed from\n * @param {Collection<string|Snowflake, MessageReaction>} reactions The cached message reactions that were removed.\n */\n\nmodule.exports = MessageReactionRemoveAll;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass MessageReactionRemoveEmoji extends Action {\n  handle(data) {\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    if (!channel?.isTextBased()) return false;\n\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    const reaction = this.getReaction(data, message);\n    if (!reaction) return false;\n    if (!message.partial) message.reactions.cache.delete(reaction.emoji.id ?? reaction.emoji.name);\n\n    /**\n     * Emitted when a bot removes an emoji reaction from a cached message.\n     * @event Client#messageReactionRemoveEmoji\n     * @param {MessageReaction} reaction The reaction that was removed\n     */\n    this.client.emit(Events.MessageReactionRemoveEmoji, reaction);\n    return { reaction };\n  }\n}\n\nmodule.exports = MessageReactionRemoveEmoji;\n",
    "'use strict';\n\nconst Action = require('./Action');\n\nclass MessageUpdateAction extends Action {\n  handle(data) {\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    if (channel) {\n      if (!channel.isTextBased()) return {};\n\n      const { id, channel_id, guild_id, author, timestamp, type } = data;\n      const message = this.getMessage({ id, channel_id, guild_id, author, timestamp, type }, channel);\n      if (message) {\n        const old = message._update(data);\n        return {\n          old,\n          updated: message,\n        };\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = MessageUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\nconst Partials = require('../../util/Partials');\n\nclass PresenceUpdateAction extends Action {\n  handle(data) {\n    let user = this.client.users.cache.get(data.user.id);\n    if (!user && ('username' in data.user || this.client.options.partials.includes(Partials.User))) {\n      user = this.client.users._add(data.user);\n    }\n    if (!user) return;\n\n    if (data.user.username) {\n      if (!user._equals(data.user)) this.client.actions.UserUpdate.handle(data.user);\n    }\n\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild) return;\n\n    const oldPresence = guild.presences.cache.get(user.id)?._clone() ?? null;\n    let member = guild.members.cache.get(user.id);\n    if (!member && data.status !== 'offline') {\n      member = guild.members._add({\n        user,\n        deaf: false,\n        mute: false,\n      });\n      this.client.emit(Events.GuildMemberAvailable, member);\n    }\n    const newPresence = guild.presences._add(Object.assign(data, { guild }));\n    if (this.client.listenerCount(Events.PresenceUpdate) && !newPresence.equals(oldPresence)) {\n      /**\n       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.\n       * @event Client#presenceUpdate\n       * @param {?Presence} oldPresence The presence before the update, if one at all\n       * @param {Presence} newPresence The presence after the update\n       */\n      this.client.emit(Events.PresenceUpdate, oldPresence, newPresence);\n    }\n  }\n}\n\nmodule.exports = PresenceUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass StageInstanceCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel({ id: data.channel_id, guild_id: data.guild_id });\n\n    if (channel) {\n      const stageInstance = channel.guild.stageInstances._add(data);\n\n      /**\n       * Emitted whenever a stage instance is created.\n       * @event Client#stageInstanceCreate\n       * @param {StageInstance} stageInstance The created stage instance\n       */\n      client.emit(Events.StageInstanceCreate, stageInstance);\n\n      return { stageInstance };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = StageInstanceCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass StageInstanceDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel({ id: data.channel_id, guild_id: data.guild_id });\n\n    if (channel) {\n      const stageInstance = channel.guild.stageInstances._add(data);\n      if (stageInstance) {\n        channel.guild.stageInstances.cache.delete(stageInstance.id);\n\n        /**\n         * Emitted whenever a stage instance is deleted.\n         * @event Client#stageInstanceDelete\n         * @param {StageInstance} stageInstance The deleted stage instance\n         */\n        client.emit(Events.StageInstanceDelete, stageInstance);\n\n        return { stageInstance };\n      }\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = StageInstanceDeleteAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass StageInstanceUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel({ id: data.channel_id, guild_id: data.guild_id });\n\n    if (channel) {\n      const oldStageInstance = channel.guild.stageInstances.cache.get(data.id)?._clone() ?? null;\n      const newStageInstance = channel.guild.stageInstances._add(data);\n\n      /**\n       * Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level\n       * @event Client#stageInstanceUpdate\n       * @param {?StageInstance} oldStageInstance The stage instance before the update\n       * @param {StageInstance} newStageInstance The stage instance after the update\n       */\n      client.emit(Events.StageInstanceUpdate, oldStageInstance, newStageInstance);\n\n      return { oldStageInstance, newStageInstance };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = StageInstanceUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ThreadCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const existing = client.channels.cache.has(data.id);\n    const thread = client.channels._add(data);\n    if (!existing && thread) {\n      /**\n       * Emitted whenever a thread is created or when the client user is added to a thread.\n       * @event Client#threadCreate\n       * @param {ThreadChannel} thread The thread that was created\n       * @param {boolean} newlyCreated Whether the thread was newly created\n       */\n      client.emit(Events.ThreadCreate, thread, data.newly_created ?? false);\n    }\n    return { thread };\n  }\n}\n\nmodule.exports = ThreadCreateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ThreadDeleteAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const thread = client.channels.cache.get(data.id);\n\n    if (thread) {\n      client.channels._remove(thread.id);\n\n      /**\n       * Emitted whenever a thread is deleted.\n       * @event Client#threadDelete\n       * @param {ThreadChannel} thread The thread that was deleted\n       */\n      client.emit(Events.ThreadDelete, thread);\n    }\n\n    return { thread };\n  }\n}\n\nmodule.exports = ThreadDeleteAction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ThreadListSyncAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!guild) return {};\n\n    if (data.channel_ids) {\n      for (const id of data.channel_ids) {\n        const channel = client.channels.cache.get(id);\n        if (channel) this.removeStale(channel);\n      }\n    } else {\n      for (const channel of guild.channels.cache.values()) {\n        this.removeStale(channel);\n      }\n    }\n\n    const syncedThreads = data.threads.reduce((coll, rawThread) => {\n      const thread = client.channels._add(rawThread);\n      return coll.set(thread.id, thread);\n    }, new Collection());\n\n    for (const rawMember of Object.values(data.members)) {\n      // Discord sends the thread id as id in this object\n      const thread = client.channels.cache.get(rawMember.id);\n      if (thread) {\n        thread.members._add(rawMember);\n      }\n    }\n\n    /**\n     * Emitted whenever the client user gains access to a text or news channel that contains threads\n     * @event Client#threadListSync\n     * @param {Collection<Snowflake, ThreadChannel>} threads The threads that were synced\n     * @param {Guild} guild The guild that the threads were synced in\n     */\n    client.emit(Events.ThreadListSync, syncedThreads, guild);\n\n    return {\n      syncedThreads,\n    };\n  }\n\n  removeStale(channel) {\n    channel.threads?.cache.forEach(thread => {\n      if (!thread.archived) {\n        this.client.channels._remove(thread.id);\n      }\n    });\n  }\n}\n\nmodule.exports = ThreadListSyncAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ThreadMemberUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    // Discord sends the thread id as id in this object\n    const thread = client.channels.cache.get(data.id);\n    if (thread) {\n      const member = thread.members.cache.get(data.user_id);\n      if (!member) {\n        const newMember = thread.members._add(data);\n        return { newMember };\n      }\n      const old = member._update(data);\n      /**\n       * Emitted whenever the client user's thread member is updated.\n       * @event Client#threadMemberUpdate\n       * @param {ThreadMember} oldMember The member before the update\n       * @param {ThreadMember} newMember The member after the update\n       */\n      client.emit(Events.ThreadMemberUpdate, old, member);\n    }\n    return {};\n  }\n}\n\nmodule.exports = ThreadMemberUpdateAction;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass ThreadMembersUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const thread = client.channels.cache.get(data.id);\n    if (thread) {\n      thread.memberCount = data.member_count;\n      const addedMembers = new Collection();\n      const removedMembers = new Collection();\n\n      data.added_members?.reduce(\n        (_addedMembers, addedMember) => _addedMembers.set(addedMember.user_id, thread.members._add(addedMember)),\n        addedMembers,\n      );\n\n      data.removed_member_ids?.reduce((removedMembersIds, removedMembersId) => {\n        const threadMember = this.getThreadMember(removedMembersId, thread.members);\n        if (threadMember) removedMembersIds.set(threadMember.id, threadMember);\n        thread.members.cache.delete(removedMembersId);\n        return removedMembersIds;\n      }, removedMembers);\n\n      if (addedMembers.size === 0 && removedMembers.size === 0) {\n        // Uncached thread member(s) left.\n        return {};\n      }\n\n      /**\n       * Emitted whenever members are added or removed from a thread.\n       * <info>This event requires the {@link GatewayIntentBits.GuildMembers} privileged gateway intent.</info>\n       * @event Client#threadMembersUpdate\n       * @param {Collection<Snowflake, ThreadMember>} addedMembers The members that were added\n       * @param {Collection<Snowflake, ThreadMember>} removedMembers The members that were removed\n       * @param {ThreadChannel} thread The thread where members got updated\n       */\n      client.emit(Events.ThreadMembersUpdate, addedMembers, removedMembers, thread);\n    }\n    return {};\n  }\n}\n\nmodule.exports = ThreadMembersUpdateAction;\n",
    "'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a typing state for a user in a channel.\n * @extends {Base}\n */\nclass Typing extends Base {\n  constructor(channel, user, data) {\n    super(channel.client);\n\n    /**\n     * The channel the status is from\n     * @type {TextBasedChannels}\n     */\n    this.channel = channel;\n\n    /**\n     * The user who is typing\n     * @type {User}\n     */\n    this.user = user;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('timestamp' in data) {\n      /**\n       * The UNIX timestamp in milliseconds the user started typing at\n       * @type {number}\n       */\n      this.startedTimestamp = data.timestamp * 1_000;\n    }\n  }\n\n  /**\n   * Indicates whether the status is received from a guild.\n   * @returns {boolean}\n   */\n  inGuild() {\n    return this.guild !== null;\n  }\n\n  /**\n   * The time the user started typing at\n   * @type {Date}\n   * @readonly\n   */\n  get startedAt() {\n    return new Date(this.startedTimestamp);\n  }\n\n  /**\n   * The guild the status is from\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.channel.guild ?? null;\n  }\n\n  /**\n   * The member who is typing\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild?.members.resolve(this.user) ?? null;\n  }\n}\n\nmodule.exports = Typing;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Typing = require('../../structures/Typing');\nconst Events = require('../../util/Events');\n\nclass TypingStart extends Action {\n  handle(data) {\n    const channel = this.getChannel({ id: data.channel_id, ...('guild_id' in data && { guild_id: data.guild_id }) });\n    if (!channel) return;\n\n    if (!channel.isTextBased()) {\n      this.client.emit(Events.Warn, `Discord sent a typing packet to a ${channel.type} channel ${channel.id}`);\n      return;\n    }\n\n    const user = this.getUserFromMember(data);\n    if (user) {\n      /**\n       * Emitted whenever a user starts typing in a channel.\n       * @event Client#typingStart\n       * @param {Typing} typing The typing state\n       */\n      this.client.emit(Events.TypingStart, new Typing(channel, user, data));\n    }\n  }\n}\n\nmodule.exports = TypingStart;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst Events = require('../../util/Events');\n\nclass UserUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const newUser = data.id === client.user.id ? client.user : client.users.cache.get(data.id);\n    const oldUser = newUser._update(data);\n\n    if (!oldUser.equals(newUser)) {\n      /**\n       * Emitted whenever a user's details (e.g. username) are changed.\n       * Triggered by the Discord gateway events {@link Events.UserUpdate},\n       * {@link Events.GuildMemberUpdate}, and {@link Events.PresenceUpdate}.\n       * @event Client#userUpdate\n       * @param {User} oldUser The user before the update\n       * @param {User} newUser The user after the update\n       */\n      client.emit(Events.UserUpdate, oldUser, newUser);\n      return {\n        old: oldUser,\n        updated: newUser,\n      };\n    }\n\n    return {\n      old: null,\n      updated: null,\n    };\n  }\n}\n\nmodule.exports = UserUpdateAction;\n",
    "'use strict';\n\nconst Action = require('./Action');\nconst VoiceState = require('../../structures/VoiceState');\nconst Events = require('../../util/Events');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      // Update the state\n      const oldState =\n        guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, { user_id: data.user_id });\n\n      const newState = guild.voiceStates._add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member?.user && data.member.joined_at) {\n        member = guild.members._add(data.member);\n      }\n\n      // Emit event\n      if (member?.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VoiceStateUpdate, oldState, newState);\n    }\n  }\n}\n\nmodule.exports = VoiceStateUpdate;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst Action = require('./Action');\n\nlet deprecationEmitted = false;\n\nclass WebhooksUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = client.channels.cache.get(data.channel_id);\n    if (!channel) return;\n\n    // TODO: change to Events.WebhooksUpdate in the next major version\n    /**\n     * Emitted whenever a channel has its webhooks changed.\n     * @event Client#webhooksUpdate\n     * @param {TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel} channel\n     * The channel that had a webhook update\n     */\n    client.emit('webhooksUpdate', channel);\n\n    /**\n     * Emitted whenever a channel has its webhooks changed.\n     * @event Client#webhookUpdate\n     * @param {TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel} channel\n     * The channel that had a webhook update\n     * @deprecated Use {@link Client#event:webhooksUpdate} instead.\n     */\n    if (client.emit('webhookUpdate', channel) && !deprecationEmitted) {\n      deprecationEmitted = true;\n      process.emitWarning('The webhookUpdate event is deprecated. Use webhooksUpdate instead.', 'DeprecationWarning');\n    }\n  }\n}\n\nmodule.exports = WebhooksUpdate;\n",
    "'use strict';\n\nclass ActionsManager {\n  // These symbols represent fully built data that we inject at times when calling actions manually.\n  // Action#getUser, for example, will return the injected data (which is assumed to be a built structure)\n  // instead of trying to make it from provided data\n  injectedUser = Symbol('djs.actions.injectedUser');\n  injectedChannel = Symbol('djs.actions.injectedChannel');\n  injectedMessage = Symbol('djs.actions.injectedMessage');\n\n  constructor(client) {\n    this.client = client;\n\n    this.register(require('./ApplicationCommandPermissionsUpdate'));\n    this.register(require('./AutoModerationActionExecution'));\n    this.register(require('./AutoModerationRuleCreate'));\n    this.register(require('./AutoModerationRuleDelete'));\n    this.register(require('./AutoModerationRuleUpdate'));\n    this.register(require('./ChannelCreate'));\n    this.register(require('./ChannelDelete'));\n    this.register(require('./ChannelUpdate'));\n    this.register(require('./EntitlementCreate'));\n    this.register(require('./EntitlementDelete'));\n    this.register(require('./EntitlementUpdate'));\n    this.register(require('./GuildAuditLogEntryCreate'));\n    this.register(require('./GuildBanAdd'));\n    this.register(require('./GuildBanRemove'));\n    this.register(require('./GuildChannelsPositionUpdate'));\n    this.register(require('./GuildDelete'));\n    this.register(require('./GuildEmojiCreate'));\n    this.register(require('./GuildEmojiDelete'));\n    this.register(require('./GuildEmojiUpdate'));\n    this.register(require('./GuildEmojisUpdate'));\n    this.register(require('./GuildIntegrationsUpdate'));\n    this.register(require('./GuildMemberRemove'));\n    this.register(require('./GuildMemberUpdate'));\n    this.register(require('./GuildRoleCreate'));\n    this.register(require('./GuildRoleDelete'));\n    this.register(require('./GuildRoleUpdate'));\n    this.register(require('./GuildRolesPositionUpdate'));\n    this.register(require('./GuildScheduledEventCreate'));\n    this.register(require('./GuildScheduledEventDelete'));\n    this.register(require('./GuildScheduledEventUpdate'));\n    this.register(require('./GuildScheduledEventUserAdd'));\n    this.register(require('./GuildScheduledEventUserRemove'));\n    this.register(require('./GuildStickerCreate'));\n    this.register(require('./GuildStickerDelete'));\n    this.register(require('./GuildStickerUpdate'));\n    this.register(require('./GuildStickersUpdate'));\n    this.register(require('./GuildUpdate'));\n    this.register(require('./InteractionCreate'));\n    this.register(require('./InviteCreate'));\n    this.register(require('./InviteDelete'));\n    this.register(require('./MessageCreate'));\n    this.register(require('./MessageDelete'));\n    this.register(require('./MessageDeleteBulk'));\n    this.register(require('./MessagePollVoteAdd'));\n    this.register(require('./MessagePollVoteRemove'));\n    this.register(require('./MessageReactionAdd'));\n    this.register(require('./MessageReactionRemove'));\n    this.register(require('./MessageReactionRemoveAll'));\n    this.register(require('./MessageReactionRemoveEmoji'));\n    this.register(require('./MessageUpdate'));\n    this.register(require('./PresenceUpdate'));\n    this.register(require('./StageInstanceCreate'));\n    this.register(require('./StageInstanceDelete'));\n    this.register(require('./StageInstanceUpdate'));\n    this.register(require('./ThreadCreate'));\n    this.register(require('./ThreadDelete'));\n    this.register(require('./ThreadListSync'));\n    this.register(require('./ThreadMemberUpdate'));\n    this.register(require('./ThreadMembersUpdate'));\n    this.register(require('./TypingStart'));\n    this.register(require('./UserUpdate'));\n    this.register(require('./VoiceStateUpdate'));\n    this.register(require('./WebhooksUpdate'));\n  }\n\n  register(Action) {\n    this[Action.name.replace(/Action$/, '')] = new Action(this.client);\n  }\n}\n\nmodule.exports = ActionsManager;\n",
    "'use strict';\n\nconst Events = require('../../util/Events');\n\n/**\n * Manages voice connections for the client\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     * @readonly\n     * @name ClientVoiceManager#client\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * Maps guild ids to voice adapters created for use with `@discordjs/voice`.\n     * @type {Map<Snowflake, Object>}\n     */\n    this.adapters = new Map();\n\n    client.on(Events.ShardDisconnect, (_, shardId) => {\n      for (const [guildId, adapter] of this.adapters.entries()) {\n        if (client.guilds.cache.get(guildId)?.shardId === shardId) {\n          adapter.destroy();\n        }\n      }\n    });\n  }\n\n  onVoiceServer(payload) {\n    this.adapters.get(payload.guild_id)?.onVoiceServerUpdate(payload);\n  }\n\n  onVoiceStateUpdate(payload) {\n    if (payload.guild_id && payload.session_id && payload.user_id === this.client.user?.id) {\n      this.adapters.get(payload.guild_id)?.onVoiceStateUpdate(payload);\n    }\n  }\n}\n\nmodule.exports = ClientVoiceManager;\n",
    "\"use strict\";\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  Collection: () => Collection,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/collection.ts\nvar Collection = class _Collection extends Map {\n  static {\n    __name(this, \"Collection\");\n  }\n  /**\n   * Obtains the value of the given key if it exists, otherwise sets and returns the value provided by the default value generator.\n   *\n   * @param key - The key to get if it exists, or set otherwise\n   * @param defaultValueGenerator - A function that generates the default value\n   * @example\n   * ```ts\n   * collection.ensure(guildId, () => defaultGuildConfig);\n   * ```\n   */\n  ensure(key, defaultValueGenerator) {\n    if (this.has(key)) return this.get(key);\n    if (typeof defaultValueGenerator !== \"function\") throw new TypeError(`${defaultValueGenerator} is not a function`);\n    const defaultValue = defaultValueGenerator(key, this);\n    this.set(key, defaultValue);\n    return defaultValue;\n  }\n  /**\n   * Checks if all of the elements exist in the collection.\n   *\n   * @param keys - The keys of the elements to check for\n   * @returns `true` if all of the elements exist, `false` if at least one does not exist.\n   */\n  hasAll(...keys) {\n    return keys.every((key) => super.has(key));\n  }\n  /**\n   * Checks if any of the elements exist in the collection.\n   *\n   * @param keys - The keys of the elements to check for\n   * @returns `true` if any of the elements exist, `false` if none exist.\n   */\n  hasAny(...keys) {\n    return keys.some((key) => super.has(key));\n  }\n  first(amount) {\n    if (amount === void 0) return this.values().next().value;\n    if (amount < 0) return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({ length: amount }, () => iter.next().value);\n  }\n  firstKey(amount) {\n    if (amount === void 0) return this.keys().next().value;\n    if (amount < 0) return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({ length: amount }, () => iter.next().value);\n  }\n  last(amount) {\n    const arr = [...this.values()];\n    if (amount === void 0) return arr[arr.length - 1];\n    if (amount < 0) return this.first(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  lastKey(amount) {\n    const arr = [...this.keys()];\n    if (amount === void 0) return arr[arr.length - 1];\n    if (amount < 0) return this.firstKey(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n   * Returns the item at a given index, allowing for positive and negative integers.\n   * Negative integers count back from the last item in the collection.\n   *\n   * @param index - The index of the element to obtain\n   */\n  at(index) {\n    index = Math.floor(index);\n    const arr = [...this.values()];\n    return arr.at(index);\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at | Array.at()}.\n   * Returns the key at a given index, allowing for positive and negative integers.\n   * Negative integers count back from the last item in the collection.\n   *\n   * @param index - The index of the key to obtain\n   */\n  keyAt(index) {\n    index = Math.floor(index);\n    const arr = [...this.keys()];\n    return arr.at(index);\n  }\n  random(amount) {\n    const arr = [...this.values()];\n    if (amount === void 0) return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from(\n      { length: Math.min(amount, arr.length) },\n      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]\n    );\n  }\n  randomKey(amount) {\n    const arr = [...this.keys()];\n    if (amount === void 0) return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from(\n      { length: Math.min(amount, arr.length) },\n      () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]\n    );\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse | Array.reverse()}\n   * but returns a Collection instead of an Array.\n   */\n  reverse() {\n    const entries = [...this.entries()].reverse();\n    this.clear();\n    for (const [key, value] of entries) this.set(key, value);\n    return this;\n  }\n  find(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return val;\n    }\n    return void 0;\n  }\n  findKey(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return key;\n    }\n    return void 0;\n  }\n  findLast(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const entries = [...this.entries()];\n    for (let index = entries.length - 1; index >= 0; index--) {\n      const val = entries[index][1];\n      const key = entries[index][0];\n      if (fn(val, key, this)) return val;\n    }\n    return void 0;\n  }\n  findLastKey(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const entries = [...this.entries()];\n    for (let index = entries.length - 1; index >= 0; index--) {\n      const key = entries[index][0];\n      const val = entries[index][1];\n      if (fn(val, key, this)) return key;\n    }\n    return void 0;\n  }\n  sweep(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const previousSize = this.size;\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) this.delete(key);\n    }\n    return previousSize - this.size;\n  }\n  filter(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n    return results;\n  }\n  partition(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const results = [\n      new this.constructor[Symbol.species](),\n      new this.constructor[Symbol.species]()\n    ];\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n    return results;\n  }\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n  map(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({ length: this.size }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n  mapValues(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, val] of this) coll.set(key, fn(val, key, this));\n    return coll;\n  }\n  some(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n    return false;\n  }\n  every(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n    return true;\n  }\n  reduce(fn, initialValue) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    let accumulator;\n    const iterator = this.entries();\n    if (initialValue === void 0) {\n      if (this.size === 0) throw new TypeError(\"Reduce of empty collection with no initial value\");\n      accumulator = iterator.next().value[1];\n    } else {\n      accumulator = initialValue;\n    }\n    for (const [key, value] of iterator) {\n      accumulator = fn(accumulator, value, key, this);\n    }\n    return accumulator;\n  }\n  reduceRight(fn, initialValue) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    const entries = [...this.entries()];\n    let accumulator;\n    let index;\n    if (initialValue === void 0) {\n      if (entries.length === 0) throw new TypeError(\"Reduce of empty collection with no initial value\");\n      accumulator = entries[entries.length - 1][1];\n      index = entries.length - 1;\n    } else {\n      accumulator = initialValue;\n      index = entries.length;\n    }\n    while (--index >= 0) {\n      const key = entries[index][0];\n      const val = entries[index][1];\n      accumulator = fn(accumulator, val, key, this);\n    }\n    return accumulator;\n  }\n  each(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    for (const [key, value] of this) {\n      fn(value, key, this);\n    }\n    return this;\n  }\n  tap(fn, thisArg) {\n    if (typeof fn !== \"function\") throw new TypeError(`${fn} is not a function`);\n    if (thisArg !== void 0) fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  /**\n   * Creates an identical shallow copy of this collection.\n   *\n   * @example\n   * ```ts\n   * const newColl = someColl.clone();\n   * ```\n   */\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   *\n   * @param collections - Collections to merge\n   * @example\n   * ```ts\n   * const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   * ```\n   */\n  concat(...collections) {\n    const newColl = this.clone();\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n    return newColl;\n  }\n  /**\n   * Checks if this collection shares identical items with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   *\n   * @param collection - Collection to compare with\n   * @returns Whether the collections have identical contents\n   */\n  equals(collection) {\n    if (!collection) return false;\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\n   * The sort method sorts the items of a collection in place and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   *\n   * @param compareFunction - Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value, according to the string conversion of each element.\n   * @example\n   * ```ts\n   * collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   * ```\n   */\n  sort(compareFunction = _Collection.defaultSort) {\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0]));\n    super.clear();\n    for (const [key, value] of entries) {\n      super.set(key, value);\n    }\n    return this;\n  }\n  /**\n   * The intersection method returns a new collection containing the items where the key is present in both collections.\n   *\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['c', 3]]);\n   * const intersection = col1.intersection(col2);\n   * console.log(col1.intersection(col2));\n   * // => Collection { 'a' => 1 }\n   * ```\n   */\n  intersection(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (other.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Returns a new collection containing the items where the key is present in either of the collections.\n   *\n   * @remarks\n   *\n   * If the collections have any items with the same key, the value from the first collection will be used.\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['b', 3], ['c', 3]]);\n   * const union = col1.union(col2);\n   * console.log(union);\n   * // => Collection { 'a' => 1, 'b' => 2, 'c' => 3 }\n   * ```\n   */\n  union(other) {\n    const coll = new this.constructor[Symbol.species](this);\n    for (const [key, value] of other) {\n      if (!coll.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Returns a new collection containing the items where the key is present in this collection but not the other.\n   *\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['c', 3]]);\n   * console.log(col1.difference(col2));\n   * // => Collection { 'b' => 2 }\n   * console.log(col2.difference(col1));\n   * // => Collection { 'c' => 3 }\n   * ```\n   */\n  difference(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (!other.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Returns a new collection containing only the items where the keys are present in either collection, but not both.\n   *\n   * @param other - The other Collection to filter against\n   * @example\n   * ```ts\n   * const col1 = new Collection([['a', 1], ['b', 2]]);\n   * const col2 = new Collection([['a', 1], ['c', 3]]);\n   * const symmetricDifference = col1.symmetricDifference(col2);\n   * console.log(col1.symmetricDifference(col2));\n   * // => Collection { 'b' => 2, 'c' => 3 }\n   * ```\n   */\n  symmetricDifference(other) {\n    const coll = new this.constructor[Symbol.species]();\n    for (const [key, value] of this) {\n      if (!other.has(key)) coll.set(key, value);\n    }\n    for (const [key, value] of other) {\n      if (!this.has(key)) coll.set(key, value);\n    }\n    return coll;\n  }\n  /**\n   * Merges two Collections together into a new Collection.\n   *\n   * @param other - The other Collection to merge with\n   * @param whenInSelf - Function getting the result if the entry only exists in this Collection\n   * @param whenInOther - Function getting the result if the entry only exists in the other Collection\n   * @param whenInBoth - Function getting the result if the entry exists in both Collections\n   * @example\n   * ```ts\n   * // Sums up the entries in two collections.\n   * coll.merge(\n   *  other,\n   *  x => ({ keep: true, value: x }),\n   *  y => ({ keep: true, value: y }),\n   *  (x, y) => ({ keep: true, value: x + y }),\n   * );\n   * ```\n   * @example\n   * ```ts\n   * // Intersects two collections in a left-biased manner.\n   * coll.merge(\n   *  other,\n   *  x => ({ keep: false }),\n   *  y => ({ keep: false }),\n   *  (x, _) => ({ keep: true, value: x }),\n   * );\n   * ```\n   */\n  merge(other, whenInSelf, whenInOther, whenInBoth) {\n    const coll = new this.constructor[Symbol.species]();\n    const keys = /* @__PURE__ */ new Set([...this.keys(), ...other.keys()]);\n    for (const key of keys) {\n      const hasInSelf = this.has(key);\n      const hasInOther = other.has(key);\n      if (hasInSelf && hasInOther) {\n        const result = whenInBoth(this.get(key), other.get(key), key);\n        if (result.keep) coll.set(key, result.value);\n      } else if (hasInSelf) {\n        const result = whenInSelf(this.get(key), key);\n        if (result.keep) coll.set(key, result.value);\n      } else if (hasInOther) {\n        const result = whenInOther(other.get(key), key);\n        if (result.keep) coll.set(key, result.value);\n      }\n    }\n    return coll;\n  }\n  /**\n   * Identical to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed | Array.toReversed()}\n   * but returns a Collection instead of an Array.\n   */\n  toReversed() {\n    return new this.constructor[Symbol.species](this).reverse();\n  }\n  /**\n   * The sorted method sorts the items of a collection and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   *\n   * @param compareFunction - Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @example\n   * ```ts\n   * collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   * ```\n   */\n  toSorted(compareFunction = _Collection.defaultSort) {\n    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n  toJSON() {\n    return [...this.entries()];\n  }\n  static defaultSort(firstValue, secondValue) {\n    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n  }\n  /**\n   * Creates a Collection from a list of entries.\n   *\n   * @param entries - The list of entries\n   * @param combine - Function to combine an existing entry with a new one\n   * @example\n   * ```ts\n   * Collection.combineEntries([[\"a\", 1], [\"b\", 2], [\"a\", 2]], (x, y) => x + y);\n   * // returns Collection { \"a\" => 3, \"b\" => 2 }\n   * ```\n   */\n  static combineEntries(entries, combine) {\n    const coll = new _Collection();\n    for (const [key, value] of entries) {\n      if (coll.has(key)) {\n        coll.set(key, combine(coll.get(key), value, key));\n      } else {\n        coll.set(key, value);\n      }\n    }\n    return coll;\n  }\n};\n\n// src/index.ts\nvar version = \"2.1.1\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  Collection,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  CloseCodes: () => CloseCodes,\n  CompressionMethod: () => CompressionMethod,\n  DefaultDeviceProperty: () => DefaultDeviceProperty,\n  DefaultWebSocketManagerOptions: () => DefaultWebSocketManagerOptions,\n  Encoding: () => Encoding,\n  ImportantGatewayOpcodes: () => ImportantGatewayOpcodes,\n  KnownNetworkErrorCodes: () => KnownNetworkErrorCodes,\n  SimpleContextFetchingStrategy: () => SimpleContextFetchingStrategy,\n  SimpleIdentifyThrottler: () => SimpleIdentifyThrottler,\n  SimpleShardingStrategy: () => SimpleShardingStrategy,\n  WebSocketManager: () => WebSocketManager,\n  WebSocketShard: () => WebSocketShard,\n  WebSocketShardDestroyRecovery: () => WebSocketShardDestroyRecovery,\n  WebSocketShardEvents: () => WebSocketShardEvents,\n  WebSocketShardStatus: () => WebSocketShardStatus,\n  WorkerBootstrapper: () => WorkerBootstrapper,\n  WorkerContextFetchingStrategy: () => WorkerContextFetchingStrategy,\n  WorkerReceivePayloadOp: () => WorkerReceivePayloadOp,\n  WorkerSendPayloadOp: () => WorkerSendPayloadOp,\n  WorkerShardingStrategy: () => WorkerShardingStrategy,\n  getInitialSendRateLimitState: () => getInitialSendRateLimitState,\n  managerToFetchingStrategyOptions: () => managerToFetchingStrategyOptions,\n  version: () => version\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/strategies/context/IContextFetchingStrategy.ts\nasync function managerToFetchingStrategyOptions(manager) {\n  const {\n    buildIdentifyThrottler,\n    buildStrategy,\n    retrieveSessionInfo,\n    updateSessionInfo,\n    shardCount,\n    shardIds,\n    rest,\n    ...managerOptions\n  } = manager.options;\n  return {\n    ...managerOptions,\n    gatewayInformation: await manager.fetchGatewayInformation(),\n    shardCount: await manager.getShardCount()\n  };\n}\n__name(managerToFetchingStrategyOptions, \"managerToFetchingStrategyOptions\");\n\n// src/strategies/context/SimpleContextFetchingStrategy.ts\nvar SimpleContextFetchingStrategy = class _SimpleContextFetchingStrategy {\n  constructor(manager, options) {\n    this.manager = manager;\n    this.options = options;\n  }\n  static {\n    __name(this, \"SimpleContextFetchingStrategy\");\n  }\n  // This strategy assumes every shard is running under the same process - therefore we need a single\n  // IdentifyThrottler per manager.\n  static throttlerCache = /* @__PURE__ */ new WeakMap();\n  static async ensureThrottler(manager) {\n    const throttler = _SimpleContextFetchingStrategy.throttlerCache.get(manager);\n    if (throttler) {\n      return throttler;\n    }\n    const newThrottler = await manager.options.buildIdentifyThrottler(manager);\n    _SimpleContextFetchingStrategy.throttlerCache.set(manager, newThrottler);\n    return newThrottler;\n  }\n  async retrieveSessionInfo(shardId) {\n    return this.manager.options.retrieveSessionInfo(shardId);\n  }\n  updateSessionInfo(shardId, sessionInfo) {\n    return this.manager.options.updateSessionInfo(shardId, sessionInfo);\n  }\n  async waitForIdentify(shardId, signal) {\n    const throttler = await _SimpleContextFetchingStrategy.ensureThrottler(this.manager);\n    await throttler.waitForIdentify(shardId, signal);\n  }\n};\n\n// src/strategies/context/WorkerContextFetchingStrategy.ts\nvar import_node_worker_threads2 = require(\"worker_threads\");\nvar import_collection2 = require(\"@discordjs/collection\");\n\n// src/strategies/sharding/WorkerShardingStrategy.ts\nvar import_node_events = require(\"events\");\nvar import_node_path = require(\"path\");\nvar import_node_worker_threads = require(\"worker_threads\");\nvar import_collection = require(\"@discordjs/collection\");\nvar WorkerSendPayloadOp = /* @__PURE__ */ ((WorkerSendPayloadOp2) => {\n  WorkerSendPayloadOp2[WorkerSendPayloadOp2[\"Connect\"] = 0] = \"Connect\";\n  WorkerSendPayloadOp2[WorkerSendPayloadOp2[\"Destroy\"] = 1] = \"Destroy\";\n  WorkerSendPayloadOp2[WorkerSendPayloadOp2[\"Send\"] = 2] = \"Send\";\n  WorkerSendPayloadOp2[WorkerSendPayloadOp2[\"SessionInfoResponse\"] = 3] = \"SessionInfoResponse\";\n  WorkerSendPayloadOp2[WorkerSendPayloadOp2[\"ShardIdentifyResponse\"] = 4] = \"ShardIdentifyResponse\";\n  WorkerSendPayloadOp2[WorkerSendPayloadOp2[\"FetchStatus\"] = 5] = \"FetchStatus\";\n  return WorkerSendPayloadOp2;\n})(WorkerSendPayloadOp || {});\nvar WorkerReceivePayloadOp = /* @__PURE__ */ ((WorkerReceivePayloadOp2) => {\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"Connected\"] = 0] = \"Connected\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"Destroyed\"] = 1] = \"Destroyed\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"Event\"] = 2] = \"Event\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"RetrieveSessionInfo\"] = 3] = \"RetrieveSessionInfo\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"UpdateSessionInfo\"] = 4] = \"UpdateSessionInfo\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"WaitForIdentify\"] = 5] = \"WaitForIdentify\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"FetchStatusResponse\"] = 6] = \"FetchStatusResponse\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"WorkerReady\"] = 7] = \"WorkerReady\";\n  WorkerReceivePayloadOp2[WorkerReceivePayloadOp2[\"CancelIdentify\"] = 8] = \"CancelIdentify\";\n  return WorkerReceivePayloadOp2;\n})(WorkerReceivePayloadOp || {});\nvar WorkerShardingStrategy = class {\n  static {\n    __name(this, \"WorkerShardingStrategy\");\n  }\n  manager;\n  options;\n  #workers = [];\n  #workerByShardId = new import_collection.Collection();\n  connectPromises = new import_collection.Collection();\n  destroyPromises = new import_collection.Collection();\n  fetchStatusPromises = new import_collection.Collection();\n  waitForIdentifyControllers = new import_collection.Collection();\n  throttler;\n  constructor(manager, options) {\n    this.manager = manager;\n    this.options = options;\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.spawn}\n   */\n  async spawn(shardIds) {\n    const shardsPerWorker = this.options.shardsPerWorker === \"all\" ? shardIds.length : this.options.shardsPerWorker;\n    const strategyOptions = await managerToFetchingStrategyOptions(this.manager);\n    const loops = Math.ceil(shardIds.length / shardsPerWorker);\n    const promises = [];\n    for (let idx = 0; idx < loops; idx++) {\n      const slice = shardIds.slice(idx * shardsPerWorker, (idx + 1) * shardsPerWorker);\n      const workerData2 = {\n        ...strategyOptions,\n        shardIds: slice\n      };\n      promises.push(this.setupWorker(workerData2));\n    }\n    await Promise.all(promises);\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.connect}\n   */\n  async connect() {\n    const promises = [];\n    for (const [shardId, worker] of this.#workerByShardId.entries()) {\n      const payload = {\n        op: 0 /* Connect */,\n        shardId\n      };\n      const promise = new Promise((resolve2) => this.connectPromises.set(shardId, resolve2));\n      worker.postMessage(payload);\n      promises.push(promise);\n    }\n    await Promise.all(promises);\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.destroy}\n   */\n  async destroy(options = {}) {\n    const promises = [];\n    for (const [shardId, worker] of this.#workerByShardId.entries()) {\n      const payload = {\n        op: 1 /* Destroy */,\n        shardId,\n        options\n      };\n      promises.push(\n        // eslint-disable-next-line no-promise-executor-return, promise/prefer-await-to-then\n        new Promise((resolve2) => this.destroyPromises.set(shardId, resolve2)).then(async () => worker.terminate())\n      );\n      worker.postMessage(payload);\n    }\n    this.#workers = [];\n    this.#workerByShardId.clear();\n    await Promise.all(promises);\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.send}\n   */\n  send(shardId, data) {\n    const worker = this.#workerByShardId.get(shardId);\n    if (!worker) {\n      throw new Error(`No worker found for shard ${shardId}`);\n    }\n    const payload = {\n      op: 2 /* Send */,\n      shardId,\n      payload: data\n    };\n    worker.postMessage(payload);\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.fetchStatus}\n   */\n  async fetchStatus() {\n    const statuses = new import_collection.Collection();\n    for (const [shardId, worker] of this.#workerByShardId.entries()) {\n      const nonce = Math.random();\n      const payload = {\n        op: 5 /* FetchStatus */,\n        shardId,\n        nonce\n      };\n      const promise = new Promise((resolve2) => this.fetchStatusPromises.set(nonce, resolve2));\n      worker.postMessage(payload);\n      const status = await promise;\n      statuses.set(shardId, status);\n    }\n    return statuses;\n  }\n  async setupWorker(workerData2) {\n    const worker = new import_node_worker_threads.Worker(this.resolveWorkerPath(), { workerData: workerData2 });\n    await (0, import_node_events.once)(worker, \"online\");\n    await this.waitForWorkerReady(worker);\n    worker.on(\"error\", (err) => {\n      throw err;\n    }).on(\"messageerror\", (err) => {\n      throw err;\n    }).on(\"message\", async (payload) => {\n      if (\"op\" in payload) {\n        await this.onMessage(worker, payload);\n      } else {\n        await this.options.unknownPayloadHandler?.(payload);\n      }\n    });\n    this.#workers.push(worker);\n    for (const shardId of workerData2.shardIds) {\n      this.#workerByShardId.set(shardId, worker);\n    }\n  }\n  resolveWorkerPath() {\n    const path = this.options.workerPath;\n    if (!path) {\n      return (0, import_node_path.join)(__dirname, \"defaultWorker.js\");\n    }\n    if ((0, import_node_path.isAbsolute)(path)) {\n      return path;\n    }\n    if (/^\\.\\.?[/\\\\]/.test(path)) {\n      return (0, import_node_path.resolve)(path);\n    }\n    try {\n      return require.resolve(path);\n    } catch {\n      return (0, import_node_path.resolve)(path);\n    }\n  }\n  async waitForWorkerReady(worker) {\n    return new Promise((resolve2) => {\n      const handler = /* @__PURE__ */ __name((payload) => {\n        if (payload.op === 7 /* WorkerReady */) {\n          resolve2();\n          worker.off(\"message\", handler);\n        }\n      }, \"handler\");\n      worker.on(\"message\", handler);\n    });\n  }\n  async onMessage(worker, payload) {\n    switch (payload.op) {\n      case 0 /* Connected */: {\n        this.connectPromises.get(payload.shardId)?.();\n        this.connectPromises.delete(payload.shardId);\n        break;\n      }\n      case 1 /* Destroyed */: {\n        this.destroyPromises.get(payload.shardId)?.();\n        this.destroyPromises.delete(payload.shardId);\n        break;\n      }\n      case 2 /* Event */: {\n        this.manager.emit(payload.event, { ...payload.data, shardId: payload.shardId });\n        break;\n      }\n      case 3 /* RetrieveSessionInfo */: {\n        const session = await this.manager.options.retrieveSessionInfo(payload.shardId);\n        const response = {\n          op: 3 /* SessionInfoResponse */,\n          nonce: payload.nonce,\n          session\n        };\n        worker.postMessage(response);\n        break;\n      }\n      case 4 /* UpdateSessionInfo */: {\n        await this.manager.options.updateSessionInfo(payload.shardId, payload.session);\n        break;\n      }\n      case 5 /* WaitForIdentify */: {\n        const throttler = await this.ensureThrottler();\n        try {\n          const controller = new AbortController();\n          this.waitForIdentifyControllers.set(payload.nonce, controller);\n          await throttler.waitForIdentify(payload.shardId, controller.signal);\n        } catch {\n          return;\n        }\n        const response = {\n          op: 4 /* ShardIdentifyResponse */,\n          nonce: payload.nonce,\n          ok: true\n        };\n        worker.postMessage(response);\n        break;\n      }\n      case 6 /* FetchStatusResponse */: {\n        this.fetchStatusPromises.get(payload.nonce)?.(payload.status);\n        this.fetchStatusPromises.delete(payload.nonce);\n        break;\n      }\n      case 7 /* WorkerReady */: {\n        break;\n      }\n      case 8 /* CancelIdentify */: {\n        this.waitForIdentifyControllers.get(payload.nonce)?.abort();\n        this.waitForIdentifyControllers.delete(payload.nonce);\n        const response = {\n          op: 4 /* ShardIdentifyResponse */,\n          nonce: payload.nonce,\n          ok: false\n        };\n        worker.postMessage(response);\n        break;\n      }\n      default: {\n        await this.options.unknownPayloadHandler?.(payload);\n        break;\n      }\n    }\n  }\n  async ensureThrottler() {\n    this.throttler ??= await this.manager.options.buildIdentifyThrottler(this.manager);\n    return this.throttler;\n  }\n};\n\n// src/strategies/context/WorkerContextFetchingStrategy.ts\nvar WorkerContextFetchingStrategy = class {\n  constructor(options) {\n    this.options = options;\n    if (import_node_worker_threads2.isMainThread) {\n      throw new Error(\"Cannot instantiate WorkerContextFetchingStrategy on the main thread\");\n    }\n    import_node_worker_threads2.parentPort.on(\"message\", (payload) => {\n      if (payload.op === 3 /* SessionInfoResponse */) {\n        this.sessionPromises.get(payload.nonce)?.(payload.session);\n        this.sessionPromises.delete(payload.nonce);\n      }\n      if (payload.op === 4 /* ShardIdentifyResponse */) {\n        const promise = this.waitForIdentifyPromises.get(payload.nonce);\n        if (payload.ok) {\n          promise?.resolve();\n        } else {\n          promise?.reject(promise.signal.reason);\n        }\n        this.waitForIdentifyPromises.delete(payload.nonce);\n      }\n    });\n  }\n  static {\n    __name(this, \"WorkerContextFetchingStrategy\");\n  }\n  sessionPromises = new import_collection2.Collection();\n  waitForIdentifyPromises = new import_collection2.Collection();\n  async retrieveSessionInfo(shardId) {\n    const nonce = Math.random();\n    const payload = {\n      op: 3 /* RetrieveSessionInfo */,\n      shardId,\n      nonce\n    };\n    const promise = new Promise((resolve2) => this.sessionPromises.set(nonce, resolve2));\n    import_node_worker_threads2.parentPort.postMessage(payload);\n    return promise;\n  }\n  updateSessionInfo(shardId, sessionInfo) {\n    const payload = {\n      op: 4 /* UpdateSessionInfo */,\n      shardId,\n      session: sessionInfo\n    };\n    import_node_worker_threads2.parentPort.postMessage(payload);\n  }\n  async waitForIdentify(shardId, signal) {\n    const nonce = Math.random();\n    const payload = {\n      op: 5 /* WaitForIdentify */,\n      nonce,\n      shardId\n    };\n    const promise = new Promise(\n      (resolve2, reject) => (\n        // eslint-disable-next-line no-promise-executor-return\n        this.waitForIdentifyPromises.set(nonce, { signal, resolve: resolve2, reject })\n      )\n    );\n    import_node_worker_threads2.parentPort.postMessage(payload);\n    const listener = /* @__PURE__ */ __name(() => {\n      const payload2 = {\n        op: 8 /* CancelIdentify */,\n        nonce\n      };\n      import_node_worker_threads2.parentPort.postMessage(payload2);\n    }, \"listener\");\n    signal.addEventListener(\"abort\", listener);\n    try {\n      await promise;\n    } finally {\n      signal.removeEventListener(\"abort\", listener);\n    }\n  }\n};\n\n// src/strategies/sharding/SimpleShardingStrategy.ts\nvar import_collection6 = require(\"@discordjs/collection\");\n\n// src/ws/WebSocketShard.ts\nvar import_node_buffer = require(\"buffer\");\nvar import_node_events2 = require(\"events\");\nvar import_node_timers = require(\"timers\");\nvar import_promises2 = require(\"timers/promises\");\nvar import_node_url = require(\"url\");\nvar import_node_util = require(\"util\");\nvar import_node_zlib = require(\"zlib\");\nvar import_collection5 = require(\"@discordjs/collection\");\nvar import_util2 = require(\"@discordjs/util\");\nvar import_async_queue2 = require(\"@sapphire/async-queue\");\nvar import_async_event_emitter = require(\"@vladfrangu/async_event_emitter\");\nvar import_v102 = require(\"discord-api-types/v10\");\nvar import_ws = require(\"ws\");\n\n// src/utils/constants.ts\nvar import_node_process = __toESM(require(\"process\"));\nvar import_collection4 = require(\"@discordjs/collection\");\nvar import_util = require(\"@discordjs/util\");\nvar import_v10 = require(\"discord-api-types/v10\");\n\n// src/throttling/SimpleIdentifyThrottler.ts\nvar import_promises = require(\"timers/promises\");\nvar import_collection3 = require(\"@discordjs/collection\");\nvar import_async_queue = require(\"@sapphire/async-queue\");\nvar SimpleIdentifyThrottler = class {\n  constructor(maxConcurrency) {\n    this.maxConcurrency = maxConcurrency;\n  }\n  static {\n    __name(this, \"SimpleIdentifyThrottler\");\n  }\n  states = new import_collection3.Collection();\n  /**\n   * {@inheritDoc IIdentifyThrottler.waitForIdentify}\n   */\n  async waitForIdentify(shardId, signal) {\n    const key = shardId % this.maxConcurrency;\n    const state = this.states.ensure(key, () => {\n      return {\n        queue: new import_async_queue.AsyncQueue(),\n        resetsAt: Number.POSITIVE_INFINITY\n      };\n    });\n    await state.queue.wait({ signal });\n    try {\n      const diff = state.resetsAt - Date.now();\n      if (diff > 0 && diff <= 5e3) {\n        const time = diff + Math.random() * 1500;\n        await (0, import_promises.setTimeout)(time);\n      }\n      state.resetsAt = Date.now() + 5e3;\n    } finally {\n      state.queue.shift();\n    }\n  }\n};\n\n// src/utils/constants.ts\nvar Encoding = /* @__PURE__ */ ((Encoding2) => {\n  Encoding2[\"JSON\"] = \"json\";\n  return Encoding2;\n})(Encoding || {});\nvar CompressionMethod = /* @__PURE__ */ ((CompressionMethod2) => {\n  CompressionMethod2[\"ZlibStream\"] = \"zlib-stream\";\n  return CompressionMethod2;\n})(CompressionMethod || {});\nvar DefaultDeviceProperty = `@discordjs/ws 1.2.1`;\nvar getDefaultSessionStore = (0, import_util.lazy)(() => new import_collection4.Collection());\nvar DefaultWebSocketManagerOptions = {\n  async buildIdentifyThrottler(manager) {\n    const info = await manager.fetchGatewayInformation();\n    return new SimpleIdentifyThrottler(info.session_start_limit.max_concurrency);\n  },\n  buildStrategy: /* @__PURE__ */ __name((manager) => new SimpleShardingStrategy(manager), \"buildStrategy\"),\n  shardCount: null,\n  shardIds: null,\n  largeThreshold: null,\n  initialPresence: null,\n  identifyProperties: {\n    browser: DefaultDeviceProperty,\n    device: DefaultDeviceProperty,\n    os: import_node_process.default.platform\n  },\n  version: import_v10.APIVersion,\n  encoding: \"json\" /* JSON */,\n  compression: null,\n  retrieveSessionInfo(shardId) {\n    const store = getDefaultSessionStore();\n    return store.get(shardId) ?? null;\n  },\n  updateSessionInfo(shardId, info) {\n    const store = getDefaultSessionStore();\n    if (info) {\n      store.set(shardId, info);\n    } else {\n      store.delete(shardId);\n    }\n  },\n  handshakeTimeout: 3e4,\n  helloTimeout: 6e4,\n  readyTimeout: 15e3\n};\nvar ImportantGatewayOpcodes = /* @__PURE__ */ new Set([\n  import_v10.GatewayOpcodes.Heartbeat,\n  import_v10.GatewayOpcodes.Identify,\n  import_v10.GatewayOpcodes.Resume\n]);\nfunction getInitialSendRateLimitState() {\n  return {\n    sent: 0,\n    resetAt: Date.now() + 6e4\n  };\n}\n__name(getInitialSendRateLimitState, \"getInitialSendRateLimitState\");\nvar KnownNetworkErrorCodes = /* @__PURE__ */ new Set([\"ECONNRESET\", \"ECONNREFUSED\", \"ETIMEDOUT\", \"EAI_AGAIN\"]);\n\n// src/ws/WebSocketShard.ts\nvar getZlibSync = (0, import_util2.lazy)(async () => import(\"zlib-sync\").then((mod) => mod.default).catch(() => null));\nvar WebSocketShardEvents = /* @__PURE__ */ ((WebSocketShardEvents2) => {\n  WebSocketShardEvents2[\"Closed\"] = \"closed\";\n  WebSocketShardEvents2[\"Debug\"] = \"debug\";\n  WebSocketShardEvents2[\"Dispatch\"] = \"dispatch\";\n  WebSocketShardEvents2[\"Error\"] = \"error\";\n  WebSocketShardEvents2[\"HeartbeatComplete\"] = \"heartbeat\";\n  WebSocketShardEvents2[\"Hello\"] = \"hello\";\n  WebSocketShardEvents2[\"Ready\"] = \"ready\";\n  WebSocketShardEvents2[\"Resumed\"] = \"resumed\";\n  return WebSocketShardEvents2;\n})(WebSocketShardEvents || {});\nvar WebSocketShardStatus = /* @__PURE__ */ ((WebSocketShardStatus2) => {\n  WebSocketShardStatus2[WebSocketShardStatus2[\"Idle\"] = 0] = \"Idle\";\n  WebSocketShardStatus2[WebSocketShardStatus2[\"Connecting\"] = 1] = \"Connecting\";\n  WebSocketShardStatus2[WebSocketShardStatus2[\"Resuming\"] = 2] = \"Resuming\";\n  WebSocketShardStatus2[WebSocketShardStatus2[\"Ready\"] = 3] = \"Ready\";\n  return WebSocketShardStatus2;\n})(WebSocketShardStatus || {});\nvar WebSocketShardDestroyRecovery = /* @__PURE__ */ ((WebSocketShardDestroyRecovery2) => {\n  WebSocketShardDestroyRecovery2[WebSocketShardDestroyRecovery2[\"Reconnect\"] = 0] = \"Reconnect\";\n  WebSocketShardDestroyRecovery2[WebSocketShardDestroyRecovery2[\"Resume\"] = 1] = \"Resume\";\n  return WebSocketShardDestroyRecovery2;\n})(WebSocketShardDestroyRecovery || {});\nvar CloseCodes = /* @__PURE__ */ ((CloseCodes2) => {\n  CloseCodes2[CloseCodes2[\"Normal\"] = 1e3] = \"Normal\";\n  CloseCodes2[CloseCodes2[\"Resuming\"] = 4200] = \"Resuming\";\n  return CloseCodes2;\n})(CloseCodes || {});\nvar WebSocketConstructor = (0, import_util2.shouldUseGlobalFetchAndWebSocket)() ? globalThis.WebSocket : import_ws.WebSocket;\nvar WebSocketShard = class extends import_async_event_emitter.AsyncEventEmitter {\n  static {\n    __name(this, \"WebSocketShard\");\n  }\n  connection = null;\n  useIdentifyCompress = false;\n  inflate = null;\n  textDecoder = new import_node_util.TextDecoder();\n  replayedEvents = 0;\n  isAck = true;\n  sendRateLimitState = getInitialSendRateLimitState();\n  initialHeartbeatTimeoutController = null;\n  heartbeatInterval = null;\n  lastHeartbeatAt = -1;\n  // Indicates whether the shard has already resolved its original connect() call\n  initialConnectResolved = false;\n  // Indicates if we failed to connect to the ws url\n  failedToConnectDueToNetworkError = false;\n  sendQueue = new import_async_queue2.AsyncQueue();\n  timeoutAbortControllers = new import_collection5.Collection();\n  strategy;\n  id;\n  #status = 0 /* Idle */;\n  get status() {\n    return this.#status;\n  }\n  constructor(strategy, id) {\n    super();\n    this.strategy = strategy;\n    this.id = id;\n  }\n  async connect() {\n    const controller = new AbortController();\n    let promise;\n    if (!this.initialConnectResolved) {\n      promise = Promise.race([\n        (0, import_node_events2.once)(this, \"ready\" /* Ready */, { signal: controller.signal }),\n        (0, import_node_events2.once)(this, \"resumed\" /* Resumed */, { signal: controller.signal })\n      ]);\n    }\n    void this.internalConnect();\n    try {\n      await promise;\n    } catch ({ error }) {\n      throw error;\n    } finally {\n      controller.abort();\n    }\n    this.initialConnectResolved = true;\n  }\n  async internalConnect() {\n    if (this.#status !== 0 /* Idle */) {\n      throw new Error(\"Tried to connect a shard that wasn't idle\");\n    }\n    const { version: version2, encoding, compression } = this.strategy.options;\n    const params = new import_node_url.URLSearchParams({ v: version2, encoding });\n    if (compression) {\n      const zlib = await getZlibSync();\n      if (zlib) {\n        params.append(\"compress\", compression);\n        this.inflate = new zlib.Inflate({\n          chunkSize: 65535,\n          to: \"string\"\n        });\n      } else if (!this.useIdentifyCompress) {\n        this.useIdentifyCompress = true;\n        console.warn(\n          \"WebSocketShard: Compression is enabled but zlib-sync is not installed, falling back to identify compress\"\n        );\n      }\n    }\n    const session = await this.strategy.retrieveSessionInfo(this.id);\n    const url = `${session?.resumeURL ?? this.strategy.options.gatewayInformation.url}?${params.toString()}`;\n    this.debug([`Connecting to ${url}`]);\n    const connection = new WebSocketConstructor(url, [], {\n      handshakeTimeout: this.strategy.options.handshakeTimeout ?? void 0\n    });\n    connection.binaryType = \"arraybuffer\";\n    connection.onmessage = (event) => {\n      void this.onMessage(event.data, event.data instanceof ArrayBuffer);\n    };\n    connection.onerror = (event) => {\n      this.onError(event.error);\n    };\n    connection.onclose = (event) => {\n      void this.onClose(event.code);\n    };\n    connection.onopen = () => {\n      this.sendRateLimitState = getInitialSendRateLimitState();\n    };\n    this.connection = connection;\n    this.#status = 1 /* Connecting */;\n    const { ok } = await this.waitForEvent(\"hello\" /* Hello */, this.strategy.options.helloTimeout);\n    if (!ok) {\n      return;\n    }\n    if (session?.shardCount === this.strategy.options.shardCount) {\n      await this.resume(session);\n    } else {\n      await this.identify();\n    }\n  }\n  async destroy(options = {}) {\n    if (this.#status === 0 /* Idle */) {\n      this.debug([\"Tried to destroy a shard that was idle\"]);\n      return;\n    }\n    if (!options.code) {\n      options.code = options.recover === 1 /* Resume */ ? 4200 /* Resuming */ : 1e3 /* Normal */;\n    }\n    this.debug([\n      \"Destroying shard\",\n      `Reason: ${options.reason ?? \"none\"}`,\n      `Code: ${options.code}`,\n      `Recover: ${options.recover === void 0 ? \"none\" : WebSocketShardDestroyRecovery[options.recover]}`\n    ]);\n    this.isAck = true;\n    if (this.heartbeatInterval) {\n      (0, import_node_timers.clearInterval)(this.heartbeatInterval);\n    }\n    if (this.initialHeartbeatTimeoutController) {\n      this.initialHeartbeatTimeoutController.abort();\n      this.initialHeartbeatTimeoutController = null;\n    }\n    this.lastHeartbeatAt = -1;\n    for (const controller of this.timeoutAbortControllers.values()) {\n      controller.abort();\n    }\n    this.timeoutAbortControllers.clear();\n    this.failedToConnectDueToNetworkError = false;\n    if (options.recover !== 1 /* Resume */) {\n      await this.strategy.updateSessionInfo(this.id, null);\n    }\n    if (this.connection) {\n      this.connection.onmessage = null;\n      this.connection.onclose = null;\n      const shouldClose = this.connection.readyState === import_ws.WebSocket.OPEN;\n      this.debug([\n        \"Connection status during destroy\",\n        `Needs closing: ${shouldClose}`,\n        `Ready state: ${this.connection.readyState}`\n      ]);\n      if (shouldClose) {\n        let outerResolve;\n        const promise = new Promise((resolve2) => {\n          outerResolve = resolve2;\n        });\n        this.connection.onclose = outerResolve;\n        this.connection.close(options.code, options.reason);\n        await promise;\n        this.emit(\"closed\" /* Closed */, { code: options.code });\n      }\n      this.connection.onerror = null;\n    } else {\n      this.debug([\"Destroying a shard that has no connection; please open an issue on GitHub\"]);\n    }\n    this.#status = 0 /* Idle */;\n    if (options.recover !== void 0) {\n      await (0, import_promises2.setTimeout)(500);\n      return this.internalConnect();\n    }\n  }\n  async waitForEvent(event, timeoutDuration) {\n    this.debug([`Waiting for event ${event} ${timeoutDuration ? `for ${timeoutDuration}ms` : \"indefinitely\"}`]);\n    const timeoutController = new AbortController();\n    const timeout = timeoutDuration ? (0, import_node_timers.setTimeout)(() => timeoutController.abort(), timeoutDuration).unref() : null;\n    this.timeoutAbortControllers.set(event, timeoutController);\n    const closeController = new AbortController();\n    try {\n      const closed = await Promise.race([\n        (0, import_node_events2.once)(this, event, { signal: timeoutController.signal }).then(() => false),\n        (0, import_node_events2.once)(this, \"closed\" /* Closed */, { signal: closeController.signal }).then(() => true)\n      ]);\n      return { ok: !closed };\n    } catch {\n      void this.destroy({\n        code: 1e3 /* Normal */,\n        reason: \"Something timed out or went wrong while waiting for an event\",\n        recover: 0 /* Reconnect */\n      });\n      return { ok: false };\n    } finally {\n      if (timeout) {\n        (0, import_node_timers.clearTimeout)(timeout);\n      }\n      this.timeoutAbortControllers.delete(event);\n      if (!closeController.signal.aborted) {\n        closeController.abort();\n      }\n    }\n  }\n  async send(payload) {\n    if (!this.connection) {\n      throw new Error(\"WebSocketShard wasn't connected\");\n    }\n    if (ImportantGatewayOpcodes.has(payload.op)) {\n      this.connection.send(JSON.stringify(payload));\n      return;\n    }\n    if (this.#status !== 3 /* Ready */ && !ImportantGatewayOpcodes.has(payload.op)) {\n      this.debug([\"Tried to send a non-crucial payload before the shard was ready, waiting\"]);\n      try {\n        await (0, import_node_events2.once)(this, \"ready\" /* Ready */);\n      } catch {\n        return this.send(payload);\n      }\n    }\n    await this.sendQueue.wait();\n    const now = Date.now();\n    if (now >= this.sendRateLimitState.resetAt) {\n      this.sendRateLimitState = getInitialSendRateLimitState();\n    }\n    if (this.sendRateLimitState.sent + 1 >= 115) {\n      const sleepFor = this.sendRateLimitState.resetAt - now + Math.random() * 1500;\n      this.debug([`Was about to hit the send rate limit, sleeping for ${sleepFor}ms`]);\n      const controller = new AbortController();\n      const interrupted = await Promise.race([\n        (0, import_promises2.setTimeout)(sleepFor).then(() => false),\n        (0, import_node_events2.once)(this, \"closed\" /* Closed */, { signal: controller.signal }).then(() => true)\n      ]);\n      if (interrupted) {\n        this.debug([\"Connection closed while waiting for the send rate limit to reset, re-queueing payload\"]);\n        this.sendQueue.shift();\n        return this.send(payload);\n      }\n      controller.abort();\n    }\n    this.sendRateLimitState.sent++;\n    this.sendQueue.shift();\n    this.connection.send(JSON.stringify(payload));\n  }\n  async identify() {\n    this.debug([\"Waiting for identify throttle\"]);\n    const controller = new AbortController();\n    const closeHandler = /* @__PURE__ */ __name(() => {\n      controller.abort();\n    }, \"closeHandler\");\n    this.on(\"closed\" /* Closed */, closeHandler);\n    try {\n      await this.strategy.waitForIdentify(this.id, controller.signal);\n    } catch {\n      if (controller.signal.aborted) {\n        this.debug([\"Was waiting for an identify, but the shard closed in the meantime\"]);\n        return;\n      }\n      this.debug([\n        \"IContextFetchingStrategy#waitForIdentify threw an unknown error.\",\n        \"If you're using a custom strategy, this is probably nothing to worry about.\",\n        \"If you're not, please open an issue on GitHub.\"\n      ]);\n      await this.destroy({\n        reason: \"Identify throttling logic failed\",\n        recover: 1 /* Resume */\n      });\n    } finally {\n      this.off(\"closed\" /* Closed */, closeHandler);\n    }\n    this.debug([\n      \"Identifying\",\n      `shard id: ${this.id.toString()}`,\n      `shard count: ${this.strategy.options.shardCount}`,\n      `intents: ${this.strategy.options.intents}`,\n      `compression: ${this.inflate ? \"zlib-stream\" : this.useIdentifyCompress ? \"identify\" : \"none\"}`\n    ]);\n    const d = {\n      token: this.strategy.options.token,\n      properties: this.strategy.options.identifyProperties,\n      intents: this.strategy.options.intents,\n      compress: this.useIdentifyCompress,\n      shard: [this.id, this.strategy.options.shardCount]\n    };\n    if (this.strategy.options.largeThreshold) {\n      d.large_threshold = this.strategy.options.largeThreshold;\n    }\n    if (this.strategy.options.initialPresence) {\n      d.presence = this.strategy.options.initialPresence;\n    }\n    await this.send({\n      op: import_v102.GatewayOpcodes.Identify,\n      d\n    });\n    await this.waitForEvent(\"ready\" /* Ready */, this.strategy.options.readyTimeout);\n  }\n  async resume(session) {\n    this.debug([\n      \"Resuming session\",\n      `resume url: ${session.resumeURL}`,\n      `sequence: ${session.sequence}`,\n      `shard id: ${this.id.toString()}`\n    ]);\n    this.#status = 2 /* Resuming */;\n    this.replayedEvents = 0;\n    return this.send({\n      op: import_v102.GatewayOpcodes.Resume,\n      d: {\n        token: this.strategy.options.token,\n        seq: session.sequence,\n        session_id: session.sessionId\n      }\n    });\n  }\n  async heartbeat(requested = false) {\n    if (!this.isAck && !requested) {\n      return this.destroy({ reason: \"Zombie connection\", recover: 1 /* Resume */ });\n    }\n    const session = await this.strategy.retrieveSessionInfo(this.id);\n    await this.send({\n      op: import_v102.GatewayOpcodes.Heartbeat,\n      d: session?.sequence ?? null\n    });\n    this.lastHeartbeatAt = Date.now();\n    this.isAck = false;\n  }\n  async unpackMessage(data, isBinary) {\n    if (!isBinary) {\n      try {\n        return JSON.parse(data);\n      } catch {\n        return null;\n      }\n    }\n    const decompressable = new Uint8Array(data);\n    if (this.useIdentifyCompress) {\n      return new Promise((resolve2, reject) => {\n        (0, import_node_zlib.inflate)(decompressable, { chunkSize: 65535 }, (err, result) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve2(JSON.parse(this.textDecoder.decode(result)));\n        });\n      });\n    }\n    if (this.inflate) {\n      const l = decompressable.length;\n      const flush = l >= 4 && decompressable[l - 4] === 0 && decompressable[l - 3] === 0 && decompressable[l - 2] === 255 && decompressable[l - 1] === 255;\n      const zlib = await getZlibSync();\n      this.inflate.push(import_node_buffer.Buffer.from(decompressable), flush ? zlib.Z_SYNC_FLUSH : zlib.Z_NO_FLUSH);\n      if (this.inflate.err) {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(`${this.inflate.err}${this.inflate.msg ? `: ${this.inflate.msg}` : \"\"}`)\n        });\n      }\n      if (!flush) {\n        return null;\n      }\n      const { result } = this.inflate;\n      if (!result) {\n        return null;\n      }\n      return JSON.parse(typeof result === \"string\" ? result : this.textDecoder.decode(result));\n    }\n    this.debug([\n      \"Received a message we were unable to decompress\",\n      `isBinary: ${isBinary.toString()}`,\n      `useIdentifyCompress: ${this.useIdentifyCompress.toString()}`,\n      `inflate: ${Boolean(this.inflate).toString()}`\n    ]);\n    return null;\n  }\n  async onMessage(data, isBinary) {\n    const payload = await this.unpackMessage(data, isBinary);\n    if (!payload) {\n      return;\n    }\n    switch (payload.op) {\n      case import_v102.GatewayOpcodes.Dispatch: {\n        if (this.#status === 2 /* Resuming */) {\n          this.replayedEvents++;\n        }\n        switch (payload.t) {\n          case import_v102.GatewayDispatchEvents.Ready: {\n            this.#status = 3 /* Ready */;\n            const session2 = {\n              sequence: payload.s,\n              sessionId: payload.d.session_id,\n              shardId: this.id,\n              shardCount: this.strategy.options.shardCount,\n              resumeURL: payload.d.resume_gateway_url\n            };\n            await this.strategy.updateSessionInfo(this.id, session2);\n            this.emit(\"ready\" /* Ready */, { data: payload.d });\n            break;\n          }\n          case import_v102.GatewayDispatchEvents.Resumed: {\n            this.#status = 3 /* Ready */;\n            this.debug([`Resumed and replayed ${this.replayedEvents} events`]);\n            this.emit(\"resumed\" /* Resumed */);\n            break;\n          }\n          default: {\n            break;\n          }\n        }\n        const session = await this.strategy.retrieveSessionInfo(this.id);\n        if (session) {\n          if (payload.s > session.sequence) {\n            await this.strategy.updateSessionInfo(this.id, { ...session, sequence: payload.s });\n          }\n        } else {\n          this.debug([\n            `Received a ${payload.t} event but no session is available. Session information cannot be re-constructed in this state without a full reconnect`\n          ]);\n        }\n        this.emit(\"dispatch\" /* Dispatch */, { data: payload });\n        break;\n      }\n      case import_v102.GatewayOpcodes.Heartbeat: {\n        await this.heartbeat(true);\n        break;\n      }\n      case import_v102.GatewayOpcodes.Reconnect: {\n        await this.destroy({\n          reason: \"Told to reconnect by Discord\",\n          recover: 1 /* Resume */\n        });\n        break;\n      }\n      case import_v102.GatewayOpcodes.InvalidSession: {\n        this.debug([`Invalid session; will attempt to resume: ${payload.d.toString()}`]);\n        const session = await this.strategy.retrieveSessionInfo(this.id);\n        if (payload.d && session) {\n          await this.resume(session);\n        } else {\n          await this.destroy({\n            reason: \"Invalid session\",\n            recover: 0 /* Reconnect */\n          });\n        }\n        break;\n      }\n      case import_v102.GatewayOpcodes.Hello: {\n        this.emit(\"hello\" /* Hello */);\n        const jitter = Math.random();\n        const firstWait = Math.floor(payload.d.heartbeat_interval * jitter);\n        this.debug([`Preparing first heartbeat of the connection with a jitter of ${jitter}; waiting ${firstWait}ms`]);\n        try {\n          const controller = new AbortController();\n          this.initialHeartbeatTimeoutController = controller;\n          await (0, import_promises2.setTimeout)(firstWait, void 0, { signal: controller.signal });\n        } catch {\n          this.debug([\"Cancelled initial heartbeat due to #destroy being called\"]);\n          return;\n        } finally {\n          this.initialHeartbeatTimeoutController = null;\n        }\n        await this.heartbeat();\n        this.debug([`First heartbeat sent, starting to beat every ${payload.d.heartbeat_interval}ms`]);\n        this.heartbeatInterval = (0, import_node_timers.setInterval)(() => void this.heartbeat(), payload.d.heartbeat_interval);\n        break;\n      }\n      case import_v102.GatewayOpcodes.HeartbeatAck: {\n        this.isAck = true;\n        const ackAt = Date.now();\n        this.emit(\"heartbeat\" /* HeartbeatComplete */, {\n          ackAt,\n          heartbeatAt: this.lastHeartbeatAt,\n          latency: ackAt - this.lastHeartbeatAt\n        });\n        break;\n      }\n    }\n  }\n  onError(error) {\n    if (\"code\" in error && KnownNetworkErrorCodes.has(error.code)) {\n      this.debug([\"Failed to connect to the gateway URL specified due to a network error\"]);\n      this.failedToConnectDueToNetworkError = true;\n      return;\n    }\n    this.emit(\"error\" /* Error */, { error });\n  }\n  async onClose(code) {\n    this.emit(\"closed\" /* Closed */, { code });\n    switch (code) {\n      case 1e3 /* Normal */: {\n        return this.destroy({\n          code,\n          reason: \"Got disconnected by Discord\",\n          recover: 0 /* Reconnect */\n        });\n      }\n      case 4200 /* Resuming */: {\n        break;\n      }\n      case import_v102.GatewayCloseCodes.UnknownError: {\n        this.debug([`An unknown error occurred: ${code}`]);\n        return this.destroy({ code, recover: 1 /* Resume */ });\n      }\n      case import_v102.GatewayCloseCodes.UnknownOpcode: {\n        this.debug([\"An invalid opcode was sent to Discord.\"]);\n        return this.destroy({ code, recover: 1 /* Resume */ });\n      }\n      case import_v102.GatewayCloseCodes.DecodeError: {\n        this.debug([\"An invalid payload was sent to Discord.\"]);\n        return this.destroy({ code, recover: 1 /* Resume */ });\n      }\n      case import_v102.GatewayCloseCodes.NotAuthenticated: {\n        this.debug([\"A request was somehow sent before the identify/resume payload.\"]);\n        return this.destroy({ code, recover: 0 /* Reconnect */ });\n      }\n      case import_v102.GatewayCloseCodes.AuthenticationFailed: {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(\"Authentication failed\")\n        });\n        return this.destroy({ code });\n      }\n      case import_v102.GatewayCloseCodes.AlreadyAuthenticated: {\n        this.debug([\"More than one auth payload was sent.\"]);\n        return this.destroy({ code, recover: 0 /* Reconnect */ });\n      }\n      case import_v102.GatewayCloseCodes.InvalidSeq: {\n        this.debug([\"An invalid sequence was sent.\"]);\n        return this.destroy({ code, recover: 0 /* Reconnect */ });\n      }\n      case import_v102.GatewayCloseCodes.RateLimited: {\n        this.debug([\"The WebSocket rate limit has been hit, this should never happen\"]);\n        return this.destroy({ code, recover: 0 /* Reconnect */ });\n      }\n      case import_v102.GatewayCloseCodes.SessionTimedOut: {\n        this.debug([\"Session timed out.\"]);\n        return this.destroy({ code, recover: 1 /* Resume */ });\n      }\n      case import_v102.GatewayCloseCodes.InvalidShard: {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(\"Invalid shard\")\n        });\n        return this.destroy({ code });\n      }\n      case import_v102.GatewayCloseCodes.ShardingRequired: {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(\"Sharding is required\")\n        });\n        return this.destroy({ code });\n      }\n      case import_v102.GatewayCloseCodes.InvalidAPIVersion: {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(\"Used an invalid API version\")\n        });\n        return this.destroy({ code });\n      }\n      case import_v102.GatewayCloseCodes.InvalidIntents: {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(\"Used invalid intents\")\n        });\n        return this.destroy({ code });\n      }\n      case import_v102.GatewayCloseCodes.DisallowedIntents: {\n        this.emit(\"error\" /* Error */, {\n          error: new Error(\"Used disallowed intents\")\n        });\n        return this.destroy({ code });\n      }\n      default: {\n        this.debug([\n          `The gateway closed with an unexpected code ${code}, attempting to ${this.failedToConnectDueToNetworkError ? \"reconnect\" : \"resume\"}.`\n        ]);\n        return this.destroy({\n          code,\n          recover: this.failedToConnectDueToNetworkError ? 0 /* Reconnect */ : 1 /* Resume */\n        });\n      }\n    }\n  }\n  debug(messages) {\n    this.emit(\"debug\" /* Debug */, { message: messages.join(\"\\n\t\") });\n  }\n};\n\n// src/strategies/sharding/SimpleShardingStrategy.ts\nvar SimpleShardingStrategy = class {\n  static {\n    __name(this, \"SimpleShardingStrategy\");\n  }\n  manager;\n  shards = new import_collection6.Collection();\n  constructor(manager) {\n    this.manager = manager;\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.spawn}\n   */\n  async spawn(shardIds) {\n    const strategyOptions = await managerToFetchingStrategyOptions(this.manager);\n    for (const shardId of shardIds) {\n      const strategy = new SimpleContextFetchingStrategy(this.manager, strategyOptions);\n      const shard = new WebSocketShard(strategy, shardId);\n      for (const event of Object.values(WebSocketShardEvents)) {\n        shard.on(event, (payload) => this.manager.emit(event, { ...payload, shardId }));\n      }\n      this.shards.set(shardId, shard);\n    }\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.connect}\n   */\n  async connect() {\n    const promises = [];\n    for (const shard of this.shards.values()) {\n      promises.push(shard.connect());\n    }\n    await Promise.all(promises);\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.destroy}\n   */\n  async destroy(options) {\n    const promises = [];\n    for (const shard of this.shards.values()) {\n      promises.push(shard.destroy(options));\n    }\n    await Promise.all(promises);\n    this.shards.clear();\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.send}\n   */\n  async send(shardId, payload) {\n    const shard = this.shards.get(shardId);\n    if (!shard) {\n      throw new RangeError(`Shard ${shardId} not found`);\n    }\n    return shard.send(payload);\n  }\n  /**\n   * {@inheritDoc IShardingStrategy.fetchStatus}\n   */\n  async fetchStatus() {\n    return this.shards.mapValues((shard) => shard.status);\n  }\n};\n\n// src/utils/WorkerBootstrapper.ts\nvar import_node_worker_threads3 = require(\"worker_threads\");\nvar import_collection7 = require(\"@discordjs/collection\");\nvar WorkerBootstrapper = class {\n  static {\n    __name(this, \"WorkerBootstrapper\");\n  }\n  /**\n   * The data passed to the worker thread\n   */\n  data = import_node_worker_threads3.workerData;\n  /**\n   * The shards that are managed by this worker\n   */\n  shards = new import_collection7.Collection();\n  constructor() {\n    if (import_node_worker_threads3.isMainThread) {\n      throw new Error(\"Expected WorkerBootstrap to not be used within the main thread\");\n    }\n  }\n  /**\n   * Helper method to initiate a shard's connection process\n   */\n  async connect(shardId) {\n    const shard = this.shards.get(shardId);\n    if (!shard) {\n      throw new RangeError(`Shard ${shardId} does not exist`);\n    }\n    await shard.connect();\n  }\n  /**\n   * Helper method to destroy a shard\n   */\n  async destroy(shardId, options) {\n    const shard = this.shards.get(shardId);\n    if (!shard) {\n      throw new RangeError(`Shard ${shardId} does not exist`);\n    }\n    await shard.destroy(options);\n  }\n  /**\n   * Helper method to attach event listeners to the parentPort\n   */\n  setupThreadEvents() {\n    import_node_worker_threads3.parentPort.on(\"messageerror\", (err) => {\n      throw err;\n    }).on(\"message\", async (payload) => {\n      switch (payload.op) {\n        case 0 /* Connect */: {\n          await this.connect(payload.shardId);\n          const response = {\n            op: 0 /* Connected */,\n            shardId: payload.shardId\n          };\n          import_node_worker_threads3.parentPort.postMessage(response);\n          break;\n        }\n        case 1 /* Destroy */: {\n          await this.destroy(payload.shardId, payload.options);\n          const response = {\n            op: 1 /* Destroyed */,\n            shardId: payload.shardId\n          };\n          import_node_worker_threads3.parentPort.postMessage(response);\n          break;\n        }\n        case 2 /* Send */: {\n          const shard = this.shards.get(payload.shardId);\n          if (!shard) {\n            throw new RangeError(`Shard ${payload.shardId} does not exist`);\n          }\n          await shard.send(payload.payload);\n          break;\n        }\n        case 3 /* SessionInfoResponse */: {\n          break;\n        }\n        case 4 /* ShardIdentifyResponse */: {\n          break;\n        }\n        case 5 /* FetchStatus */: {\n          const shard = this.shards.get(payload.shardId);\n          if (!shard) {\n            throw new Error(`Shard ${payload.shardId} does not exist`);\n          }\n          const response = {\n            op: 6 /* FetchStatusResponse */,\n            status: shard.status,\n            nonce: payload.nonce\n          };\n          import_node_worker_threads3.parentPort.postMessage(response);\n          break;\n        }\n      }\n    });\n  }\n  /**\n   * Bootstraps the worker thread with the provided options\n   */\n  async bootstrap(options = {}) {\n    for (const shardId of this.data.shardIds) {\n      const shard = new WebSocketShard(new WorkerContextFetchingStrategy(this.data), shardId);\n      for (const event of options.forwardEvents ?? Object.values(WebSocketShardEvents)) {\n        shard.on(event, (data) => {\n          const payload = {\n            op: 2 /* Event */,\n            event,\n            data,\n            shardId\n          };\n          import_node_worker_threads3.parentPort.postMessage(payload);\n        });\n      }\n      await options.shardCallback?.(shard);\n      this.shards.set(shardId, shard);\n    }\n    this.setupThreadEvents();\n    const message = {\n      op: 7 /* WorkerReady */\n    };\n    import_node_worker_threads3.parentPort.postMessage(message);\n  }\n};\n\n// src/ws/WebSocketManager.ts\nvar import_util3 = require(\"@discordjs/util\");\nvar import_util4 = require(\"@discordjs/util\");\nvar import_async_event_emitter2 = require(\"@vladfrangu/async_event_emitter\");\nvar import_v103 = require(\"discord-api-types/v10\");\n(0, import_util4.polyfillDispose)();\nvar WebSocketManager = class extends import_async_event_emitter2.AsyncEventEmitter {\n  static {\n    __name(this, \"WebSocketManager\");\n  }\n  /**\n   * The options being used by this manager\n   */\n  options;\n  /**\n   * Internal cache for a GET /gateway/bot result\n   */\n  gatewayInformation = null;\n  /**\n   * Internal cache for the shard ids\n   */\n  shardIds = null;\n  /**\n   * Strategy used to manage shards\n   *\n   * @defaultValue `SimpleShardingStrategy`\n   */\n  strategy;\n  constructor(options) {\n    super();\n    this.options = { ...DefaultWebSocketManagerOptions, ...options };\n    this.strategy = this.options.buildStrategy(this);\n  }\n  /**\n   * Fetches the gateway information from Discord - or returns it from cache if available\n   *\n   * @param force - Whether to ignore the cache and force a fresh fetch\n   */\n  async fetchGatewayInformation(force = false) {\n    if (this.gatewayInformation) {\n      if (this.gatewayInformation.expiresAt <= Date.now()) {\n        this.gatewayInformation = null;\n      } else if (!force) {\n        return this.gatewayInformation.data;\n      }\n    }\n    const data = await this.options.rest.get(import_v103.Routes.gatewayBot());\n    this.gatewayInformation = { data, expiresAt: Date.now() + (data.session_start_limit.reset_after || 5e3) };\n    return this.gatewayInformation.data;\n  }\n  /**\n   * Updates your total shard count on-the-fly, spawning shards as needed\n   *\n   * @param shardCount - The new shard count to use\n   */\n  async updateShardCount(shardCount) {\n    await this.strategy.destroy({ reason: \"User is adjusting their shards\" });\n    this.options.shardCount = shardCount;\n    const shardIds = await this.getShardIds(true);\n    await this.strategy.spawn(shardIds);\n    return this;\n  }\n  /**\n   * Yields the total number of shards across for your bot, accounting for Discord recommendations\n   */\n  async getShardCount() {\n    if (this.options.shardCount) {\n      return this.options.shardCount;\n    }\n    const shardIds = await this.getShardIds();\n    return Math.max(...shardIds) + 1;\n  }\n  /**\n   * Yields the ids of the shards this manager should manage\n   */\n  async getShardIds(force = false) {\n    if (this.shardIds && !force) {\n      return this.shardIds;\n    }\n    let shardIds;\n    if (this.options.shardIds) {\n      if (Array.isArray(this.options.shardIds)) {\n        shardIds = this.options.shardIds;\n      } else {\n        const { start, end } = this.options.shardIds;\n        shardIds = [...(0, import_util3.range)({ start, end: end + 1 })];\n      }\n    } else {\n      const data = await this.fetchGatewayInformation();\n      shardIds = [...(0, import_util3.range)(this.options.shardCount ?? data.shards)];\n    }\n    this.shardIds = shardIds;\n    return shardIds;\n  }\n  async connect() {\n    const shardCount = await this.getShardCount();\n    await this.updateShardCount(shardCount);\n    const shardIds = await this.getShardIds();\n    const data = await this.fetchGatewayInformation();\n    if (data.session_start_limit.remaining < shardIds.length) {\n      throw new Error(\n        `Not enough sessions remaining to spawn ${shardIds.length} shards; only ${data.session_start_limit.remaining} remaining; resets at ${new Date(Date.now() + data.session_start_limit.reset_after).toISOString()}`\n      );\n    }\n    await this.strategy.connect();\n  }\n  destroy(options) {\n    return this.strategy.destroy(options);\n  }\n  send(shardId, payload) {\n    return this.strategy.send(shardId, payload);\n  }\n  fetchStatus() {\n    return this.strategy.fetchStatus();\n  }\n  async [Symbol.asyncDispose]() {\n    await this.destroy();\n  }\n};\n\n// src/index.ts\nvar version = \"1.2.1\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  CloseCodes,\n  CompressionMethod,\n  DefaultDeviceProperty,\n  DefaultWebSocketManagerOptions,\n  Encoding,\n  ImportantGatewayOpcodes,\n  KnownNetworkErrorCodes,\n  SimpleContextFetchingStrategy,\n  SimpleIdentifyThrottler,\n  SimpleShardingStrategy,\n  WebSocketManager,\n  WebSocketShard,\n  WebSocketShardDestroyRecovery,\n  WebSocketShardEvents,\n  WebSocketShardStatus,\n  WorkerBootstrapper,\n  WorkerContextFetchingStrategy,\n  WorkerReceivePayloadOp,\n  WorkerSendPayloadOp,\n  WorkerShardingStrategy,\n  getInitialSendRateLimitState,\n  managerToFetchingStrategyOptions,\n  version\n});\n//# sourceMappingURL=index.js.map",
    "'use strict';\n\n/**\n * @typedef {Object} WebSocketShardEvents\n * @property {string} Close close\n * @property {string} Destroyed destroyed\n * @property {string} InvalidSession invalidSession\n * @property {string} Ready ready\n * @property {string} Resumed resumed\n * @property {string} AllReady allReady\n */\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {WebSocketShardEvents}\n * @ignore\n */\nmodule.exports = {\n  Close: 'close',\n  Destroyed: 'destroyed',\n  InvalidSession: 'invalidSession',\n  Ready: 'ready',\n  Resumed: 'resumed',\n  AllReady: 'allReady',\n};\n",
    "'use strict';\n\nconst EventEmitter = require('node:events');\nconst process = require('node:process');\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { GatewayIntentBits } = require('discord-api-types/v10');\nconst Status = require('../../util/Status');\nconst WebSocketShardEvents = require('../../util/WebSocketShardEvents');\n\nlet deprecationEmittedForImportant = false;\n/**\n * Represents a Shard's WebSocket connection\n * @extends {EventEmitter}\n */\nclass WebSocketShard extends EventEmitter {\n  constructor(manager, id) {\n    super();\n\n    /**\n     * The WebSocketManager of the shard\n     * @type {WebSocketManager}\n     */\n    this.manager = manager;\n\n    /**\n     * The shard's id\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * The current status of the shard\n     * @type {Status}\n     */\n    this.status = Status.Idle;\n\n    /**\n     * The sequence of the shard after close\n     * @type {number}\n     * @private\n     */\n    this.closeSequence = 0;\n\n    /**\n     * The previous heartbeat ping of the shard\n     * @type {number}\n     */\n    this.ping = -1;\n\n    /**\n     * The last time a ping was sent (a timestamp)\n     * @type {number}\n     */\n    this.lastPingTimestamp = -1;\n\n    /**\n     * A set of guild ids this shard expects to receive\n     * @name WebSocketShard#expectedGuilds\n     * @type {?Set<string>}\n     * @private\n     */\n    Object.defineProperty(this, 'expectedGuilds', { value: null, writable: true });\n\n    /**\n     * The ready timeout\n     * @name WebSocketShard#readyTimeout\n     * @type {?NodeJS.Timeout}\n     * @private\n     */\n    Object.defineProperty(this, 'readyTimeout', { value: null, writable: true });\n\n    /**\n     * @external SessionInfo\n     * @see {@link https://discord.js.org/docs/packages/ws/stable/SessionInfo:Interface}\n     */\n\n    /**\n     * The session info used by `@discordjs/ws` package.\n     * @name WebSocketShard#sessionInfo\n     * @type {?SessionInfo}\n     * @private\n     */\n    Object.defineProperty(this, 'sessionInfo', { value: null, writable: true });\n  }\n\n  /**\n   * Emits a debug event.\n   * @param {string[]} messages The debug message\n   * @private\n   */\n  debug(messages) {\n    this.manager.debug(messages, this.id);\n  }\n\n  /**\n   * @external CloseEvent\n   * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent}\n   */\n\n  /**\n   * This method is responsible to emit close event for this shard.\n   * This method helps the shard reconnect.\n   * @param {CloseEvent} [event] Close event that was received\n   * @deprecated\n   */\n  emitClose(\n    event = {\n      code: 1011,\n      reason: 'INTERNAL_ERROR',\n      wasClean: false,\n    },\n  ) {\n    this.debug([\n      '[CLOSE]',\n      `Event Code: ${event.code}`,\n      `Clean     : ${event.wasClean}`,\n      `Reason    : ${event.reason ?? 'No reason received'}`,\n    ]);\n\n    /**\n     * Emitted when a shard's WebSocket closes.\n     * @private\n     * @event WebSocketShard#close\n     * @param {CloseEvent} event The received event\n     */\n    this.emit(WebSocketShardEvents.Close, event);\n  }\n\n  /**\n   * Called when the shard receives the READY payload.\n   * @param {Object} packet The received packet\n   * @private\n   */\n  onReadyPacket(packet) {\n    if (!packet) {\n      this.debug([`Received broken packet: '${packet}'.`]);\n      return;\n    }\n\n    /**\n     * Emitted when the shard receives the READY payload and is now waiting for guilds\n     * @event WebSocketShard#ready\n     */\n    this.emit(WebSocketShardEvents.Ready);\n\n    this.expectedGuilds = new Set(packet.guilds.map(guild => guild.id));\n    this.status = Status.WaitingForGuilds;\n  }\n\n  /**\n   * Called when a GuildCreate or GuildDelete for this shard was sent after READY payload was received,\n   * but before we emitted the READY event.\n   * @param {Snowflake} guildId the id of the Guild sent in the payload\n   * @private\n   */\n  gotGuild(guildId) {\n    this.expectedGuilds.delete(guildId);\n    this.checkReady();\n  }\n\n  /**\n   * Checks if the shard can be marked as ready\n   * @private\n   */\n  checkReady() {\n    // Step 0. Clear the ready timeout, if it exists\n    if (this.readyTimeout) {\n      clearTimeout(this.readyTimeout);\n      this.readyTimeout = null;\n    }\n    // Step 1. If we don't have any other guilds pending, we are ready\n    if (!this.expectedGuilds.size) {\n      this.debug(['Shard received all its guilds. Marking as fully ready.']);\n      this.status = Status.Ready;\n\n      /**\n       * Emitted when the shard is fully ready.\n       * This event is emitted if:\n       * * all guilds were received by this shard\n       * * the ready timeout expired, and some guilds are unavailable\n       * @event WebSocketShard#allReady\n       * @param {?Set<string>} unavailableGuilds Set of unavailable guilds, if any\n       */\n      this.emit(WebSocketShardEvents.AllReady);\n      return;\n    }\n    const hasGuildsIntent = this.manager.client.options.intents.has(GatewayIntentBits.Guilds);\n    // Step 2. Create a timeout that will mark the shard as ready if there are still unavailable guilds\n    // * The timeout is 15 seconds by default\n    // * This can be optionally changed in the client options via the `waitGuildTimeout` option\n    // * a timeout time of zero will skip this timeout, which potentially could cause the Client to miss guilds.\n\n    const { waitGuildTimeout } = this.manager.client.options;\n\n    this.readyTimeout = setTimeout(\n      () => {\n        this.debug([\n          hasGuildsIntent\n            ? `Shard did not receive any guild packets in ${waitGuildTimeout} ms.`\n            : 'Shard will not receive anymore guild packets.',\n          `Unavailable guild count: ${this.expectedGuilds.size}`,\n        ]);\n\n        this.readyTimeout = null;\n        this.status = Status.Ready;\n\n        this.emit(WebSocketShardEvents.AllReady, this.expectedGuilds);\n      },\n      hasGuildsIntent ? waitGuildTimeout : 0,\n    ).unref();\n  }\n\n  /**\n   * Adds a packet to the queue to be sent to the gateway.\n   * <warn>If you use this method, make sure you understand that you need to provide\n   * a full [Payload](https://discord.com/developers/docs/topics/gateway#commands-and-events-gateway-commands).\n   * Do not use this method if you don't know what you're doing.</warn>\n   * @param {Object} data The full packet to send\n   * @param {boolean} [important=false] If this packet should be added first in queue\n   * <warn>This parameter is **deprecated**. Important payloads are determined by their opcode instead.</warn>\n   */\n  send(data, important = false) {\n    if (important && !deprecationEmittedForImportant) {\n      process.emitWarning(\n        'Sending important payloads explicitly is deprecated. They are determined by their opcode implicitly now.',\n        'DeprecationWarning',\n      );\n      deprecationEmittedForImportant = true;\n    }\n    this.manager._ws.send(this.id, data);\n  }\n}\n\nmodule.exports = WebSocketShard;\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ApplicationCommandPermissionsUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.AutoModerationActionExecution.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.AutoModerationRuleCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.AutoModerationRuleDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.AutoModerationRuleUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ChannelCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ChannelDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, { d: data }) => {\n  const channel = client.channels.cache.get(data.channel_id);\n  const time = data.last_pin_timestamp ? Date.parse(data.last_pin_timestamp) : null;\n\n  if (channel) {\n    // Discord sends null for last_pin_timestamp if the last pinned message was removed\n    channel.lastPinTimestamp = time;\n\n    /**\n     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\n     * not much information can be provided easily here - you need to manually check the pins yourself.\n     * @event Client#channelPinsUpdate\n     * @param {TextBasedChannels} channel The channel that the pins update occurred in\n     * @param {Date} time The time of the pins update\n     */\n    client.emit(Events.ChannelPinsUpdate, channel, time);\n  }\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, packet) => {\n  const { old, updated } = client.actions.ChannelUpdate.handle(packet.d);\n  if (old && updated) {\n    /**\n     * Emitted whenever a channel is updated - e.g. name change, topic change, channel type change.\n     * @event Client#channelUpdate\n     * @param {DMChannel|GuildChannel} oldChannel The channel before the update\n     * @param {DMChannel|GuildChannel} newChannel The channel after the update\n     */\n    client.emit(Events.ChannelUpdate, old, updated);\n  }\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.EntitlementCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.EntitlementDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.EntitlementUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildAuditLogEntryCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildBanAdd.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildBanRemove.handle(packet.d);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\nconst Status = require('../../../util/Status');\n\nmodule.exports = (client, { d: data }, shard) => {\n  let guild = client.guilds.cache.get(data.id);\n  if (guild) {\n    if (!guild.available && !data.unavailable) {\n      // A newly available guild\n      guild._patch(data);\n\n      /**\n       * Emitted whenever a guild becomes available.\n       * @event Client#guildAvailable\n       * @param {Guild} guild The guild that became available\n       */\n      client.emit(Events.GuildAvailable, guild);\n    }\n  } else {\n    // A new guild\n    data.shardId = shard.id;\n    guild = client.guilds._add(data);\n    if (client.ws.status === Status.Ready) {\n      /**\n       * Emitted whenever the client joins a guild.\n       * @event Client#guildCreate\n       * @param {Guild} guild The created guild\n       */\n      client.emit(Events.GuildCreate, guild);\n    }\n  }\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildEmojisUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildIntegrationsUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, { d: data }) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (!guild) return;\n  const members = new Collection();\n\n  for (const member of data.members) members.set(member.user.id, guild.members._add(member));\n  if (data.presences) {\n    for (const presence of data.presences) guild.presences._add(Object.assign(presence, { guild }));\n  }\n\n  /**\n   * Represents the properties of a guild members chunk\n   * @typedef {Object} GuildMembersChunk\n   * @property {number} index Index of the received chunk\n   * @property {number} count Number of chunks the client should receive\n   * @property {Array<*>} notFound An array of whatever could not be found\n   * when using {@link GatewayOpcodes.RequestGuildMembers}\n   * @property {?string} nonce Nonce for this chunk\n   */\n\n  /**\n   * Emitted whenever a chunk of guild members is received (all members come from the same guild).\n   * @event Client#guildMembersChunk\n   * @param {Collection<Snowflake, GuildMember>} members The members in the chunk\n   * @param {Guild} guild The guild related to the member chunk\n   * @param {GuildMembersChunk} chunk Properties of the received chunk\n   */\n  client.emit(Events.GuildMembersChunk, members, guild, {\n    index: data.chunk_index,\n    count: data.chunk_count,\n    notFound: data.not_found,\n    nonce: data.nonce,\n  });\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\nconst Status = require('../../../util/Status');\n\nmodule.exports = (client, { d: data }, shard) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (guild) {\n    guild.memberCount++;\n    const member = guild.members._add(data);\n    if (shard.status === Status.Ready) {\n      /**\n       * Emitted whenever a user joins a guild.\n       * @event Client#guildMemberAdd\n       * @param {GuildMember} member The member that has joined a guild\n       */\n      client.emit(Events.GuildMemberAdd, member);\n    }\n  }\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet, shard) => {\n  client.actions.GuildMemberRemove.handle(packet.d, shard);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet, shard) => {\n  client.actions.GuildMemberUpdate.handle(packet.d, shard);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildRoleCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildRoleDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildRoleUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildScheduledEventCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildScheduledEventDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildScheduledEventUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildScheduledEventUserAdd.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildScheduledEventUserRemove.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildStickersUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.GuildUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.InteractionCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.InviteCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.InviteDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageDeleteBulk.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessagePollVoteAdd.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessagePollVoteRemove.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionAdd.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionRemove.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionRemoveAll.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.MessageReactionRemoveEmoji.handle(packet.d);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, packet) => {\n  const { old, updated } = client.actions.MessageUpdate.handle(packet.d);\n  if (old && updated) {\n    /**\n     * Emitted whenever a message is updated - e.g. embed or content change.\n     * @event Client#messageUpdate\n     * @param {Message} oldMessage The message before the update\n     * @param {Message} newMessage The message after the update\n     */\n    client.emit(Events.MessageUpdate, old, updated);\n  }\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.PresenceUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst User = require('./User');\nconst { resolveImage } = require('../util/DataResolver');\n\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\nclass ClientUser extends User {\n  _patch(data) {\n    super._patch(data);\n\n    if ('verified' in data) {\n      /**\n       * Whether or not this account has been verified\n       * @type {boolean}\n       */\n      this.verified = data.verified;\n    }\n\n    if ('mfa_enabled' in data) {\n      /**\n       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n       * @type {?boolean}\n       */\n      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n    } else {\n      this.mfaEnabled ??= null;\n    }\n\n    if ('token' in data) this.client.token = data.token;\n  }\n\n  /**\n   * Represents the client user's presence\n   * @type {ClientPresence}\n   * @readonly\n   */\n  get presence() {\n    return this.client.presence;\n  }\n\n  /**\n   * Data used to edit the logged in client\n   * @typedef {Object} ClientUserEditOptions\n   * @property {string} [username] The new username\n   * @property {?(BufferResolvable|Base64Resolvable)} [avatar] The new avatar\n   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The new banner\n   */\n\n  /**\n   * Edits the logged in client.\n   * @param {ClientUserEditOptions} options The options to provide\n   * @returns {Promise<ClientUser>}\n   */\n  async edit({ username, avatar, banner }) {\n    const data = await this.client.rest.patch(Routes.user(), {\n      body: {\n        username,\n        avatar: avatar && (await resolveImage(avatar)),\n        banner: banner && (await resolveImage(banner)),\n      },\n    });\n\n    this.client.token = data.token;\n    this.client.rest.setToken(data.token);\n    const { updated } = this.client.actions.UserUpdate.handle(data);\n    return updated ?? this;\n  }\n\n  /**\n   * Sets the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n  setUsername(username) {\n    return this.edit({ username });\n  }\n\n  /**\n   * Sets the avatar of the logged in client.\n   * @param {?(BufferResolvable|Base64Resolvable)} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n  setAvatar(avatar) {\n    return this.edit({ avatar });\n  }\n\n  /**\n   * Sets the banner of the logged in client.\n   * @param {?(BufferResolvable|Base64Resolvable)} banner The new banner\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set banner\n   * client.user.setBanner('./banner.png')\n   *   .then(user => console.log(`New banner set!`))\n   *   .catch(console.error);\n   */\n  setBanner(banner) {\n    return this.edit({ banner });\n  }\n\n  /**\n   * Options for setting activities\n   * @typedef {Object} ActivitiesOptions\n   * @property {string} name Name of the activity\n   * @property {string} [state] State of the activity\n   * @property {ActivityType} [type] Type of the activity\n   * @property {string} [url] Twitch / YouTube stream URL\n   */\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatusData} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {ActivitiesOptions[]} [activities] Activity the user is playing\n   * @property {number|number[]} [shardId] Shard id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {ClientPresence}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ activities: [{ name: 'with discord.js' }], status: 'idle' });\n   */\n  setPresence(data) {\n    return this.client.presence.set(data);\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatusData\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatusData} status Status to change to\n   * @param {number|number[]} [shardId] Shard id(s) to have the activity set on\n   * @returns {ClientPresence}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle');\n   */\n  setStatus(status, shardId) {\n    return this.setPresence({ status, shardId });\n  }\n\n  /**\n   * Options for setting an activity.\n   * @typedef {Object} ActivityOptions\n   * @property {string} name Name of the activity\n   * @property {string} [state] State of the activity\n   * @property {string} [url] Twitch / YouTube stream URL\n   * @property {ActivityType} [type] Type of the activity\n   * @property {number|number[]} [shardId] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {string|ActivityOptions} name Activity being played, or options for setting the activity\n   * @param {ActivityOptions} [options] Options for setting the activity\n   * @returns {ClientPresence}\n   * @example\n   * // Set the client user's activity\n   * client.user.setActivity('discord.js', { type: ActivityType.Watching });\n   */\n  setActivity(name, options = {}) {\n    if (!name) return this.setPresence({ activities: [], shardId: options.shardId });\n\n    const activity = Object.assign({}, options, typeof name === 'object' ? name : { name });\n    return this.setPresence({ activities: [activity], shardId: activity.shardId });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} [afk=true] Whether or not the user is AFK\n   * @param {number|number[]} [shardId] Shard Id(s) to have the AFK flag set on\n   * @returns {ClientPresence}\n   */\n  setAFK(afk = true, shardId) {\n    return this.setPresence({ afk, shardId });\n  }\n}\n\nmodule.exports = ClientUser;\n",
    "'use strict';\n\nconst ClientApplication = require('../../../structures/ClientApplication');\nlet ClientUser;\n\nmodule.exports = (client, { d: data }, shard) => {\n  if (client.user) {\n    client.user._patch(data.user);\n  } else {\n    ClientUser ??= require('../../../structures/ClientUser');\n    client.user = new ClientUser(client, data.user);\n    client.users.cache.set(client.user.id, client.user);\n  }\n\n  for (const guild of data.guilds) {\n    guild.shardId = shard.id;\n    client.guilds._add(guild);\n  }\n\n  if (client.application) {\n    client.application._patch(data.application);\n  } else {\n    client.application = new ClientApplication(client, data.application);\n  }\n\n  shard.checkReady();\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, packet, shard) => {\n  const replayed = shard.sessionInfo.sequence - shard.closeSequence;\n  /**\n   * Emitted when a shard resumes successfully.\n   * @event Client#shardResume\n   * @param {number} id The shard id that resumed\n   * @param {number} replayedEvents The amount of replayed events\n   */\n  client.emit(Events.ShardResume, shard.id, replayed);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.StageInstanceCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.StageInstanceDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.StageInstanceUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, { d: data }) => {\n  const subscription = client.application.subscriptions._add(data);\n\n  /**\n   * Emitted whenever a subscription is created.\n   * @event Client#subscriptionCreate\n   * @param {Subscription} subscription The subscription that was created\n   */\n  client.emit(Events.SubscriptionCreate, subscription);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, { d: data }) => {\n  const subscription = client.application.subscriptions._add(data, false);\n\n  client.application.subscriptions.cache.delete(subscription.id);\n\n  /**\n   * Emitted whenever a subscription is deleted.\n   * @event Client#subscriptionDelete\n   * @param {Subscription} subscription The subscription that was deleted\n   */\n  client.emit(Events.SubscriptionDelete, subscription);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, { d: data }) => {\n  const oldSubscription = client.application.subscriptions.cache.get(data.id)?._clone() ?? null;\n  const newSubscription = client.application.subscriptions._add(data);\n\n  /**\n   * Emitted whenever a subscription is updated - i.e. when a user's subscription renews.\n   * @event Client#subscriptionUpdate\n   * @param {?Subscription} oldSubscription The subscription before the update\n   * @param {Subscription} newSubscription The subscription after the update\n   */\n  client.emit(Events.SubscriptionUpdate, oldSubscription, newSubscription);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ThreadCreate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ThreadDelete.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ThreadListSync.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ThreadMembersUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.ThreadMemberUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, packet) => {\n  const { old, updated } = client.actions.ChannelUpdate.handle(packet.d);\n  if (old && updated) {\n    /**\n     * Emitted whenever a thread is updated - e.g. name change, archive state change, locked state change.\n     * @event Client#threadUpdate\n     * @param {ThreadChannel} oldThread The thread before the update\n     * @param {ThreadChannel} newThread The thread after the update\n     */\n    client.emit(Events.ThreadUpdate, old, updated);\n  }\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.TypingStart.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.UserUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nconst { Emoji } = require('./Emoji');\n\n/**\n * Represents an effect used in a {@link VoiceChannel}.\n */\nclass VoiceChannelEffect {\n  constructor(data, guild) {\n    /**\n     * The guild where the effect was sent from.\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The id of the channel the effect was sent in.\n     * @type {Snowflake}\n     */\n    this.channelId = data.channel_id;\n\n    /**\n     * The id of the user that sent the effect.\n     * @type {Snowflake}\n     */\n    this.userId = data.user_id;\n\n    /**\n     * The emoji of the effect.\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(guild.client, data.emoji) : null;\n\n    /**\n     * The animation type of the effect.\n     * @type {?VoiceChannelEffectSendAnimationType}\n     */\n    this.animationType = data.animation_type ?? null;\n\n    /**\n     * The animation id of the effect.\n     * @type {?number}\n     */\n    this.animationId = data.animation_id ?? null;\n\n    /**\n     * The id of the soundboard sound for soundboard effects.\n     * @type {?(Snowflake|number)}\n     */\n    this.soundId = data.sound_id ?? null;\n\n    /**\n     * The volume of the soundboard sound [0-1] for soundboard effects.\n     * @type {?number}\n     */\n    this.soundVolume = data.sound_volume ?? null;\n  }\n\n  /**\n   * The channel the effect was sent in.\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n}\n\nmodule.exports = VoiceChannelEffect;\n",
    "'use strict';\n\nconst VoiceChannelEffect = require('../../../structures/VoiceChannelEffect');\nconst Events = require('../../../util/Events');\n\nmodule.exports = (client, { d: data }) => {\n  const guild = client.guilds.cache.get(data.guild_id);\n  if (!guild) return;\n\n  /**\n   * Emitted when someone sends an effect, such as an emoji reaction, in a voice channel the client is connected to.\n   * @event Client#voiceChannelEffectSend\n   * @param {VoiceChannelEffect} voiceChannelEffect The sent voice channel effect\n   */\n  client.emit(Events.VoiceChannelEffectSend, new VoiceChannelEffect(data, guild));\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.emit('debug', `[VOICE] received voice server: ${JSON.stringify(packet)}`);\n  client.voice.onVoiceServer(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.VoiceStateUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nmodule.exports = (client, packet) => {\n  client.actions.WebhooksUpdate.handle(packet.d);\n};\n",
    "'use strict';\n\nconst handlers = Object.fromEntries([\n  ['APPLICATION_COMMAND_PERMISSIONS_UPDATE', require('./APPLICATION_COMMAND_PERMISSIONS_UPDATE')],\n  ['AUTO_MODERATION_ACTION_EXECUTION', require('./AUTO_MODERATION_ACTION_EXECUTION')],\n  ['AUTO_MODERATION_RULE_CREATE', require('./AUTO_MODERATION_RULE_CREATE')],\n  ['AUTO_MODERATION_RULE_DELETE', require('./AUTO_MODERATION_RULE_DELETE')],\n  ['AUTO_MODERATION_RULE_UPDATE', require('./AUTO_MODERATION_RULE_UPDATE')],\n  ['CHANNEL_CREATE', require('./CHANNEL_CREATE')],\n  ['CHANNEL_DELETE', require('./CHANNEL_DELETE')],\n  ['CHANNEL_PINS_UPDATE', require('./CHANNEL_PINS_UPDATE')],\n  ['CHANNEL_UPDATE', require('./CHANNEL_UPDATE')],\n  ['ENTITLEMENT_CREATE', require('./ENTITLEMENT_CREATE')],\n  ['ENTITLEMENT_DELETE', require('./ENTITLEMENT_DELETE')],\n  ['ENTITLEMENT_UPDATE', require('./ENTITLEMENT_UPDATE')],\n  ['GUILD_AUDIT_LOG_ENTRY_CREATE', require('./GUILD_AUDIT_LOG_ENTRY_CREATE')],\n  ['GUILD_BAN_ADD', require('./GUILD_BAN_ADD')],\n  ['GUILD_BAN_REMOVE', require('./GUILD_BAN_REMOVE')],\n  ['GUILD_CREATE', require('./GUILD_CREATE')],\n  ['GUILD_DELETE', require('./GUILD_DELETE')],\n  ['GUILD_EMOJIS_UPDATE', require('./GUILD_EMOJIS_UPDATE')],\n  ['GUILD_INTEGRATIONS_UPDATE', require('./GUILD_INTEGRATIONS_UPDATE')],\n  ['GUILD_MEMBERS_CHUNK', require('./GUILD_MEMBERS_CHUNK')],\n  ['GUILD_MEMBER_ADD', require('./GUILD_MEMBER_ADD')],\n  ['GUILD_MEMBER_REMOVE', require('./GUILD_MEMBER_REMOVE')],\n  ['GUILD_MEMBER_UPDATE', require('./GUILD_MEMBER_UPDATE')],\n  ['GUILD_ROLE_CREATE', require('./GUILD_ROLE_CREATE')],\n  ['GUILD_ROLE_DELETE', require('./GUILD_ROLE_DELETE')],\n  ['GUILD_ROLE_UPDATE', require('./GUILD_ROLE_UPDATE')],\n  ['GUILD_SCHEDULED_EVENT_CREATE', require('./GUILD_SCHEDULED_EVENT_CREATE')],\n  ['GUILD_SCHEDULED_EVENT_DELETE', require('./GUILD_SCHEDULED_EVENT_DELETE')],\n  ['GUILD_SCHEDULED_EVENT_UPDATE', require('./GUILD_SCHEDULED_EVENT_UPDATE')],\n  ['GUILD_SCHEDULED_EVENT_USER_ADD', require('./GUILD_SCHEDULED_EVENT_USER_ADD')],\n  ['GUILD_SCHEDULED_EVENT_USER_REMOVE', require('./GUILD_SCHEDULED_EVENT_USER_REMOVE')],\n  ['GUILD_STICKERS_UPDATE', require('./GUILD_STICKERS_UPDATE')],\n  ['GUILD_UPDATE', require('./GUILD_UPDATE')],\n  ['INTERACTION_CREATE', require('./INTERACTION_CREATE')],\n  ['INVITE_CREATE', require('./INVITE_CREATE')],\n  ['INVITE_DELETE', require('./INVITE_DELETE')],\n  ['MESSAGE_CREATE', require('./MESSAGE_CREATE')],\n  ['MESSAGE_DELETE', require('./MESSAGE_DELETE')],\n  ['MESSAGE_DELETE_BULK', require('./MESSAGE_DELETE_BULK')],\n  ['MESSAGE_POLL_VOTE_ADD', require('./MESSAGE_POLL_VOTE_ADD')],\n  ['MESSAGE_POLL_VOTE_REMOVE', require('./MESSAGE_POLL_VOTE_REMOVE')],\n  ['MESSAGE_REACTION_ADD', require('./MESSAGE_REACTION_ADD')],\n  ['MESSAGE_REACTION_REMOVE', require('./MESSAGE_REACTION_REMOVE')],\n  ['MESSAGE_REACTION_REMOVE_ALL', require('./MESSAGE_REACTION_REMOVE_ALL')],\n  ['MESSAGE_REACTION_REMOVE_EMOJI', require('./MESSAGE_REACTION_REMOVE_EMOJI')],\n  ['MESSAGE_UPDATE', require('./MESSAGE_UPDATE')],\n  ['PRESENCE_UPDATE', require('./PRESENCE_UPDATE')],\n  ['READY', require('./READY')],\n  ['RESUMED', require('./RESUMED')],\n  ['STAGE_INSTANCE_CREATE', require('./STAGE_INSTANCE_CREATE')],\n  ['STAGE_INSTANCE_DELETE', require('./STAGE_INSTANCE_DELETE')],\n  ['STAGE_INSTANCE_UPDATE', require('./STAGE_INSTANCE_UPDATE')],\n  ['SUBSCRIPTION_CREATE', require('./SUBSCRIPTION_CREATE')],\n  ['SUBSCRIPTION_DELETE', require('./SUBSCRIPTION_DELETE')],\n  ['SUBSCRIPTION_UPDATE', require('./SUBSCRIPTION_UPDATE')],\n  ['THREAD_CREATE', require('./THREAD_CREATE')],\n  ['THREAD_DELETE', require('./THREAD_DELETE')],\n  ['THREAD_LIST_SYNC', require('./THREAD_LIST_SYNC')],\n  ['THREAD_MEMBERS_UPDATE', require('./THREAD_MEMBERS_UPDATE')],\n  ['THREAD_MEMBER_UPDATE', require('./THREAD_MEMBER_UPDATE')],\n  ['THREAD_UPDATE', require('./THREAD_UPDATE')],\n  ['TYPING_START', require('./TYPING_START')],\n  ['USER_UPDATE', require('./USER_UPDATE')],\n  ['VOICE_CHANNEL_EFFECT_SEND', require('./VOICE_CHANNEL_EFFECT_SEND')],\n  ['VOICE_SERVER_UPDATE', require('./VOICE_SERVER_UPDATE')],\n  ['VOICE_STATE_UPDATE', require('./VOICE_STATE_UPDATE')],\n  ['WEBHOOKS_UPDATE', require('./WEBHOOKS_UPDATE')],\n]);\n\nmodule.exports = handlers;\n",
    "'use strict';\n\nconst EventEmitter = require('node:events');\nconst process = require('node:process');\nconst { setImmediate } = require('node:timers');\nconst { Collection } = require('@discordjs/collection');\nconst {\n  WebSocketManager: WSWebSocketManager,\n  WebSocketShardEvents: WSWebSocketShardEvents,\n  CompressionMethod,\n  CloseCodes,\n} = require('@discordjs/ws');\nconst { GatewayCloseCodes, GatewayDispatchEvents } = require('discord-api-types/v10');\nconst WebSocketShard = require('./WebSocketShard');\nconst PacketHandlers = require('./handlers');\nconst { DiscordjsError, ErrorCodes } = require('../../errors');\nconst Events = require('../../util/Events');\nconst Status = require('../../util/Status');\nconst WebSocketShardEvents = require('../../util/WebSocketShardEvents');\n\nlet zlib;\n\ntry {\n  zlib = require('zlib-sync');\n} catch {} // eslint-disable-line no-empty\n\nconst BeforeReadyWhitelist = [\n  GatewayDispatchEvents.Ready,\n  GatewayDispatchEvents.Resumed,\n  GatewayDispatchEvents.GuildCreate,\n  GatewayDispatchEvents.GuildDelete,\n  GatewayDispatchEvents.GuildMembersChunk,\n  GatewayDispatchEvents.GuildMemberAdd,\n  GatewayDispatchEvents.GuildMemberRemove,\n];\n\nconst WaitingForGuildEvents = [GatewayDispatchEvents.GuildCreate, GatewayDispatchEvents.GuildDelete];\n\nconst UNRESUMABLE_CLOSE_CODES = [\n  CloseCodes.Normal,\n  GatewayCloseCodes.AlreadyAuthenticated,\n  GatewayCloseCodes.InvalidSeq,\n];\n\nconst reasonIsDeprecated = 'the reason property is deprecated, use the code property to determine the reason';\nlet deprecationEmittedForInvalidSessionEvent = false;\nlet deprecationEmittedForDestroyedEvent = false;\n\n/**\n * The WebSocket manager for this client.\n * <info>This class forwards raw dispatch events,\n * read more about it here {@link https://discord.com/developers/docs/topics/gateway}</info>\n * @extends {EventEmitter}\n */\nclass WebSocketManager extends EventEmitter {\n  constructor(client) {\n    super();\n\n    /**\n     * The client that instantiated this WebSocketManager\n     * @type {Client}\n     * @readonly\n     * @name WebSocketManager#client\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The gateway this manager uses\n     * @type {?string}\n     */\n    this.gateway = null;\n\n    /**\n     * A collection of all shards this manager handles\n     * @type {Collection<number, WebSocketShard>}\n     */\n    this.shards = new Collection();\n\n    /**\n     * An array of queued events before this WebSocketManager became ready\n     * @type {Object[]}\n     * @private\n     * @name WebSocketManager#packetQueue\n     */\n    Object.defineProperty(this, 'packetQueue', { value: [] });\n\n    /**\n     * The current status of this WebSocketManager\n     * @type {Status}\n     */\n    this.status = Status.Idle;\n\n    /**\n     * If this manager was destroyed. It will prevent shards from reconnecting\n     * @type {boolean}\n     * @private\n     */\n    this.destroyed = false;\n\n    /**\n     * The internal WebSocketManager from `@discordjs/ws`.\n     * @type {WSWebSocketManager}\n     * @private\n     */\n    this._ws = null;\n  }\n\n  /**\n   * The average ping of all WebSocketShards\n   * @type {number}\n   * @readonly\n   */\n  get ping() {\n    const sum = this.shards.reduce((a, b) => a + b.ping, 0);\n    return sum / this.shards.size;\n  }\n\n  /**\n   * Emits a debug message.\n   * @param {string[]} messages The debug message\n   * @param {?number} [shardId] The id of the shard that emitted this message, if any\n   * @private\n   */\n  debug(messages, shardId) {\n    this.client.emit(\n      Events.Debug,\n      `[WS => ${typeof shardId === 'number' ? `Shard ${shardId}` : 'Manager'}] ${messages.join('\\n\\t')}`,\n    );\n  }\n\n  /**\n   * Connects this manager to the gateway.\n   * @private\n   */\n  async connect() {\n    const invalidToken = new DiscordjsError(ErrorCodes.TokenInvalid);\n    const { shards, shardCount, intents, ws } = this.client.options;\n    if (this._ws && this._ws.options.token !== this.client.token) {\n      await this._ws.destroy({ code: CloseCodes.Normal, reason: 'Login with differing token requested' });\n      this._ws = null;\n    }\n    if (!this._ws) {\n      const wsOptions = {\n        intents: intents.bitfield,\n        rest: this.client.rest,\n        token: this.client.token,\n        largeThreshold: ws.large_threshold,\n        version: ws.version,\n        shardIds: shards === 'auto' ? null : shards,\n        shardCount: shards === 'auto' ? null : shardCount,\n        initialPresence: ws.presence,\n        retrieveSessionInfo: shardId => this.shards.get(shardId).sessionInfo,\n        updateSessionInfo: (shardId, sessionInfo) => {\n          this.shards.get(shardId).sessionInfo = sessionInfo;\n        },\n        compression: zlib ? CompressionMethod.ZlibStream : null,\n      };\n      if (ws.buildIdentifyThrottler) wsOptions.buildIdentifyThrottler = ws.buildIdentifyThrottler;\n      if (ws.buildStrategy) wsOptions.buildStrategy = ws.buildStrategy;\n      this._ws = new WSWebSocketManager(wsOptions);\n      this.attachEvents();\n    }\n\n    const {\n      url: gatewayURL,\n      shards: recommendedShards,\n      session_start_limit: sessionStartLimit,\n    } = await this._ws.fetchGatewayInformation().catch(error => {\n      throw error.status === 401 ? invalidToken : error;\n    });\n\n    const { total, remaining } = sessionStartLimit;\n    this.debug(['Fetched Gateway Information', `URL: ${gatewayURL}`, `Recommended Shards: ${recommendedShards}`]);\n    this.debug(['Session Limit Information', `Total: ${total}`, `Remaining: ${remaining}`]);\n    this.gateway = `${gatewayURL}/`;\n\n    this.client.options.shardCount = await this._ws.getShardCount();\n    this.client.options.shards = await this._ws.getShardIds();\n    this.totalShards = this.client.options.shards.length;\n    for (const id of this.client.options.shards) {\n      if (!this.shards.has(id)) {\n        const shard = new WebSocketShard(this, id);\n        this.shards.set(id, shard);\n\n        shard.on(WebSocketShardEvents.AllReady, unavailableGuilds => {\n          /**\n           * Emitted when a shard turns ready.\n           * @event Client#shardReady\n           * @param {number} id The shard id that turned ready\n           * @param {?Set<Snowflake>} unavailableGuilds Set of unavailable guild ids, if any\n           */\n          this.client.emit(Events.ShardReady, shard.id, unavailableGuilds);\n\n          this.checkShardsReady();\n        });\n        shard.status = Status.Connecting;\n      }\n    }\n\n    await this._ws.connect();\n\n    this.shards.forEach(shard => {\n      if (shard.listenerCount(WebSocketShardEvents.InvalidSession) > 0 && !deprecationEmittedForInvalidSessionEvent) {\n        process.emitWarning(\n          'The WebSocketShard#invalidSession event is deprecated and will never emit.',\n          'DeprecationWarning',\n        );\n\n        deprecationEmittedForInvalidSessionEvent = true;\n      }\n      if (shard.listenerCount(WebSocketShardEvents.Destroyed) > 0 && !deprecationEmittedForDestroyedEvent) {\n        process.emitWarning(\n          'The WebSocketShard#destroyed event is deprecated and will never emit.',\n          'DeprecationWarning',\n        );\n\n        deprecationEmittedForDestroyedEvent = true;\n      }\n    });\n  }\n\n  /**\n   * Attaches event handlers to the internal WebSocketShardManager from `@discordjs/ws`.\n   * @private\n   */\n  attachEvents() {\n    this._ws.on(WSWebSocketShardEvents.Debug, ({ message, shardId }) => this.debug([message], shardId));\n    this._ws.on(WSWebSocketShardEvents.Dispatch, ({ data, shardId }) => {\n      this.client.emit(Events.Raw, data, shardId);\n      this.emit(data.t, data.d, shardId);\n      const shard = this.shards.get(shardId);\n      this.handlePacket(data, shard);\n      if (shard.status === Status.WaitingForGuilds && WaitingForGuildEvents.includes(data.t)) {\n        shard.gotGuild(data.d.id);\n      }\n    });\n\n    this._ws.on(WSWebSocketShardEvents.Ready, ({ data, shardId }) => {\n      this.shards.get(shardId).onReadyPacket(data);\n    });\n\n    this._ws.on(WSWebSocketShardEvents.Closed, ({ code, shardId }) => {\n      const shard = this.shards.get(shardId);\n      shard.emit(WebSocketShardEvents.Close, { code, reason: reasonIsDeprecated, wasClean: true });\n      if (UNRESUMABLE_CLOSE_CODES.includes(code) && this.destroyed) {\n        shard.status = Status.Disconnected;\n        /**\n         * Emitted when a shard's WebSocket disconnects and will no longer reconnect.\n         * @event Client#shardDisconnect\n         * @param {CloseEvent} event The WebSocket close event\n         * @param {number} id The shard id that disconnected\n         */\n        this.client.emit(Events.ShardDisconnect, { code, reason: reasonIsDeprecated, wasClean: true }, shardId);\n        this.debug([`Shard not resumable: ${code} (${GatewayCloseCodes[code] ?? CloseCodes[code]})`], shardId);\n        return;\n      }\n\n      this.shards.get(shardId).status = Status.Connecting;\n      /**\n       * Emitted when a shard is attempting to reconnect or re-identify.\n       * @event Client#shardReconnecting\n       * @param {number} id The shard id that is attempting to reconnect\n       */\n      this.client.emit(Events.ShardReconnecting, shardId);\n    });\n    this._ws.on(WSWebSocketShardEvents.Hello, ({ shardId }) => {\n      const shard = this.shards.get(shardId);\n      if (shard.sessionInfo) {\n        shard.closeSequence = shard.sessionInfo.sequence;\n        shard.status = Status.Resuming;\n      } else {\n        shard.status = Status.Identifying;\n      }\n    });\n\n    this._ws.on(WSWebSocketShardEvents.Resumed, ({ shardId }) => {\n      const shard = this.shards.get(shardId);\n      shard.status = Status.Ready;\n      /**\n       * Emitted when the shard resumes successfully\n       * @event WebSocketShard#resumed\n       */\n      shard.emit(WebSocketShardEvents.Resumed);\n    });\n\n    this._ws.on(WSWebSocketShardEvents.HeartbeatComplete, ({ heartbeatAt, latency, shardId }) => {\n      this.debug([`Heartbeat acknowledged, latency of ${latency}ms.`], shardId);\n      const shard = this.shards.get(shardId);\n      shard.lastPingTimestamp = heartbeatAt;\n      shard.ping = latency;\n    });\n\n    this._ws.on(WSWebSocketShardEvents.Error, ({ error, shardId }) => {\n      /**\n       * Emitted whenever a shard's WebSocket encounters a connection error.\n       * @event Client#shardError\n       * @param {Error} error The encountered error\n       * @param {number} shardId The shard that encountered this error\n       */\n      this.client.emit(Events.ShardError, error, shardId);\n    });\n  }\n\n  /**\n   * Broadcasts a packet to every shard this manager handles.\n   * @param {Object} packet The packet to send\n   * @private\n   */\n  broadcast(packet) {\n    for (const shardId of this.shards.keys()) this._ws.send(shardId, packet);\n  }\n\n  /**\n   * Destroys this manager and all its shards.\n   * @private\n   */\n  async destroy() {\n    if (this.destroyed) return;\n    // TODO: Make a util for getting a stack\n    this.debug([Object.assign(new Error(), { name: 'Manager was destroyed:' }).stack]);\n    this.destroyed = true;\n    await this._ws?.destroy({ code: CloseCodes.Normal, reason: 'Manager was destroyed' });\n  }\n\n  /**\n   * Processes a packet and queues it if this WebSocketManager is not ready.\n   * @param {Object} [packet] The packet to be handled\n   * @param {WebSocketShard} [shard] The shard that will handle this packet\n   * @returns {boolean}\n   * @private\n   */\n  handlePacket(packet, shard) {\n    if (packet && this.status !== Status.Ready) {\n      if (!BeforeReadyWhitelist.includes(packet.t)) {\n        this.packetQueue.push({ packet, shard });\n        return false;\n      }\n    }\n\n    if (this.packetQueue.length) {\n      const item = this.packetQueue.shift();\n      setImmediate(() => {\n        this.handlePacket(item.packet, item.shard);\n      }).unref();\n    }\n\n    if (packet && PacketHandlers[packet.t]) {\n      PacketHandlers[packet.t](this.client, packet, shard);\n    }\n\n    return true;\n  }\n\n  /**\n   * Checks whether the client is ready to be marked as ready.\n   * @private\n   */\n  checkShardsReady() {\n    if (this.status === Status.Ready) return;\n    if (this.shards.size !== this.totalShards || this.shards.some(shard => shard.status !== Status.Ready)) {\n      return;\n    }\n\n    this.triggerClientReady();\n  }\n\n  /**\n   * Causes the client to be marked as ready and emits the ready event.\n   * @private\n   */\n  triggerClientReady() {\n    this.status = Status.Ready;\n\n    this.client.readyTimestamp = Date.now();\n\n    /**\n     * Emitted when the client becomes ready to start working.\n     * @event Client#ready\n     * @param {Client} client The client\n     */\n    this.client.emit(Events.ClientReady, this.client);\n\n    this.handlePacket();\n  }\n}\n\nmodule.exports = WebSocketManager;\n",
    "'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst ApplicationEmoji = require('../structures/ApplicationEmoji');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst { parseEmoji } = require('../util/Util');\n\n/**\n * Holds methods to resolve GuildEmojis and stores their cache.\n * @extends {CachedManager}\n */\nclass BaseGuildEmojiManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, GuildEmoji, iterable);\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name BaseGuildEmojiManager#cache\n   */\n\n  /**\n   * Data that can be resolved into a GuildEmoji object. This can be:\n   * * A Snowflake\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * * An ApplicationEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji|ApplicationEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return this.cache.get(emoji.id) ?? null;\n    if (emoji instanceof ApplicationEmoji) return this.cache.get(emoji.id) ?? null;\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji id string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    if (emoji instanceof ApplicationEmoji) return emoji.id;\n    return super.resolveId(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * An EmojiResolvable\n   * * The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji\n   * * The Unicode representation of an emoji\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (emoji instanceof ApplicationEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res?.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      return emoji;\n    }\n    return null;\n  }\n}\n\nmodule.exports = BaseGuildEmojiManager;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { BaseChannel } = require('../structures/BaseChannel');\nconst { createChannel } = require('../util/Channels');\nconst { ThreadChannelTypes } = require('../util/Constants');\nconst Events = require('../util/Events');\n\nlet cacheWarningEmitted = false;\n\n/**\n * A manager of channels belonging to a client\n * @extends {CachedManager}\n */\nclass ChannelManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, BaseChannel, iterable);\n    const defaultCaching =\n      this._cache.constructor.name === 'Collection' ||\n      this._cache.maxSize === undefined ||\n      this._cache.maxSize === Infinity;\n    if (!cacheWarningEmitted && !defaultCaching) {\n      cacheWarningEmitted = true;\n      process.emitWarning(\n        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,\n        'UnsupportedCacheOverwriteWarning',\n      );\n    }\n  }\n\n  /**\n   * The cache of Channels\n   * @type {Collection<Snowflake, BaseChannel>}\n   * @name ChannelManager#cache\n   */\n\n  _add(data, guild, { cache = true, allowUnknownGuild = false } = {}) {\n    const existing = this.cache.get(data.id);\n    if (existing) {\n      if (cache) existing._patch(data);\n      guild?.channels?._add(existing);\n      if (ThreadChannelTypes.includes(existing.type)) {\n        existing.parent?.threads?._add(existing);\n      }\n      return existing;\n    }\n\n    const channel = createChannel(this.client, data, guild, { allowUnknownGuild });\n\n    if (!channel) {\n      this.client.emit(Events.Debug, `Failed to find guild, or unknown type for channel ${data.id} ${data.type}`);\n      return null;\n    }\n\n    if (cache && !allowUnknownGuild) this.cache.set(channel.id, channel);\n\n    return channel;\n  }\n\n  _remove(id) {\n    const channel = this.cache.get(id);\n    channel?.guild?.channels.cache.delete(id);\n\n    for (const [code, invite] of channel?.guild?.invites.cache ?? []) {\n      if (invite.channelId === id) channel.guild.invites.cache.delete(code);\n    }\n\n    channel?.parent?.threads?.cache.delete(id);\n    this.cache.delete(id);\n  }\n\n  /**\n   * Data that can be resolved to give a Channel object. This can be:\n   * * A Channel object\n   * * A Snowflake\n   * @typedef {BaseChannel|Snowflake} ChannelResolvable\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a Channel object.\n   * @method resolve\n   * @memberof ChannelManager\n   * @instance\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?BaseChannel}\n   */\n\n  /**\n   * Resolves a ChannelResolvable to a channel id string.\n   * @method resolveId\n   * @memberof ChannelManager\n   * @instance\n   * @param {ChannelResolvable} channel The channel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Options for fetching a channel from Discord\n   * @typedef {BaseFetchOptions} FetchChannelOptions\n   * @property {boolean} [allowUnknownGuild=false] Allows the channel to be returned even if the guild is not in cache,\n   * it will not be cached. <warn>Many of the properties and methods on the returned channel will throw errors</warn>\n   */\n\n  /**\n   * Obtains a channel from Discord, or the channel cache if it's already available.\n   * @param {Snowflake} id The channel's id\n   * @param {FetchChannelOptions} [options] Additional options for this fetch\n   * @returns {Promise<?BaseChannel>}\n   * @example\n   * // Fetch a channel by its id\n   * client.channels.fetch('222109930545610754')\n   *   .then(channel => console.log(channel.name))\n   *   .catch(console.error);\n   */\n  async fetch(id, { allowUnknownGuild = false, cache = true, force = false } = {}) {\n    if (!force) {\n      const existing = this.cache.get(id);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.channel(id));\n    return this._add(data, null, { cache, allowUnknownGuild });\n  }\n}\n\nmodule.exports = ChannelManager;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { calculateShardId } = require('@discordjs/util');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst Events = require('../util/Events');\nconst { makeError, makePlainError } = require('../util/Util');\n\n/**\n * Helper class for sharded clients spawned as a child process/worker, such as from a {@link ShardingManager}.\n * Utilizes IPC to send and receive data to/from the master process and other shards.\n */\nclass ShardClientUtil {\n  constructor(client, mode) {\n    /**\n     * Client for the shard\n     * @type {Client}\n     */\n    this.client = client;\n\n    /**\n     * Mode the shard was spawned with\n     * @type {ShardingManagerMode}\n     */\n    this.mode = mode;\n\n    /**\n     * Message port for the master process (only when {@link ShardClientUtil#mode} is `worker`)\n     * @type {?MessagePort}\n     */\n    this.parentPort = null;\n\n    switch (mode) {\n      case 'process':\n        process.on('message', this._handleMessage.bind(this));\n        client.on(Events.ShardReady, () => {\n          process.send({ _ready: true });\n        });\n        client.on(Events.ShardDisconnect, () => {\n          process.send({ _disconnect: true });\n        });\n        client.on(Events.ShardReconnecting, () => {\n          process.send({ _reconnecting: true });\n        });\n        client.on(Events.ShardResume, () => {\n          process.send({ _resume: true });\n        });\n        break;\n      case 'worker':\n        this.parentPort = require('node:worker_threads').parentPort;\n        this.parentPort.on('message', this._handleMessage.bind(this));\n        client.on(Events.ShardReady, () => {\n          this.parentPort.postMessage({ _ready: true });\n        });\n        client.on(Events.ShardDisconnect, () => {\n          this.parentPort.postMessage({ _disconnect: true });\n        });\n        client.on(Events.ShardReconnecting, () => {\n          this.parentPort.postMessage({ _reconnecting: true });\n        });\n        client.on(Events.ShardResume, () => {\n          this.parentPort.postMessage({ _resume: true });\n        });\n        break;\n    }\n  }\n\n  /**\n   * Array of shard ids of this client\n   * @type {number[]}\n   * @readonly\n   */\n  get ids() {\n    return this.client.options.shards;\n  }\n\n  /**\n   * Total number of shards\n   * @type {number}\n   * @readonly\n   */\n  get count() {\n    return this.client.options.shardCount;\n  }\n\n  /**\n   * Sends a message to the master process.\n   * @param {*} message Message to send\n   * @returns {Promise<void>}\n   * @emits Shard#message\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      switch (this.mode) {\n        case 'process':\n          process.send(message, err => {\n            if (err) reject(err);\n            else resolve();\n          });\n          break;\n        case 'worker':\n          this.parentPort.postMessage(message);\n          resolve();\n          break;\n      }\n    });\n  }\n\n  /**\n   * Fetches a client property value of each shard, or a given shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @param {number} [shard] Shard to fetch property from, all if undefined\n   * @returns {Promise<*|Array<*>>}\n   * @example\n   * client.shard.fetchClientValues('guilds.cache.size')\n   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n   *   .catch(console.error);\n   * @see {@link ShardingManager#fetchClientValues}\n   */\n  fetchClientValues(prop, shard) {\n    return new Promise((resolve, reject) => {\n      const parent = this.parentPort ?? process;\n\n      const listener = message => {\n        if (message?._sFetchProp !== prop || message._sFetchPropShard !== shard) return;\n        parent.removeListener('message', listener);\n        this.decrementMaxListeners(parent);\n        if (!message._error) resolve(message._result);\n        else reject(makeError(message._error));\n      };\n      this.incrementMaxListeners(parent);\n      parent.on('message', listener);\n\n      this.send({ _sFetchProp: prop, _sFetchPropShard: shard }).catch(err => {\n        parent.removeListener('message', listener);\n        this.decrementMaxListeners(parent);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Evaluates a script or function on all shards, or a given shard, in the context of the {@link Client}s.\n   * @param {Function} script JavaScript to run on each shard\n   * @param {BroadcastEvalOptions} [options={}] The options for the broadcast\n   * @returns {Promise<*|Array<*>>} Results of the script execution\n   * @example\n   * client.shard.broadcastEval(client => client.guilds.cache.size)\n   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n   *   .catch(console.error);\n   * @see {@link ShardingManager#broadcastEval}\n   */\n  broadcastEval(script, options = {}) {\n    return new Promise((resolve, reject) => {\n      const parent = this.parentPort ?? process;\n      if (typeof script !== 'function') {\n        reject(new DiscordjsTypeError(ErrorCodes.ShardingInvalidEvalBroadcast));\n        return;\n      }\n      script = `(${script})(this, ${JSON.stringify(options.context)})`;\n\n      const listener = message => {\n        if (message?._sEval !== script || message._sEvalShard !== options.shard) return;\n        parent.removeListener('message', listener);\n        this.decrementMaxListeners(parent);\n        if (!message._error) resolve(message._result);\n        else reject(makeError(message._error));\n      };\n      this.incrementMaxListeners(parent);\n      parent.on('message', listener);\n      this.send({ _sEval: script, _sEvalShard: options.shard }).catch(err => {\n        parent.removeListener('message', listener);\n        this.decrementMaxListeners(parent);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Requests a respawn of all shards.\n   * @param {MultipleShardRespawnOptions} [options] Options for respawning shards\n   * @returns {Promise<void>} Resolves upon the message being sent\n   * @see {@link ShardingManager#respawnAll}\n   */\n  respawnAll({ shardDelay = 5_000, respawnDelay = 500, timeout = 30_000 } = {}) {\n    return this.send({ _sRespawnAll: { shardDelay, respawnDelay, timeout } });\n  }\n\n  /**\n   * Handles an IPC message.\n   * @param {*} message Message received\n   * @private\n   */\n  async _handleMessage(message) {\n    if (!message) return;\n    if (message._fetchProp) {\n      try {\n        const props = message._fetchProp.split('.');\n        let value = this.client;\n        for (const prop of props) value = value[prop];\n        this._respond('fetchProp', { _fetchProp: message._fetchProp, _result: value });\n      } catch (err) {\n        this._respond('fetchProp', { _fetchProp: message._fetchProp, _error: makePlainError(err) });\n      }\n    } else if (message._eval) {\n      try {\n        this._respond('eval', { _eval: message._eval, _result: await this.client._eval(message._eval) });\n      } catch (err) {\n        this._respond('eval', { _eval: message._eval, _error: makePlainError(err) });\n      }\n    }\n  }\n\n  /**\n   * Sends a message to the master process, emitting an error from the client upon failure.\n   * @param {string} type Type of response to send\n   * @param {*} message Message to send\n   * @private\n   */\n  _respond(type, message) {\n    this.send(message).catch(err => {\n      const error = new Error(`Error when sending ${type} response to master process: ${err.message}`);\n      error.stack = err.stack;\n      /**\n       * Emitted when the client encounters an error.\n       * <warn>Errors thrown within this event do not have a catch handler, it is\n       * recommended to not use async functions as `error` event handlers. See the\n       * {@link https://nodejs.org/api/events.html#capture-rejections-of-promises Node.js documentation}\n       * for details.)</warn>\n       * @event Client#error\n       * @param {Error} error The error encountered\n       */\n      this.client.emit(Events.Error, error);\n    });\n  }\n\n  /**\n   * Creates/gets the singleton of this class.\n   * @param {Client} client The client to use\n   * @param {ShardingManagerMode} mode Mode the shard was spawned with\n   * @returns {ShardClientUtil}\n   */\n  static singleton(client, mode) {\n    if (!this._singleton) {\n      this._singleton = new this(client, mode);\n    } else {\n      client.emit(\n        Events.Warn,\n        'Multiple clients created in child process/worker; only the first will handle sharding helpers.',\n      );\n    }\n    return this._singleton;\n  }\n\n  /**\n   * Get the shard id for a given guild id.\n   * @param {Snowflake} guildId Snowflake guild id to get shard id for\n   * @param {number} shardCount Number of shards\n   * @returns {number}\n   */\n  static shardIdForGuildId(guildId, shardCount) {\n    const shard = calculateShardId(guildId, shardCount);\n    if (shard < 0) throw new DiscordjsError(ErrorCodes.ShardingShardMiscalculation, shard, guildId, shardCount);\n    return shard;\n  }\n\n  /**\n   * Increments max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  incrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  decrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners - 1);\n    }\n  }\n}\n\nmodule.exports = ShardClientUtil;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst ApplicationCommand = require('./ApplicationCommand');\nconst GuildAuditLogsEntry = require('./GuildAuditLogsEntry');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst { flatten } = require('../util/Util');\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users._add(user);\n    if (data.threads) for (const thread of data.threads) guild.client.channels._add(thread, guild);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake|string, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * Cached {@link GuildScheduledEvent}s.\n     * @type {Collection<Snowflake, GuildScheduledEvent>}\n     * @private\n     */\n    this.guildScheduledEvents = data.guild_scheduled_events.reduce(\n      (guildScheduledEvents, guildScheduledEvent) =>\n        guildScheduledEvents.set(guildScheduledEvent.id, guild.scheduledEvents._add(guildScheduledEvent)),\n      new Collection(),\n    );\n\n    /**\n     * Cached application commands, includes application commands from other applications\n     * @type {Collection<Snowflake, ApplicationCommand>}\n     * @private\n     */\n    this.applicationCommands = new Collection();\n    if (data.application_commands) {\n      for (const command of data.application_commands) {\n        this.applicationCommands.set(command.id, new ApplicationCommand(guild.client, command, guild));\n      }\n    }\n\n    /**\n     * Cached auto moderation rules.\n     * @type {Collection<Snowflake, AutoModerationRule>}\n     * @private\n     */\n    this.autoModerationRules = data.auto_moderation_rules.reduce(\n      (autoModerationRules, autoModerationRule) =>\n        autoModerationRules.set(autoModerationRule.id, guild.autoModerationRules._add(autoModerationRule)),\n      new Collection(),\n    );\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(guild, item, this);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\nmodule.exports = GuildAuditLogs;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst { GuildOnboardingPrompt } = require('./GuildOnboardingPrompt');\n\n/**\n * Represents the onboarding data of a guild.\n * @extends {Base}\n */\nclass GuildOnboarding extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the guild this onboarding data is for\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n\n    const guild = this.guild;\n\n    /**\n     * The prompts shown during onboarding and in customize community\n     * @type {Collection<Snowflake, GuildOnboardingPrompt>}\n     */\n    this.prompts = data.prompts.reduce(\n      (prompts, prompt) => prompts.set(prompt.id, new GuildOnboardingPrompt(client, prompt, this.guildId)),\n      new Collection(),\n    );\n\n    /**\n     * The ids of the channels that new members get opted into automatically\n     * @type {Collection<Snowflake, GuildChannel>}\n     */\n    this.defaultChannels = data.default_channel_ids.reduce(\n      (channels, channelId) => channels.set(channelId, guild.channels.cache.get(channelId)),\n      new Collection(),\n    );\n\n    /**\n     * Whether onboarding is enabled\n     * @type {boolean}\n     */\n    this.enabled = data.enabled;\n\n    /**\n     * The mode of this onboarding\n     * @type {GuildOnboardingMode}\n     */\n    this.mode = data.mode;\n  }\n\n  /**\n   * The guild this onboarding is from\n   * @type {Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId);\n  }\n}\n\nexports.GuildOnboarding = GuildOnboarding;\n",
    "'use strict';\n\nconst BaseGuildEmoji = require('./BaseGuildEmoji');\n\n/**\n * Represents an instance of an emoji belonging to a public guild obtained through Discord's preview endpoint.\n * @extends {BaseGuildEmoji}\n */\nclass GuildPreviewEmoji extends BaseGuildEmoji {\n  /**\n   * The public guild this emoji is part of\n   * @type {GuildPreview}\n   * @name GuildPreviewEmoji#guild\n   */\n\n  constructor(client, data, guild) {\n    super(client, data, guild);\n\n    /**\n     * The roles this emoji is active for\n     * @type {Snowflake[]}\n     */\n    this.roles = data.roles;\n  }\n}\n\nmodule.exports = GuildPreviewEmoji;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst { Sticker } = require('./Sticker');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n\n    if (!data) return;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of this guild\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('icon' in data) {\n      /**\n       * The icon of this guild\n       * @type {?string}\n       */\n      this.icon = data.icon;\n    }\n\n    if ('splash' in data) {\n      /**\n       * The splash icon of this guild\n       * @type {?string}\n       */\n      this.splash = data.splash;\n    }\n\n    if ('discovery_splash' in data) {\n      /**\n       * The discovery splash icon of this guild\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n\n    if ('features' in data) {\n      /**\n       * An array of enabled guild features\n       * @type {GuildFeature[]}\n       */\n      this.features = data.features;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate count of members in this guild\n       * @type {number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate count of online members in this guild\n       * @type {number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    }\n\n    if ('description' in data) {\n      /**\n       * The description for this guild\n       * @type {?string}\n       */\n      this.description = data.description;\n    } else {\n      this.description ??= null;\n    }\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n\n    /**\n     * Collection of stickers belonging to this guild\n     * @type {Collection<Snowflake, Sticker>}\n     */\n    this.stickers = data.stickers.reduce(\n      (stickers, sticker) => stickers.set(sticker.id, new Sticker(this.client, sticker)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  splashURL(options = {}) {\n    return this.splash && this.client.rest.cdn.splash(this.id, this.splash, options);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  discoverySplashURL(options = {}) {\n    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  iconURL(options = {}) {\n    return this.icon && this.client.rest.cdn.icon(this.id, this.icon, options);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guildPreview(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\n\nmodule.exports = GuildPreview;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst AutoModerationRule = require('../structures/AutoModerationRule');\n\n/**\n * Manages API methods for auto moderation rules and stores their cache.\n * @extends {CachedManager}\n */\nclass AutoModerationRuleManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, AutoModerationRule, iterable);\n\n    /**\n     * The guild this manager belongs to.\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, AutoModerationRule>}\n   * @name AutoModerationRuleManager#cache\n   */\n\n  /**\n   * Resolves an {@link AutoModerationRuleResolvable} to an {@link AutoModerationRule} object.\n   * @method resolve\n   * @memberof AutoModerationRuleManager\n   * @instance\n   * @param {AutoModerationRuleResolvable} autoModerationRule The AutoModerationRule resolvable to resolve\n   * @returns {?AutoModerationRule}\n   */\n\n  /**\n   * Resolves an {@link AutoModerationRuleResolvable} to a {@link AutoModerationRule} id.\n   * @method resolveId\n   * @memberof AutoModerationRuleManager\n   * @instance\n   * @param {AutoModerationRuleResolvable} autoModerationRule The AutoModerationRule resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Options used to set the trigger metadata of an auto moderation rule.\n   * @typedef {Object} AutoModerationTriggerMetadataOptions\n   * @property {string[]} [keywordFilter] The substrings that will be searched for in the content\n   * @property {string[]} [regexPatterns] The regular expression patterns which will be matched against the content\n   * <info>Only Rust-flavored regular expressions are supported.</info>\n   * @property {AutoModerationRuleKeywordPresetType[]} [presets]\n   * The internally pre-defined wordsets which will be searched for in the content\n   * @property {string[]} [allowList] The substrings that will be exempt from triggering\n   * {@link AutoModerationRuleTriggerType.Keyword},\n   * {@link AutoModerationRuleTriggerType.KeywordPreset},\n   * and {@link AutoModerationRuleTriggerType.MemberProfile}\n   * @property {?number} [mentionTotalLimit] The total number of role & user mentions allowed per message\n   * @property {boolean} [mentionRaidProtectionEnabled] Whether to automatically detect mention raids\n   */\n\n  /**\n   * Options used to set the actions of an auto moderation rule.\n   * @typedef {Object} AutoModerationActionOptions\n   * @property {AutoModerationActionType} type The type of this auto moderation rule action\n   * @property {AutoModerationActionMetadataOptions} [metadata] Additional metadata needed during execution\n   * <info>This property is required if using a `type` of\n   * {@link AutoModerationActionType.SendAlertMessage} or {@link AutoModerationActionType.Timeout}.</info>\n   */\n\n  /**\n   * Options used to set the metadata of an auto moderation rule action.\n   * @typedef {Object} AutoModerationActionMetadataOptions\n   * @property {GuildTextChannelResolvable|ThreadChannel} [channel] The channel to which content will be logged\n   * @property {number} [durationSeconds] The timeout duration in seconds\n   * @property {string} [customMessage] The custom message that is shown whenever a message is blocked\n   */\n\n  /**\n   * Options used to create an auto moderation rule.\n   * @typedef {Object} AutoModerationRuleCreateOptions\n   * @property {string} name The name of the auto moderation rule\n   * @property {AutoModerationRuleEventType} eventType The event type of the auto moderation rule\n   * @property {AutoModerationRuleTriggerType} triggerType The trigger type of the auto moderation rule\n   * @property {AutoModerationTriggerMetadataOptions} [triggerMetadata] The trigger metadata of the auto moderation rule\n   * <info>This property is required if using a `triggerType` of\n   * {@link AutoModerationRuleTriggerType.Keyword},\n   * {@link AutoModerationRuleTriggerType.KeywordPreset},\n   * {@link AutoModerationRuleTriggerType.MentionSpam},\n   * or {@link AutoModerationRuleTriggerType.MemberProfile}.</info>\n   * @property {AutoModerationActionOptions[]} actions\n   * The actions that will execute when the auto moderation rule is triggered\n   * @property {boolean} [enabled] Whether the auto moderation rule should be enabled\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]\n   * The roles that should not be affected by the auto moderation rule\n   * @property {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]\n   * The channels that should not be affected by the auto moderation rule\n   * @property {string} [reason] The reason for creating the auto moderation rule\n   */\n\n  /**\n   * Creates a new auto moderation rule.\n   * @param {AutoModerationRuleCreateOptions} options Options for creating the auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  async create({\n    name,\n    eventType,\n    triggerType,\n    triggerMetadata,\n    actions,\n    enabled,\n    exemptRoles,\n    exemptChannels,\n    reason,\n  }) {\n    const data = await this.client.rest.post(Routes.guildAutoModerationRules(this.guild.id), {\n      body: {\n        name,\n        event_type: eventType,\n        trigger_type: triggerType,\n        trigger_metadata: triggerMetadata && {\n          keyword_filter: triggerMetadata.keywordFilter,\n          regex_patterns: triggerMetadata.regexPatterns,\n          presets: triggerMetadata.presets,\n          allow_list: triggerMetadata.allowList,\n          mention_total_limit: triggerMetadata.mentionTotalLimit,\n          mention_raid_protection_enabled: triggerMetadata.mentionRaidProtectionEnabled,\n        },\n        actions: actions.map(action => ({\n          type: action.type,\n          metadata: {\n            duration_seconds: action.metadata?.durationSeconds,\n            channel_id: action.metadata?.channel && this.guild.channels.resolveId(action.metadata.channel),\n            custom_message: action.metadata?.customMessage,\n          },\n        })),\n        enabled,\n        exempt_roles: exemptRoles?.map(exemptRole => this.guild.roles.resolveId(exemptRole)),\n        exempt_channels: exemptChannels?.map(exemptChannel => this.guild.channels.resolveId(exemptChannel)),\n      },\n      reason,\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Options used to edit an auto moderation rule.\n   * @typedef {Object} AutoModerationRuleEditOptions\n   * @property {string} [name] The name of the auto moderation rule\n   * @property {AutoModerationRuleEventType} [eventType] The event type of the auto moderation rule\n   * @property {AutoModerationTriggerMetadataOptions} [triggerMetadata] The trigger metadata of the auto moderation rule\n   * @property {AutoModerationActionOptions[]} [actions]\n   * The actions that will execute when the auto moderation rule is triggered\n   * @property {boolean} [enabled] Whether the auto moderation rule should be enabled\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [exemptRoles]\n   * The roles that should not be affected by the auto moderation rule\n   * @property {Collection<Snowflake, GuildChannel|ThreadChannel>|GuildChannelResolvable[]} [exemptChannels]\n   * The channels that should not be affected by the auto moderation rule\n   * @property {string} [reason] The reason for creating the auto moderation rule\n   */\n\n  /**\n   * Edits an auto moderation rule.\n   * @param {AutoModerationRuleResolvable} autoModerationRule The auto moderation rule to edit\n   * @param {AutoModerationRuleEditOptions} options Options for editing the auto moderation rule\n   * @returns {Promise<AutoModerationRule>}\n   */\n  async edit(\n    autoModerationRule,\n    { name, eventType, triggerMetadata, actions, enabled, exemptRoles, exemptChannels, reason },\n  ) {\n    const autoModerationRuleId = this.resolveId(autoModerationRule);\n\n    const data = await this.client.rest.patch(Routes.guildAutoModerationRule(this.guild.id, autoModerationRuleId), {\n      body: {\n        name,\n        event_type: eventType,\n        trigger_metadata: triggerMetadata && {\n          keyword_filter: triggerMetadata.keywordFilter,\n          regex_patterns: triggerMetadata.regexPatterns,\n          presets: triggerMetadata.presets,\n          allow_list: triggerMetadata.allowList,\n          mention_total_limit: triggerMetadata.mentionTotalLimit,\n          mention_raid_protection_enabled: triggerMetadata.mentionRaidProtectionEnabled,\n        },\n        actions: actions?.map(action => ({\n          type: action.type,\n          metadata: {\n            duration_seconds: action.metadata?.durationSeconds,\n            channel_id: action.metadata?.channel && this.guild.channels.resolveId(action.metadata.channel),\n            custom_message: action.metadata?.customMessage,\n          },\n        })),\n        enabled,\n        exempt_roles: exemptRoles?.map(exemptRole => this.guild.roles.resolveId(exemptRole)),\n        exempt_channels: exemptChannels?.map(exemptChannel => this.guild.channels.resolveId(exemptChannel)),\n      },\n      reason,\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Data that can be resolved to give an AutoModerationRule object. This can be:\n   * * An AutoModerationRule\n   * * A Snowflake\n   * @typedef {AutoModerationRule|Snowflake} AutoModerationRuleResolvable\n   */\n\n  /**\n   * Options used to fetch a single auto moderation rule from a guild.\n   * @typedef {BaseFetchOptions} FetchAutoModerationRuleOptions\n   * @property {AutoModerationRuleResolvable} autoModerationRule The auto moderation rule to fetch\n   */\n\n  /**\n   * Options used to fetch all auto moderation rules from a guild.\n   * @typedef {Object} FetchAutoModerationRulesOptions\n   * @property {boolean} [cache] Whether to cache the fetched auto moderation rules\n   */\n\n  /**\n   * Fetches auto moderation rules from Discord.\n   * @param {AutoModerationRuleResolvable|FetchAutoModerationRuleOptions|FetchAutoModerationRulesOptions} [options]\n   * Options for fetching auto moderation rule(s)\n   * @returns {Promise<AutoModerationRule|Collection<Snowflake, AutoModerationRule>>}\n   * @example\n   * // Fetch all auto moderation rules from a guild without caching\n   * guild.autoModerationRules.fetch({ cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single auto moderation rule\n   * guild.autoModerationRules.fetch('979083472868098119')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single auto moderation rule without checking cache and without caching\n   * guild.autoModerationRules.fetch({ autoModerationRule: '979083472868098119', cache: false, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const { autoModerationRule, cache, force } = options;\n    const resolvedAutoModerationRule = this.resolveId(autoModerationRule ?? options);\n    if (resolvedAutoModerationRule) {\n      return this._fetchSingle({ autoModerationRule: resolvedAutoModerationRule, cache, force });\n    }\n    return this._fetchMany(options);\n  }\n\n  async _fetchSingle({ autoModerationRule, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(autoModerationRule);\n      if (existing) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.guildAutoModerationRule(this.guild.id, autoModerationRule));\n    return this._add(data, cache);\n  }\n\n  async _fetchMany(options = {}) {\n    const data = await this.client.rest.get(Routes.guildAutoModerationRules(this.guild.id));\n\n    return data.reduce(\n      (col, autoModerationRule) => col.set(autoModerationRule.id, this._add(autoModerationRule, options.cache)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Deletes an auto moderation rule.\n   * @param {AutoModerationRuleResolvable} autoModerationRule The auto moderation rule to delete\n   * @param {string} [reason] The reason for deleting the auto moderation rule\n   * @returns {Promise<void>}\n   */\n  async delete(autoModerationRule, reason) {\n    const autoModerationRuleId = this.resolveId(autoModerationRule);\n    await this.client.rest.delete(Routes.guildAutoModerationRule(this.guild.id, autoModerationRuleId), { reason });\n  }\n}\n\nmodule.exports = AutoModerationRuleManager;\n",
    "'use strict';\n\nconst ApplicationCommandManager = require('./ApplicationCommandManager');\nconst ApplicationCommandPermissionsManager = require('./ApplicationCommandPermissionsManager');\n\n/**\n * An extension for guild-specific application commands.\n * @extends {ApplicationCommandManager}\n */\nclass GuildApplicationCommandManager extends ApplicationCommandManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable);\n\n    /**\n     * The guild that this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The manager for permissions of arbitrary commands on this guild\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n  }\n}\n\nmodule.exports = GuildApplicationCommandManager;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, DiscordjsError, ErrorCodes } = require('../errors');\nconst GuildBan = require('../structures/GuildBan');\nconst { GuildMember } = require('../structures/GuildMember');\n\nlet deprecationEmittedForDeleteMessageDays = false;\n\n/**\n * Manages API methods for guild bans and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildBanManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildBan, iterable);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildBan>}\n   * @name GuildBanManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.user.id, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give a GuildBan object. This can be:\n   * * A GuildBan object\n   * * A User resolvable\n   * @typedef {GuildBan|UserResolvable} GuildBanResolvable\n   */\n\n  /**\n   * Resolves a GuildBanResolvable to a GuildBan object.\n   * @param {GuildBanResolvable} ban The ban that is in the guild\n   * @returns {?GuildBan}\n   */\n  resolve(ban) {\n    return super.resolve(ban) ?? super.resolve(this.client.users.resolveId(ban));\n  }\n\n  /**\n   * Options used to fetch a single ban from a guild.\n   * @typedef {BaseFetchOptions} FetchBanOptions\n   * @property {UserResolvable} user The ban to fetch\n   */\n\n  /**\n   * Options used to fetch multiple bans from a guild.\n   * @typedef {Object} FetchBansOptions\n   * @property {number} [limit] The maximum number of bans to return\n   * @property {Snowflake} [before] Consider only bans before this id\n   * @property {Snowflake} [after] Consider only bans after this id\n   * @property {boolean} [cache] Whether to cache the fetched bans\n   */\n\n  /**\n   * Fetches ban(s) from Discord.\n   * @param {UserResolvable|FetchBanOptions|FetchBansOptions} [options] Options for fetching guild ban(s)\n   * @returns {Promise<GuildBan|Collection<Snowflake, GuildBan>>}\n   * @example\n   * // Fetch multiple bans from a guild\n   * guild.bans.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a maximum of 5 bans from a guild without caching\n   * guild.bans.fetch({ limit: 5, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban\n   * guild.bans.fetch('351871113346809860')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban without checking cache\n   * guild.bans.fetch({ user, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single ban without caching\n   * guild.bans.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async fetch(options) {\n    if (!options) return this._fetchMany();\n    const { user, cache, force, limit, before, after } = options;\n    const resolvedUser = this.client.users.resolveId(user ?? options);\n    if (resolvedUser) return this._fetchSingle({ user: resolvedUser, cache, force });\n\n    if (!before && !after && !limit && cache === undefined) {\n      throw new DiscordjsError(ErrorCodes.FetchBanResolveId);\n    }\n\n    return this._fetchMany(options);\n  }\n\n  async _fetchSingle({ user, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(user);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.guildBan(this.guild.id, user));\n    return this._add(data, cache);\n  }\n\n  async _fetchMany(options = {}) {\n    const data = await this.client.rest.get(Routes.guildBans(this.guild.id), {\n      query: makeURLSearchParams(options),\n    });\n\n    return data.reduce((col, ban) => col.set(ban.user.id, this._add(ban, options.cache)), new Collection());\n  }\n\n  /**\n   * Options used to ban a user from a guild.\n   * @typedef {Object} BanOptions\n   * @property {number} [deleteMessageDays] Number of days of messages to delete, must be between 0 and 7, inclusive\n   * <warn>This property is deprecated. Use `deleteMessageSeconds` instead.</warn>\n   * @property {number} [deleteMessageSeconds] Number of seconds of messages to delete,\n   * must be between 0 and 604800 (7 days), inclusive\n   * @property {string} [reason] The reason for the ban\n   */\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user id will be the result.\n   * @example\n   * // Ban a user by id (or with a user/guild member object)\n   * guild.bans.create('84484653687267328')\n   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))\n   *   .catch(console.error);\n   */\n  async create(user, options = {}) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId, true);\n\n    if (options.deleteMessageDays !== undefined && !deprecationEmittedForDeleteMessageDays) {\n      process.emitWarning(\n        // eslint-disable-next-line max-len\n        'The deleteMessageDays option for GuildBanManager#create() is deprecated. Use the deleteMessageSeconds option instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForDeleteMessageDays = true;\n    }\n\n    await this.client.rest.put(Routes.guildBan(this.guild.id, id), {\n      body: {\n        delete_message_seconds:\n          options.deleteMessageSeconds ??\n          (options.deleteMessageDays ? options.deleteMessageDays * 24 * 60 * 60 : undefined),\n      },\n      reason: options.reason,\n    });\n    if (user instanceof GuildMember) return user;\n    const _user = this.client.users.cache.get(id);\n    if (_user) {\n      return this.guild.members.resolve(_user) ?? _user;\n    }\n    return id;\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<?User>}\n   * @example\n   * // Unban a user by id (or with a user/guild member object)\n   * guild.bans.remove('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async remove(user, reason) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsError(ErrorCodes.BanResolveId);\n    await this.client.rest.delete(Routes.guildBan(this.guild.id, id), { reason });\n    return this.client.users.resolve(user);\n  }\n\n  /**\n   * Options used for bulk banning users from a guild.\n   * @typedef {Object} BulkBanOptions\n   * @property {number} [deleteMessageSeconds] Number of seconds of messages to delete,\n   * must be between 0 and 604800 (7 days), inclusive\n   * @property {string} [reason] The reason for the bans\n   */\n\n  /**\n   * Result of bulk banning users from a guild.\n   * @typedef {Object} BulkBanResult\n   * @property {Snowflake[]} bannedUsers IDs of the banned users\n   * @property {Snowflake[]} failedUsers IDs of the users that could not be banned or were already banned\n   */\n\n  /**\n   * Bulk ban users from a guild, and optionally delete previous messages sent by them.\n   * @param {Collection<Snowflake, UserResolvable>|UserResolvable[]} users The users to ban\n   * @param {BulkBanOptions} [options] The options for bulk banning users\n   * @returns {Promise<BulkBanResult>} Returns an object with `bannedUsers` key containing the IDs of the banned users\n   * and the key `failedUsers` with the IDs that could not be banned or were already banned.\n   * @example\n   * // Bulk ban users by ids (or with user/guild member objects) and delete all their messages from the past 7 days\n   * guild.bans.bulkCreate(['84484653687267328'], { deleteMessageSeconds: 7 * 24 * 60 * 60 })\n   *   .then(result => {\n   *     console.log(`Banned ${result.bannedUsers.length} users, failed to ban ${result.failedUsers.length} users.`)\n   *   })\n   *   .catch(console.error);\n   */\n  async bulkCreate(users, options = {}) {\n    if (!users || !(Array.isArray(users) || users instanceof Collection)) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'users', 'Array or Collection of UserResolvable', true);\n    }\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n\n    const userIds = users.map(user => this.client.users.resolveId(user));\n    if (userIds.length === 0) throw new DiscordjsError(ErrorCodes.BulkBanUsersOptionEmpty);\n\n    const result = await this.client.rest.post(Routes.guildBulkBan(this.guild.id), {\n      body: { delete_message_seconds: options.deleteMessageSeconds, user_ids: userIds },\n      reason: options.reason,\n    });\n    return { bannedUsers: result.banned_users, failedUsers: result.failed_users };\n  }\n}\n\nmodule.exports = GuildBanManager;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst GuildTextThreadManager = require('./GuildTextThreadManager');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst GuildChannel = require('../structures/GuildChannel');\nconst PermissionOverwrites = require('../structures/PermissionOverwrites');\nconst ThreadChannel = require('../structures/ThreadChannel');\nconst Webhook = require('../structures/Webhook');\nconst ChannelFlagsBitField = require('../util/ChannelFlagsBitField');\nconst { transformGuildForumTag, transformGuildDefaultReaction } = require('../util/Channels');\nconst { ThreadChannelTypes } = require('../util/Constants');\nconst { resolveImage } = require('../util/DataResolver');\nconst { setPosition } = require('../util/Util');\n\nlet cacheWarningEmitted = false;\n\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildChannelManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildChannel, iterable);\n    const defaultCaching =\n      this._cache.constructor.name === 'Collection' ||\n      this._cache.maxSize === undefined ||\n      this._cache.maxSize === Infinity;\n    if (!cacheWarningEmitted && !defaultCaching) {\n      cacheWarningEmitted = true;\n      process.emitWarning(\n        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,\n        'UnsupportedCacheOverwriteWarning',\n      );\n    }\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The number of channels in this managers cache excluding thread channels\n   * that do not count towards a guild's maximum channels restriction.\n   * @type {number}\n   * @readonly\n   */\n  get channelCountWithoutThreads() {\n    return this.cache.reduce((acc, channel) => {\n      if (ThreadChannelTypes.includes(channel.type)) return acc;\n      return ++acc;\n    }, 0);\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n  _add(channel) {\n    const existing = this.cache.get(channel.id);\n    if (existing) return existing;\n    this.cache.set(channel.id, channel);\n    return channel;\n  }\n\n  /**\n   * Data that can be resolved to give a Guild Channel object. This can be:\n   * * A GuildChannel object\n   * * A ThreadChannel object\n   * * A Snowflake\n   * @typedef {GuildChannel|ThreadChannel|Snowflake} GuildChannelResolvable\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a Channel object.\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?(GuildChannel|ThreadChannel)}\n   */\n  resolve(channel) {\n    if (channel instanceof ThreadChannel) return this.cache.get(channel.id) ?? null;\n    return super.resolve(channel);\n  }\n\n  /**\n   * Resolves a GuildChannelResolvable to a channel id.\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveId(channel) {\n    if (channel instanceof ThreadChannel) return super.resolveId(channel.id);\n    return super.resolveId(channel);\n  }\n\n  /**\n   * Data that can be resolved to a News Channel object. This can be:\n   * * A NewsChannel object\n   * * A Snowflake\n   * @typedef {NewsChannel|Snowflake} NewsChannelResolvable\n   */\n\n  /**\n   * Adds the target channel to a channel's followers.\n   * @param {NewsChannelResolvable} channel The channel to follow\n   * @param {TextChannelResolvable} targetChannel The channel where published announcements will be posted at\n   * @param {string} [reason] Reason for creating the webhook\n   * @returns {Promise<Snowflake>} Returns created target webhook id.\n   */\n  async addFollower(channel, targetChannel, reason) {\n    const channelId = this.resolveId(channel);\n    if (!channelId) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'NewsChannelResolvable');\n    }\n    const targetChannelId = this.resolveId(targetChannel);\n    if (!targetChannelId) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'targetChannel', 'TextChannelResolvable');\n    }\n    const { webhook_id } = await this.client.rest.post(Routes.channelFollowers(channelId), {\n      body: { webhook_channel_id: targetChannelId },\n      reason,\n    });\n    return webhook_id;\n  }\n\n  /**\n   * Options used to create a new channel in a guild.\n   * @typedef {CategoryCreateChannelOptions} GuildChannelCreateOptions\n   * @property {?CategoryChannelResolvable} [parent] Parent of the new channel\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {GuildChannelCreateOptions} options Options for creating the new channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.channels.create({ name: 'new-general', reason: 'Needed a cool new channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new channel with permission overwrites\n   * guild.channels.create({\n   *   name: 'new-general',\n   *   type: ChannelType.GuildVoice,\n   *   permissionOverwrites: [\n   *      {\n   *        id: message.author.id,\n   *        deny: [PermissionFlagsBits.ViewChannel],\n   *     },\n   *   ],\n   * })\n   */\n  async create({\n    name,\n    type,\n    topic,\n    nsfw,\n    bitrate,\n    userLimit,\n    parent,\n    permissionOverwrites,\n    position,\n    rateLimitPerUser,\n    rtcRegion,\n    videoQualityMode,\n    defaultThreadRateLimitPerUser,\n    availableTags,\n    defaultReactionEmoji,\n    defaultAutoArchiveDuration,\n    defaultSortOrder,\n    defaultForumLayout,\n    reason,\n  }) {\n    parent &&= this.client.channels.resolveId(parent);\n    permissionOverwrites &&= permissionOverwrites.map(overwrite => PermissionOverwrites.resolve(overwrite, this.guild));\n\n    const data = await this.client.rest.post(Routes.guildChannels(this.guild.id), {\n      body: {\n        name,\n        topic,\n        type,\n        nsfw,\n        bitrate,\n        user_limit: userLimit,\n        parent_id: parent,\n        position,\n        permission_overwrites: permissionOverwrites,\n        rate_limit_per_user: rateLimitPerUser,\n        rtc_region: rtcRegion,\n        video_quality_mode: videoQualityMode,\n        default_thread_rate_limit_per_user: defaultThreadRateLimitPerUser,\n        available_tags: availableTags?.map(availableTag => transformGuildForumTag(availableTag)),\n        default_reaction_emoji: defaultReactionEmoji && transformGuildDefaultReaction(defaultReactionEmoji),\n        default_auto_archive_duration: defaultAutoArchiveDuration,\n        default_sort_order: defaultSortOrder,\n        default_forum_layout: defaultForumLayout,\n      },\n      reason,\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n\n  /**\n   * @typedef {ChannelWebhookCreateOptions} WebhookCreateOptions\n   * @property {TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel|Snowflake} channel\n   * The channel to create the webhook for\n   */\n\n  /**\n   * Creates a webhook for the channel.\n   * @param {WebhookCreateOptions} options Options for creating the webhook\n   * @returns {Promise<Webhook>} Returns the created Webhook\n   * @example\n   * // Create a webhook for the current channel\n   * guild.channels.createWebhook({\n   *   channel: '222197033908436994',\n   *   name: 'Snek',\n   *   avatar: 'https://i.imgur.com/mI8XcpG.jpg',\n   *   reason: 'Needed a cool new Webhook'\n   * })\n   *   .then(console.log)\n   *   .catch(console.error)\n   */\n  async createWebhook({ channel, name, avatar, reason }) {\n    const id = this.resolveId(channel);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');\n    if (typeof avatar === 'string' && !avatar.startsWith('data:')) {\n      avatar = await resolveImage(avatar);\n    }\n    const data = await this.client.rest.post(Routes.channelWebhooks(id), {\n      body: {\n        name,\n        avatar,\n      },\n      reason,\n    });\n    return new Webhook(this.client, data);\n  }\n\n  /**\n   * Options used to edit a guild channel.\n   * @typedef {Object} GuildChannelEditOptions\n   * @property {string} [name] The name of the channel\n   * @property {ChannelType} [type] The type of the channel (only conversion between text and news is supported)\n   * @property {number} [position] The position of the channel\n   * @property {?string} [topic] The topic of the text channel\n   * @property {boolean} [nsfw] Whether the channel is NSFW\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the voice channel\n   * @property {?CategoryChannelResolvable} [parent] The parent of the channel\n   * @property {boolean} [lockPermissions]\n   * Lock the permissions of the channel to what the parent's permissions are\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites for the channel\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) for the channel in seconds\n   * @property {ThreadAutoArchiveDuration} [defaultAutoArchiveDuration]\n   * The default auto archive duration for all new threads in this channel\n   * @property {?string} [rtcRegion] The RTC region of the channel\n   * @property {?VideoQualityMode} [videoQualityMode] The camera video quality mode of the channel\n   * @property {GuildForumTagData[]} [availableTags] The tags to set as available in a forum channel\n   * @property {?DefaultReactionEmoji} [defaultReactionEmoji] The emoji to set as the default reaction emoji\n   * @property {number} [defaultThreadRateLimitPerUser] The rate limit per user (slowmode) to set on forum posts\n   * @property {ChannelFlagsResolvable} [flags] The flags to set on the channel\n   * @property {?SortOrderType} [defaultSortOrder] The default sort order mode to set on the channel\n   * @property {ForumLayoutType} [defaultForumLayout] The default forum layout to set on the channel\n   * @property {string} [reason] Reason for editing this channel\n   */\n\n  /**\n   * Edits the channel.\n   * @param {GuildChannelResolvable} channel The channel to edit\n   * @param {GuildChannelEditOptions} options Options for editing the channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Edit a channel\n   * guild.channels.edit('222197033908436994', { name: 'new-channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async edit(channel, options) {\n    const resolvedChannel = this.resolve(channel);\n    if (!resolvedChannel) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');\n\n    const parentId = options.parent && this.client.channels.resolveId(options.parent);\n\n    if (options.position !== undefined) {\n      await this.setPosition(resolvedChannel, options.position, { position: options.position, reason: options.reason });\n    }\n\n    let permission_overwrites = options.permissionOverwrites?.map(overwrite =>\n      PermissionOverwrites.resolve(overwrite, this.guild),\n    );\n\n    if (options.lockPermissions) {\n      if (parentId) {\n        const newParent = this.cache.get(parentId);\n        if (newParent?.type === ChannelType.GuildCategory) {\n          permission_overwrites = newParent.permissionOverwrites.cache.map(overwrite =>\n            PermissionOverwrites.resolve(overwrite, this.guild),\n          );\n        }\n      } else if (resolvedChannel.parent) {\n        permission_overwrites = resolvedChannel.parent.permissionOverwrites.cache.map(overwrite =>\n          PermissionOverwrites.resolve(overwrite, this.guild),\n        );\n      }\n    }\n\n    const newData = await this.client.rest.patch(Routes.channel(resolvedChannel.id), {\n      body: {\n        name: options.name,\n        type: options.type,\n        topic: options.topic,\n        nsfw: options.nsfw,\n        bitrate: options.bitrate,\n        user_limit: options.userLimit,\n        rtc_region: options.rtcRegion,\n        video_quality_mode: options.videoQualityMode,\n        parent_id: parentId,\n        lock_permissions: options.lockPermissions,\n        rate_limit_per_user: options.rateLimitPerUser,\n        default_auto_archive_duration: options.defaultAutoArchiveDuration,\n        permission_overwrites,\n        available_tags: options.availableTags?.map(availableTag => transformGuildForumTag(availableTag)),\n        default_reaction_emoji:\n          options.defaultReactionEmoji && transformGuildDefaultReaction(options.defaultReactionEmoji),\n        default_thread_rate_limit_per_user: options.defaultThreadRateLimitPerUser,\n        flags: 'flags' in options ? ChannelFlagsBitField.resolve(options.flags) : undefined,\n        default_sort_order: options.defaultSortOrder,\n        default_forum_layout: options.defaultForumLayout,\n      },\n      reason: options.reason,\n    });\n\n    return this.client.actions.ChannelUpdate.handle(newData).updated;\n  }\n\n  /**\n   * Sets a new position for the guild channel.\n   * @param {GuildChannelResolvable} channel The channel to set the position for\n   * @param {number} position The new position for the guild channel\n   * @param {SetChannelPositionOptions} options Options for setting position\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel position\n   * guild.channels.setPosition('222078374472843266', 2)\n   *   .then(newChannel => console.log(`Channel's new position is ${newChannel.position}`))\n   *   .catch(console.error);\n   */\n  async setPosition(channel, position, { relative, reason } = {}) {\n    channel = this.resolve(channel);\n    if (!channel) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');\n    const updatedChannels = await setPosition(\n      channel,\n      position,\n      relative,\n      this.guild._sortedChannels(channel),\n      this.client,\n      Routes.guildChannels(this.guild.id),\n      reason,\n    );\n\n    this.client.actions.GuildChannelsPositionUpdate.handle({\n      guild_id: this.guild.id,\n      channels: updatedChannels,\n    });\n    return channel;\n  }\n\n  /**\n   * Obtains one or more guild channels from Discord, or the channel cache if they're already available.\n   * @param {Snowflake} [id] The channel's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<?GuildChannel|ThreadChannel|Collection<Snowflake, ?GuildChannel>>}\n   * @example\n   * // Fetch all channels from the guild (excluding threads)\n   * message.guild.channels.fetch()\n   *   .then(channels => console.log(`There are ${channels.size} channels.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single channel\n   * message.guild.channels.fetch('222197033908436994')\n   *   .then(channel => console.log(`The channel name is: ${channel.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (id && !force) {\n      const existing = this.cache.get(id);\n      if (existing) return existing;\n    }\n\n    if (id) {\n      const data = await this.client.rest.get(Routes.channel(id));\n      // Since this is the guild manager, throw if on a different guild\n      if (this.guild.id !== data.guild_id) throw new DiscordjsError(ErrorCodes.GuildChannelUnowned);\n      return this.client.channels._add(data, this.guild, { cache });\n    }\n\n    const data = await this.client.rest.get(Routes.guildChannels(this.guild.id));\n    const channels = new Collection();\n    for (const channel of data) channels.set(channel.id, this.client.channels._add(channel, this.guild, { cache }));\n    return channels;\n  }\n\n  /**\n   * Fetches all webhooks for the channel.\n   * @param {GuildChannelResolvable} channel The channel to fetch webhooks for\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.channels.fetchWebhooks('769862166131245066')\n   *   .then(hooks => console.log(`This channel has ${hooks.size} hooks`))\n   *   .catch(console.error);\n   */\n  async fetchWebhooks(channel) {\n    const id = this.resolveId(channel);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');\n    const data = await this.client.rest.get(Routes.channelWebhooks(id));\n    return data.reduce((hooks, hook) => hooks.set(hook.id, new Webhook(this.client, hook)), new Collection());\n  }\n\n  /**\n   * Data that can be resolved to give a Category Channel object. This can be:\n   * * A CategoryChannel object\n   * * A Snowflake\n   * @typedef {CategoryChannel|Snowflake} CategoryChannelResolvable\n   */\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {GuildChannel|Snowflake} channel Channel to update\n   * @property {number} [position] New position for the channel\n   * @property {CategoryChannelResolvable} [parent] Parent channel for this channel\n   * @property {boolean} [lockPermissions] If the overwrites should be locked to the parents overwrites\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * <info>Only one channel's parent can be changed at a time</info>\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.channels.setPositions([{ channel: channelId, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n  async setPositions(channelPositions) {\n    channelPositions = channelPositions.map(channelPosition => ({\n      id: this.client.channels.resolveId(channelPosition.channel),\n      position: channelPosition.position,\n      lock_permissions: channelPosition.lockPermissions,\n      parent_id: channelPosition.parent !== undefined ? this.resolveId(channelPosition.parent) : undefined,\n    }));\n\n    await this.client.rest.patch(Routes.guildChannels(this.guild.id), { body: channelPositions });\n    return this.client.actions.GuildChannelsPositionUpdate.handle({\n      guild_id: this.guild.id,\n      channels: channelPositions,\n    }).guild;\n  }\n\n  /**\n   * Data returned from fetching threads.\n   * @typedef {Object} FetchedThreads\n   * @property {Collection<Snowflake, ThreadChannel>} threads The threads that were fetched\n   * @property {Collection<Snowflake, ThreadMember>} members The thread members in the received threads\n   */\n\n  /**\n   * Obtains all active thread channels in the guild.\n   * @param {boolean} [cache=true] Whether to cache the fetched data\n   * @returns {Promise<FetchedThreads>}\n   * @example\n   * // Fetch all threads from the guild\n   * message.guild.channels.fetchActiveThreads()\n   *   .then(fetched => console.log(`There are ${fetched.threads.size} threads.`))\n   *   .catch(console.error);\n   */\n  async fetchActiveThreads(cache = true) {\n    const data = await this.rawFetchGuildActiveThreads();\n    return GuildTextThreadManager._mapThreads(data, this.client, { guild: this.guild, cache });\n  }\n\n  /**\n   * `GET /guilds/{guild.id}/threads/active`\n   * @private\n   * @returns {Promise<RESTGetAPIGuildThreadsResult>}\n   */\n  rawFetchGuildActiveThreads() {\n    return this.client.rest.get(Routes.guildActiveThreads(this.guild.id));\n  }\n\n  /**\n   * Deletes the channel.\n   * @param {GuildChannelResolvable} channel The channel to delete\n   * @param {string} [reason] Reason for deleting this channel\n   * @returns {Promise<void>}\n   * @example\n   * // Delete the channel\n   * guild.channels.delete('858850993013260338', 'making room for new channels')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async delete(channel, reason) {\n    const id = this.resolveId(channel);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'channel', 'GuildChannelResolvable');\n    await this.client.rest.delete(Routes.channel(id), { reason });\n    this.client.actions.ChannelDelete.handle({ id });\n  }\n}\n\nmodule.exports = GuildChannelManager;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes, PermissionFlagsBits } = require('discord-api-types/v10');\nconst BaseGuildEmojiManager = require('./BaseGuildEmojiManager');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { resolveImage } = require('../util/DataResolver');\n\n/**\n * Manages API methods for GuildEmojis and stores their cache.\n * @extends {BaseGuildEmojiManager}\n */\nclass GuildEmojiManager extends BaseGuildEmojiManager {\n  constructor(guild, iterable) {\n    super(guild.client, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Options used for creating an emoji in a guild.\n   * @typedef {Object} GuildEmojiCreateOptions\n   * @property {BufferResolvable|Base64Resolvable} attachment The image for the emoji\n   * @property {string} name The name for the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles to limit the emoji to\n   * @property {string} [reason] The reason for creating the emoji\n   */\n\n  /**\n   * Creates a new custom emoji in the guild.\n   * @param {GuildEmojiCreateOptions} options Options for creating the emoji\n   * @returns {Promise<Emoji>} The created emoji\n   * @example\n   * // Create a new emoji from a URL\n   * guild.emojis.create({ attachment: 'https://i.imgur.com/w3duR07.png', name: 'rip' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new emoji from a file on your computer\n   * guild.emojis.create({ attachment: './memes/banana.png', name: 'banana' })\n   *   .then(emoji => console.log(`Created new emoji with name ${emoji.name}!`))\n   *   .catch(console.error);\n   */\n  async create({ attachment, name, roles, reason }) {\n    attachment = await resolveImage(attachment);\n    if (!attachment) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n\n    const body = { image: attachment, name };\n    if (roles) {\n      if (!Array.isArray(roles) && !(roles instanceof Collection)) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'options.roles',\n          'Array or Collection of Roles or Snowflakes',\n          true,\n        );\n      }\n      body.roles = [];\n      for (const role of roles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'options.roles', role);\n        }\n        body.roles.push(resolvedRole);\n      }\n    }\n\n    const emoji = await this.client.rest.post(Routes.guildEmojis(this.guild.id), { body, reason });\n    return this.client.actions.GuildEmojiCreate.handle(this.guild, emoji).emoji;\n  }\n\n  /**\n   * Obtains one or more emojis from Discord, or the emoji cache if they're already available.\n   * @param {Snowflake} [id] The emoji's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<GuildEmoji|Collection<Snowflake, GuildEmoji>>}\n   * @example\n   * // Fetch all emojis from the guild\n   * message.guild.emojis.fetch()\n   *   .then(emojis => console.log(`There are ${emojis.size} emojis.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single emoji\n   * message.guild.emojis.fetch('222078108977594368')\n   *   .then(emoji => console.log(`The emoji name is: ${emoji.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const emoji = await this.client.rest.get(Routes.guildEmoji(this.guild.id, id));\n      return this._add(emoji, cache);\n    }\n\n    const data = await this.client.rest.get(Routes.guildEmojis(this.guild.id));\n    const emojis = new Collection();\n    for (const emoji of data) emojis.set(emoji.id, this._add(emoji, cache));\n    return emojis;\n  }\n\n  /**\n   * Deletes an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to delete\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<void>}\n   */\n  async delete(emoji, reason) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    await this.client.rest.delete(Routes.guildEmoji(this.guild.id, id), { reason });\n  }\n\n  /**\n   * Edits an emoji.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to edit\n   * @param {GuildEmojiEditOptions} options The options to provide\n   * @returns {Promise<GuildEmoji>}\n   */\n  async edit(emoji, options) {\n    const id = this.resolveId(emoji);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    const roles = options.roles?.map(role => this.guild.roles.resolveId(role));\n    const newData = await this.client.rest.patch(Routes.guildEmoji(this.guild.id, id), {\n      body: {\n        name: options.name,\n        roles,\n      },\n      reason: options.reason,\n    });\n    const existing = this.cache.get(id);\n    if (existing) {\n      const clone = existing._clone();\n      clone._patch(newData);\n      return clone;\n    }\n    return this._add(newData);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @param {EmojiResolvable} emoji The emoji to fetch the author of\n   * @returns {Promise<User>}\n   */\n  async fetchAuthor(emoji) {\n    emoji = this.resolve(emoji);\n    if (!emoji) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'emoji', 'EmojiResolvable', true);\n    if (emoji.managed) {\n      throw new DiscordjsError(ErrorCodes.EmojiManaged);\n    }\n\n    const { me } = this.guild.members;\n    if (!me) throw new DiscordjsError(ErrorCodes.GuildUncachedMe);\n    if (!me.permissions.has(PermissionFlagsBits.ManageGuildExpressions)) {\n      throw new DiscordjsError(ErrorCodes.MissingManageGuildExpressionsPermission, this.guild);\n    }\n\n    const data = await this.client.rest.get(Routes.guildEmoji(this.guild.id, emoji.id));\n    emoji._patch(data);\n    return emoji.author;\n  }\n}\n\nmodule.exports = GuildEmojiManager;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst Invite = require('../structures/Invite');\nconst { resolveInviteCode } = require('../util/DataResolver');\n\n/**\n * Manages API methods for GuildInvites and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildInviteManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, Invite, iterable);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<string, Invite>}\n   * @name GuildInviteManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.code, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give an Invite object. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to a channel that an invite can be created on. This can be:\n   * * TextChannel\n   * * VoiceChannel\n   * * NewsChannel\n   * * StageChannel\n   * * ForumChannel\n   * * MediaChannel\n   * * Snowflake\n   * @typedef {TextChannel|VoiceChannel|NewsChannel|StageChannel|ForumChannel|MediaChannel|Snowflake}\n   * GuildInvitableChannelResolvable\n   */\n\n  /**\n   * Resolves an InviteResolvable to an Invite object.\n   * @method resolve\n   * @memberof GuildInviteManager\n   * @instance\n   * @param {InviteResolvable} invite The invite resolvable to resolve\n   * @returns {?Invite}\n   */\n\n  /**\n   * Resolves an InviteResolvable to an invite code string.\n   * @method resolveId\n   * @memberof GuildInviteManager\n   * @instance\n   * @param {InviteResolvable} invite The invite resolvable to resolve\n   * @returns {?string}\n   */\n\n  /**\n   * Options used to fetch a single invite from a guild.\n   * @typedef {Object} FetchInviteOptions\n   * @property {InviteResolvable} code The invite to fetch\n   * @property {boolean} [cache=true] Whether or not to cache the fetched invite\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Options used to fetch all invites from a guild.\n   * @typedef {Object} FetchInvitesOptions\n   * @property {GuildInvitableChannelResolvable} [channelId]\n   * The channel to fetch all invites from\n   * @property {boolean} [cache=true] Whether or not to cache the fetched invites\n   */\n\n  /**\n   * Fetches invite(s) from Discord.\n   * @param {InviteResolvable|FetchInviteOptions|FetchInvitesOptions} [options] Options for fetching guild invite(s)\n   * @returns {Promise<Invite|Collection<string, Invite>>}\n   * @example\n   * // Fetch all invites from a guild\n   * guild.invites.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all invites from a guild without caching\n   * guild.invites.fetch({ cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all invites from a channel\n   * guild.invites.fetch({ channelId: '222197033908436994' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single invite\n   * guild.invites.fetch('bRCvFy9')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single invite without checking cache\n   * guild.invites.fetch({ code: 'bRCvFy9', force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single invite without caching\n   * guild.invites.fetch({ code: 'bRCvFy9', cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async fetch(options) {\n    if (!options) return this._fetchMany();\n    if (typeof options === 'string') {\n      const code = resolveInviteCode(options);\n      if (!code) throw new DiscordjsError(ErrorCodes.InviteResolveCode);\n      return this._fetchSingle({ code, cache: true });\n    }\n    if (!options.code) {\n      if (options.channelId) {\n        const id = this.guild.channels.resolveId(options.channelId);\n        if (!id) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n        return this._fetchChannelMany(id, options.cache);\n      }\n\n      if ('cache' in options) return this._fetchMany(options.cache);\n      throw new DiscordjsError(ErrorCodes.InviteResolveCode);\n    }\n    return this._fetchSingle({\n      ...options,\n      code: resolveInviteCode(options.code),\n    });\n  }\n\n  async _fetchSingle({ code, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(code);\n      if (existing) return existing;\n    }\n\n    const invites = await this._fetchMany(cache);\n    const invite = invites.get(code);\n    if (!invite) throw new DiscordjsError(ErrorCodes.InviteNotFound);\n    return invite;\n  }\n\n  async _fetchMany(cache) {\n    const data = await this.client.rest.get(Routes.guildInvites(this.guild.id));\n    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());\n  }\n\n  async _fetchChannelMany(channelId, cache) {\n    const data = await this.client.rest.get(Routes.channelInvites(channelId));\n    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());\n  }\n\n  /**\n   * Create an invite to the guild from the provided channel.\n   * @param {GuildInvitableChannelResolvable} channel The options for creating the invite from a channel.\n   * @param {InviteCreateOptions} [options={}] The options for creating the invite from a channel.\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a selected channel\n   * guild.invites.create('599942732013764608')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async create(\n    channel,\n    { temporary, maxAge, maxUses, unique, targetUser, targetApplication, targetType, reason } = {},\n  ) {\n    const id = this.guild.channels.resolveId(channel);\n    if (!id) throw new DiscordjsError(ErrorCodes.GuildChannelResolve);\n\n    const invite = await this.client.rest.post(Routes.channelInvites(id), {\n      body: {\n        temporary,\n        max_age: maxAge,\n        max_uses: maxUses,\n        unique,\n        target_user_id: this.client.users.resolveId(targetUser),\n        target_application_id: targetApplication?.id ?? targetApplication?.applicationId ?? targetApplication,\n        target_type: targetType,\n      },\n      reason,\n    });\n    return new Invite(this.client, invite);\n  }\n\n  /**\n   * Deletes an invite.\n   * @param {InviteResolvable} invite The invite to delete\n   * @param {string} [reason] Reason for deleting the invite\n   * @returns {Promise<void>}\n   */\n  async delete(invite, reason) {\n    const code = resolveInviteCode(invite);\n\n    await this.client.rest.delete(Routes.invite(code), { reason });\n  }\n}\n\nmodule.exports = GuildInviteManager;\n",
    "'use strict';\n\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { Routes, GatewayOpcodes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = require('../errors');\nconst BaseGuildVoiceChannel = require('../structures/BaseGuildVoiceChannel');\nconst { GuildMember } = require('../structures/GuildMember');\nconst { Role } = require('../structures/Role');\nconst Events = require('../util/Events');\nconst { GuildMemberFlagsBitField } = require('../util/GuildMemberFlagsBitField');\nconst Partials = require('../util/Partials');\n\n/**\n * Manages API methods for GuildMembers and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildMemberManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildMember, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildMember>}\n   * @name GuildMemberManager#cache\n   */\n\n  _add(data, cache = true) {\n    return super._add(data, cache, { id: data.user.id, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give a GuildMember object. This can be:\n   * * A GuildMember object\n   * * A User resolvable\n   * @typedef {GuildMember|UserResolvable} GuildMemberResolvable\n   */\n\n  /**\n   * Resolves a {@link GuildMemberResolvable} to a {@link GuildMember} object.\n   * @param {GuildMemberResolvable} member The user that is part of the guild\n   * @returns {?GuildMember}\n   */\n  resolve(member) {\n    const memberResolvable = super.resolve(member);\n    if (memberResolvable) return memberResolvable;\n    const userId = this.client.users.resolveId(member);\n    if (userId) return this.cache.get(userId) ?? null;\n    return null;\n  }\n\n  /**\n   * Resolves a {@link GuildMemberResolvable} to a member id.\n   * @param {GuildMemberResolvable} member The user that is part of the guild\n   * @returns {?Snowflake}\n   */\n  resolveId(member) {\n    const memberResolvable = super.resolveId(member);\n    if (memberResolvable) return memberResolvable;\n    const userId = this.client.users.resolveId(member);\n    return this.cache.has(userId) ? userId : null;\n  }\n\n  /**\n   * Options used to add a user to a guild using OAuth2.\n   * @typedef {Object} AddGuildMemberOptions\n   * @property {string} accessToken An OAuth2 access token for the user with the {@link OAuth2Scopes.GuildsJoin}\n   * scope granted to the bot's application\n   * @property {string} [nick] The nickname to give to the member\n   * <info>This property requires the {@link PermissionFlagsBits.ManageNicknames} permission.</info>\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles to add to the member\n   * <info>This property requires the {@link PermissionFlagsBits.ManageRoles} permission.</info>\n   * @property {boolean} [mute] Whether the member should be muted\n   * <info>This property requires the {@link PermissionFlagsBits.MuteMembers} permission.</info>\n   * @property {boolean} [deaf] Whether the member should be deafened\n   * <info>This property requires the {@link PermissionFlagsBits.MuteMembers} permission.</info>\n   * @property {boolean} [force] Whether to skip the cache check and request the API directly\n   * @property {boolean} [fetchWhenExisting=true] Whether to fetch the user if not cached and already a member\n   */\n\n  /**\n   * Adds a user to the guild using OAuth2.\n   * <info>This method requires the {@link PermissionFlagsBits.CreateInstantInvite} permission.\n   * @param {UserResolvable} user The user to add to the guild\n   * @param {AddGuildMemberOptions} options Options for adding the user to the guild\n   * @returns {Promise<?GuildMember>}\n   */\n  async add(user, options) {\n    const userId = this.client.users.resolveId(user);\n    if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');\n    if (!options.force) {\n      const cachedUser = this.cache.get(userId);\n      if (cachedUser) return cachedUser;\n    }\n    const resolvedOptions = {\n      access_token: options.accessToken,\n      nick: options.nick,\n      mute: options.mute,\n      deaf: options.deaf,\n    };\n    if (options.roles) {\n      if (!Array.isArray(options.roles) && !(options.roles instanceof Collection)) {\n        throw new DiscordjsTypeError(\n          ErrorCodes.InvalidType,\n          'options.roles',\n          'Array or Collection of Roles or Snowflakes',\n          true,\n        );\n      }\n      const resolvedRoles = [];\n      for (const role of options.roles.values()) {\n        const resolvedRole = this.guild.roles.resolveId(role);\n        if (!resolvedRole) {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array or Collection', 'options.roles', role);\n        }\n        resolvedRoles.push(resolvedRole);\n      }\n      resolvedOptions.roles = resolvedRoles;\n    }\n    const data = await this.client.rest.put(Routes.guildMember(this.guild.id, userId), { body: resolvedOptions });\n\n    // Data is an empty array buffer if the member is already part of the guild.\n    return data instanceof ArrayBuffer\n      ? options.fetchWhenExisting === false\n        ? null\n        : this.fetch(userId)\n      : this._add(data);\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return (\n      this.cache.get(this.client.user.id) ??\n      (this.client.options.partials.includes(Partials.GuildMember)\n        ? this._add({ user: { id: this.client.user.id } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * Options used to fetch a single member from a guild.\n   * @typedef {BaseFetchOptions} FetchMemberOptions\n   * @property {UserResolvable} user The user to fetch\n   */\n\n  /**\n   * Options used to fetch multiple members from a guild.\n   * @typedef {Object} FetchMembersOptions\n   * @property {UserResolvable|UserResolvable[]} [user] The user(s) to fetch\n   * @property {?string} [query] Limit fetch to members with similar usernames\n   * @property {number} [limit=0] Maximum number of members to request\n   * @property {boolean} [withPresences=false] Whether to include the presences\n   * @property {number} [time=120e3] Timeout for receipt of members\n   * @property {?string} [nonce] Nonce for this request (32 characters max - default to base 16 now timestamp)\n   */\n\n  /**\n   * Fetches member(s) from a guild.\n   * @param {UserResolvable|FetchMemberOptions|FetchMembersOptions} [options] Options for fetching member(s).\n   * Omitting the parameter or providing `undefined` will fetch all members.\n   * @returns {Promise<GuildMember|Collection<Snowflake, GuildMember>>}\n   * @example\n   * // Fetch all members from a guild\n   * guild.members.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single member\n   * guild.members.fetch('66564597481480192')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single member without checking cache\n   * guild.members.fetch({ user, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single member without caching\n   * guild.members.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch by an array of users including their presences\n   * guild.members.fetch({ user: ['66564597481480192', '191615925336670208'], withPresences: true })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch by query\n   * guild.members.fetch({ query: 'hydra', limit: 1 })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const { user: users, limit, withPresences, cache, force } = options;\n    const resolvedUser = this.client.users.resolveId(users ?? options);\n    if (resolvedUser && !limit && !withPresences) return this._fetchSingle({ user: resolvedUser, cache, force });\n    const resolvedUsers = users?.map?.(user => this.client.users.resolveId(user)) ?? resolvedUser ?? undefined;\n    return this._fetchMany({ ...options, users: resolvedUsers });\n  }\n\n  async _fetchSingle({ user, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(user);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.guildMember(this.guild.id, user));\n    return this._add(data, cache);\n  }\n\n  async _fetchMany({\n    limit = 0,\n    withPresences: presences,\n    users,\n    query,\n    time = 120e3,\n    nonce = DiscordSnowflake.generate().toString(),\n  } = {}) {\n    if (nonce.length > 32) throw new DiscordjsRangeError(ErrorCodes.MemberFetchNonceLength);\n\n    return new Promise((resolve, reject) => {\n      if (!query && !users) query = '';\n      this.guild.shard.send({\n        op: GatewayOpcodes.RequestGuildMembers,\n        d: {\n          guild_id: this.guild.id,\n          presences,\n          user_ids: users,\n          query,\n          nonce,\n          limit,\n        },\n      });\n      const fetchedMembers = new Collection();\n      let i = 0;\n      const handler = (members, _, chunk) => {\n        if (chunk.nonce !== nonce) return;\n        timeout.refresh();\n        i++;\n        for (const member of members.values()) {\n          fetchedMembers.set(member.id, member);\n        }\n        if (members.size < 1_000 || (limit && fetchedMembers.size >= limit) || i === chunk.count) {\n          clearTimeout(timeout);\n          this.client.removeListener(Events.GuildMembersChunk, handler);\n          this.client.decrementMaxListeners();\n          resolve(users && !Array.isArray(users) && fetchedMembers.size ? fetchedMembers.first() : fetchedMembers);\n        }\n      };\n      const timeout = setTimeout(() => {\n        this.client.removeListener(Events.GuildMembersChunk, handler);\n        this.client.decrementMaxListeners();\n        reject(new DiscordjsError(ErrorCodes.GuildMembersTimeout));\n      }, time).unref();\n      this.client.incrementMaxListeners();\n      this.client.on(Events.GuildMembersChunk, handler);\n    });\n  }\n\n  /**\n   * Fetches the client user as a GuildMember of the guild.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n  fetchMe(options) {\n    return this.fetch({ ...options, user: this.client.user.id });\n  }\n\n  /**\n   * Options used for searching guild members.\n   * @typedef {Object} GuildSearchMembersOptions\n   * @property {string} query Filter members whose username or nickname start with this query\n   * @property {number} [limit] Maximum number of members to search\n   * @property {boolean} [cache=true] Whether or not to cache the fetched member(s)\n   */\n\n  /**\n   * Searches for members in the guild based on a query.\n   * @param {GuildSearchMembersOptions} options Options for searching members\n   * @returns {Promise<Collection<Snowflake, GuildMember>>}\n   */\n  async search({ query, limit, cache = true } = {}) {\n    const data = await this.client.rest.get(Routes.guildMembersSearch(this.guild.id), {\n      query: makeURLSearchParams({ query, limit }),\n    });\n    return data.reduce((col, member) => col.set(member.user.id, this._add(member, cache)), new Collection());\n  }\n\n  /**\n   * Options used for listing guild members.\n   * @typedef {Object} GuildListMembersOptions\n   * @property {Snowflake} [after] Limit fetching members to those with an id greater than the supplied id\n   * @property {number} [limit] Maximum number of members to list\n   * @property {boolean} [cache=true] Whether or not to cache the fetched member(s)\n   */\n\n  /**\n   * Lists up to 1000 members of the guild.\n   * @param {GuildListMembersOptions} [options] Options for listing members\n   * @returns {Promise<Collection<Snowflake, GuildMember>>}\n   */\n  async list({ after, limit, cache = true } = {}) {\n    const query = makeURLSearchParams({ limit, after });\n    const data = await this.client.rest.get(Routes.guildMembers(this.guild.id), { query });\n    return data.reduce((col, member) => col.set(member.user.id, this._add(member, cache)), new Collection());\n  }\n\n  /**\n   * The data for editing a guild member.\n   * @typedef {Object} GuildMemberEditOptions\n   * @property {?string} [nick] The nickname to set for the member\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role ids to apply\n   * @property {boolean} [mute] Whether or not the member should be muted\n   * @property {boolean} [deaf] Whether or not the member should be deafened\n   * @property {?GuildVoiceChannelResolvable} [channel] Channel to move the member to\n   * (if they are connected to voice), or `null` if you want to disconnect them from voice\n   * @property {?DateResolvable} [communicationDisabledUntil] The date or timestamp\n   * for the member's communication to be disabled until. Provide `null` to enable communication again.\n   * @property {GuildMemberFlagsResolvable} [flags] The flags to set for the member\n   * @property {string} [reason] Reason for editing this user\n   */\n\n  /**\n   * Edits a member of the guild.\n   * <info>The user must be a member of the guild</info>\n   * @param {UserResolvable} user The member to edit\n   * @param {GuildMemberEditOptions} options The options to provide\n   * @returns {Promise<GuildMember>}\n   */\n  async edit(user, { reason, ...options }) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');\n\n    if (options.channel) {\n      options.channel = this.guild.channels.resolve(options.channel);\n      if (!(options.channel instanceof BaseGuildVoiceChannel)) {\n        throw new DiscordjsError(ErrorCodes.GuildVoiceChannelResolve);\n      }\n      options.channel_id = options.channel.id;\n      options.channel = undefined;\n    } else if (options.channel === null) {\n      options.channel_id = null;\n      options.channel = undefined;\n    }\n    options.roles &&= options.roles.map(role => (role instanceof Role ? role.id : role));\n\n    if (options.communicationDisabledUntil !== undefined) {\n      options.communication_disabled_until =\n        // eslint-disable-next-line eqeqeq\n        options.communicationDisabledUntil != null\n          ? new Date(options.communicationDisabledUntil).toISOString()\n          : options.communicationDisabledUntil;\n    }\n\n    if (options.flags !== undefined) {\n      options.flags = GuildMemberFlagsBitField.resolve(options.flags);\n    }\n\n    let endpoint;\n    if (id === this.client.user.id) {\n      const keys = Object.keys(options);\n      if (keys.length === 1 && keys[0] === 'nick') endpoint = Routes.guildMember(this.guild.id);\n      else endpoint = Routes.guildMember(this.guild.id, id);\n    } else {\n      endpoint = Routes.guildMember(this.guild.id, id);\n    }\n    const d = await this.client.rest.patch(endpoint, { body: options, reason });\n\n    const clone = this.cache.get(id)?._clone();\n    clone?._patch(d);\n    return clone ?? this._add(d, false);\n  }\n\n  /**\n   * Options used for pruning guild members.\n   * <info>It's recommended to set {@link GuildPruneMembersOptions#count options.count}\n   * to `false` for large guilds.</info>\n   * @typedef {Object} GuildPruneMembersOptions\n   * @property {number} [days] Number of days of inactivity required to kick\n   * @property {boolean} [dry=false] Get the number of users that will be kicked, without actually kicking them\n   * @property {boolean} [count] Whether or not to return the number of users that have been kicked.\n   * @property {RoleResolvable[]} [roles] Array of roles to bypass the \"...and no roles\" constraint when pruning\n   * @property {string} [reason] Reason for this prune\n   */\n\n  /**\n   * Prunes members from the guild based on how long they have been inactive.\n   * @param {GuildPruneMembersOptions} [options] Options for pruning\n   * @returns {Promise<?number>} The number of members that were/will be kicked\n   * @example\n   * // See how many members will be pruned\n   * guild.members.prune({ dry: true })\n   *   .then(pruned => console.log(`This will prune ${pruned} people!`))\n   *   .catch(console.error);\n   * @example\n   * // Actually prune the members\n   * guild.members.prune({ days: 1, reason: 'too many people!' })\n   *   .then(pruned => console.log(`I just pruned ${pruned} people!`))\n   *   .catch(console.error);\n   * @example\n   * // Include members with a specified role\n   * guild.members.prune({ days: 7, roles: ['657259391652855808'] })\n   *    .then(pruned => console.log(`I just pruned ${pruned} people!`))\n   *    .catch(console.error);\n   */\n  async prune({ days, dry = false, count: compute_prune_count, roles = [], reason } = {}) {\n    if (typeof days !== 'number') throw new DiscordjsTypeError(ErrorCodes.PruneDaysType);\n\n    const query = { days };\n    const resolvedRoles = [];\n\n    for (const role of roles) {\n      const resolvedRole = this.guild.roles.resolveId(role);\n      if (!resolvedRole) {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'options.roles', role);\n      }\n      resolvedRoles.push(resolvedRole);\n    }\n\n    if (resolvedRoles.length) {\n      query.include_roles = dry ? resolvedRoles.join(',') : resolvedRoles;\n    }\n\n    const endpoint = Routes.guildPrune(this.guild.id);\n\n    const { pruned } = await (dry\n      ? this.client.rest.get(endpoint, { query: makeURLSearchParams(query), reason })\n      : this.client.rest.post(endpoint, { body: { ...query, compute_prune_count }, reason }));\n\n    return pruned;\n  }\n\n  /**\n   * Kicks a user from the guild.\n   * <info>The user must be a member of the guild</info>\n   * @param {UserResolvable} user The member to kick\n   * @param {string} [reason] Reason for kicking\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user's id will be the result.\n   * @example\n   * // Kick a user by id (or with a user/guild member object)\n   * guild.members.kick('84484653687267328')\n   *   .then(kickInfo => console.log(`Kicked ${kickInfo.user?.tag ?? kickInfo.tag ?? kickInfo}`))\n   *   .catch(console.error);\n   */\n  async kick(user, reason) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');\n\n    await this.client.rest.delete(Routes.guildMember(this.guild.id, id), { reason });\n\n    return this.resolve(user) ?? this.client.users.resolve(user) ?? id;\n  }\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user id will be the result.\n   * Internally calls the GuildBanManager#create method.\n   * @example\n   * // Ban a user by id (or with a user/guild member object)\n   * guild.members.ban('84484653687267328')\n   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))\n   *   .catch(console.error);\n   */\n  ban(user, options) {\n    return this.guild.bans.create(user, options);\n  }\n\n  /**\n   * Unbans a user from the guild. Internally calls the {@link GuildBanManager#remove} method.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<?User>} The user that was unbanned\n   * @example\n   * // Unban a user by id (or with a user/guild member object)\n   * guild.members.unban('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  unban(user, reason) {\n    return this.guild.bans.remove(user, reason);\n  }\n\n  /**\n   * Bulk ban users from a guild, and optionally delete previous messages sent by them.\n   * @param {Collection<Snowflake, UserResolvable>|UserResolvable[]} users The users to ban\n   * @param {BulkBanOptions} [options] The options for bulk banning users\n   * @returns {Promise<BulkBanResult>} Returns an object with `bannedUsers` key containing the IDs of the banned users\n   * and the key `failedUsers` with the IDs that could not be banned or were already banned.\n   * Internally calls the GuildBanManager#bulkCreate method.\n   * @example\n   * // Bulk ban users by ids (or with user/guild member objects) and delete all their messages from the past 7 days\n   * guild.members.bulkBan(['84484653687267328'], { deleteMessageSeconds: 7 * 24 * 60 * 60 })\n   *   .then(result => {\n   *     console.log(`Banned ${result.bannedUsers.length} users, failed to ban ${result.failedUsers.length} users.`)\n   *   })\n   *   .catch(console.error);\n   */\n  bulkBan(users, options = {}) {\n    return this.guild.bans.bulkCreate(users, options);\n  }\n\n  /**\n   * Options used for adding or removing a role from a member.\n   * @typedef {Object} AddOrRemoveGuildMemberRoleOptions\n   * @property {GuildMemberResolvable} user The user to add/remove the role from\n   * @property {RoleResolvable} role The role to add/remove\n   * @property {string} [reason] Reason for adding/removing the role\n   */\n\n  /**\n   * Adds a role to a member.\n   * @param {AddOrRemoveGuildMemberRoleOptions} options Options for adding the role\n   * @returns {Promise<GuildMember|User|Snowflake>}\n   */\n  async addRole(options) {\n    const { user, role, reason } = options;\n    const userId = this.resolveId(user);\n    const roleId = this.guild.roles.resolveId(role);\n    await this.client.rest.put(Routes.guildMemberRole(this.guild.id, userId, roleId), { reason });\n\n    return this.resolve(user) ?? this.client.users.resolve(user) ?? userId;\n  }\n\n  /**\n   * Removes a role from a member.\n   * @param {AddOrRemoveGuildMemberRoleOptions} options Options for removing the role\n   * @returns {Promise<GuildMember|User|Snowflake>}\n   */\n  async removeRole(options) {\n    const { user, role, reason } = options;\n    const userId = this.resolveId(user);\n    const roleId = this.guild.roles.resolveId(role);\n    await this.client.rest.delete(Routes.guildMemberRole(this.guild.id, userId, roleId), { reason });\n\n    return this.resolve(user) ?? this.client.users.resolve(user) ?? userId;\n  }\n}\n\nmodule.exports = GuildMemberManager;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { GuildScheduledEventEntityType, Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, DiscordjsError, ErrorCodes } = require('../errors');\nconst { GuildScheduledEvent } = require('../structures/GuildScheduledEvent');\nconst { resolveImage } = require('../util/DataResolver');\nconst { _transformGuildScheduledEventRecurrenceRule } = require('../util/Transformers');\n\n/**\n * Manages API methods for GuildScheduledEvents and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildScheduledEventManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildScheduledEvent, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, GuildScheduledEvent>}\n   * @name GuildScheduledEventManager#cache\n   */\n\n  /**\n   * Data that resolves to give a GuildScheduledEvent object. This can be:\n   * * A Snowflake\n   * * A GuildScheduledEvent object\n   * @typedef {Snowflake|GuildScheduledEvent} GuildScheduledEventResolvable\n   */\n\n  /**\n   * Options for setting a recurrence rule for a guild scheduled event.\n   * @typedef {Object} GuildScheduledEventRecurrenceRuleOptions\n   * @property {DateResolvable} startAt The time the recurrence rule interval starts at\n   * @property {GuildScheduledEventRecurrenceRuleFrequency} frequency How often the event occurs\n   * @property {number} interval The spacing between the events\n   * @property {?GuildScheduledEventRecurrenceRuleWeekday[]} byWeekday The days within a week to recur on\n   * @property {?GuildScheduledEventRecurrenceRuleNWeekday[]} byNWeekday The days within a week to recur on\n   * @property {?GuildScheduledEventRecurrenceRuleMonth[]} byMonth The months to recur on\n   * @property {?number[]} byMonthDay The days within a month to recur on\n   */\n\n  /**\n   * Options used to create a guild scheduled event.\n   * @typedef {Object} GuildScheduledEventCreateOptions\n   * @property {string} name The name of the guild scheduled event\n   * @property {DateResolvable} scheduledStartTime The time to schedule the event at\n   * @property {DateResolvable} [scheduledEndTime] The time to end the event at\n   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>\n   * @property {GuildScheduledEventPrivacyLevel} privacyLevel The privacy level of the guild scheduled event\n   * @property {GuildScheduledEventEntityType} entityType The scheduled entity type of the event\n   * @property {string} [description] The description of the guild scheduled event\n   * @property {GuildVoiceChannelResolvable} [channel] The channel of the guild scheduled event\n   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.StageInstance} or\n   * {@link GuildScheduledEventEntityType.Voice}</warn>\n   * @property {GuildScheduledEventEntityMetadataOptions} [entityMetadata] The entity metadata of the\n   * guild scheduled event\n   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>\n   * @property {?(BufferResolvable|Base64Resolvable)} [image] The cover image of the guild scheduled event\n   * @property {string} [reason] The reason for creating the guild scheduled event\n   * @property {GuildScheduledEventRecurrenceRuleOptions} [recurrenceRule]\n   * The recurrence rule of the guild scheduled event\n   */\n\n  /**\n   * Options used to set entity metadata of a guild scheduled event.\n   * @typedef {Object} GuildScheduledEventEntityMetadataOptions\n   * @property {string} [location] The location of the guild scheduled event\n   * <warn>This is required if `entityType` is {@link GuildScheduledEventEntityType.External}</warn>\n   */\n\n  /**\n   * Creates a new guild scheduled event.\n   * @param {GuildScheduledEventCreateOptions} options Options for creating the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   */\n  async create(options) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    let {\n      privacyLevel,\n      entityType,\n      channel,\n      name,\n      scheduledStartTime,\n      description,\n      scheduledEndTime,\n      entityMetadata,\n      reason,\n      image,\n      recurrenceRule,\n    } = options;\n\n    let entity_metadata, channel_id;\n    if (entityType === GuildScheduledEventEntityType.External) {\n      channel_id = channel === undefined ? channel : null;\n      entity_metadata = { location: entityMetadata?.location };\n    } else {\n      channel_id = this.guild.channels.resolveId(channel);\n      if (!channel_id) throw new DiscordjsError(ErrorCodes.GuildVoiceChannelResolve);\n      entity_metadata = entityMetadata === undefined ? entityMetadata : null;\n    }\n\n    const data = await this.client.rest.post(Routes.guildScheduledEvents(this.guild.id), {\n      body: {\n        channel_id,\n        name,\n        privacy_level: privacyLevel,\n        scheduled_start_time: new Date(scheduledStartTime).toISOString(),\n        scheduled_end_time: scheduledEndTime ? new Date(scheduledEndTime).toISOString() : scheduledEndTime,\n        description,\n        entity_type: entityType,\n        entity_metadata,\n        image: image && (await resolveImage(image)),\n        recurrence_rule: recurrenceRule && _transformGuildScheduledEventRecurrenceRule(recurrenceRule),\n      },\n      reason,\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Options used to fetch a single guild scheduled event from a guild.\n   * @typedef {BaseFetchOptions} FetchGuildScheduledEventOptions\n   * @property {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to fetch\n   * @property {boolean} [withUserCount=true] Whether to fetch the number of users subscribed to the scheduled event\n   */\n\n  /**\n   * Options used to fetch multiple guild scheduled events from a guild.\n   * @typedef {Object} FetchGuildScheduledEventsOptions\n   * @property {boolean} [cache] Whether or not to cache the fetched guild scheduled events\n   * @property {boolean} [withUserCount=true] Whether to fetch the number of users subscribed to each scheduled event\n   * should be returned\n   */\n\n  /**\n   * Obtains one or more guild scheduled events from Discord, or the guild cache if it's already available.\n   * @param {GuildScheduledEventResolvable|FetchGuildScheduledEventOptions|FetchGuildScheduledEventsOptions} [options]\n   * The id of the guild scheduled event or options\n   * @returns {Promise<GuildScheduledEvent|Collection<Snowflake, GuildScheduledEvent>>}\n   */\n  async fetch(options = {}) {\n    const id = this.resolveId(options.guildScheduledEvent ?? options);\n\n    if (id) {\n      if (!options.force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n\n      const data = await this.client.rest.get(Routes.guildScheduledEvent(this.guild.id, id), {\n        query: makeURLSearchParams({ with_user_count: options.withUserCount ?? true }),\n      });\n      return this._add(data, options.cache);\n    }\n\n    const data = await this.client.rest.get(Routes.guildScheduledEvents(this.guild.id), {\n      query: makeURLSearchParams({ with_user_count: options.withUserCount ?? true }),\n    });\n\n    return data.reduce(\n      (coll, rawGuildScheduledEventData) =>\n        coll.set(rawGuildScheduledEventData.id, this._add(rawGuildScheduledEventData, options.cache)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Options used to edit a guild scheduled event.\n   * @typedef {Object} GuildScheduledEventEditOptions\n   * @property {string} [name] The name of the guild scheduled event\n   * @property {DateResolvable} [scheduledStartTime] The time to schedule the event at\n   * @property {DateResolvable} [scheduledEndTime] The time to end the event at\n   * @property {GuildScheduledEventPrivacyLevel} [privacyLevel] The privacy level of the guild scheduled event\n   * @property {GuildScheduledEventEntityType} [entityType] The scheduled entity type of the event\n   * @property {string} [description] The description of the guild scheduled event\n   * @property {?GuildVoiceChannelResolvable} [channel] The channel of the guild scheduled event\n   * @property {GuildScheduledEventStatus} [status] The status of the guild scheduled event\n   * @property {GuildScheduledEventEntityMetadataOptions} [entityMetadata] The entity metadata of the\n   * guild scheduled event\n   * <warn>This can be modified only if `entityType` of the `GuildScheduledEvent` to be edited is\n   * {@link GuildScheduledEventEntityType.External}</warn>\n   * @property {?(BufferResolvable|Base64Resolvable)} [image] The cover image of the guild scheduled event\n   * @property {string} [reason] The reason for editing the guild scheduled event\n   * @property {?GuildScheduledEventRecurrenceRuleOptions} [recurrenceRule]\n   * The recurrence rule of the guild scheduled event\n   */\n\n  /**\n   * Edits a guild scheduled event.\n   * @param {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to edit\n   * @param {GuildScheduledEventEditOptions} options Options to edit the guild scheduled event\n   * @returns {Promise<GuildScheduledEvent>}\n   */\n  async edit(guildScheduledEvent, options) {\n    const guildScheduledEventId = this.resolveId(guildScheduledEvent);\n    if (!guildScheduledEventId) throw new DiscordjsError(ErrorCodes.GuildScheduledEventResolve);\n\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    let {\n      privacyLevel,\n      entityType,\n      channel,\n      status,\n      name,\n      scheduledStartTime,\n      description,\n      scheduledEndTime,\n      entityMetadata,\n      reason,\n      image,\n      recurrenceRule,\n    } = options;\n\n    let entity_metadata;\n    if (entityMetadata) {\n      entity_metadata = {\n        location: entityMetadata.location,\n      };\n    }\n\n    const data = await this.client.rest.patch(Routes.guildScheduledEvent(this.guild.id, guildScheduledEventId), {\n      body: {\n        channel_id: channel === undefined ? channel : this.guild.channels.resolveId(channel),\n        name,\n        privacy_level: privacyLevel,\n        scheduled_start_time: scheduledStartTime ? new Date(scheduledStartTime).toISOString() : undefined,\n        scheduled_end_time: scheduledEndTime ? new Date(scheduledEndTime).toISOString() : scheduledEndTime,\n        description,\n        entity_type: entityType,\n        status,\n        image: image && (await resolveImage(image)),\n        entity_metadata,\n        recurrence_rule: recurrenceRule && _transformGuildScheduledEventRecurrenceRule(recurrenceRule),\n      },\n      reason,\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Deletes a guild scheduled event.\n   * @param {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to delete\n   * @returns {Promise<void>}\n   */\n  async delete(guildScheduledEvent) {\n    const guildScheduledEventId = this.resolveId(guildScheduledEvent);\n    if (!guildScheduledEventId) throw new DiscordjsError(ErrorCodes.GuildScheduledEventResolve);\n\n    await this.client.rest.delete(Routes.guildScheduledEvent(this.guild.id, guildScheduledEventId));\n  }\n\n  /**\n   * Options used to fetch subscribers of a guild scheduled event\n   * @typedef {Object} FetchGuildScheduledEventSubscribersOptions\n   * @property {number} [limit] The maximum numbers of users to fetch\n   * @property {boolean} [withMember] Whether to fetch guild member data of the users\n   * @property {Snowflake} [before] Consider only users before this user id\n   * @property {Snowflake} [after] Consider only users after this user id\n   * <warn>If both `before` and `after` are provided, only `before` is respected</warn>\n   */\n\n  /**\n   * Represents a subscriber of a {@link GuildScheduledEvent}\n   * @typedef {Object} GuildScheduledEventUser\n   * @property {Snowflake} guildScheduledEventId The id of the guild scheduled event which the user subscribed to\n   * @property {User} user The user that subscribed to the guild scheduled event\n   * @property {?GuildMember} member The guild member associated with the user, if any\n   */\n\n  /**\n   * Fetches subscribers of a guild scheduled event.\n   * @param {GuildScheduledEventResolvable} guildScheduledEvent The guild scheduled event to fetch subscribers of\n   * @param {FetchGuildScheduledEventSubscribersOptions} [options={}] Options for fetching the subscribers\n   * @returns {Promise<Collection<Snowflake, GuildScheduledEventUser>>}\n   */\n  async fetchSubscribers(guildScheduledEvent, options = {}) {\n    const guildScheduledEventId = this.resolveId(guildScheduledEvent);\n    if (!guildScheduledEventId) throw new DiscordjsError(ErrorCodes.GuildScheduledEventResolve);\n\n    const query = makeURLSearchParams({\n      limit: options.limit,\n      with_member: options.withMember,\n      before: options.before,\n      after: options.after,\n    });\n\n    const data = await this.client.rest.get(Routes.guildScheduledEventUsers(this.guild.id, guildScheduledEventId), {\n      query,\n    });\n\n    return data.reduce(\n      (coll, rawData) =>\n        coll.set(rawData.user.id, {\n          guildScheduledEventId: rawData.guild_scheduled_event_id,\n          user: this.client.users._add(rawData.user),\n          member: rawData.member ? this.guild.members._add({ ...rawData.member, user: rawData.user }) : null,\n        }),\n      new Collection(),\n    );\n  }\n}\n\nmodule.exports = GuildScheduledEventManager;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst MessagePayload = require('../structures/MessagePayload');\nconst { Sticker } = require('../structures/Sticker');\n\n/**\n * Manages API methods for Guild Stickers and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildStickerManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, Sticker, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of Guild Stickers\n   * @type {Collection<Snowflake, Sticker>}\n   * @name GuildStickerManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Options used to create a guild sticker.\n   * @typedef {Object} GuildStickerCreateOptions\n   * @property {AttachmentPayload|BufferResolvable|Stream} file The file for the sticker\n   * @property {string} name The name for the sticker\n   * @property {string} tags The Discord name of a unicode emoji representing the sticker's expression\n   * @property {?string} [description] The description for the sticker\n   * @property {string} [reason] Reason for creating the sticker\n   */\n\n  /**\n   * Creates a new custom sticker in the guild.\n   * @param {GuildStickerCreateOptions} options Options for creating a guild sticker\n   * @returns {Promise<Sticker>} The created sticker\n   * @example\n   * // Create a new sticker from a URL\n   * guild.stickers.create({ file: 'https://i.imgur.com/w3duR07.png', name: 'rip', tags: 'headstone' })\n   *   .then(sticker => console.log(`Created new sticker with name ${sticker.name}!`))\n   *   .catch(console.error);\n   * @example\n   * // Create a new sticker from a file on your computer\n   * guild.stickers.create({ file: './memes/banana.png', name: 'banana', tags: 'banana' })\n   *   .then(sticker => console.log(`Created new sticker with name ${sticker.name}!`))\n   *   .catch(console.error);\n   */\n  async create({ file, name, tags, description, reason } = {}) {\n    const resolvedFile = await MessagePayload.resolveFile(file);\n    if (!resolvedFile) throw new DiscordjsTypeError(ErrorCodes.ReqResourceType);\n    file = { ...resolvedFile, key: 'file' };\n\n    const body = { name, tags, description: description ?? '' };\n\n    const sticker = await this.client.rest.post(Routes.guildStickers(this.guild.id), {\n      appendToFormData: true,\n      body,\n      files: [file],\n      reason,\n    });\n    return this.client.actions.GuildStickerCreate.handle(this.guild, sticker).sticker;\n  }\n\n  /**\n   * Data that resolves to give a Sticker object. This can be:\n   * * A Sticker object\n   * * A Snowflake\n   * @typedef {Sticker|Snowflake} StickerResolvable\n   */\n\n  /**\n   * Resolves a StickerResolvable to a Sticker object.\n   * @method resolve\n   * @memberof GuildStickerManager\n   * @instance\n   * @param {StickerResolvable} sticker The Sticker resolvable to identify\n   * @returns {?Sticker}\n   */\n\n  /**\n   * Resolves a StickerResolvable to a Sticker id string.\n   * @method resolveId\n   * @memberof GuildStickerManager\n   * @instance\n   * @param {StickerResolvable} sticker The Sticker resolvable to identify\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Edits a sticker.\n   * @param {StickerResolvable} sticker The sticker to edit\n   * @param {GuildStickerEditOptions} [options={}] The new data for the sticker\n   * @returns {Promise<Sticker>}\n   */\n  async edit(sticker, options = {}) {\n    const stickerId = this.resolveId(sticker);\n    if (!stickerId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sticker', 'StickerResolvable');\n\n    const d = await this.client.rest.patch(Routes.guildSticker(this.guild.id, stickerId), {\n      body: options,\n      reason: options.reason,\n    });\n\n    const existing = this.cache.get(stickerId);\n    if (existing) {\n      const clone = existing._clone();\n      clone._patch(d);\n      return clone;\n    }\n    return this._add(d);\n  }\n\n  /**\n   * Deletes a sticker.\n   * @param {StickerResolvable} sticker The sticker to delete\n   * @param {string} [reason] Reason for deleting this sticker\n   * @returns {Promise<void>}\n   */\n  async delete(sticker, reason) {\n    sticker = this.resolveId(sticker);\n    if (!sticker) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sticker', 'StickerResolvable');\n\n    await this.client.rest.delete(Routes.guildSticker(this.guild.id, sticker), { reason });\n  }\n\n  /**\n   * Obtains one or more stickers from Discord, or the sticker cache if they're already available.\n   * @param {Snowflake} [id] The Sticker's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<Sticker|Collection<Snowflake, Sticker>>}\n   * @example\n   * // Fetch all stickers from the guild\n   * message.guild.stickers.fetch()\n   *   .then(stickers => console.log(`There are ${stickers.size} stickers.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single sticker\n   * message.guild.stickers.fetch('222078108977594368')\n   *   .then(sticker => console.log(`The sticker name is: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (id) {\n      if (!force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n      const sticker = await this.client.rest.get(Routes.guildSticker(this.guild.id, id));\n      return this._add(sticker, cache);\n    }\n\n    const data = await this.client.rest.get(Routes.guildStickers(this.guild.id));\n    return new Collection(data.map(sticker => [sticker.id, this._add(sticker, cache)]));\n  }\n\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @param {StickerResolvable} sticker The sticker to fetch the user for\n   * @returns {Promise<?User>}\n   */\n  async fetchUser(sticker) {\n    sticker = this.resolve(sticker);\n    if (!sticker) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'sticker', 'StickerResolvable');\n    const data = await this.client.rest.get(Routes.guildSticker(this.guild.id, sticker.id));\n    sticker._patch(data);\n    return sticker.user;\n  }\n}\n\nmodule.exports = GuildStickerManager;\n",
    "'use strict';\n\nconst { ActivityFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with an {@link Activity#flags} bitfield.\n * @extends {BitField}\n */\nclass ActivityFlagsBitField extends BitField {\n  /**\n   * Numeric activity flags.\n   * @type {ActivityFlags}\n   * @memberof ActivityFlagsBitField\n   */\n  static Flags = ActivityFlags;\n}\n\n/**\n * @name ActivityFlagsBitField\n * @kind constructor\n * @memberof ActivityFlagsBitField\n * @param {BitFieldResolvable} [bits=0] Bit(s) to read from\n */\n\nmodule.exports = ActivityFlagsBitField;\n",
    "'use strict';\n\nconst Base = require('./Base');\nconst { Emoji } = require('./Emoji');\nconst ActivityFlagsBitField = require('../util/ActivityFlagsBitField');\nconst { flatten } = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyId] Id of the party represented in activity\n * @property {MessageActivityType} type Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n * @extends {Base}\n */\nclass Presence extends Base {\n  constructor(client, data = {}) {\n    super(client);\n\n    /**\n     * The presence's user id\n     * @type {Snowflake}\n     */\n    this.userId = data.user.id;\n\n    /**\n     * The guild this presence is in\n     * @type {?Guild}\n     */\n    this.guild = data.guild ?? null;\n\n    this._patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.userId);\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.resolve(this.userId);\n  }\n\n  _patch(data) {\n    if ('status' in data) {\n      /**\n       * The status of this presence\n       * @type {PresenceStatus}\n       */\n      this.status = data.status;\n    } else {\n      this.status ??= 'offline';\n    }\n\n    if ('activities' in data) {\n      /**\n       * The activities of this presence\n       * @type {Activity[]}\n       */\n      this.activities = data.activities.map(activity => new Activity(this, activity));\n    } else {\n      this.activities ??= [];\n    }\n\n    if ('client_status' in data) {\n      /**\n       * The devices this presence is on\n       * @type {?Object}\n       * @property {?ClientPresenceStatus} web The current presence in the web application\n       * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n       * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n       */\n      this.clientStatus = data.client_status;\n    } else {\n      this.clientStatus ??= null;\n    }\n\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return (\n      this === presence ||\n      (presence &&\n        this.status === presence.status &&\n        this.clientStatus?.web === presence.clientStatus?.web &&\n        this.clientStatus?.mobile === presence.clientStatus?.mobile &&\n        this.clientStatus?.desktop === presence.clientStatus?.desktop &&\n        this.activities.length === presence.activities.length &&\n        this.activities.every((activity, index) => activity.equals(presence.activities[index])))\n    );\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    /**\n     * The presence of the Activity\n     * @type {Presence}\n     * @readonly\n     * @name Activity#presence\n     */\n    Object.defineProperty(this, 'presence', { value: presence });\n\n    /**\n     * The activity's name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The activity status's type\n     * @type {ActivityType}\n     */\n    this.type = data.type;\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url ?? null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details ?? null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state ?? null;\n\n    /**\n     * The id of the application associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationId = data.application_id ?? null;\n\n    /**\n     * Represents timestamps of an activity\n     * @typedef {Object} ActivityTimestamps\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n\n    /**\n     * Timestamps for the activity\n     * @type {?ActivityTimestamps}\n     */\n    this.timestamps = data.timestamps\n      ? {\n          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,\n        }\n      : null;\n\n    /**\n     * Represents a party of an activity\n     * @typedef {Object} ActivityParty\n     * @property {?string} id The party's id\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n\n    /**\n     * Party of the activity\n     * @type {?ActivityParty}\n     */\n    this.party = data.party ?? null;\n\n    /**\n     * The sync id of the activity\n     * <info>This property is not documented by Discord and represents the track id in spotify activities.</info>\n     * @type {?string}\n     */\n    this.syncId = data.sync_id ?? null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlagsBitField>}\n     */\n    this.flags = new ActivityFlagsBitField(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * The labels of the buttons of this rich presence\n     * @type {string[]}\n     */\n    this.buttons = data.buttons ?? [];\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = data.created_at;\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return (\n      this === activity ||\n      (activity &&\n        this.name === activity.name &&\n        this.type === activity.type &&\n        this.url === activity.url &&\n        this.state === activity.state &&\n        this.details === activity.details &&\n        this.emoji?.id === activity.emoji?.id &&\n        this.emoji?.name === activity.emoji?.name)\n    );\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activity's name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    /**\n     * The activity of the RichPresenceAssets\n     * @type {Activity}\n     * @readonly\n     * @name RichPresenceAssets#activity\n     */\n    Object.defineProperty(this, 'activity', { value: activity });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text ?? null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text ?? null;\n\n    /**\n     * The large image asset's id\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image ?? null;\n\n    /**\n     * The small image asset's id\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image ?? null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  smallImageURL(options = {}) {\n    if (!this.smallImage) return null;\n    if (this.smallImage.includes(':')) {\n      const [platform, id] = this.smallImage.split(':');\n      switch (platform) {\n        case 'mp':\n          return `https://media.discordapp.net/${id}`;\n        default:\n          return null;\n      }\n    }\n\n    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.smallImage, options);\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  largeImageURL(options = {}) {\n    if (!this.largeImage) return null;\n    if (this.largeImage.includes(':')) {\n      const [platform, id] = this.largeImage.split(':');\n      switch (platform) {\n        case 'mp':\n          return `https://media.discordapp.net/${id}`;\n        case 'spotify':\n          return `https://i.scdn.co/image/${id}`;\n        case 'youtube':\n          return `https://i.ytimg.com/vi/${id}/hqdefault_live.jpg`;\n        case 'twitch':\n          return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${id}.png`;\n        default:\n          return null;\n      }\n    }\n\n    return this.activity.presence.client.rest.cdn.appAsset(this.activity.applicationId, this.largeImage, options);\n  }\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n",
    "'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst { Presence } = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {CachedManager}\n */\nclass PresenceManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Presence, iterable);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.user.id });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userId = this.client.users.resolveId(presence);\n    return super.cache.get(userId) ?? null;\n  }\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} id.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveId(presence) {\n    const presenceResolvable = super.resolveId(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userId = this.client.users.resolveId(presence);\n    return this.cache.has(userId) ? userId : null;\n  }\n}\n\nmodule.exports = PresenceManager;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordAPIError } = require('@discordjs/rest');\nconst { RESTJSONErrorCodes, Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst { Role } = require('../structures/Role');\nconst { resolveImage } = require('../util/DataResolver');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst { setPosition, resolveColor } = require('../util/Util');\n\nlet cacheWarningEmitted = false;\n\n/**\n * Manages API methods for roles and stores their cache.\n * @extends {CachedManager}\n */\nclass RoleManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, Role, iterable);\n    if (!cacheWarningEmitted && this._cache.constructor.name !== 'Collection') {\n      cacheWarningEmitted = true;\n      process.emitWarning(\n        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,\n        'UnsupportedCacheOverwriteWarning',\n      );\n    }\n\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The role cache of this manager\n   * @type {Collection<Snowflake, Role>}\n   * @name RoleManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { extras: [this.guild] });\n  }\n\n  /**\n   * Obtains a role from Discord, or the role cache if they're already available.\n   * @param {Snowflake} [id] The role's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<?Role|Collection<Snowflake, Role>>}\n   * @example\n   * // Fetch all roles from the guild\n   * message.guild.roles.fetch()\n   *   .then(roles => console.log(`There are ${roles.size} roles.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single role\n   * message.guild.roles.fetch('222078108977594368')\n   *   .then(role => console.log(`The role color is: ${role.color}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (!id) {\n      const data = await this.client.rest.get(Routes.guildRoles(this.guild.id));\n      const roles = new Collection();\n      for (const role of data) roles.set(role.id, this._add(role, cache));\n      return roles;\n    }\n\n    if (!force) {\n      const existing = this.cache.get(id);\n      if (existing) return existing;\n    }\n\n    try {\n      const data = await this.client.rest.get(Routes.guildRole(this.guild.id, id));\n      return this._add(data, cache);\n    } catch (error) {\n      // TODO: Remove this catch in the next major version\n      if (error instanceof DiscordAPIError && error.code === RESTJSONErrorCodes.UnknownRole) {\n        return null;\n      }\n\n      throw error;\n    }\n  }\n\n  /**\n   * Data that can be resolved to a Role object. This can be:\n   * * A Role\n   * * A Snowflake\n   * @typedef {Role|Snowflake} RoleResolvable\n   */\n\n  /**\n   * Resolves a {@link RoleResolvable} to a {@link Role} object.\n   * @method resolve\n   * @memberof RoleManager\n   * @instance\n   * @param {RoleResolvable} role The role resolvable to resolve\n   * @returns {?Role}\n   */\n\n  /**\n   * Resolves a {@link RoleResolvable} to a {@link Role} id.\n   * @method resolveId\n   * @memberof RoleManager\n   * @instance\n   * @param {RoleResolvable} role The role resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Options used to create a new role.\n   * @typedef {Object} RoleCreateOptions\n   * @property {string} [name] The name of the new role\n   * @property {ColorResolvable} [color] The data to create the role with\n   * @property {boolean} [hoist] Whether or not the new role should be hoisted\n   * @property {PermissionResolvable} [permissions] The permissions for the new role\n   * @property {number} [position] The position of the new role\n   * @property {boolean} [mentionable] Whether or not the new role should be mentionable\n   * @property {?(BufferResolvable|Base64Resolvable|EmojiResolvable)} [icon] The icon for the role\n   * <warn>The `EmojiResolvable` should belong to the same guild as the role.\n   * If not, pass the emoji's URL directly</warn>\n   * @property {?string} [unicodeEmoji] The unicode emoji for the role\n   * @property {string} [reason] The reason for creating this role\n   */\n\n  /**\n   * Creates a new role in the guild with given information.\n   * <warn>The position will silently reset to 1 if an invalid one is provided, or none.</warn>\n   * @param {RoleCreateOptions} [options] Options for creating the new role\n   * @returns {Promise<Role>}\n   * @example\n   * // Create a new role\n   * guild.roles.create()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new role with data and a reason\n   * guild.roles.create({\n   *   name: 'Super Cool Blue People',\n   *   color: Colors.Blue,\n   *   reason: 'we needed a role for Super Cool People',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async create(options = {}) {\n    let { name, color, hoist, permissions, position, mentionable, reason, icon, unicodeEmoji } = options;\n    color &&= resolveColor(color);\n    if (permissions !== undefined) permissions = new PermissionsBitField(permissions);\n    if (icon) {\n      const guildEmojiURL = this.guild.emojis.resolve(icon)?.imageURL();\n      icon = guildEmojiURL ? await resolveImage(guildEmojiURL) : await resolveImage(icon);\n      if (typeof icon !== 'string') icon = undefined;\n    }\n\n    const data = await this.client.rest.post(Routes.guildRoles(this.guild.id), {\n      body: {\n        name,\n        color,\n        hoist,\n        permissions,\n        mentionable,\n        icon,\n        unicode_emoji: unicodeEmoji,\n      },\n      reason,\n    });\n    const { role } = this.client.actions.GuildRoleCreate.handle({\n      guild_id: this.guild.id,\n      role: data,\n    });\n    if (position) return this.setPosition(role, position, { reason });\n    return role;\n  }\n\n  /**\n   * Options for editing a role\n   * @typedef {RoleData} RoleEditOptions\n   * @property {string} [reason] The reason for editing this role\n   */\n\n  /**\n   * Edits a role of the guild.\n   * @param {RoleResolvable} role The role to edit\n   * @param {RoleEditOptions} options The options to provide\n   * @returns {Promise<Role>}\n   * @example\n   * // Edit a role\n   * guild.roles.edit('222079219327434752', { name: 'buddies' })\n   *   .then(updated => console.log(`Edited role name to ${updated.name}`))\n   *   .catch(console.error);\n   */\n  async edit(role, options) {\n    role = this.resolve(role);\n    if (!role) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'role', 'RoleResolvable');\n\n    if (typeof options.position === 'number') {\n      await this.setPosition(role, options.position, { reason: options.reason });\n    }\n\n    let icon = options.icon;\n    if (icon) {\n      const guildEmojiURL = this.guild.emojis.resolve(icon)?.imageURL();\n      icon = guildEmojiURL ? await resolveImage(guildEmojiURL) : await resolveImage(icon);\n      if (typeof icon !== 'string') icon = undefined;\n    }\n\n    const body = {\n      name: options.name,\n      color: options.color === undefined ? undefined : resolveColor(options.color),\n      hoist: options.hoist,\n      permissions: options.permissions === undefined ? undefined : new PermissionsBitField(options.permissions),\n      mentionable: options.mentionable,\n      icon,\n      unicode_emoji: options.unicodeEmoji,\n    };\n\n    const d = await this.client.rest.patch(Routes.guildRole(this.guild.id, role.id), { body, reason: options.reason });\n\n    const clone = role._clone();\n    clone._patch(d);\n    return clone;\n  }\n\n  /**\n   * Deletes a role.\n   * @param {RoleResolvable} role The role to delete\n   * @param {string} [reason] Reason for deleting the role\n   * @returns {Promise<void>}\n   * @example\n   * // Delete a role\n   * guild.roles.delete('222079219327434752', 'The role needed to go')\n   *   .then(() => console.log('Deleted the role'))\n   *   .catch(console.error);\n   */\n  async delete(role, reason) {\n    const id = this.resolveId(role);\n    await this.client.rest.delete(Routes.guildRole(this.guild.id, id), { reason });\n    this.client.actions.GuildRoleDelete.handle({ guild_id: this.guild.id, role_id: id });\n  }\n\n  /**\n   * Sets the new position of the role.\n   * @param {RoleResolvable} role The role to change the position of\n   * @param {number} position The new position for the role\n   * @param {SetRolePositionOptions} [options] Options for setting the position\n   * @returns {Promise<Role>}\n   * @example\n   * // Set the position of the role\n   * guild.roles.setPosition('222197033908436994', 1)\n   *   .then(updated => console.log(`Role position: ${updated.position}`))\n   *   .catch(console.error);\n   */\n  async setPosition(role, position, { relative, reason } = {}) {\n    role = this.resolve(role);\n    if (!role) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'role', 'RoleResolvable');\n    const updatedRoles = await setPosition(\n      role,\n      position,\n      relative,\n      this.guild._sortedRoles(),\n      this.client,\n      Routes.guildRoles(this.guild.id),\n      reason,\n    );\n\n    this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.guild.id,\n      roles: updatedRoles,\n    });\n    return role;\n  }\n\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolvable} role The role's id\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.roles.setPositions([{ role: roleId, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role positions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n  async setPositions(rolePositions) {\n    // Make sure rolePositions are prepared for API\n    rolePositions = rolePositions.map(rolePosition => ({\n      id: this.resolveId(rolePosition.role),\n      position: rolePosition.position,\n    }));\n\n    // Call the API to update role positions\n    await this.client.rest.patch(Routes.guildRoles(this.guild.id), { body: rolePositions });\n    return this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.guild.id,\n      roles: rolePositions,\n    }).guild;\n  }\n\n  /**\n   * Compares the positions of two roles.\n   * @param {RoleResolvable} role1 First role to compare\n   * @param {RoleResolvable} role2 Second role to compare\n   * @returns {number} Negative number if the first role's position is lower (second role's is higher),\n   * positive number if the first's is higher (second's is lower), 0 if equal\n   */\n  comparePositions(role1, role2) {\n    const resolvedRole1 = this.resolve(role1);\n    const resolvedRole2 = this.resolve(role2);\n    if (!resolvedRole1 || !resolvedRole2) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'role', 'Role nor a Snowflake');\n    }\n\n    const role1Position = resolvedRole1.position;\n    const role2Position = resolvedRole2.position;\n\n    if (role1Position === role2Position) {\n      return Number(BigInt(resolvedRole2.id) - BigInt(resolvedRole1.id));\n    }\n\n    return role1Position - role2Position;\n  }\n\n  /**\n   * Gets the managed role a user created when joining the guild, if any\n   * <info>Only ever available for bots</info>\n   * @param {UserResolvable} user The user to access the bot role for\n   * @returns {?Role}\n   */\n  botRoleFor(user) {\n    const userId = this.client.users.resolveId(user);\n    if (!userId) return null;\n    return this.cache.find(role => role.tags?.botId === userId) ?? null;\n  }\n\n  /**\n   * The `@everyone` role of the guild\n   * @type {Role}\n   * @readonly\n   */\n  get everyone() {\n    return this.cache.get(this.guild.id);\n  }\n\n  /**\n   * The premium subscriber role of the guild, if any\n   * @type {?Role}\n   * @readonly\n   */\n  get premiumSubscriberRole() {\n    return this.cache.find(role => role.tags?.premiumSubscriberRole) ?? null;\n  }\n\n  /**\n   * The role with the highest position in the cache\n   * @type {Role}\n   * @readonly\n   */\n  get highest() {\n    return this.cache.reduce((prev, role) => (role.comparePositionTo(prev) > 0 ? role : prev), this.cache.first());\n  }\n}\n\nmodule.exports = RoleManager;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsTypeError, DiscordjsError, ErrorCodes } = require('../errors');\nconst { StageInstance } = require('../structures/StageInstance');\n\n/**\n * Manages API methods for {@link StageInstance} objects and holds their cache.\n * @extends {CachedManager}\n */\nclass StageInstanceManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, StageInstance, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, StageInstance>}\n   * @name StageInstanceManager#cache\n   */\n\n  /**\n   * Options used to create a stage instance.\n   * @typedef {Object} StageInstanceCreateOptions\n   * @property {string} topic The topic of the stage instance\n   * @property {StageInstancePrivacyLevel} [privacyLevel] The privacy level of the stage instance\n   * @property {boolean} [sendStartNotification] Whether to notify `@everyone` that the stage instance has started\n   * @property {GuildScheduledEventResolvable} [guildScheduledEvent]\n   * The guild scheduled event associated with the stage instance\n   */\n\n  /**\n   * Data that can be resolved to a Stage Channel object. This can be:\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {StageChannel|Snowflake} StageChannelResolvable\n   */\n\n  /**\n   * Creates a new stage instance.\n   * @param {StageChannelResolvable} channel The stage channel to associate the created stage instance to\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Create a stage instance\n   * guild.stageInstances.create('1234567890123456789', {\n   *  topic: 'A very creative topic',\n   *  privacyLevel: GuildPrivacyLevel.GuildOnly\n   * })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async create(channel, options) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const { guildScheduledEvent, topic, privacyLevel, sendStartNotification } = options;\n\n    const guildScheduledEventId = guildScheduledEvent && this.resolveId(guildScheduledEvent);\n\n    const data = await this.client.rest.post(Routes.stageInstances(), {\n      body: {\n        channel_id: channelId,\n        topic,\n        privacy_level: privacyLevel,\n        send_start_notification: sendStartNotification,\n        guild_scheduled_event_id: guildScheduledEventId,\n      },\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Fetches the stage instance associated with a stage channel, if it exists.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be fetched\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Fetch a stage instance\n   * guild.stageInstances.fetch('1234567890123456789')\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async fetch(channel, { cache = true, force = false } = {}) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n\n    if (!force) {\n      const existing = this.cache.find(stageInstance => stageInstance.channelId === channelId);\n      if (existing) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.stageInstance(channelId));\n    return this._add(data, cache);\n  }\n\n  /**\n   * Options used to edit an existing stage instance.\n   * @typedef {Object} StageInstanceEditOptions\n   * @property {string} [topic] The new topic of the stage instance\n   * @property {StageInstancePrivacyLevel} [privacyLevel] The new privacy level of the stage instance\n   */\n\n  /**\n   * Edits an existing stage instance.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be edited\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * guild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async edit(channel, options) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n\n    let { topic, privacyLevel } = options;\n\n    const data = await this.client.rest.patch(Routes.stageInstance(channelId), {\n      body: {\n        topic,\n        privacy_level: privacyLevel,\n      },\n    });\n\n    if (this.cache.has(data.id)) {\n      const clone = this.cache.get(data.id)._clone();\n      clone._patch(data);\n      return clone;\n    }\n\n    return this._add(data);\n  }\n\n  /**\n   * Deletes an existing stage instance.\n   * @param {StageChannelResolvable} channel The stage channel whose associated stage instance is to be deleted\n   * @returns {Promise<void>}\n   */\n  async delete(channel) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new DiscordjsError(ErrorCodes.StageChannelResolve);\n\n    await this.client.rest.delete(Routes.stageInstance(channelId));\n  }\n}\n\nmodule.exports = StageInstanceManager;\n",
    "'use strict';\n\nconst { Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst VoiceState = require('../structures/VoiceState');\n\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {CachedManager}\n */\nclass VoiceStateManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, VoiceState, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n  _add(data, cache = true) {\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n\n  /**\n   * Obtains a user's voice state from discord or from the cache if it's already available.\n   * @param {GuildMemberResolvable|'@me'} member The member whose voice state is to be fetched\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<VoiceState>}\n   * @example\n   * // Fetch a member's voice state\n   * guild.voiceStates.fetch(\"66564597481480192\")\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  async fetch(member, { cache = true, force = false } = {}) {\n    const id = member === '@me' ? member : this.guild.members.resolveId(member);\n    if (!force) {\n      const existing = this.cache.get(id === '@me' ? this.client.user.id : id);\n      if (existing) return existing;\n    }\n    const data = await this.client.rest.get(Routes.guildVoiceState(this.guild.id, id));\n    return this._add(data, cache);\n  }\n}\n\nmodule.exports = VoiceStateManager;\n",
    "'use strict';\n\nconst { GuildSystemChannelFlags } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a {@link Guild#systemChannelFlags} bitfield.\n * <info>Note that all event message types are enabled by default,\n * and by setting their corresponding flags you are disabling them</info>\n * @extends {BitField}\n */\nclass SystemChannelFlagsBitField extends BitField {\n  /**\n   * Numeric system channel flags.\n   * @type {GuildSystemChannelFlags}\n   * @memberof SystemChannelFlagsBitField\n   */\n  static Flags = GuildSystemChannelFlags;\n}\n\n/**\n * @name SystemChannelFlagsBitField\n * @kind constructor\n * @memberof SystemChannelFlagsBitField\n * @param {SystemChannelFlagsResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Bitfield of the packed bits\n * @type {number}\n * @name SystemChannelFlagsBitField#bitfield\n */\n\n/**\n * Data that can be resolved to give a system channel flag bitfield. This can be:\n * * A string (see {@link SystemChannelFlagsBitField.Flags})\n * * A system channel flag\n * * An instance of SystemChannelFlagsBitField\n * * An Array of SystemChannelFlagsResolvable\n * @typedef {string|number|SystemChannelFlagsBitField|SystemChannelFlagsResolvable[]} SystemChannelFlagsResolvable\n */\n\nmodule.exports = SystemChannelFlagsBitField;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst { ChannelType, GuildPremiumTier, Routes, GuildFeature } = require('discord-api-types/v10');\nconst AnonymousGuild = require('./AnonymousGuild');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst { GuildOnboarding } = require('./GuildOnboarding');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst WelcomeScreen = require('./WelcomeScreen');\nconst { DiscordjsError, DiscordjsTypeError, ErrorCodes } = require('../errors');\nconst AutoModerationRuleManager = require('../managers/AutoModerationRuleManager');\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\nconst GuildBanManager = require('../managers/GuildBanManager');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildInviteManager = require('../managers/GuildInviteManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst GuildScheduledEventManager = require('../managers/GuildScheduledEventManager');\nconst GuildStickerManager = require('../managers/GuildStickerManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst StageInstanceManager = require('../managers/StageInstanceManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst { resolveImage } = require('../util/DataResolver');\nconst Status = require('../util/Status');\nconst SystemChannelFlagsBitField = require('../util/SystemChannelFlagsBitField');\nconst { _transformAPIIncidentsData } = require('../util/Transformers.js');\nconst { discordSort, getSortableGroupTypes, resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n    this.commands = new GuildApplicationCommandManager(this);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n    this.bans = new GuildBanManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n    this.stageInstances = new StageInstanceManager(this);\n\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n    this.invites = new GuildInviteManager(this);\n\n    /**\n     * A manager of the scheduled events of this guild\n     * @type {GuildScheduledEventManager}\n     */\n    this.scheduledEvents = new GuildScheduledEventManager(this);\n\n    /**\n     * A manager of the auto moderation rules of this guild.\n     * @type {AutoModerationRuleManager}\n     */\n    this.autoModerationRules = new AutoModerationRuleManager(this);\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardId = data.shardId;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n\n  _patch(data) {\n    super._patch(data);\n    this.id = data.id;\n    if ('name' in data) this.name = data.name;\n    if ('icon' in data) this.icon = data.icon;\n    if ('unavailable' in data) {\n      this.available = !data.unavailable;\n    } else {\n      this.available ??= true;\n    }\n\n    if ('discovery_splash' in data) {\n      /**\n       * The hash of the guild discovery splash image\n       * @type {?string}\n       */\n      this.discoverySplash = data.discovery_splash;\n    }\n\n    if ('member_count' in data) {\n      /**\n       * The full amount of members in this guild\n       * @type {number}\n       */\n      this.memberCount = data.member_count;\n    }\n\n    if ('large' in data) {\n      /**\n       * Whether the guild is \"large\" (has more than {@link WebSocketOptions large_threshold} members, 50 by default)\n       * @type {boolean}\n       */\n      this.large = Boolean(data.large);\n    }\n\n    if ('premium_progress_bar_enabled' in data) {\n      /**\n       * Whether this guild has its premium (boost) progress bar enabled\n       * @type {boolean}\n       */\n      this.premiumProgressBarEnabled = data.premium_progress_bar_enabled;\n    }\n\n    if ('application_id' in data) {\n      /**\n       * The id of the application that created this guild (if applicable)\n       * @type {?Snowflake}\n       */\n      this.applicationId = data.application_id;\n    }\n\n    if ('afk_timeout' in data) {\n      /**\n       * The time in seconds before a user is counted as \"away from keyboard\"\n       * @type {?number}\n       */\n      this.afkTimeout = data.afk_timeout;\n    }\n\n    if ('afk_channel_id' in data) {\n      /**\n       * The id of the voice channel where AFK members are moved\n       * @type {?Snowflake}\n       */\n      this.afkChannelId = data.afk_channel_id;\n    }\n\n    if ('system_channel_id' in data) {\n      /**\n       * The system channel's id\n       * @type {?Snowflake}\n       */\n      this.systemChannelId = data.system_channel_id;\n    }\n\n    if ('premium_tier' in data) {\n      /**\n       * The premium tier of this guild\n       * @type {GuildPremiumTier}\n       */\n      this.premiumTier = data.premium_tier;\n    }\n\n    if ('widget_enabled' in data) {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    } else {\n      this.widgetEnabled ??= null;\n    }\n\n    if ('widget_channel_id' in data) {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    } else {\n      this.widgetChannelId ??= null;\n    }\n\n    if ('explicit_content_filter' in data) {\n      /**\n       * The explicit content filter level of the guild\n       * @type {GuildExplicitContentFilter}\n       */\n      this.explicitContentFilter = data.explicit_content_filter;\n    }\n\n    if ('mfa_level' in data) {\n      /**\n       * The required MFA level for this guild\n       * @type {GuildMFALevel}\n       */\n      this.mfaLevel = data.mfa_level;\n    }\n\n    if ('joined_at' in data) {\n      /**\n       * The timestamp the client user joined the guild at\n       * @type {number}\n       */\n      this.joinedTimestamp = Date.parse(data.joined_at);\n    }\n\n    if ('default_message_notifications' in data) {\n      /**\n       * The default message notification level of the guild\n       * @type {GuildDefaultMessageNotifications}\n       */\n      this.defaultMessageNotifications = data.default_message_notifications;\n    }\n\n    if ('system_channel_flags' in data) {\n      /**\n       * The value set for the guild's system channel flags\n       * @type {Readonly<SystemChannelFlagsBitField>}\n       */\n      this.systemChannelFlags = new SystemChannelFlagsBitField(data.system_channel_flags).freeze();\n    }\n\n    if ('max_members' in data) {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else {\n      this.maximumMembers ??= null;\n    }\n\n    if ('max_presences' in data) {\n      /**\n       * The maximum amount of presences the guild can have (this is `null` for all but the largest of guilds)\n       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\n       * this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences;\n    } else {\n      this.maximumPresences ??= null;\n    }\n\n    if ('max_video_channel_users' in data) {\n      /**\n       * The maximum amount of users allowed in a video channel.\n       * @type {?number}\n       */\n      this.maxVideoChannelUsers = data.max_video_channel_users;\n    } else {\n      this.maxVideoChannelUsers ??= null;\n    }\n\n    if ('max_stage_video_channel_users' in data) {\n      /**\n       * The maximum amount of users allowed in a stage video channel.\n       * @type {?number}\n       */\n      this.maxStageVideoChannelUsers = data.max_stage_video_channel_users;\n    } else {\n      this.maxStageVideoChannelUsers ??= null;\n    }\n\n    if ('approximate_member_count' in data) {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\n       * this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else {\n      this.approximateMemberCount ??= null;\n    }\n\n    if ('approximate_presence_count' in data) {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\n       * this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else {\n      this.approximatePresenceCount ??= null;\n    }\n\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses ??= null;\n\n    if ('rules_channel_id' in data) {\n      /**\n       * The rules channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.rulesChannelId = data.rules_channel_id;\n    }\n\n    if ('public_updates_channel_id' in data) {\n      /**\n       * The community updates channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.publicUpdatesChannelId = data.public_updates_channel_id;\n    }\n\n    if ('preferred_locale' in data) {\n      /**\n       * The preferred locale of the guild, defaults to `en-US`\n       * @type {Locale}\n       */\n      this.preferredLocale = data.preferred_locale;\n    }\n\n    if ('safety_alerts_channel_id' in data) {\n      /**\n       * The safety alerts channel's id for the guild\n       * @type {?Snowflake}\n       */\n      this.safetyAlertsChannelId = data.safety_alerts_channel_id;\n    } else {\n      this.safetyAlertsChannelId ??= null;\n    }\n\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles._add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n\n    if ('owner_id' in data) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, { guild: this }));\n      }\n    }\n\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n\n    if (data.guild_scheduled_events) {\n      this.scheduledEvents.cache.clear();\n      for (const scheduledEvent of data.guild_scheduled_events) {\n        this.scheduledEvents._add(scheduledEvent);\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers,\n      });\n    }\n\n    if ('incidents_data' in data) {\n      /**\n       * Incident actions of a guild.\n       * @typedef {Object} IncidentActions\n       * @property {?Date} invitesDisabledUntil When invites would be enabled again\n       * @property {?Date} dmsDisabledUntil When direct messages would be enabled again\n       * @property {?Date} dmSpamDetectedAt When direct message spam was detected\n       * @property {?Date} raidDetectedAt When a raid was detected\n       */\n\n      /**\n       * The incidents data of this guild.\n       * <info>You will need to fetch the guild using {@link BaseGuild#fetch} if you want to receive\n       * this property.</info>\n       * @type {?IncidentActions}\n       */\n      this.incidentsData = data.incidents_data && _transformAPIIncidentsData(data.incidents_data);\n    } else {\n      this.incidentsData ??= null;\n    }\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  discoverySplashURL(options = {}) {\n    return this.discoverySplash && this.client.rest.cdn.discoverySplash(this.id, this.discoverySplash, options);\n  }\n\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {BaseFetchOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n  async fetchOwner(options) {\n    if (!this.ownerId) {\n      throw new DiscordjsError(ErrorCodes.FetchOwnerId, 'guild');\n    }\n    const member = await this.members.fetch({ ...options, user: this.ownerId });\n    return member;\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel)}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n\n  /**\n   * Safety alerts channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get safetyAlertsChannel() {\n    return this.client.channels.resolve(this.safetyAlertsChannelId);\n  }\n\n  /**\n   * The maximum bitrate available for this guild\n   * @type {number}\n   * @readonly\n   */\n  get maximumBitrate() {\n    if (this.features.includes(GuildFeature.VIPRegions)) {\n      return 384_000;\n    }\n\n    switch (this.premiumTier) {\n      case GuildPremiumTier.Tier1:\n        return 128_000;\n      case GuildPremiumTier.Tier2:\n        return 256_000;\n      case GuildPremiumTier.Tier3:\n        return 384_000;\n      default:\n        return 96_000;\n    }\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<Snowflake|string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  async fetchIntegrations() {\n    const data = await this.client.rest.get(Routes.guildIntegrations(this.id));\n    return data.reduce(\n      (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  async fetchTemplates() {\n    const templates = await this.client.rest.get(Routes.guildTemplates(this.id));\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n  async fetchWelcomeScreen() {\n    const data = await this.client.rest.get(Routes.guildWelcomeScreen(this.id));\n    return new WelcomeScreen(this, data);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async createTemplate(name, description) {\n    const data = await this.client.rest.post(Routes.guildTemplates(this.id), { body: { name, description } });\n    return new GuildTemplate(this.client, data);\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchPreview() {\n    const data = await this.client.rest.get(Routes.guildPreview(this.id));\n    return new GuildPreview(this.client, data);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity URL invite object to this guild.\n   * Resolves with an object containing the vanity URL invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    const data = await this.client.rest.get(Routes.guildVanityUrl(this.id));\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  async fetchWebhooks() {\n    const apiHooks = await this.client.rest.get(Routes.guildWebhooks(this.id));\n    const hooks = new Collection();\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n    return hooks;\n  }\n\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel)} channel\n   * The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?(TextChannel|NewsChannel|VoiceChannel|StageChannel|ForumChannel|MediaChannel|Snowflake)} channel\n   * The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidgetSettings() {\n    const data = await this.client.rest.get(Routes.guildWidgetSettings(this.id));\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,\n    };\n  }\n\n  /**\n   * Returns a URL for the PNG widget of the guild.\n   * @param {GuildWidgetStyle} [style] The style for the widget image\n   * @returns {string}\n   */\n  widgetImageURL(style) {\n    return this.client.guilds.widgetImageURL(this.id, style);\n  }\n\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Consider only entries before this entry\n   * @property {Snowflake|GuildAuditLogsEntry} [after] Consider only entries after this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {?AuditLogEvent} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  async fetchAuditLogs({ before, after, limit, user, type } = {}) {\n    const query = makeURLSearchParams({\n      before: before?.id ?? before,\n      after: after?.id ?? after,\n      limit,\n      action_type: type,\n    });\n\n    if (user) {\n      const userId = this.client.users.resolveId(user);\n      if (!userId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'user', 'UserResolvable');\n      query.set('user_id', userId);\n    }\n\n    const data = await this.client.rest.get(Routes.guildAuditLog(this.id), { query });\n    return new GuildAuditLogs(this, data);\n  }\n\n  /**\n   * Fetches the guild onboarding data for this guild.\n   * @returns {Promise<GuildOnboarding>}\n   */\n  async fetchOnboarding() {\n    const data = await this.client.rest.get(Routes.guildOnboarding(this.id));\n    return new GuildOnboarding(this.client, data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditOptions\n   * @property {string} [name] The name of the guild\n   * @property {?GuildVerificationLevel} [verificationLevel] The verification level of the guild\n   * @property {?GuildDefaultMessageNotifications} [defaultMessageNotifications] The default message\n   * notification level of the guild\n   * @property {?GuildExplicitContentFilter} [explicitContentFilter] The level of the explicit content filter\n   * @property {?VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [splash] The invite splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [discoverySplash] The discovery splash image of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [banner] The banner of the guild\n   * @property {?TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {?TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {?TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {?TextChannelResolvable} [safetyAlertsChannel] The safety alerts channel of the guild\n   * @property {?string} [preferredLocale] The preferred locale of the guild\n   * @property {GuildFeature[]} [features] The features of the guild\n   * @property {?string} [description] The discovery description of the guild\n   * @property {boolean} [premiumProgressBarEnabled] Whether the guild's premium progress bar is enabled\n   * @property {string} [reason] Reason for editing this guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditOptions} options The options to provide\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n  async edit({\n    verificationLevel,\n    defaultMessageNotifications,\n    explicitContentFilter,\n    afkChannel,\n    afkTimeout,\n    icon,\n    owner,\n    splash,\n    discoverySplash,\n    banner,\n    systemChannel,\n    systemChannelFlags,\n    rulesChannel,\n    publicUpdatesChannel,\n    preferredLocale,\n    premiumProgressBarEnabled,\n    safetyAlertsChannel,\n    ...options\n  }) {\n    const data = await this.client.rest.patch(Routes.guild(this.id), {\n      body: {\n        ...options,\n        verification_level: verificationLevel,\n        default_message_notifications: defaultMessageNotifications,\n        explicit_content_filter: explicitContentFilter,\n        afk_channel_id: afkChannel && this.client.channels.resolveId(afkChannel),\n        afk_timeout: afkTimeout,\n        icon: icon && (await resolveImage(icon)),\n        owner_id: owner && this.client.users.resolveId(owner),\n        splash: splash && (await resolveImage(splash)),\n        discovery_splash: discoverySplash && (await resolveImage(discoverySplash)),\n        banner: banner && (await resolveImage(banner)),\n        system_channel_id: systemChannel && this.client.channels.resolveId(systemChannel),\n        system_channel_flags:\n          systemChannelFlags === undefined ? undefined : SystemChannelFlagsBitField.resolve(systemChannelFlags),\n        rules_channel_id: rulesChannel && this.client.channels.resolveId(rulesChannel),\n        public_updates_channel_id: publicUpdatesChannel && this.client.channels.resolveId(publicUpdatesChannel),\n        preferred_locale: preferredLocale,\n        premium_progress_bar_enabled: premiumProgressBarEnabled,\n        safety_alerts_channel_id: safetyAlertsChannel && this.client.channels.resolveId(safetyAlertsChannel),\n      },\n      reason: options.reason,\n    });\n\n    return this.client.actions.GuildUpdate.handle(data).updated;\n  }\n\n  /**\n   * Options used to edit the guild onboarding.\n   * @typedef {Object} GuildOnboardingEditOptions\n   * @property {GuildOnboardingPromptData[]|Collection<Snowflake, GuildOnboardingPrompt>} [prompts]\n   * The prompts shown during onboarding and in customize community\n   * @property {ChannelResolvable[]|Collection<Snowflake, GuildChannel>} [defaultChannels]\n   * The channels that new members get opted into automatically\n   * @property {boolean} [enabled] Whether the onboarding is enabled\n   * @property {GuildOnboardingMode} [mode] The mode to edit the guild onboarding with\n   * @property {string} [reason] The reason for editing the guild onboarding\n   */\n\n  /**\n   * Data for editing a guild onboarding prompt.\n   * @typedef {Object} GuildOnboardingPromptData\n   * @property {Snowflake} [id] The id of the prompt\n   * @property {string} title The title for the prompt\n   * @property {boolean} [singleSelect] Whether users are limited to selecting one option for the prompt\n   * @property {boolean} [required] Whether the prompt is required before a user completes the onboarding flow\n   * @property {boolean} [inOnboarding] Whether the prompt is present in the onboarding flow\n   * @property {GuildOnboardingPromptType} [type] The type of the prompt\n   * @property {GuildOnboardingPromptOptionData[]|Collection<Snowflake, GuildOnboardingPrompt>} options\n   * The options available within the prompt\n   */\n\n  /**\n   * Data for editing a guild onboarding prompt option.\n   * @typedef {Object} GuildOnboardingPromptOptionData\n   * @property {?Snowflake} [id] The id of the option\n   * @property {ChannelResolvable[]|Collection<Snowflake, GuildChannel>} [channels]\n   * The channels a member is added to when the option is selected\n   * @property {RoleResolvable[]|Collection<Snowflake, Role>} [roles]\n   * The roles assigned to a member when the option is selected\n   * @property {string} title The title of the option\n   * @property {?string} [description] The description of the option\n   * @property {?(EmojiIdentifierResolvable|Emoji)} [emoji] The emoji of the option\n   */\n\n  /**\n   * Edits the guild onboarding data for this guild.\n   * @param {GuildOnboardingEditOptions} options The options to provide\n   * @returns {Promise<GuildOnboarding>}\n   */\n  async editOnboarding(options) {\n    const newData = await this.client.rest.put(Routes.guildOnboarding(this.id), {\n      body: {\n        prompts: options.prompts?.map(prompt => ({\n          // Currently, the prompt ids are required even for new ones (which won't be used)\n          id: prompt.id ?? DiscordSnowflake.generate().toString(),\n          title: prompt.title,\n          single_select: prompt.singleSelect,\n          required: prompt.required,\n          in_onboarding: prompt.inOnboarding,\n          type: prompt.type,\n          options: prompt.options.map(option => {\n            const emoji = resolvePartialEmoji(option.emoji);\n\n            return {\n              id: option.id,\n              channel_ids: option.channels?.map(channel => this.channels.resolveId(channel)),\n              role_ids: option.roles?.map(role => this.roles.resolveId(role)),\n              title: option.title,\n              description: option.description,\n              emoji_animated: emoji?.animated,\n              emoji_id: emoji?.id,\n              emoji_name: emoji?.name,\n            };\n          }),\n        })),\n        default_channel_ids: options.defaultChannels?.map(channel => this.channels.resolveId(channel)),\n        enabled: options.enabled,\n        mode: options.mode,\n      },\n      reason: options.reason,\n    });\n\n    return new GuildOnboarding(this.client, newData);\n  }\n\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {TextChannel|NewsChannel|ForumChannel|MediaChannel|Snowflake} channel\n   * The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditOptions\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditOptions} options The options to provide\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n  async editWelcomeScreen(options) {\n    const { enabled, description, welcomeChannels } = options;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji?.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description,\n      };\n    });\n\n    const patchData = await this.client.rest.patch(Routes.guildWelcomeScreen(this.id), {\n      body: {\n        welcome_channels,\n        description,\n        enabled,\n      },\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {?GuildExplicitContentFilter} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter, reason });\n  }\n\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {?GuildDefaultMessageNotifications} defaultMessageNotifications\n   * The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({ defaultMessageNotifications, reason });\n  }\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({ systemChannelFlags, reason });\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name, reason });\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {?GuildVerificationLevel} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel, reason });\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {?VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel, reason });\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {?TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel, reason });\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout, reason });\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {?(Base64Resolvable|BufferResolvable)} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  setIcon(icon, reason) {\n    return this.edit({ icon, reason });\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(guild => guild.fetchOwner())\n   *  .then(owner => console.log(`Updated the guild owner to ${owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner, reason });\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  setSplash(splash, reason) {\n    return this.edit({ splash, reason });\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {?(Base64Resolvable|BufferResolvable)} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({ discoverySplash, reason });\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {?(Base64Resolvable|BufferResolvable)} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  setBanner(banner, reason) {\n    return this.edit({ banner, reason });\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {?TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({ rulesChannel, reason });\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {?TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({ publicUpdatesChannel, reason });\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {?Locale} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({ preferredLocale, reason });\n  }\n\n  /**\n   * Edits the enabled state of the guild's premium progress bar\n   * @param {boolean} [enabled=true] The new enabled state of the guild's premium progress bar\n   * @param {string} [reason] Reason for changing the state of the guild's premium progress bar\n   * @returns {Promise<Guild>}\n   */\n  setPremiumProgressBarEnabled(enabled = true, reason) {\n    return this.edit({ premiumProgressBarEnabled: enabled, reason });\n  }\n\n  /**\n   * Edits the safety alerts channel of the guild.\n   * @param {?TextChannelResolvable} safetyAlertsChannel The new safety alerts channel\n   * @param {string} [reason] Reason for changing the guild's safety alerts channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild safety alerts channel\n   * guild.setSafetyAlertsChannel(channel)\n   *  .then(updated => console.log(`Updated guild safety alerts channel to ${updated.safetyAlertsChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSafetyAlertsChannel(safetyAlertsChannel, reason) {\n    return this.edit({ safetyAlertsChannel, reason });\n  }\n\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n  async setWidgetSettings(settings, reason) {\n    await this.client.rest.patch(Routes.guildWidgetSettings(this.id), {\n      body: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel),\n      },\n      reason,\n    });\n    return this;\n  }\n\n  /**\n   * Sets the guild's MFA level\n   * <info>An elevated MFA level requires guild moderators to have 2FA enabled.</info>\n   * @param {GuildMFALevel} level The MFA level\n   * @param {string} [reason] Reason for changing the guild's MFA level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the MFA level of the guild to Elevated\n   * guild.setMFALevel(GuildMFALevel.Elevated)\n   *   .then(guild => console.log(\"Set guild's MFA level to Elevated\"))\n   *   .catch(console.error);\n   */\n  async setMFALevel(level, reason) {\n    await this.client.rest.post(Routes.guildMFA(this.id), {\n      body: {\n        level,\n      },\n      reason,\n    });\n    return this;\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(guild => console.log(`Left the guild: ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new DiscordjsError(ErrorCodes.GuildOwned);\n    await this.client.rest.delete(Routes.userGuild(this.id));\n    return this;\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(guild => console.log(`Deleted the guild ${guild}`))\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.rest.delete(Routes.guild(this.id));\n    return this;\n  }\n\n  /**\n   * Sets whether this guild's invites are disabled.\n   * @param {boolean} [disabled=true] Whether the invites are disabled\n   * @returns {Promise<Guild>}\n   */\n  async disableInvites(disabled = true) {\n    const features = this.features.filter(feature => feature !== GuildFeature.InvitesDisabled);\n    if (disabled) features.push(GuildFeature.InvitesDisabled);\n    return this.edit({ features });\n  }\n\n  /**\n   * Sets the incident actions for a guild.\n   * @param {IncidentActionsEditOptions} incidentActions The incident actions to set\n   * @returns {Promise<IncidentActions>}\n   */\n  async setIncidentActions(incidentActions) {\n    return this.client.guilds.setIncidentActions(this.id, incidentActions);\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    return (\n      guild &&\n      guild instanceof this.constructor &&\n      this.id === guild.id &&\n      this.available === guild.available &&\n      this.splash === guild.splash &&\n      this.discoverySplash === guild.discoverySplash &&\n      this.name === guild.name &&\n      this.memberCount === guild.memberCount &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      this.ownerId === guild.ownerId &&\n      this.verificationLevel === guild.verificationLevel &&\n      (this.features === guild.features ||\n        (this.features.length === guild.features.length &&\n          this.features.every((feat, i) => feat === guild.features[i])))\n    );\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false,\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * The voice state adapter for this guild that can be used with `@discordjs/voice` to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.Ready) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        },\n      };\n    };\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const channelIsCategory = channel.type === ChannelType.GuildCategory;\n    const types = getSortableGroupTypes(channel.type);\n    return discordSort(\n      this.channels.cache.filter(\n        ({ parentId, type }) => types.includes(type) && (channelIsCategory || parentId === channel.parentId),\n      ),\n    );\n  }\n}\n\nexports.Guild = Guild;\n",
    "'use strict';\n\nconst BaseGuild = require('./BaseGuild');\nconst PermissionsBitField = require('../util/PermissionsBitField');\n\n/**\n * A partial guild received when using {@link GuildManager#fetch} to fetch multiple guilds.\n * @extends {BaseGuild}\n */\nclass OAuth2Guild extends BaseGuild {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * Whether the client user is the owner of the guild\n     * @type {boolean}\n     */\n    this.owner = data.owner;\n\n    /**\n     * The permissions that the client user has in this guild\n     * @type {Readonly<PermissionsBitField>}\n     */\n    this.permissions = new PermissionsBitField(BigInt(data.permissions)).freeze();\n  }\n}\n\nmodule.exports = OAuth2Guild;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { Routes, RouteBases } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\nconst { Guild } = require('../structures/Guild');\nconst GuildChannel = require('../structures/GuildChannel');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst { GuildMember } = require('../structures/GuildMember');\nconst Invite = require('../structures/Invite');\nconst OAuth2Guild = require('../structures/OAuth2Guild');\nconst { Role } = require('../structures/Role');\nconst { resolveImage } = require('../util/DataResolver');\nconst Events = require('../util/Events');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst SystemChannelFlagsBitField = require('../util/SystemChannelFlagsBitField');\nconst { _transformAPIIncidentsData } = require('../util/Transformers.js');\nconst { resolveColor } = require('../util/Util');\n\nlet cacheWarningEmitted = false;\n\n/**\n * Manages API methods for Guilds and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Guild, iterable);\n    if (!cacheWarningEmitted && this._cache.constructor.name !== 'Collection') {\n      cacheWarningEmitted = true;\n      process.emitWarning(\n        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,\n        'UnsupportedCacheOverwriteWarning',\n      );\n    }\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, Guild>}\n   * @name GuildManager#cache\n   */\n\n  /**\n   * Data that resolves to give a Guild object. This can be:\n   * * A Guild object\n   * * A GuildChannel object\n   * * A GuildEmoji object\n   * * A Role object\n   * * A Snowflake\n   * * An Invite object\n   * @typedef {Guild|GuildChannel|GuildMember|GuildEmoji|Role|Snowflake|Invite} GuildResolvable\n   */\n\n  /**\n   * Partial data for a Role.\n   * @typedef {Object} PartialRoleData\n   * @property {Snowflake|number} [id] The role's id, used to set channel overrides.\n   * This is a placeholder and will be replaced by the API after consumption\n   * @property {string} [name] The name of the role\n   * @property {ColorResolvable} [color] The color of the role, either a hex string or a base 10 number\n   * @property {boolean} [hoist] Whether the role should be hoisted\n   * @property {number} [position] The position of the role\n   * @property {PermissionResolvable} [permissions] The permissions of the role\n   * @property {boolean} [mentionable] Whether the role should be mentionable\n   */\n\n  /**\n   * Partial overwrite data.\n   * @typedef {Object} PartialOverwriteData\n   * @property {Snowflake|number} id The id of the {@link Role} or {@link User} this overwrite belongs to\n   * @property {OverwriteType} [type] The type of this overwrite\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   */\n\n  /**\n   * Partial data for a Channel.\n   * @typedef {Object} PartialChannelData\n   * @property {Snowflake|number} [id] The channel's id, used to set its parent.\n   * This is a placeholder and will be replaced by the API after consumption\n   * @property {Snowflake|number} [parentId] The parent id for this channel\n   * @property {ChannelType.GuildText|ChannelType.GuildVoice|ChannelType.GuildCategory} [type] The type of the channel\n   * @property {string} name The name of the channel\n   * @property {?string} [topic] The topic of the text channel\n   * @property {boolean} [nsfw] Whether the channel is NSFW\n   * @property {number} [bitrate] The bitrate of the voice channel\n   * @property {number} [userLimit] The user limit of the channel\n   * @property {?string} [rtcRegion] The RTC region of the channel\n   * @property {VideoQualityMode} [videoQualityMode] The camera video quality mode of the channel\n   * @property {PartialOverwriteData[]} [permissionOverwrites]\n   * Overwrites of the channel\n   * @property {number} [rateLimitPerUser] The rate limit per user (slowmode) of the channel in seconds\n   */\n\n  /**\n   * Resolves a {@link GuildResolvable} to a {@link Guild} object.\n   * @method resolve\n   * @memberof GuildManager\n   * @instance\n   * @param {GuildResolvable} guild The guild resolvable to identify\n   * @returns {?Guild}\n   */\n  resolve(guild) {\n    if (\n      guild instanceof GuildChannel ||\n      guild instanceof GuildMember ||\n      guild instanceof GuildEmoji ||\n      guild instanceof Role ||\n      (guild instanceof Invite && guild.guild)\n    ) {\n      return super.resolve(guild.guild);\n    }\n    return super.resolve(guild);\n  }\n\n  /**\n   * Resolves a {@link GuildResolvable} to a {@link Guild} id string.\n   * @method resolveId\n   * @memberof GuildManager\n   * @instance\n   * @param {GuildResolvable} guild The guild resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(guild) {\n    if (\n      guild instanceof GuildChannel ||\n      guild instanceof GuildMember ||\n      guild instanceof GuildEmoji ||\n      guild instanceof Role ||\n      (guild instanceof Invite && guild.guild)\n    ) {\n      return super.resolveId(guild.guild.id);\n    }\n    return super.resolveId(guild);\n  }\n\n  /**\n   * Options used to create a guild.\n   * @typedef {Object} GuildCreateOptions\n   * @property {string} name The name of the guild\n   * @property {?(BufferResolvable|Base64Resolvable)} [icon=null] The icon for the guild\n   * @property {GuildVerificationLevel} [verificationLevel] The verification level for the guild\n   * @property {GuildDefaultMessageNotifications} [defaultMessageNotifications] The default message notifications\n   * for the guild\n   * @property {GuildExplicitContentFilter} [explicitContentFilter] The explicit content filter level for the guild\n   * @property {PartialRoleData[]} [roles=[]] The roles for this guild,\n   * @property {PartialChannelData[]} [channels=[]] The channels for this guild\n   * @property {Snowflake|number} [afkChannelId] The AFK channel's id\n   * @property {number} [afkTimeout] The AFK timeout in seconds\n   * the first element of this array is used to change properties of the guild's everyone role.\n   * @property {Snowflake|number} [systemChannelId] The system channel's id\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The flags of the system channel\n   */\n  /* eslint-enable max-len */\n\n  /**\n   * Creates a guild.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {GuildCreateOptions} options Options for creating the guild\n   * @returns {Promise<Guild>} The guild that was created\n   */\n  async create({\n    name,\n    icon = null,\n    verificationLevel,\n    defaultMessageNotifications,\n    explicitContentFilter,\n    roles = [],\n    channels = [],\n    afkChannelId,\n    afkTimeout,\n    systemChannelId,\n    systemChannelFlags,\n  }) {\n    const data = await this.client.rest.post(Routes.guilds(), {\n      body: {\n        name,\n        icon: icon && (await resolveImage(icon)),\n        verification_level: verificationLevel,\n        default_message_notifications: defaultMessageNotifications,\n        explicit_content_filter: explicitContentFilter,\n        roles: roles.map(({ color, permissions, ...options }) => ({\n          ...options,\n          color: color && resolveColor(color),\n          permissions: permissions === undefined ? undefined : PermissionsBitField.resolve(permissions).toString(),\n        })),\n        channels: channels.map(\n          ({\n            parentId,\n            userLimit,\n            rtcRegion,\n            videoQualityMode,\n            permissionOverwrites,\n            rateLimitPerUser,\n            ...options\n          }) => ({\n            ...options,\n            parent_id: parentId,\n            user_limit: userLimit,\n            rtc_region: rtcRegion,\n            video_quality_mode: videoQualityMode,\n            permission_overwrites: permissionOverwrites?.map(({ allow, deny, ...permissionOverwriteOptions }) => ({\n              ...permissionOverwriteOptions,\n              allow: allow === undefined ? undefined : PermissionsBitField.resolve(allow).toString(),\n              deny: deny === undefined ? undefined : PermissionsBitField.resolve(deny).toString(),\n            })),\n            rate_limit_per_user: rateLimitPerUser,\n          }),\n        ),\n        afk_channel_id: afkChannelId,\n        afk_timeout: afkTimeout,\n        system_channel_id: systemChannelId,\n        system_channel_flags:\n          systemChannelFlags === undefined ? undefined : SystemChannelFlagsBitField.resolve(systemChannelFlags),\n      },\n    });\n\n    return (\n      this.client.guilds.cache.get(data.id) ??\n      new Promise(resolve => {\n        const handleGuild = guild => {\n          if (guild.id === data.id) {\n            clearTimeout(timeout);\n            this.client.decrementMaxListeners();\n            resolve(guild);\n          }\n        };\n        this.client.incrementMaxListeners();\n        this.client.once(Events.GuildCreate, handleGuild);\n\n        const timeout = setTimeout(() => {\n          this.client.removeListener(Events.GuildCreate, handleGuild);\n          this.client.decrementMaxListeners();\n          resolve(this.client.guilds._add(data));\n        }, 10_000).unref();\n      })\n    );\n  }\n\n  /**\n   * Options used to fetch a single guild.\n   * @typedef {BaseFetchOptions} FetchGuildOptions\n   * @property {GuildResolvable} guild The guild to fetch\n   * @property {boolean} [withCounts=true] Whether the approximate member and presence counts should be returned\n   */\n\n  /**\n   * Options used to fetch multiple guilds.\n   * @typedef {Object} FetchGuildsOptions\n   * @property {Snowflake} [before] Get guilds before this guild id\n   * @property {Snowflake} [after] Get guilds after this guild id\n   * @property {number} [limit] Maximum number of guilds to request (1-200)\n   */\n\n  /**\n   * Obtains one or multiple guilds from Discord, or the guild cache if it's already available.\n   * @param {GuildResolvable|FetchGuildOptions|FetchGuildsOptions} [options] The guild's id or options\n   * @returns {Promise<Guild|Collection<Snowflake, OAuth2Guild>>}\n   */\n  async fetch(options = {}) {\n    const id = this.resolveId(options) ?? this.resolveId(options.guild);\n\n    if (id) {\n      if (!options.force) {\n        const existing = this.cache.get(id);\n        if (existing) return existing;\n      }\n\n      const data = await this.client.rest.get(Routes.guild(id), {\n        query: makeURLSearchParams({ with_counts: options.withCounts ?? true }),\n      });\n      data.shardId = ShardClientUtil.shardIdForGuildId(id, this.client.options.shardCount);\n      return this._add(data, options.cache);\n    }\n\n    const data = await this.client.rest.get(Routes.userGuilds(), { query: makeURLSearchParams(options) });\n    return data.reduce((coll, guild) => coll.set(guild.id, new OAuth2Guild(this.client, guild)), new Collection());\n  }\n\n  /**\n   * Options used to set incident actions. Supplying `null` to any option will disable the action.\n   * @typedef {Object} IncidentActionsEditOptions\n   * @property {?DateResolvable} [invitesDisabledUntil] When invites should be enabled again\n   * @property {?DateResolvable} [dmsDisabledUntil] When direct messages should be enabled again\n   */\n\n  /**\n   * Sets the incident actions for a guild.\n   * @param {GuildResolvable} guild The guild\n   * @param {IncidentActionsEditOptions} incidentActions The incident actions to set\n   * @returns {Promise<IncidentActions>}\n   */\n  async setIncidentActions(guild, { invitesDisabledUntil, dmsDisabledUntil }) {\n    const guildId = this.resolveId(guild);\n\n    const data = await this.client.rest.put(Routes.guildIncidentActions(guildId), {\n      body: {\n        invites_disabled_until: invitesDisabledUntil && new Date(invitesDisabledUntil).toISOString(),\n        dms_disabled_until: dmsDisabledUntil && new Date(dmsDisabledUntil).toISOString(),\n      },\n    });\n\n    const parsedData = _transformAPIIncidentsData(data);\n    const resolvedGuild = this.resolve(guild);\n\n    if (resolvedGuild) {\n      resolvedGuild.incidentsData = parsedData;\n    }\n\n    return parsedData;\n  }\n\n  /**\n   * Returns a URL for the PNG widget of a guild.\n   * @param {GuildResolvable} guild The guild of the widget image\n   * @param {GuildWidgetStyle} [style] The style for the widget image\n   * @returns {string}\n   */\n  widgetImageURL(guild, style) {\n    const urlSearchParams = String(makeURLSearchParams({ style }));\n\n    return `${RouteBases.api}${Routes.guildWidgetImage(this.resolveId(guild))}${\n      urlSearchParams ? `?${urlSearchParams}` : ''\n    }`;\n  }\n}\n\nmodule.exports = GuildManager;\n",
    "'use strict';\n\nconst { ChannelType, Routes } = require('discord-api-types/v10');\nconst CachedManager = require('./CachedManager');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst { GuildMember } = require('../structures/GuildMember');\nconst { Message } = require('../structures/Message');\nconst ThreadMember = require('../structures/ThreadMember');\nconst User = require('../structures/User');\nconst { emitDeprecationWarningForUserFetchFlags } = require('../util/Util');\n\n/**\n * Manages API methods for users and stores their cache.\n * @extends {CachedManager}\n */\nclass UserManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, User, iterable);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name UserManager#cache\n   */\n\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A Snowflake\n   * * A Message object (resolves to the message author)\n   * * A GuildMember object\n   * * A ThreadMember object\n   * @typedef {User|Snowflake|Message|GuildMember|ThreadMember} UserResolvable\n   */\n\n  /**\n   * The DM between the client's user and a user\n   * @param {Snowflake} userId The user id\n   * @returns {?DMChannel}\n   * @private\n   */\n  dmChannel(userId) {\n    return (\n      this.client.channels.cache.find(channel => channel.type === ChannelType.DM && channel.recipientId === userId) ??\n      null\n    );\n  }\n\n  /**\n   * Creates a {@link DMChannel} between the client and a user.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<DMChannel>}\n   */\n  async createDM(user, { cache = true, force = false } = {}) {\n    const id = this.resolveId(user);\n\n    if (!force) {\n      const dmChannel = this.dmChannel(id);\n      if (dmChannel && !dmChannel.partial) return dmChannel;\n    }\n\n    const data = await this.client.rest.post(Routes.userChannels(), { body: { recipient_id: id } });\n    return this.client.channels._add(data, null, { cache });\n  }\n\n  /**\n   * Deletes a {@link DMChannel} (if one exists) between the client and a user. Resolves with the channel if successful.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {Promise<DMChannel>}\n   */\n  async deleteDM(user) {\n    const id = this.resolveId(user);\n    const dmChannel = this.dmChannel(id);\n    if (!dmChannel) throw new DiscordjsError(ErrorCodes.UserNoDMChannel);\n    await this.client.rest.delete(Routes.channel(dmChannel.id));\n    this.client.channels._remove(dmChannel.id);\n    return dmChannel;\n  }\n\n  /**\n   * Obtains a user from Discord, or the user cache if it's already available.\n   * @param {UserResolvable} user The user to fetch\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<User>}\n   */\n  async fetch(user, { cache = true, force = false } = {}) {\n    const id = this.resolveId(user);\n    if (!force) {\n      const existing = this.cache.get(id);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.rest.get(Routes.user(id));\n    return this._add(data, cache);\n  }\n\n  /**\n   * Fetches a user's flags.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<UserFlagsBitField>}\n   * @deprecated <warn>This method is deprecated and will be removed in the next major version.\n   * Flags may still be retrieved via {@link UserManager#fetch}.</warn>\n   */\n  async fetchFlags(user, options) {\n    emitDeprecationWarningForUserFetchFlags(this.constructor.name);\n    return (await this.fetch(user, options)).flags;\n  }\n\n  /**\n   * Sends a message to a user.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @param {string|MessagePayload|MessageCreateOptions} options The options to provide\n   * @returns {Promise<Message>}\n   */\n  async send(user, options) {\n    return (await this.createDM(user)).send(options);\n  }\n\n  /**\n   * Resolves a {@link UserResolvable} to a {@link User} object.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n  resolve(user) {\n    if (user instanceof GuildMember || user instanceof ThreadMember) return user.user;\n    if (user instanceof Message) return user.author;\n    return super.resolve(user);\n  }\n\n  /**\n   * Resolves a {@link UserResolvable} to a {@link User} id.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(user) {\n    if (user instanceof ThreadMember) return user.id;\n    if (user instanceof GuildMember) return user.user.id;\n    if (user instanceof Message) return user.author.id;\n    return super.resolveId(user);\n  }\n}\n\nmodule.exports = UserManager;\n",
    "'use strict';\n\nconst { GatewayOpcodes, ActivityType } = require('discord-api-types/v10');\nconst { Presence } = require('./Presence');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * Represents the client's presence.\n * @extends {Presence}\n */\nclass ClientPresence extends Presence {\n  constructor(client, data = {}) {\n    super(client, Object.assign(data, { status: data.status ?? 'online', user: { id: null } }));\n  }\n\n  /**\n   * Sets the client's presence\n   * @param {PresenceData} presence The data to set the presence to\n   * @returns {ClientPresence}\n   */\n  set(presence) {\n    const packet = this._parse(presence);\n    this._patch(packet);\n    if (presence.shardId === undefined) {\n      this.client.ws.broadcast({ op: GatewayOpcodes.PresenceUpdate, d: packet });\n    } else if (Array.isArray(presence.shardId)) {\n      for (const shardId of presence.shardId) {\n        this.client.ws.shards.get(shardId).send({ op: GatewayOpcodes.PresenceUpdate, d: packet });\n      }\n    } else {\n      this.client.ws.shards.get(presence.shardId).send({ op: GatewayOpcodes.PresenceUpdate, d: packet });\n    }\n    return this;\n  }\n\n  /**\n   * Parses presence data into a packet ready to be sent to Discord\n   * @param {PresenceData} presence The data to parse\n   * @returns {GatewayPresenceUpdateData}\n   * @private\n   */\n  _parse({ status, since, afk, activities }) {\n    const data = {\n      activities: [],\n      afk: typeof afk === 'boolean' ? afk : false,\n      since: typeof since === 'number' && !Number.isNaN(since) ? since : null,\n      status: status ?? this.status,\n    };\n    if (activities?.length) {\n      for (const [i, activity] of activities.entries()) {\n        if (typeof activity.name !== 'string') {\n          throw new DiscordjsTypeError(ErrorCodes.InvalidType, `activities[${i}].name`, 'string');\n        }\n\n        activity.type ??= ActivityType.Playing;\n\n        if (activity.type === ActivityType.Custom && !activity.state) {\n          activity.state = activity.name;\n          activity.name = 'Custom Status';\n        }\n\n        data.activities.push({\n          type: activity.type,\n          name: activity.name,\n          state: activity.state,\n          url: activity.url,\n        });\n      }\n    } else if (!activities && (status || afk || since) && this.activities.length) {\n      data.activities.push(\n        ...this.activities.map(activity => ({\n          name: activity.name,\n          state: activity.state ?? undefined,\n          type: activity.type,\n          url: activity.url ?? undefined,\n        })),\n      );\n    }\n\n    return data;\n  }\n}\n\nmodule.exports = ClientPresence;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { DiscordSnowflake } = require('@sapphire/snowflake');\nconst Base = require('./Base');\nconst { Sticker } = require('./Sticker');\n\n/**\n * Represents a pack of standard stickers.\n * @extends {Base}\n */\nclass StickerPack extends Base {\n  constructor(client, pack) {\n    super(client);\n    /**\n     * The Sticker pack's id\n     * @type {Snowflake}\n     */\n    this.id = pack.id;\n\n    /**\n     * The stickers in the pack\n     * @type {Collection<Snowflake, Sticker>}\n     */\n    this.stickers = new Collection(pack.stickers.map(sticker => [sticker.id, new Sticker(client, sticker)]));\n\n    /**\n     * The name of the sticker pack\n     * @type {string}\n     */\n    this.name = pack.name;\n\n    /**\n     * The id of the pack's SKU\n     * @type {Snowflake}\n     */\n    this.skuId = pack.sku_id;\n\n    /**\n     * The id of a sticker in the pack which is shown as the pack's icon\n     * @type {?Snowflake}\n     */\n    this.coverStickerId = pack.cover_sticker_id ?? null;\n\n    /**\n     * The description of the sticker pack\n     * @type {string}\n     */\n    this.description = pack.description;\n\n    /**\n     * The id of the sticker pack's banner image\n     * @type {?Snowflake}\n     */\n    this.bannerId = pack.banner_asset_id ?? null;\n  }\n\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return DiscordSnowflake.timestampFrom(this.id);\n  }\n\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The sticker which is shown as the pack's icon\n   * @type {?Sticker}\n   * @readonly\n   */\n  get coverSticker() {\n    return this.coverStickerId && this.stickers.get(this.coverStickerId);\n  }\n\n  /**\n   * The URL to this sticker pack's banner.\n   * @param {ImageURLOptions} [options={}] Options for the image URL\n   * @returns {?string}\n   */\n  bannerURL(options = {}) {\n    return this.bannerId && this.client.rest.cdn.stickerPackBanner(this.bannerId, options);\n  }\n}\n\nmodule.exports = StickerPack;\n",
    "'use strict';\n\nconst { flatten } = require('../util/Util');\n\n/**\n * Represents a Discord voice region for guilds.\n */\nclass VoiceRegion {\n  constructor(data) {\n    /**\n     * The region's id\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * Name of the region\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * Whether the region is deprecated\n     * @type {boolean}\n     */\n    this.deprecated = data.deprecated;\n\n    /**\n     * Whether the region is optimal\n     * @type {boolean}\n     */\n    this.optimal = data.optimal;\n\n    /**\n     * Whether the region is custom\n     * @type {boolean}\n     */\n    this.custom = data.custom;\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n}\n\nmodule.exports = VoiceRegion;\n",
    "'use strict';\n\nconst Base = require('./Base');\n\n/**\n * Represents a WidgetMember.\n * @extends {Base}\n */\nclass WidgetMember extends Base {\n  /**\n   * Activity sent in a {@link WidgetMember}.\n   * @typedef {Object} WidgetActivity\n   * @property {string} name The name of the activity\n   */\n\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The id of the user. It's an arbitrary number.\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The username of the member.\n     * @type {string}\n     */\n    this.username = data.username;\n\n    /**\n     * The discriminator of the member.\n     * @type {string}\n     */\n    this.discriminator = data.discriminator;\n\n    /**\n     * The avatar of the member.\n     * @type {?string}\n     */\n    this.avatar = data.avatar;\n\n    /**\n     * The status of the member.\n     * @type {PresenceStatus}\n     */\n    this.status = data.status;\n\n    /**\n     * If the member is server deafened\n     * @type {?boolean}\n     */\n    this.deaf = data.deaf ?? null;\n\n    /**\n     * If the member is server muted\n     * @type {?boolean}\n     */\n    this.mute = data.mute ?? null;\n\n    /**\n     * If the member is self deafened\n     * @type {?boolean}\n     */\n    this.selfDeaf = data.self_deaf ?? null;\n\n    /**\n     * If the member is self muted\n     * @type {?boolean}\n     */\n    this.selfMute = data.self_mute ?? null;\n\n    /**\n     * If the member is suppressed\n     * @type {?boolean}\n     */\n    this.suppress = data.suppress ?? null;\n\n    /**\n     * The id of the voice channel the member is in, if any\n     * @type {?Snowflake}\n     */\n    this.channelId = data.channel_id ?? null;\n\n    /**\n     * The avatar URL of the member.\n     * @type {string}\n     */\n    this.avatarURL = data.avatar_url;\n\n    /**\n     * The activity of the member.\n     * @type {?WidgetActivity}\n     */\n    this.activity = data.activity ?? null;\n  }\n}\n\nmodule.exports = WidgetMember;\n",
    "'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst { Routes } = require('discord-api-types/v10');\nconst Base = require('./Base');\nconst WidgetMember = require('./WidgetMember');\n\n/**\n * Represents a Widget.\n * @extends {Base}\n */\nclass Widget extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Represents a channel in a Widget\n   * @typedef {Object} WidgetChannel\n   * @property {Snowflake} id Id of the channel\n   * @property {string} name Name of the channel\n   * @property {number} position Position of the channel\n   */\n\n  _patch(data) {\n    /**\n     * The id of the guild.\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    if ('name' in data) {\n      /**\n       * The name of the guild.\n       * @type {string}\n       */\n      this.name = data.name;\n    }\n\n    if ('instant_invite' in data) {\n      /**\n       * The invite of the guild.\n       * @type {?string}\n       */\n      this.instantInvite = data.instant_invite;\n    }\n\n    /**\n     * The list of channels in the guild.\n     * @type {Collection<Snowflake, WidgetChannel>}\n     */\n    this.channels = new Collection();\n    for (const channel of data.channels) {\n      this.channels.set(channel.id, channel);\n    }\n\n    /**\n     * The list of members in the guild.\n     * These strings are just arbitrary numbers, they aren't Snowflakes.\n     * @type {Collection<string, WidgetMember>}\n     */\n    this.members = new Collection();\n    for (const member of data.members) {\n      this.members.set(member.id, new WidgetMember(this.client, member));\n    }\n\n    if ('presence_count' in data) {\n      /**\n       * The number of members online.\n       * @type {number}\n       */\n      this.presenceCount = data.presence_count;\n    }\n  }\n\n  /**\n   * Update the Widget.\n   * @returns {Promise<Widget>}\n   */\n  async fetch() {\n    const data = await this.client.rest.get(Routes.guildWidgetJSON(this.id));\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Returns a URL for the PNG widget of the guild.\n   * @param {GuildWidgetStyle} [style] The style for the widget image\n   * @returns {string}\n   */\n  imageURL(style) {\n    return this.client.guilds.widgetImageURL(this.id, style);\n  }\n}\n\nmodule.exports = Widget;\n",
    "'use strict';\nconst { GatewayIntentBits } = require('discord-api-types/v10');\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to calculate intents.\n * @extends {BitField}\n */\nclass IntentsBitField extends BitField {\n  /**\n   * Numeric WebSocket intents\n   * @type {GatewayIntentBits}\n   * @memberof IntentsBitField\n   */\n  static Flags = GatewayIntentBits;\n}\n\n/**\n * @name IntentsBitField\n * @kind constructor\n * @memberof IntentsBitField\n * @param {IntentsResolvable} [bits=0] Bit(s) to read from\n */\n\n/**\n * Data that can be resolved to give a permission number. This can be:\n * * A string (see {@link IntentsBitField.Flags})\n * * An intents flag\n * * An instance of {@link IntentsBitField}\n * * An array of IntentsResolvable\n * @typedef {string|number|IntentsBitField|IntentsResolvable[]} IntentsResolvable\n */\n\nmodule.exports = IntentsBitField;\n",
    "'use strict';\n\nconst { setInterval, clearInterval } = require('node:timers');\nconst { ThreadChannelTypes, SweeperKeys } = require('./Constants');\nconst Events = require('./Events');\nconst { DiscordjsTypeError, ErrorCodes } = require('../errors');\n\n/**\n * @typedef {Function} GlobalSweepFilter\n * @returns {?Function} Return `null` to skip sweeping, otherwise a function passed to `sweep()`,\n * See {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class#sweep Collection#sweep}\n * for the definition of this function.\n */\n\n/**\n * A container for all cache sweeping intervals and their associated sweep methods.\n */\nclass Sweepers {\n  constructor(client, options) {\n    /**\n     * The client that instantiated this\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The options the sweepers were instantiated with\n     * @type {SweeperOptions}\n     */\n    this.options = options;\n\n    /**\n     * A record of interval timeout that is used to sweep the indicated items, or null if not being swept\n     * @type {Object<SweeperKey, ?Timeout>}\n     */\n    this.intervals = Object.fromEntries(SweeperKeys.map(key => [key, null]));\n\n    for (const key of SweeperKeys) {\n      if (!(key in options)) continue;\n\n      this._validateProperties(key);\n\n      const clonedOptions = { ...this.options[key] };\n\n      // Handle cases that have a \"lifetime\"\n      if (!('filter' in clonedOptions)) {\n        switch (key) {\n          case 'invites':\n            clonedOptions.filter = this.constructor.expiredInviteSweepFilter(clonedOptions.lifetime);\n            break;\n          case 'messages':\n            clonedOptions.filter = this.constructor.outdatedMessageSweepFilter(clonedOptions.lifetime);\n            break;\n          case 'threads':\n            clonedOptions.filter = this.constructor.archivedThreadSweepFilter(clonedOptions.lifetime);\n        }\n      }\n\n      this._initInterval(key, `sweep${key[0].toUpperCase()}${key.slice(1)}`, clonedOptions);\n    }\n  }\n\n  /**\n   * Sweeps all guild and global application commands and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which commands will be removed from the caches.\n   * @returns {number} Amount of commands that were removed from the caches\n   */\n  sweepApplicationCommands(filter) {\n    const { guilds, items: guildCommands } = this._sweepGuildDirectProp('commands', filter, { emit: false });\n\n    const globalCommands = this.client.application?.commands.cache.sweep(filter) ?? 0;\n\n    this.client.emit(\n      Events.CacheSweep,\n      `Swept ${globalCommands} global application commands and ${guildCommands} guild commands in ${guilds} guilds.`,\n    );\n    return guildCommands + globalCommands;\n  }\n\n  /**\n   * Sweeps all auto moderation rules and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine\n   * which auto moderation rules will be removed from the caches\n   * @returns {number} Amount of auto moderation rules that were removed from the caches\n   */\n  sweepAutoModerationRules(filter) {\n    return this._sweepGuildDirectProp('autoModerationRules', filter).items;\n  }\n\n  /**\n   * Sweeps all guild bans and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which bans will be removed from the caches.\n   * @returns {number} Amount of bans that were removed from the caches\n   */\n  sweepBans(filter) {\n    return this._sweepGuildDirectProp('bans', filter).items;\n  }\n\n  /**\n   * Sweeps all guild emojis and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which emojis will be removed from the caches.\n   * @returns {number} Amount of emojis that were removed from the caches\n   */\n  sweepEmojis(filter) {\n    return this._sweepGuildDirectProp('emojis', filter).items;\n  }\n\n  /**\n   * Sweeps all client application entitlements and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which entitlements will be removed from the caches.\n   * @returns {number} Amount of entitlements that were removed from the caches\n   */\n  sweepEntitlements(filter) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n\n    const entitlements = this.client.application.entitlements.cache.sweep(filter);\n\n    this.client.emit(Events.CacheSweep, `Swept ${entitlements} entitlements.`);\n\n    return entitlements;\n  }\n\n  /**\n   * Sweeps all guild invites and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which invites will be removed from the caches.\n   * @returns {number} Amount of invites that were removed from the caches\n   */\n  sweepInvites(filter) {\n    return this._sweepGuildDirectProp('invites', filter).items;\n  }\n\n  /**\n   * Sweeps all guild members and removes the ones which are indicated by the filter.\n   * <info>It is highly recommended to keep the client guild member cached</info>\n   * @param {Function} filter The function used to determine which guild members will be removed from the caches.\n   * @returns {number} Amount of guild members that were removed from the caches\n   */\n  sweepGuildMembers(filter) {\n    return this._sweepGuildDirectProp('members', filter, { outputName: 'guild members' }).items;\n  }\n\n  /**\n   * Sweeps all text-based channels' messages and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which messages will be removed from the caches.\n   * @returns {number} Amount of messages that were removed from the caches\n   * @example\n   * // Remove all messages older than 1800 seconds from the messages cache\n   * const amount = sweepers.sweepMessages(\n   *   Sweepers.filterByLifetime({\n   *     lifetime: 1800,\n   *     getComparisonTimestamp: m => m.editedTimestamp ?? m.createdTimestamp,\n   *   })(),\n   * );\n   * console.log(`Successfully removed ${amount} messages from the cache.`);\n   */\n  sweepMessages(filter) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n    let channels = 0;\n    let messages = 0;\n\n    for (const channel of this.client.channels.cache.values()) {\n      if (!channel.isTextBased()) continue;\n\n      channels++;\n      messages += channel.messages.cache.sweep(filter);\n    }\n    this.client.emit(Events.CacheSweep, `Swept ${messages} messages in ${channels} text-based channels.`);\n    return messages;\n  }\n\n  /**\n   * Sweeps all presences and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which presences will be removed from the caches.\n   * @returns {number} Amount of presences that were removed from the caches\n   */\n  sweepPresences(filter) {\n    return this._sweepGuildDirectProp('presences', filter).items;\n  }\n\n  /**\n   * Sweeps all message reactions and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which reactions will be removed from the caches.\n   * @returns {number} Amount of reactions that were removed from the caches\n   */\n  sweepReactions(filter) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n    let channels = 0;\n    let messages = 0;\n    let reactions = 0;\n\n    for (const channel of this.client.channels.cache.values()) {\n      if (!channel.isTextBased()) continue;\n      channels++;\n\n      for (const message of channel.messages.cache.values()) {\n        messages++;\n        reactions += message.reactions.cache.sweep(filter);\n      }\n    }\n    this.client.emit(\n      Events.CacheSweep,\n      `Swept ${reactions} reactions on ${messages} messages in ${channels} text-based channels.`,\n    );\n    return reactions;\n  }\n\n  /**\n   * Sweeps all guild stage instances and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which stage instances will be removed from the caches.\n   * @returns {number} Amount of stage instances that were removed from the caches\n   */\n  sweepStageInstances(filter) {\n    return this._sweepGuildDirectProp('stageInstances', filter, { outputName: 'stage instances' }).items;\n  }\n\n  /**\n   * Sweeps all guild stickers and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which stickers will be removed from the caches.\n   * @returns {number} Amount of stickers that were removed from the caches\n   */\n  sweepStickers(filter) {\n    return this._sweepGuildDirectProp('stickers', filter).items;\n  }\n\n  /**\n   * Sweeps all thread members and removes the ones which are indicated by the filter.\n   * <info>It is highly recommended to keep the client thread member cached</info>\n   * @param {Function} filter The function used to determine which thread members will be removed from the caches.\n   * @returns {number} Amount of thread members that were removed from the caches\n   */\n  sweepThreadMembers(filter) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n\n    let threads = 0;\n    let members = 0;\n    for (const channel of this.client.channels.cache.values()) {\n      if (!ThreadChannelTypes.includes(channel.type)) continue;\n      threads++;\n      members += channel.members.cache.sweep(filter);\n    }\n    this.client.emit(Events.CacheSweep, `Swept ${members} thread members in ${threads} threads.`);\n    return members;\n  }\n\n  /**\n   * Sweeps all threads and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which threads will be removed from the caches.\n   * @returns {number} filter Amount of threads that were removed from the caches\n   * @example\n   * // Remove all threads archived greater than 1 day ago from all the channel caches\n   * const amount = sweepers.sweepThreads(\n   *   Sweepers.filterByLifetime({\n   *     getComparisonTimestamp: t => t.archivedTimestamp,\n   *     excludeFromSweep: t => !t.archived,\n   *   })(),\n   * );\n   * console.log(`Successfully removed ${amount} threads from the cache.`);\n   */\n  sweepThreads(filter) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n\n    let threads = 0;\n    for (const [key, val] of this.client.channels.cache.entries()) {\n      if (!ThreadChannelTypes.includes(val.type)) continue;\n      if (filter(val, key, this.client.channels.cache)) {\n        threads++;\n        this.client.channels._remove(key);\n      }\n    }\n    this.client.emit(Events.CacheSweep, `Swept ${threads} threads.`);\n    return threads;\n  }\n\n  /**\n   * Sweeps all users and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which users will be removed from the caches.\n   * @returns {number} Amount of users that were removed from the caches\n   */\n  sweepUsers(filter) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n\n    const users = this.client.users.cache.sweep(filter);\n\n    this.client.emit(Events.CacheSweep, `Swept ${users} users.`);\n\n    return users;\n  }\n\n  /**\n   * Sweeps all guild voice states and removes the ones which are indicated by the filter.\n   * @param {Function} filter The function used to determine which voice states will be removed from the caches.\n   * @returns {number} Amount of voice states that were removed from the caches\n   */\n  sweepVoiceStates(filter) {\n    return this._sweepGuildDirectProp('voiceStates', filter, { outputName: 'voice states' }).items;\n  }\n\n  /**\n   * Cancels all sweeping intervals\n   * @returns {void}\n   */\n  destroy() {\n    for (const key of SweeperKeys) {\n      if (this.intervals[key]) clearInterval(this.intervals[key]);\n    }\n  }\n\n  /**\n   * Options for generating a filter function based on lifetime\n   * @typedef {Object} LifetimeFilterOptions\n   * @property {number} [lifetime=14400] How long, in seconds, an entry should stay in the collection\n   * before it is considered sweepable.\n   * @property {Function} [getComparisonTimestamp=e => e?.createdTimestamp] A function that takes an entry, key,\n   * and the collection and returns a timestamp to compare against in order to determine the lifetime of the entry.\n   * @property {Function} [excludeFromSweep=() => false] A function that takes an entry, key, and the collection\n   * and returns a boolean, `true` when the entry should not be checked for sweepability.\n   */\n\n  /**\n   * Create a sweepFilter function that uses a lifetime to determine sweepability.\n   * @param {LifetimeFilterOptions} [options={}] The options used to generate the filter function\n   * @returns {GlobalSweepFilter}\n   */\n  static filterByLifetime({\n    lifetime = 14400,\n    getComparisonTimestamp = e => e?.createdTimestamp,\n    excludeFromSweep = () => false,\n  } = {}) {\n    if (typeof lifetime !== 'number') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'lifetime', 'number');\n    }\n    if (typeof getComparisonTimestamp !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'getComparisonTimestamp', 'function');\n    }\n    if (typeof excludeFromSweep !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'excludeFromSweep', 'function');\n    }\n    return () => {\n      if (lifetime <= 0) return null;\n      const lifetimeMs = lifetime * 1_000;\n      const now = Date.now();\n      return (entry, key, coll) => {\n        if (excludeFromSweep(entry, key, coll)) {\n          return false;\n        }\n        const comparisonTimestamp = getComparisonTimestamp(entry, key, coll);\n        if (!comparisonTimestamp || typeof comparisonTimestamp !== 'number') return false;\n        return now - comparisonTimestamp > lifetimeMs;\n      };\n    };\n  }\n\n  /**\n   * Creates a sweep filter that sweeps archived threads\n   * @param {number} [lifetime=14400] How long a thread has to be archived to be valid for sweeping\n   * @returns {GlobalSweepFilter}\n   */\n  static archivedThreadSweepFilter(lifetime = 14400) {\n    return this.filterByLifetime({\n      lifetime,\n      getComparisonTimestamp: e => e.archiveTimestamp,\n      excludeFromSweep: e => !e.archived,\n    });\n  }\n\n  /**\n   * Creates a sweep filter that sweeps expired invites\n   * @param {number} [lifetime=14400] How long ago an invite has to have expired to be valid for sweeping\n   * @returns {GlobalSweepFilter}\n   */\n  static expiredInviteSweepFilter(lifetime = 14400) {\n    return this.filterByLifetime({\n      lifetime,\n      getComparisonTimestamp: i => i.expiresTimestamp,\n    });\n  }\n\n  /**\n   * Creates a sweep filter that sweeps outdated messages (edits taken into account)\n   * @param {number} [lifetime=3600] How long ago a message has to have been sent or edited to be valid for sweeping\n   * @returns {GlobalSweepFilter}\n   */\n  static outdatedMessageSweepFilter(lifetime = 3600) {\n    return this.filterByLifetime({\n      lifetime,\n      getComparisonTimestamp: m => m.editedTimestamp ?? m.createdTimestamp,\n    });\n  }\n\n  /**\n   * Configuration options for emitting the cache sweep client event\n   * @typedef {Object} SweepEventOptions\n   * @property {boolean} [emit=true] Whether to emit the client event in this method\n   * @property {string} [outputName] A name to output in the client event if it should differ from the key\n   * @private\n   */\n\n  /**\n   * Sweep a direct sub property of all guilds\n   * @param {string} key The name of the property\n   * @param {Function} filter Filter function passed to sweep\n   * @param {SweepEventOptions} [eventOptions={}] Options for the Client event emitted here\n   * @returns {Object} Object containing the number of guilds swept and the number of items swept\n   * @private\n   */\n  _sweepGuildDirectProp(key, filter, { emit = true, outputName } = {}) {\n    if (typeof filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'filter', 'function');\n    }\n\n    let guilds = 0;\n    let items = 0;\n\n    for (const guild of this.client.guilds.cache.values()) {\n      // We may be unable to sweep the cache if the guild is unavailable and was never patched\n      if (!guild.available) continue;\n\n      const { cache } = guild[key];\n\n      guilds++;\n      items += cache.sweep(filter);\n    }\n\n    if (emit) {\n      this.client.emit(Events.CacheSweep, `Swept ${items} ${outputName ?? key} in ${guilds} guilds.`);\n    }\n\n    return { guilds, items };\n  }\n\n  /**\n   * Validates a set of properties\n   * @param {string} key Key of the options object to check\n   * @private\n   */\n  _validateProperties(key) {\n    const props = this.options[key];\n    if (typeof props !== 'object') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}`, 'object', true);\n    }\n    if (typeof props.interval !== 'number') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}.interval`, 'number');\n    }\n    // Invites, Messages, and Threads can be provided a lifetime parameter, which we use to generate the filter\n    if (['invites', 'messages', 'threads'].includes(key) && !('filter' in props)) {\n      if (typeof props.lifetime !== 'number') {\n        throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}.lifetime`, 'number');\n      }\n      return;\n    }\n    if (typeof props.filter !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, `sweepers.${key}.filter`, 'function');\n    }\n  }\n\n  /**\n   * Initialize an interval for sweeping\n   * @param {string} intervalKey The name of the property that stores the interval for this sweeper\n   * @param {string} sweepKey The name of the function that sweeps the desired caches\n   * @param {Object} opts Validated options for a sweep\n   * @private\n   */\n  _initInterval(intervalKey, sweepKey, opts) {\n    if (opts.interval <= 0 || opts.interval === Infinity) return;\n    this.intervals[intervalKey] = setInterval(() => {\n      const sweepFn = opts.filter();\n      if (sweepFn === null) return;\n      if (typeof sweepFn !== 'function') throw new DiscordjsTypeError(ErrorCodes.SweepFilterReturn);\n      this[sweepKey](sweepFn);\n    }, opts.interval * 1_000).unref();\n  }\n}\n\nmodule.exports = Sweepers;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst { Collection } = require('@discordjs/collection');\nconst { makeURLSearchParams } = require('@discordjs/rest');\nconst { OAuth2Scopes, Routes } = require('discord-api-types/v10');\nconst BaseClient = require('./BaseClient');\nconst ActionsManager = require('./actions/ActionsManager');\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\nconst WebSocketManager = require('./websocket/WebSocketManager');\nconst { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = require('../errors');\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\nconst ChannelManager = require('../managers/ChannelManager');\nconst GuildManager = require('../managers/GuildManager');\nconst UserManager = require('../managers/UserManager');\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\nconst ClientPresence = require('../structures/ClientPresence');\nconst GuildPreview = require('../structures/GuildPreview');\nconst GuildTemplate = require('../structures/GuildTemplate');\nconst Invite = require('../structures/Invite');\nconst { Sticker } = require('../structures/Sticker');\nconst StickerPack = require('../structures/StickerPack');\nconst VoiceRegion = require('../structures/VoiceRegion');\nconst Webhook = require('../structures/Webhook');\nconst Widget = require('../structures/Widget');\nconst { resolveInviteCode, resolveGuildTemplateCode } = require('../util/DataResolver');\nconst Events = require('../util/Events');\nconst IntentsBitField = require('../util/IntentsBitField');\nconst Options = require('../util/Options');\nconst PermissionsBitField = require('../util/PermissionsBitField');\nconst Status = require('../util/Status');\nconst Sweepers = require('../util/Sweepers');\n\nlet deprecationEmittedForPremiumStickerPacks = false;\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(options);\n\n    const data = require('node:worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [\n        ...new Set(\n          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),\n        ),\n      ];\n    }\n\n    this._validateOptions();\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n    this.voice = new ClientVoiceManager(this);\n\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.env.SHARDING_MANAGER\n      ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)\n      : null;\n\n    /**\n     * The user manager of this client\n     * @type {UserManager}\n     */\n    this.users = new UserManager(this);\n\n    /**\n     * A manager of all the guilds the client is currently handling -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n    this.guilds = new GuildManager(this);\n\n    /**\n     * All of the {@link BaseChannel}s that the client is currently handling -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n    this.channels = new ChannelManager(this);\n\n    /**\n     * The sweeping functions and their intervals used to periodically sweep caches\n     * @type {Sweepers}\n     */\n    this.sweepers = new Sweepers(this, this.options.sweepers);\n\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n    this.presence = new ClientPresence(this, this.options.presence);\n\n    Object.defineProperty(this, 'token', { writable: true });\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n    this.application = null;\n\n    /**\n     * Timestamp of the time the client was last {@link Status.Ready} at\n     * @type {?number}\n     */\n    this.readyTimestamp = null;\n  }\n\n  /**\n   * A manager of all the custom emojis that the client has access to\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Time at which the client was last regarded as being in the {@link Status.Ready} state\n   * (each time the client disconnects and successfully reconnects, this will be overwritten)\n   * @type {?Date}\n   * @readonly\n   */\n  get readyAt() {\n    return this.readyTimestamp && new Date(this.readyTimestamp);\n  }\n\n  /**\n   * How long it has been since the client last entered the {@link Status.Ready} state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyTimestamp && Date.now() - this.readyTimestamp;\n  }\n\n  /**\n   * Logs the client in, establishing a WebSocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  async login(token = this.token) {\n    if (!token || typeof token !== 'string') throw new DiscordjsError(ErrorCodes.TokenInvalid);\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.rest.setToken(token);\n    this.emit(Events.Debug, `Provided token: ${this._censoredToken}`);\n\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.Debug, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      await this.destroy();\n      throw error;\n    }\n  }\n\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n  isReady() {\n    return !this.ws.destroyed && this.ws.status === Status.Ready;\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {Promise<void>}\n   */\n  async destroy() {\n    super.destroy();\n\n    this.sweepers.destroy();\n    await this.ws.destroy();\n    this.token = null;\n    this.rest.setToken(null);\n  }\n\n  /**\n   * Options used when fetching an invite from Discord.\n   * @typedef {Object} ClientFetchInviteOptions\n   * @property {Snowflake} [guildScheduledEventId] The id of the guild scheduled event to include with\n   * the invite\n   */\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @param {ClientFetchInviteOptions} [options] Options for fetching the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n  async fetchInvite(invite, options) {\n    const code = resolveInviteCode(invite);\n    const query = makeURLSearchParams({\n      with_counts: true,\n      with_expiration: true,\n      guild_scheduled_event_id: options?.guildScheduledEventId,\n    });\n    const data = await this.rest.get(Routes.invite(code), { query });\n    return new Invite(this, data);\n  }\n\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n  async fetchGuildTemplate(template) {\n    const code = resolveGuildTemplateCode(template);\n    const data = await this.rest.get(Routes.template(code));\n    return new GuildTemplate(this, data);\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n  async fetchWebhook(id, token) {\n    const data = await this.rest.get(Routes.webhook(id, token), { auth: token === undefined });\n    return new Webhook(this, { token, ...data });\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchVoiceRegions() {\n    const apiRegions = await this.rest.get(Routes.voiceRegions());\n    const regions = new Collection();\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n    return regions;\n  }\n\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async fetchSticker(id) {\n    const data = await this.rest.get(Routes.sticker(id));\n    return new Sticker(this, data);\n  }\n\n  /**\n   * Options for fetching sticker packs.\n   * @typedef {Object} StickerPackFetchOptions\n   * @property {Snowflake} [packId] The id of the sticker pack to fetch\n   */\n\n  /**\n   * Obtains the list of available sticker packs.\n   * @param {StickerPackFetchOptions} [options={}] Options for fetching sticker packs\n   * @returns {Promise<Collection<Snowflake, StickerPack>|StickerPack>}\n   * A collection of sticker packs, or a single sticker pack if a packId was provided\n   * @example\n   * client.fetchStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   * @example\n   * client.fetchStickerPacks({ packId: '751604115435421716' })\n   *   .then(pack => console.log(`Sticker pack name: ${pack.name}`))\n   *   .catch(console.error);\n   */\n  async fetchStickerPacks({ packId } = {}) {\n    if (packId) {\n      const data = await this.rest.get(Routes.stickerPack(packId));\n      return new StickerPack(this, data);\n    }\n\n    const data = await this.rest.get(Routes.stickerPacks());\n    return new Collection(data.sticker_packs.map(stickerPack => [stickerPack.id, new StickerPack(this, stickerPack)]));\n  }\n\n  /**\n   * Obtains the list of available sticker packs.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @deprecated Use {@link Client#fetchStickerPacks} instead.\n   */\n  fetchPremiumStickerPacks() {\n    if (!deprecationEmittedForPremiumStickerPacks) {\n      process.emitWarning(\n        'The Client#fetchPremiumStickerPacks() method is deprecated. Use Client#fetchStickerPacks() instead.',\n        'DeprecationWarning',\n      );\n\n      deprecationEmittedForPremiumStickerPacks = true;\n    }\n\n    return this.fetchStickerPacks();\n  }\n\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');\n    const data = await this.rest.get(Routes.guildPreview(id));\n    return new GuildPreview(this, data);\n  }\n\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'guild', 'GuildResolvable');\n    const data = await this.rest.get(Routes.guildWidgetJSON(id));\n    return new Widget(this, data);\n  }\n\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {OAuth2Scopes[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: [OAuth2Scopes.ApplicationsCommands],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     PermissionFlagsBits.SendMessages,\n   *     PermissionFlagsBits.ManageGuild,\n   *     PermissionFlagsBits.MentionEveryone,\n   *   ],\n   *   scopes: [OAuth2Scopes.Bot],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n  generateInvite(options = {}) {\n    if (typeof options !== 'object') throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options', 'object', true);\n    if (!this.application) throw new DiscordjsError(ErrorCodes.ClientNotReady, 'generate an invite link');\n\n    const { scopes } = options;\n    if (scopes === undefined) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);\n    }\n    if (!Array.isArray(scopes)) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'scopes', 'Array of Invite Scopes', true);\n    }\n    if (!scopes.some(scope => [OAuth2Scopes.Bot, OAuth2Scopes.ApplicationsCommands].includes(scope))) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidMissingScopes);\n    }\n    if (!scopes.includes(OAuth2Scopes.Bot) && options.permissions) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidScopesWithPermissions);\n    }\n    const validScopes = Object.values(OAuth2Scopes);\n    const invalidScope = scopes.find(scope => !validScopes.includes(scope));\n    if (invalidScope) {\n      throw new DiscordjsTypeError(ErrorCodes.InvalidElement, 'Array', 'scopes', invalidScope);\n    }\n\n    const query = makeURLSearchParams({\n      client_id: this.application.id,\n      scope: scopes.join(' '),\n      disable_guild_select: options.disableGuildSelect,\n    });\n\n    if (options.permissions) {\n      const permissions = PermissionsBitField.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions.toString());\n    }\n\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new DiscordjsTypeError(ErrorCodes.InvalidType, 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n\n    return `${this.options.rest.api}${Routes.oauth2Authorization()}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      actions: false,\n      presence: false,\n    });\n  }\n\n  /**\n   * Partially censored client token for debug logging purposes.\n   * @type {?string}\n   * @readonly\n   * @private\n   */\n  get _censoredToken() {\n    if (!this.token) return null;\n\n    return this.token\n      .split('.')\n      .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))\n      .join('.');\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions(options = this.options) {\n    if (options.intents === undefined) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientMissingIntents);\n    } else {\n      options.intents = new IntentsBitField(options.intents).freeze();\n    }\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardCount', 'a number greater than or equal to 1');\n    }\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shards', \"'auto', a number or array of numbers\");\n    }\n    if (options.shards && !options.shards.length) throw new DiscordjsRangeError(ErrorCodes.ClientInvalidProvidedShards);\n    if (typeof options.makeCache !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'makeCache', 'a function');\n    }\n    if (typeof options.sweepers !== 'object' || options.sweepers === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'sweepers', 'an object');\n    }\n    if (!Array.isArray(options.partials)) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'partials', 'an Array');\n    }\n    if (typeof options.waitGuildTimeout !== 'number' || isNaN(options.waitGuildTimeout)) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'waitGuildTimeout', 'a number');\n    }\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'failIfNotExists', 'a boolean');\n    }\n    if (typeof options.enforceNonce !== 'boolean') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'enforceNonce', 'a boolean');\n    }\n    if (\n      (typeof options.allowedMentions !== 'object' && options.allowedMentions !== undefined) ||\n      options.allowedMentions === null\n    ) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'allowedMentions', 'an object');\n    }\n    if (typeof options.presence !== 'object' || options.presence === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'presence', 'an object');\n    }\n    if (typeof options.ws !== 'object' || options.ws === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'ws', 'an object');\n    }\n    if (typeof options.rest !== 'object' || options.rest === null) {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'rest', 'an object');\n    }\n    if (typeof options.jsonTransformer !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'jsonTransformer', 'a function');\n    }\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * @class SnowflakeUtil\n * @classdesc This class is an alias for {@link https://www.npmjs.com/package/@sapphire/snowflake @sapphire/snowflake}'s\n * `DiscordSnowflake` class.\n *\n * Check their documentation\n * {@link https://www.sapphirejs.dev/docs/Documentation/api-utilities/classes/sapphire_snowflake.Snowflake here}\n * ({@link https://www.sapphirejs.dev/docs/Guide/utilities/snowflake guide})\n * to see what you can do.\n * @hideconstructor\n */\n\n/**\n * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n * except the epoch is 2015-01-01T00:00:00.000Z.\n *\n * If we have a snowflake '266241948824764416' we can represent it as binary:\n * ```\n * 64                                          22     17     12          0\n *  000000111011000111100001101001000101000000  00001  00000  000000000000\n *  number of milliseconds since Discord epoch  worker  pid    increment\n * ```\n * @typedef {string} Snowflake\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/docs/packages/collection/stable/Collection:Class}\n */\n\n/**\n * @external ImageURLOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/ImageURLOptions:Interface}\n */\n\n/**\n * @external BaseImageURLOptions\n * @see {@link https://discord.js.org/docs/packages/rest/stable/BaseImageURLOptions:Interface}\n */\n",
    "'use strict';\n\n/**\n * @typedef {Object} ShardEvents\n * @property {string} Death death\n * @property {string} Disconnect disconnect\n * @property {string} Error error\n * @property {string} Message message\n * @property {string} Ready ready\n * @property {string} Reconnecting reconnecting\n * @property {string} Resume resume\n * @property {string} Spawn spawn\n */\n\n// JSDoc for IntelliSense purposes\n/**\n * @type {ShardEvents}\n * @ignore\n */\nmodule.exports = {\n  Death: 'death',\n  Disconnect: 'disconnect',\n  Error: 'error',\n  Message: 'message',\n  Ready: 'ready',\n  Reconnecting: 'reconnecting',\n  Resume: 'resume',\n  Spawn: 'spawn',\n};\n",
    "'use strict';\n\nconst EventEmitter = require('node:events');\nconst path = require('node:path');\nconst process = require('node:process');\nconst { setTimeout, clearTimeout } = require('node:timers');\nconst { setTimeout: sleep } = require('node:timers/promises');\nconst { SHARE_ENV } = require('node:worker_threads');\nconst { DiscordjsError, ErrorCodes } = require('../errors');\nconst ShardEvents = require('../util/ShardEvents');\nconst { makeError, makePlainError } = require('../util/Util');\n\nlet childProcess = null;\nlet Worker = null;\n\n/**\n * A self-contained shard created by the {@link ShardingManager}. Each one has a {@link ChildProcess} that contains\n * an instance of the bot and its {@link Client}. When its child process/worker exits for any reason, the shard will\n * spawn a new one to replace it as necessary.\n * @extends {EventEmitter}\n */\nclass Shard extends EventEmitter {\n  constructor(manager, id) {\n    super();\n\n    switch (manager.mode) {\n      case 'process':\n        childProcess = require('node:child_process');\n        break;\n      case 'worker':\n        Worker = require('node:worker_threads').Worker;\n        break;\n    }\n\n    /**\n     * Manager that created the shard\n     * @type {ShardingManager}\n     */\n    this.manager = manager;\n\n    /**\n     * The shard's id in the manager\n     * @type {number}\n     */\n    this.id = id;\n\n    /**\n     * Whether to pass silent flag to the shard's process (only when {@link ShardingManager#mode} is `process`)\n     * @type {boolean}\n     */\n    this.silent = manager.silent;\n\n    /**\n     * Arguments for the shard's process/worker\n     * @type {string[]}\n     */\n    this.args = manager.shardArgs ?? [];\n\n    /**\n     * Arguments for the shard's process/worker executable\n     * @type {string[]}\n     */\n    this.execArgv = manager.execArgv;\n\n    /**\n     * Environment variables for the shard's process, or workerData for the shard's worker\n     * @type {Object}\n     */\n    this.env = Object.assign({}, process.env, {\n      SHARDING_MANAGER: true,\n      SHARDS: this.id,\n      SHARD_COUNT: this.manager.totalShards,\n      DISCORD_TOKEN: this.manager.token,\n    });\n\n    /**\n     * Whether the shard's {@link Client} is ready\n     * @type {boolean}\n     */\n    this.ready = false;\n\n    /**\n     * Process of the shard (if {@link ShardingManager#mode} is `process`)\n     * @type {?ChildProcess}\n     */\n    this.process = null;\n\n    /**\n     * Worker of the shard (if {@link ShardingManager#mode} is `worker`)\n     * @type {?Worker}\n     */\n    this.worker = null;\n\n    /**\n     * Ongoing promises for calls to {@link Shard#eval}, mapped by the `script` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._evals = new Map();\n\n    /**\n     * Ongoing promises for calls to {@link Shard#fetchClientValue}, mapped by the `prop` they were called with\n     * @type {Map<string, Promise>}\n     * @private\n     */\n    this._fetches = new Map();\n\n    /**\n     * Listener function for the {@link ChildProcess}' `exit` event\n     * @type {Function}\n     * @private\n     */\n    this._exitListener = null;\n  }\n\n  /**\n   * Forks a child process or creates a worker thread for the shard.\n   * <warn>You should not need to call this manually.</warn>\n   * @param {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   * before resolving (`-1` or `Infinity` for no wait)\n   * @returns {Promise<ChildProcess>}\n   */\n  async spawn(timeout = 30_000) {\n    if (this.process) throw new DiscordjsError(ErrorCodes.ShardingProcessExists, this.id);\n    if (this.worker) throw new DiscordjsError(ErrorCodes.ShardingWorkerExists, this.id);\n\n    this._exitListener = this._handleExit.bind(this, undefined, timeout);\n\n    switch (this.manager.mode) {\n      case 'process':\n        this.process = childProcess\n          .fork(path.resolve(this.manager.file), this.args, {\n            env: this.env,\n            execArgv: this.execArgv,\n            silent: this.silent,\n          })\n          .on('message', this._handleMessage.bind(this))\n          .on('exit', this._exitListener);\n        break;\n      case 'worker':\n        this.worker = new Worker(path.resolve(this.manager.file), {\n          workerData: this.env,\n          env: SHARE_ENV,\n          execArgv: this.execArgv,\n          argv: this.args,\n        })\n          .on('message', this._handleMessage.bind(this))\n          .on('exit', this._exitListener);\n        break;\n    }\n\n    this._evals.clear();\n    this._fetches.clear();\n\n    const child = this.process ?? this.worker;\n\n    /**\n     * Emitted upon the creation of the shard's child process/worker.\n     * @event Shard#spawn\n     * @param {ChildProcess|Worker} process Child process/worker that was created\n     */\n    this.emit(ShardEvents.Spawn, child);\n\n    if (timeout === -1 || timeout === Infinity) return child;\n    return new Promise((resolve, reject) => {\n      const cleanup = () => {\n        clearTimeout(spawnTimeoutTimer);\n        this.off('ready', onReady);\n        this.off('disconnect', onDisconnect);\n        this.off('death', onDeath);\n      };\n\n      const onReady = () => {\n        cleanup();\n        resolve(child);\n      };\n\n      const onDisconnect = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyDisconnected, this.id));\n      };\n\n      const onDeath = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyDied, this.id));\n      };\n\n      const onTimeout = () => {\n        cleanup();\n        reject(new DiscordjsError(ErrorCodes.ShardingReadyTimeout, this.id));\n      };\n\n      const spawnTimeoutTimer = setTimeout(onTimeout, timeout);\n      this.once('ready', onReady);\n      this.once('disconnect', onDisconnect);\n      this.once('death', onDeath);\n    });\n  }\n\n  /**\n   * Immediately kills the shard's process/worker and does not restart it.\n   */\n  kill() {\n    if (this.process) {\n      this.process.removeListener('exit', this._exitListener);\n      this.process.kill();\n    } else {\n      this.worker.removeListener('exit', this._exitListener);\n      this.worker.terminate();\n    }\n\n    this._handleExit(false);\n  }\n\n  /**\n   * Options used to respawn a shard.\n   * @typedef {Object} ShardRespawnOptions\n   * @property {number} [delay=500] How long to wait between killing the process/worker and\n   * restarting it (in milliseconds)\n   * @property {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client}\n   * has become ready before resolving (`-1` or `Infinity` for no wait)\n   */\n\n  /**\n   * Kills and restarts the shard's process/worker.\n   * @param {ShardRespawnOptions} [options] Options for respawning the shard\n   * @returns {Promise<ChildProcess>}\n   */\n  async respawn({ delay = 500, timeout = 30_000 } = {}) {\n    this.kill();\n    if (delay > 0) await sleep(delay);\n    return this.spawn(timeout);\n  }\n\n  /**\n   * Sends a message to the shard's process/worker.\n   * @param {*} message Message to send to the shard\n   * @returns {Promise<Shard>}\n   */\n  send(message) {\n    return new Promise((resolve, reject) => {\n      if (this.process) {\n        this.process.send(message, err => {\n          if (err) reject(err);\n          else resolve(this);\n        });\n      } else {\n        this.worker.postMessage(message);\n        resolve(this);\n      }\n    });\n  }\n\n  /**\n   * Fetches a client property value of the shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @returns {Promise<*>}\n   * @example\n   * shard.fetchClientValue('guilds.cache.size')\n   *   .then(count => console.log(`${count} guilds in shard ${shard.id}`))\n   *   .catch(console.error);\n   */\n  async fetchClientValue(prop) {\n    // Shard is dead (maybe respawning), don't cache anything and error immediately\n    if (!this.process && !this.worker) {\n      throw new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id);\n    }\n\n    // Cached promise from previous call\n    if (this._fetches.has(prop)) return this._fetches.get(prop);\n\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process ?? this.worker;\n\n      const listener = message => {\n        if (message?._fetchProp !== prop) return;\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._fetches.delete(prop);\n        if (!message._error) resolve(message._result);\n        else reject(makeError(message._error));\n      };\n\n      this.incrementMaxListeners(child);\n      child.on('message', listener);\n\n      this.send({ _fetchProp: prop }).catch(err => {\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._fetches.delete(prop);\n        reject(err);\n      });\n    });\n\n    this._fetches.set(prop, promise);\n    return promise;\n  }\n\n  /**\n   * Evaluates a script or function on the shard, in the context of the {@link Client}.\n   * @param {string|Function} script JavaScript to run on the shard\n   * @param {*} [context] The context for the eval\n   * @returns {Promise<*>} Result of the script execution\n   */\n  async eval(script, context) {\n    // Stringify the script if it's a Function\n    const _eval = typeof script === 'function' ? `(${script})(this, ${JSON.stringify(context)})` : script;\n\n    // Shard is dead (maybe respawning), don't cache anything and error immediately\n    if (!this.process && !this.worker) {\n      throw new DiscordjsError(ErrorCodes.ShardingNoChildExists, this.id);\n    }\n\n    // Cached promise from previous call\n    if (this._evals.has(_eval)) return this._evals.get(_eval);\n\n    const promise = new Promise((resolve, reject) => {\n      const child = this.process ?? this.worker;\n\n      const listener = message => {\n        if (message?._eval !== _eval) return;\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._evals.delete(_eval);\n        if (!message._error) resolve(message._result);\n        else reject(makeError(message._error));\n      };\n\n      this.incrementMaxListeners(child);\n      child.on('message', listener);\n\n      this.send({ _eval }).catch(err => {\n        child.removeListener('message', listener);\n        this.decrementMaxListeners(child);\n        this._evals.delete(_eval);\n        reject(err);\n      });\n    });\n\n    this._evals.set(_eval, promise);\n    return promise;\n  }\n\n  /**\n   * Handles a message received from the child process/worker.\n   * @param {*} message Message received\n   * @private\n   */\n  _handleMessage(message) {\n    if (message) {\n      // Shard is ready\n      if (message._ready) {\n        this.ready = true;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardReady} event.\n         * @event Shard#ready\n         */\n        this.emit(ShardEvents.Ready);\n        return;\n      }\n\n      // Shard has disconnected\n      if (message._disconnect) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardDisconnect} event.\n         * @event Shard#disconnect\n         */\n        this.emit(ShardEvents.Disconnect);\n        return;\n      }\n\n      // Shard is attempting to reconnect\n      if (message._reconnecting) {\n        this.ready = false;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardReconnecting} event.\n         * @event Shard#reconnecting\n         */\n        this.emit(ShardEvents.Reconnecting);\n        return;\n      }\n\n      // Shard has resumed\n      if (message._resume) {\n        this.ready = true;\n        /**\n         * Emitted upon the shard's {@link Client#event:shardResume} event.\n         * @event Shard#resume\n         */\n        this.emit(ShardEvents.Resume);\n        return;\n      }\n\n      // Shard is requesting a property fetch\n      if (message._sFetchProp) {\n        const resp = { _sFetchProp: message._sFetchProp, _sFetchPropShard: message._sFetchPropShard };\n        this.manager.fetchClientValues(message._sFetchProp, message._sFetchPropShard).then(\n          results => this.send({ ...resp, _result: results }),\n          err => this.send({ ...resp, _error: makePlainError(err) }),\n        );\n        return;\n      }\n\n      // Shard is requesting an eval broadcast\n      if (message._sEval) {\n        const resp = { _sEval: message._sEval, _sEvalShard: message._sEvalShard };\n        this.manager._performOnShards('eval', [message._sEval], message._sEvalShard).then(\n          results => this.send({ ...resp, _result: results }),\n          err => this.send({ ...resp, _error: makePlainError(err) }),\n        );\n        return;\n      }\n\n      // Shard is requesting a respawn of all shards\n      if (message._sRespawnAll) {\n        const { shardDelay, respawnDelay, timeout } = message._sRespawnAll;\n        this.manager.respawnAll({ shardDelay, respawnDelay, timeout }).catch(() => {\n          // Do nothing\n        });\n        return;\n      }\n    }\n\n    /**\n     * Emitted upon receiving a message from the child process/worker.\n     * @event Shard#message\n     * @param {*} message Message that was received\n     */\n    this.emit(ShardEvents.Message, message);\n  }\n\n  /**\n   * Handles the shard's process/worker exiting.\n   * @param {boolean} [respawn=this.manager.respawn] Whether to spawn the shard again\n   * @param {number} [timeout] The amount in milliseconds to wait until the {@link Client}\n   * has become ready (`-1` or `Infinity` for no wait)\n   * @private\n   */\n  _handleExit(respawn = this.manager.respawn, timeout) {\n    /**\n     * Emitted upon the shard's child process/worker exiting.\n     * @event Shard#death\n     * @param {ChildProcess|Worker} process Child process/worker that exited\n     */\n    this.emit(ShardEvents.Death, this.process ?? this.worker);\n\n    this.ready = false;\n    this.process = null;\n    this.worker = null;\n    this._evals.clear();\n    this._fetches.clear();\n\n    if (respawn) this.spawn(timeout).catch(err => this.emit(ShardEvents.Error, err));\n  }\n\n  /**\n   * Increments max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  incrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners + 1);\n    }\n  }\n\n  /**\n   * Decrements max listeners by one for a given emitter, if they are not zero.\n   * @param {EventEmitter|process} emitter The emitter that emits the events.\n   * @private\n   */\n  decrementMaxListeners(emitter) {\n    const maxListeners = emitter.getMaxListeners();\n    if (maxListeners !== 0) {\n      emitter.setMaxListeners(maxListeners - 1);\n    }\n  }\n}\n\nmodule.exports = Shard;\n",
    "'use strict';\n\nconst EventEmitter = require('node:events');\nconst fs = require('node:fs');\nconst path = require('node:path');\nconst process = require('node:process');\nconst { setTimeout: sleep } = require('node:timers/promises');\nconst { Collection } = require('@discordjs/collection');\nconst Shard = require('./Shard');\nconst { DiscordjsError, DiscordjsTypeError, DiscordjsRangeError, ErrorCodes } = require('../errors');\nconst { fetchRecommendedShardCount } = require('../util/Util');\n\n/**\n * This is a utility class that makes multi-process sharding of a bot an easy and painless experience.\n * It works by spawning a self-contained {@link ChildProcess} or {@link Worker} for each individual shard, each\n * containing its own instance of your bot's {@link Client}. They all have a line of communication with the master\n * process, and there are several useful methods that utilize it in order to simplify tasks that are normally difficult\n * with sharding. It can spawn a specific number of shards or the amount that Discord suggests for the bot, and takes a\n * path to your main bot script to launch for each one.\n * @extends {EventEmitter}\n */\nclass ShardingManager extends EventEmitter {\n  /**\n   * The mode to spawn shards with for a {@link ShardingManager}. Can be either one of:\n   * * 'process' to use child processes\n   * * 'worker' to use {@link Worker} threads\n   * @typedef {string} ShardingManagerMode\n   */\n\n  /**\n   * The options to spawn shards with for a {@link ShardingManager}.\n   * @typedef {Object} ShardingManagerOptions\n   * @property {string|number} [totalShards='auto'] Number of total shards of all shard managers or \"auto\"\n   * @property {string|number[]} [shardList='auto'] List of shards to spawn or \"auto\"\n   * @property {ShardingManagerMode} [mode='process'] Which mode to use for shards\n   * @property {boolean} [respawn=true] Whether shards should automatically respawn upon exiting\n   * @property {boolean} [silent=false] Whether to pass the silent flag to child process\n   * (only available when mode is set to 'process')\n   * @property {string[]} [shardArgs=[]] Arguments to pass to the shard script when spawning\n   * @property {string[]} [execArgv=[]] Arguments to pass to the shard script executable when spawning\n   * @property {string} [token] Token to use for automatic shard count and passing to shards\n   */\n\n  /**\n   * @param {string} file Path to your shard script file\n   * @param {ShardingManagerOptions} [options] Options for the sharding manager\n   */\n  constructor(file, options) {\n    super();\n    const _options = {\n      totalShards: 'auto',\n      mode: 'process',\n      respawn: true,\n      silent: false,\n      shardArgs: [],\n      execArgv: [],\n      token: process.env.DISCORD_TOKEN,\n      ...options,\n    };\n\n    /**\n     * Path to the shard script file\n     * @type {string}\n     */\n    this.file = file;\n    if (!file) throw new DiscordjsError(ErrorCodes.ClientInvalidOption, 'File', 'specified.');\n    if (!path.isAbsolute(file)) this.file = path.resolve(process.cwd(), file);\n    const stats = fs.statSync(this.file);\n    if (!stats.isFile()) throw new DiscordjsError(ErrorCodes.ClientInvalidOption, 'File', 'a file');\n\n    /**\n     * List of shards this sharding manager spawns\n     * @type {string|number[]}\n     */\n    this.shardList = _options.shardList ?? 'auto';\n    if (this.shardList !== 'auto') {\n      if (!Array.isArray(this.shardList)) {\n        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardList', 'an array.');\n      }\n      this.shardList = [...new Set(this.shardList)];\n      if (this.shardList.length < 1) {\n        throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'shardList', 'at least 1 id.');\n      }\n      if (\n        this.shardList.some(\n          shardId => typeof shardId !== 'number' || isNaN(shardId) || !Number.isInteger(shardId) || shardId < 0,\n        )\n      ) {\n        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'shardList', 'an array of positive integers.');\n      }\n    }\n\n    /**\n     * Amount of shards that all sharding managers spawn in total\n     * @type {number}\n     */\n    this.totalShards = _options.totalShards || 'auto';\n    if (this.totalShards !== 'auto') {\n      if (typeof this.totalShards !== 'number' || isNaN(this.totalShards)) {\n        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'a number.');\n      }\n      if (this.totalShards < 1) {\n        throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'at least 1.');\n      }\n      if (!Number.isInteger(this.totalShards)) {\n        throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'an integer.');\n      }\n    }\n\n    /**\n     * Mode for shards to spawn with\n     * @type {ShardingManagerMode}\n     */\n    this.mode = _options.mode;\n    if (this.mode !== 'process' && this.mode !== 'worker') {\n      throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Sharding mode', '\"process\" or \"worker\"');\n    }\n\n    /**\n     * Whether shards should automatically respawn upon exiting\n     * @type {boolean}\n     */\n    this.respawn = _options.respawn;\n\n    /**\n     * Whether to pass the silent flag to child process (only when {@link ShardingManager#mode} is `process`)\n     * @type {boolean}\n     */\n    this.silent = _options.silent;\n\n    /**\n     * An array of arguments to pass to shards (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.shardArgs = _options.shardArgs;\n\n    /**\n     * An array of arguments to pass to the executable (only when {@link ShardingManager#mode} is `process`)\n     * @type {string[]}\n     */\n    this.execArgv = _options.execArgv;\n\n    /**\n     * Token to use for obtaining the automatic shard count, and passing to shards\n     * @type {?string}\n     */\n    this.token = _options.token?.replace(/^Bot\\s*/i, '') ?? null;\n\n    /**\n     * A collection of shards that this manager has spawned\n     * @type {Collection<number, Shard>}\n     */\n    this.shards = new Collection();\n\n    process.env.SHARDING_MANAGER = true;\n    process.env.SHARDING_MANAGER_MODE = this.mode;\n    process.env.DISCORD_TOKEN = this.token;\n  }\n\n  /**\n   * Creates a single shard.\n   * <warn>Using this method is usually not necessary if you use the spawn method.</warn>\n   * @param {number} [id=this.shards.size] Id of the shard to create\n   * <info>This is usually not necessary to manually specify.</info>\n   * @returns {Shard} Note that the created shard needs to be explicitly spawned using its spawn method.\n   */\n  createShard(id = this.shards.size) {\n    const shard = new Shard(this, id);\n    this.shards.set(id, shard);\n    /**\n     * Emitted upon creating a shard.\n     * @event ShardingManager#shardCreate\n     * @param {Shard} shard Shard that was created\n     */\n    this.emit('shardCreate', shard);\n    return shard;\n  }\n\n  /**\n   * Options used to spawn multiple shards.\n   * @typedef {Object} MultipleShardSpawnOptions\n   * @property {number|string} [amount=this.totalShards] Number of shards to spawn\n   * @property {number} [delay=5500] How long to wait in between spawning each shard (in milliseconds)\n   * @property {number} [timeout=30000] The amount in milliseconds to wait until the {@link Client} has become ready\n   */\n\n  /**\n   * Spawns multiple shards.\n   * @param {MultipleShardSpawnOptions} [options] Options for spawning shards\n   * @returns {Promise<Collection<number, Shard>>}\n   */\n  async spawn({ amount = this.totalShards, delay = 5500, timeout = 30_000 } = {}) {\n    // Obtain/verify the number of shards to spawn\n    if (amount === 'auto') {\n      amount = await fetchRecommendedShardCount(this.token);\n    } else {\n      if (typeof amount !== 'number' || isNaN(amount)) {\n        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'a number.');\n      }\n      if (amount < 1) throw new DiscordjsRangeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'at least 1.');\n      if (!Number.isInteger(amount)) {\n        throw new DiscordjsTypeError(ErrorCodes.ClientInvalidOption, 'Amount of shards', 'an integer.');\n      }\n    }\n\n    // Make sure this many shards haven't already been spawned\n    if (this.shards.size >= amount) throw new DiscordjsError(ErrorCodes.ShardingAlreadySpawned, this.shards.size);\n    if (this.shardList === 'auto' || this.totalShards === 'auto' || this.totalShards !== amount) {\n      this.shardList = [...Array(amount).keys()];\n    }\n    if (this.totalShards === 'auto' || this.totalShards !== amount) {\n      this.totalShards = amount;\n    }\n\n    if (this.shardList.some(shardId => shardId >= amount)) {\n      throw new DiscordjsRangeError(\n        ErrorCodes.ClientInvalidOption,\n        'Amount of shards',\n        'bigger than the highest shardId in the shardList option.',\n      );\n    }\n\n    // Spawn the shards\n    for (const shardId of this.shardList) {\n      const promises = [];\n      const shard = this.createShard(shardId);\n      promises.push(shard.spawn(timeout));\n      if (delay > 0 && this.shards.size !== this.shardList.length) promises.push(sleep(delay));\n      await Promise.all(promises); // eslint-disable-line no-await-in-loop\n    }\n\n    return this.shards;\n  }\n\n  /**\n   * Sends a message to all shards.\n   * @param {*} message Message to be sent to the shards\n   * @returns {Promise<Shard[]>}\n   */\n  broadcast(message) {\n    const promises = [];\n    for (const shard of this.shards.values()) promises.push(shard.send(message));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Options for {@link ShardingManager#broadcastEval} and {@link ShardClientUtil#broadcastEval}.\n   * @typedef {Object} BroadcastEvalOptions\n   * @property {number} [shard] Shard to run script on, all if undefined\n   * @property {*} [context] The JSON-serializable values to call the script with\n   */\n\n  /**\n   * Evaluates a script on all shards, or a given shard, in the context of the {@link Client}s.\n   * @param {Function} script JavaScript to run on each shard\n   * @param {BroadcastEvalOptions} [options={}] The options for the broadcast\n   * @returns {Promise<*|Array<*>>} Results of the script execution\n   */\n  async broadcastEval(script, options = {}) {\n    if (typeof script !== 'function') {\n      throw new DiscordjsTypeError(ErrorCodes.ShardingInvalidEvalBroadcast);\n    }\n    return this._performOnShards('eval', [`(${script})(this, ${JSON.stringify(options.context)})`], options.shard);\n  }\n\n  /**\n   * Fetches a client property value of each shard, or a given shard.\n   * @param {string} prop Name of the client property to get, using periods for nesting\n   * @param {number} [shard] Shard to fetch property from, all if undefined\n   * @returns {Promise<*|Array<*>>}\n   * @example\n   * manager.fetchClientValues('guilds.cache.size')\n   *   .then(results => console.log(`${results.reduce((prev, val) => prev + val, 0)} total guilds`))\n   *   .catch(console.error);\n   */\n  fetchClientValues(prop, shard) {\n    return this._performOnShards('fetchClientValue', [prop], shard);\n  }\n\n  /**\n   * Runs a method with given arguments on all shards, or a given shard.\n   * @param {string} method Method name to run on each shard\n   * @param {Array<*>} args Arguments to pass through to the method call\n   * @param {number} [shard] Shard to run on, all if undefined\n   * @returns {Promise<*|Array<*>>} Results of the method execution\n   * @private\n   */\n  async _performOnShards(method, args, shard) {\n    if (this.shards.size === 0) throw new DiscordjsError(ErrorCodes.ShardingNoShards);\n\n    if (typeof shard === 'number') {\n      if (this.shards.has(shard)) return this.shards.get(shard)[method](...args);\n      throw new DiscordjsError(ErrorCodes.ShardingShardNotFound, shard);\n    }\n\n    if (this.shards.size !== this.shardList.length) {\n      throw new DiscordjsError(ErrorCodes.ShardingInProcess);\n    }\n\n    const promises = [];\n    for (const sh of this.shards.values()) promises.push(sh[method](...args));\n    return Promise.all(promises);\n  }\n\n  /**\n   * Options used to respawn all shards.\n   * @typedef {Object} MultipleShardRespawnOptions\n   * @property {number} [shardDelay=5000] How long to wait between shards (in milliseconds)\n   * @property {number} [respawnDelay=500] How long to wait between killing a shard's process and restarting it\n   * (in milliseconds)\n   * @property {number} [timeout=30000] The amount in milliseconds to wait for a shard to become ready before\n   * continuing to another (`-1` or `Infinity` for no wait)\n   */\n\n  /**\n   * Kills all running shards and respawns them.\n   * @param {MultipleShardRespawnOptions} [options] Options for respawning shards\n   * @returns {Promise<Collection<number, Shard>>}\n   */\n  async respawnAll({ shardDelay = 5_000, respawnDelay = 500, timeout = 30_000 } = {}) {\n    let s = 0;\n    for (const shard of this.shards.values()) {\n      const promises = [shard.respawn({ delay: respawnDelay, timeout })];\n      if (++s < this.shards.size && shardDelay > 0) promises.push(sleep(shardDelay));\n      await Promise.all(promises); // eslint-disable-line no-await-in-loop\n    }\n    return this.shards;\n  }\n}\n\nmodule.exports = ShardingManager;\n",
    "'use strict';\n\nconst { deprecate } = require('node:util');\nconst {\n  blockQuote,\n  bold,\n  channelMention,\n  codeBlock,\n  formatEmoji,\n  hideLinkEmbed,\n  hyperlink,\n  inlineCode,\n  italic,\n  quote,\n  roleMention,\n  spoiler,\n  strikethrough,\n  time,\n  TimestampStyles,\n  underscore,\n  userMention,\n} = require('@discordjs/formatters');\n\n/**\n * Formats an application command name and id into an application command mention.\n * @method chatInputApplicationCommandMention\n * @param {string} commandName The name of the application command\n * @param {string|Snowflake} subcommandGroupOrSubOrId\n * The subcommand group name, subcommand name, or application command id\n * @param {string|Snowflake} [subcommandNameOrId] The subcommand name or application command id\n * @param {string} [commandId] The id of the application command\n * @returns {string}\n */\n\n/**\n * Wraps the content inside a code block with an optional language.\n * @method codeBlock\n * @param {string} contentOrLanguage The language to use or content if a second parameter isn't provided\n * @param {string} [content] The content to wrap\n * @returns {string}\n */\n\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code.\n * @method inlineCode\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content into italic text.\n * @method italic\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content into bold text.\n * @method bold\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content into underscored text.\n * @method underscore\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content into strike-through text.\n * @method strikethrough\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content into a quote.\n * <info>This needs to be at the start of the line for Discord to format it.</info>\n * @method quote\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content into a block quote.\n * <info>This needs to be at the start of the line for Discord to format it.</info>\n * @method blockQuote\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding.\n * @method hideLinkEmbed\n * @param {string} content The content to wrap\n * @returns {string}\n */\n\n/**\n * Formats the content and the URL into a masked URL with an optional title.\n * @method hyperlink\n * @param {string} content The content to display\n * @param {string} url The URL the content links to\n * @param {string} [title] The title shown when hovering on the masked link\n * @returns {string}\n */\n\n/**\n * Formats the content into spoiler text.\n * @method spoiler\n * @param {string} content The content to spoiler\n * @returns {string}\n */\n\n/**\n * Formats a user id into a user mention.\n * @method userMention\n * @param {Snowflake} userId The user id to format\n * @returns {string}\n */\n\n/**\n * Formats a channel id into a channel mention.\n * @method channelMention\n * @param {Snowflake} channelId The channel id to format\n * @returns {string}\n */\n\n/**\n * Formats a role id into a role mention.\n * @method roleMention\n * @param {Snowflake} roleId The role id to format\n * @returns {string}\n */\n\n/**\n * Formats an emoji id into a fully qualified emoji identifier.\n * @method formatEmoji\n * @param {Snowflake} emojiId The emoji id to format\n * @param {boolean} [animated=false] Whether the emoji is animated\n * @returns {string}\n */\n\n/**\n * Formats a channel link for a channel.\n * @method channelLink\n * @param {Snowflake} channelId The id of the channel\n * @param {Snowflake} [guildId] The id of the guild\n * @returns {string}\n */\n\n/**\n * Formats a message link for a channel.\n * @method messageLink\n * @param {Snowflake} channelId The id of the channel\n * @param {Snowflake} messageId The id of the message\n * @param {Snowflake} [guildId] The id of the guild\n * @returns {string}\n */\n\n/**\n * A message formatting timestamp style, as defined in\n * [here](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles).\n * * `t` Short time format, consisting of hours and minutes, e.g. 16:20.\n * * `T` Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.\n * * `d` Short date format, consisting of day, month, and year, e.g. 20/04/2021.\n * * `D` Long date format, consisting of day, month, and year, e.g. 20 April 2021.\n * * `f` Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.\n * * `F` Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.\n * * `R` Relative time format, consisting of a relative duration format, e.g. 2 months ago.\n * @typedef {string} TimestampStylesString\n */\n\n/**\n * Formats a date into a short date-time string.\n * @method time\n * @param {number|Date} [date] The date to format\n * @param {TimestampStylesString} [style] The style to use\n * @returns {string}\n */\n\n/**\n * Contains various Discord-specific functions for formatting messages.\n * @deprecated This class is redundant as all methods of the class can be imported from discord.js directly.\n */\nclass Formatters extends null {\n  /**\n   * Formats the content into a block quote.\n   * <info>This needs to be at the start of the line for Discord to format it.</info>\n   * @method blockQuote\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static blockQuote = deprecate(\n    blockQuote,\n    'Formatters.blockQuote() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats the content into bold text.\n   * @method bold\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static bold = deprecate(\n    bold,\n    'Formatters.bold() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats a channel id into a channel mention.\n   * @method channelMention\n   * @memberof Formatters\n   * @param {Snowflake} channelId The channel id to format\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static channelMention = deprecate(\n    channelMention,\n    'Formatters.channelMention() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Wraps the content inside a code block with an optional language.\n   * @method codeBlock\n   * @memberof Formatters\n   * @param {string} contentOrLanguage The language to use or content if a second parameter isn't provided\n   * @param {string} [content] The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static codeBlock = deprecate(\n    codeBlock,\n    'Formatters.codeBlock() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats an emoji id into a fully qualified emoji identifier.\n   * @method formatEmoji\n   * @memberof Formatters\n   * @param {string} emojiId The emoji id to format\n   * @param {boolean} [animated=false] Whether the emoji is animated\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static formatEmoji = deprecate(\n    formatEmoji,\n    'Formatters.formatEmoji() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Wraps the URL into `<>`, which stops it from embedding.\n   * @method hideLinkEmbed\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static hideLinkEmbed = deprecate(\n    hideLinkEmbed,\n    'Formatters.hideLinkEmbed() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats the content and the URL into a masked URL with an optional title.\n   * @method hyperlink\n   * @memberof Formatters\n   * @param {string} content The content to display\n   * @param {string} url The URL the content links to\n   * @param {string} [title] The title shown when hovering on the masked link\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static hyperlink = deprecate(\n    hyperlink,\n    'Formatters.hyperlink() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Wraps the content inside \\`backticks\\`, which formats it as inline code.\n   * @method inlineCode\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static inlineCode = deprecate(\n    inlineCode,\n    'Formatters.inlineCode() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats the content into italic text.\n   * @method italic\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static italic = deprecate(\n    italic,\n    'Formatters.italic() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.\n   * @method quote\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static quote = deprecate(\n    quote,\n    'Formatters.quote() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats a role id into a role mention.\n   * @method roleMention\n   * @memberof Formatters\n   * @param {Snowflake} roleId The role id to format\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static roleMention = deprecate(\n    roleMention,\n    'Formatters.roleMention() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats the content into spoiler text.\n   * @method spoiler\n   * @memberof Formatters\n   * @param {string} content The content to spoiler\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static spoiler = deprecate(\n    spoiler,\n    'Formatters.spoiler() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats the content into strike-through text.\n   * @method strikethrough\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static strikethrough = deprecate(\n    strikethrough,\n    'Formatters.strikethrough() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats a date into a short date-time string.\n   * @method time\n   * @memberof Formatters\n   * @param {number|Date} [date] The date to format\n   * @param {TimestampStylesString} [style] The style to use\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static time = deprecate(\n    time,\n    'Formatters.time() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * The message formatting timestamp\n   * [styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.\n   * @type {Object<string, TimestampStylesString>}\n   * @memberof Formatters\n   * @deprecated Import this property directly from discord.js instead.\n   */\n  static TimestampStyles = TimestampStyles;\n\n  /**\n   * Formats the content into underscored text.\n   * @method underscore\n   * @memberof Formatters\n   * @param {string} content The content to wrap\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static underscore = deprecate(\n    underscore,\n    'Formatters.underscore() is deprecated. Import this method directly from discord.js instead.',\n  );\n\n  /**\n   * Formats a user id into a user mention.\n   * @method userMention\n   * @memberof Formatters\n   * @param {Snowflake} userId The user id to format\n   * @returns {string}\n   * @deprecated Import this method directly from discord.js instead.\n   */\n  static userMention = deprecate(\n    userMention,\n    'Formatters.userMention() is deprecated. Import this method directly from discord.js instead.',\n  );\n}\n\nmodule.exports = Formatters;\n",
    "'use strict';\n\nconst { EmbedBuilder: BuildersEmbed, embedLength } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\nconst { resolveColor } = require('../util/Util');\n\n/**\n * Represents an embed builder.\n * @extends {BuildersEmbed}\n */\nclass EmbedBuilder extends BuildersEmbed {\n  constructor(data) {\n    super(toSnakeCase(data));\n  }\n\n  /**\n   * Sets the color of this embed\n   * @param {?ColorResolvable} color The color of the embed\n   * @returns {EmbedBuilder}\n   */\n  setColor(color) {\n    return super.setColor(color && resolveColor(color));\n  }\n\n  /**\n   * Creates a new embed builder from JSON data\n   * @param {EmbedBuilder|Embed|APIEmbed} other The other data\n   * @returns {EmbedBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n\n  /**\n   * The accumulated length for the embed title, description, fields, footer text, and author name.\n   * @type {number}\n   * @readonly\n   */\n  get length() {\n    return embedLength(this.data);\n  }\n}\n\nmodule.exports = EmbedBuilder;\n\n/**\n * @external BuildersEmbed\n * @see {@link https://discord.js.org/docs/packages/builders/stable/EmbedBuilder:Class}\n */\n",
    "'use strict';\n\nconst { basename, flatten } = require('../util/Util');\n\n/**\n * Represents an attachment builder\n */\nclass AttachmentBuilder {\n  /**\n   * @param {BufferResolvable|Stream} attachment The file\n   * @param {AttachmentData} [data] Extra data\n   */\n  constructor(attachment, data = {}) {\n    /**\n     * The file associated with this attachment.\n     * @type {BufferResolvable|Stream}\n     */\n    this.attachment = attachment;\n    /**\n     * The name of this attachment\n     * @type {?string}\n     */\n    this.name = data.name;\n    /**\n     * The description of the attachment\n     * @type {?string}\n     */\n    this.description = data.description;\n  }\n\n  /**\n   * Sets the description of this attachment.\n   * @param {string} description The description of the file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setDescription(description) {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Sets the file of this attachment.\n   * @param {BufferResolvable|Stream} attachment The file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setFile(attachment) {\n    this.attachment = attachment;\n    return this;\n  }\n\n  /**\n   * Sets the name of this attachment.\n   * @param {string} name The name of the file\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setName(name) {\n    this.name = name;\n    return this;\n  }\n\n  /**\n   * Sets whether this attachment is a spoiler\n   * @param {boolean} [spoiler=true] Whether the attachment should be marked as a spoiler\n   * @returns {AttachmentBuilder} This attachment\n   */\n  setSpoiler(spoiler = true) {\n    if (spoiler === this.spoiler) return this;\n\n    if (!spoiler) {\n      while (this.spoiler) {\n        this.name = this.name.slice('SPOILER_'.length);\n      }\n      return this;\n    }\n    this.name = `SPOILER_${this.name}`;\n    return this;\n  }\n\n  /**\n   * Whether or not this attachment has been marked as a spoiler\n   * @type {boolean}\n   * @readonly\n   */\n  get spoiler() {\n    return basename(this.name).startsWith('SPOILER_');\n  }\n\n  toJSON() {\n    return flatten(this);\n  }\n\n  /**\n   * Makes a new builder instance from a preexisting attachment structure.\n   * @param {AttachmentBuilder|Attachment|AttachmentPayload} other The builder to construct a new instance from\n   * @returns {AttachmentBuilder}\n   */\n  static from(other) {\n    return new AttachmentBuilder(other.attachment, {\n      name: other.name,\n      description: other.description,\n    });\n  }\n}\n\nmodule.exports = AttachmentBuilder;\n\n/**\n * @typedef {Object} AttachmentData\n * @property {string} [name] The name of the attachment\n * @property {string} [description] The description of the attachment\n */\n",
    "'use strict';\n\nconst { ModalBuilder: BuildersModal, ComponentBuilder } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\n\n/**\n * Represents a modal builder.\n * @extends {BuildersModal}\n */\nclass ModalBuilder extends BuildersModal {\n  constructor({ components, ...data } = {}) {\n    super({\n      ...toSnakeCase(data),\n      components: components?.map(component =>\n        component instanceof ComponentBuilder ? component : toSnakeCase(component),\n      ),\n    });\n  }\n\n  /**\n   * Creates a new modal builder from JSON data\n   * @param {ModalBuilder|APIModalComponent} other The other data\n   * @returns {ModalBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = ModalBuilder;\n\n/**\n * @external BuildersModal\n * @see {@link https://discord.js.org/docs/packages/builders/stable/ModalBuilder:Class}\n */\n",
    "'use strict';\n\nconst process = require('node:process');\nconst StringSelectMenuBuilder = require('./StringSelectMenuBuilder');\n\nlet deprecationEmitted = false;\n\n/**\n * @deprecated Use {@link StringSelectMenuBuilder} instead.\n * @extends {StringSelectMenuBuilder}\n */\nclass SelectMenuBuilder extends StringSelectMenuBuilder {\n  constructor(...params) {\n    super(...params);\n\n    if (!deprecationEmitted) {\n      process.emitWarning(\n        'The SelectMenuBuilder class is deprecated. Use StringSelectMenuBuilder instead.',\n        'DeprecationWarning',\n      );\n      deprecationEmitted = true;\n    }\n  }\n}\n\nmodule.exports = SelectMenuBuilder;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst StringSelectMenuComponent = require('./StringSelectMenuComponent');\n\nlet deprecationEmitted = false;\n\n/**\n * @deprecated Use {@link StringSelectMenuComponent} instead.\n * @extends {StringSelectMenuComponent}\n */\nclass SelectMenuComponent extends StringSelectMenuComponent {\n  constructor(...params) {\n    super(...params);\n\n    if (!deprecationEmitted) {\n      process.emitWarning(\n        'The SelectMenuComponent class is deprecated. Use StringSelectMenuComponent instead.',\n        'DeprecationWarning',\n      );\n      deprecationEmitted = true;\n    }\n  }\n}\n\nmodule.exports = SelectMenuComponent;\n",
    "'use strict';\n\nconst process = require('node:process');\nconst StringSelectMenuInteraction = require('./StringSelectMenuInteraction');\n\nlet deprecationEmitted = false;\n\n/**\n * @deprecated Use {@link StringSelectMenuInteraction} instead.\n * @extends {StringSelectMenuInteraction}\n */\nclass SelectMenuInteraction extends StringSelectMenuInteraction {\n  constructor(...params) {\n    super(...params);\n\n    if (!deprecationEmitted) {\n      process.emitWarning(\n        'The SelectMenuInteraction class is deprecated. Use StringSelectMenuInteraction instead.',\n        'DeprecationWarning',\n      );\n      deprecationEmitted = true;\n    }\n  }\n}\n\nmodule.exports = SelectMenuInteraction;\n",
    "'use strict';\n\nconst { SelectMenuOptionBuilder: BuildersSelectMenuOption } = require('@discordjs/builders');\nconst { isJSONEncodable } = require('@discordjs/util');\nconst { toSnakeCase } = require('../util/Transformers');\nconst { resolvePartialEmoji } = require('../util/Util');\n\n/**\n * Represents a select menu option builder.\n * @extends {BuildersSelectMenuOption}\n */\nclass StringSelectMenuOptionBuilder extends BuildersSelectMenuOption {\n  constructor({ emoji, ...data } = {}) {\n    super(\n      toSnakeCase({\n        ...data,\n        emoji: emoji && typeof emoji === 'string' ? resolvePartialEmoji(emoji) : emoji,\n      }),\n    );\n  }\n\n  /**\n   * Sets the emoji to display on this option\n   * @param {ComponentEmojiResolvable} emoji The emoji to display on this option\n   * @returns {StringSelectMenuOptionBuilder}\n   */\n  setEmoji(emoji) {\n    if (typeof emoji === 'string') {\n      return super.setEmoji(resolvePartialEmoji(emoji));\n    }\n    return super.setEmoji(emoji);\n  }\n\n  /**\n   * Creates a new select menu option builder from JSON data\n   * @param {StringSelectMenuOptionBuilder|APISelectMenuOption} other The other data\n   * @returns {StringSelectMenuOptionBuilder}\n   */\n  static from(other) {\n    return new this(isJSONEncodable(other) ? other.toJSON() : other);\n  }\n}\n\nmodule.exports = StringSelectMenuOptionBuilder;\n\n/**\n * @external BuildersSelectMenuOption\n * @see {@link https://discord.js.org/docs/packages/builders/stable/StringSelectMenuOptionBuilder:Class}\n */\n",
    "'use strict';\n\nconst process = require('node:process');\nconst StringSelectMenuOptionBuilder = require('./StringSelectMenuOptionBuilder');\n\nlet deprecationEmitted = false;\n\n/**\n * @deprecated Use {@link StringSelectMenuOptionBuilder} instead.\n * @extends {StringSelectMenuOptionBuilder}\n */\nclass SelectMenuOptionBuilder extends StringSelectMenuOptionBuilder {\n  constructor(...params) {\n    super(...params);\n\n    if (!deprecationEmitted) {\n      process.emitWarning(\n        'The SelectMenuOptionBuilder class is deprecated. Use StringSelectMenuOptionBuilder instead.',\n        'DeprecationWarning',\n      );\n      deprecationEmitted = true;\n    }\n  }\n}\n\nmodule.exports = SelectMenuOptionBuilder;\n",
    "'use strict';\n\nconst { polyfillDispose } = require('@discordjs/util');\nconst { __exportStar } = require('tslib');\n\npolyfillDispose();\n\n// \"Root\" classes (starting points)\nexports.BaseClient = require('./client/BaseClient');\nexports.Client = require('./client/Client');\nexports.Shard = require('./sharding/Shard');\nexports.ShardClientUtil = require('./sharding/ShardClientUtil');\nexports.ShardingManager = require('./sharding/ShardingManager');\nexports.WebhookClient = require('./client/WebhookClient');\n\n// Errors\nexports.DiscordjsError = require('./errors/DJSError').DiscordjsError;\nexports.DiscordjsTypeError = require('./errors/DJSError').DiscordjsTypeError;\nexports.DiscordjsRangeError = require('./errors/DJSError').DiscordjsRangeError;\nexports.DiscordjsErrorCodes = require('./errors/ErrorCodes');\n\n// Utilities\nexports.ActivityFlagsBitField = require('./util/ActivityFlagsBitField');\nexports.ApplicationFlagsBitField = require('./util/ApplicationFlagsBitField');\nexports.AttachmentFlagsBitField = require('./util/AttachmentFlagsBitField');\nexports.BaseManager = require('./managers/BaseManager');\nexports.BitField = require('./util/BitField');\nexports.ChannelFlagsBitField = require('./util/ChannelFlagsBitField');\nexports.Collection = require('@discordjs/collection').Collection;\nexports.Constants = require('./util/Constants');\nexports.Colors = require('./util/Colors');\nexports.Events = require('./util/Events');\nexports.Formatters = require('./util/Formatters');\nexports.GuildMemberFlagsBitField = require('./util/GuildMemberFlagsBitField').GuildMemberFlagsBitField;\nexports.IntentsBitField = require('./util/IntentsBitField');\nexports.LimitedCollection = require('./util/LimitedCollection');\nexports.MessageFlagsBitField = require('./util/MessageFlagsBitField');\nexports.Options = require('./util/Options');\nexports.Partials = require('./util/Partials');\nexports.PermissionsBitField = require('./util/PermissionsBitField');\nexports.RoleFlagsBitField = require('./util/RoleFlagsBitField');\nexports.ShardEvents = require('./util/ShardEvents');\nexports.SKUFlagsBitField = require('./util/SKUFlagsBitField').SKUFlagsBitField;\nexports.Status = require('./util/Status');\nexports.SnowflakeUtil = require('@sapphire/snowflake').DiscordSnowflake;\nexports.Sweepers = require('./util/Sweepers');\nexports.SystemChannelFlagsBitField = require('./util/SystemChannelFlagsBitField');\nexports.ThreadMemberFlagsBitField = require('./util/ThreadMemberFlagsBitField');\nexports.UserFlagsBitField = require('./util/UserFlagsBitField');\n__exportStar(require('./util/Util.js'), exports);\nexports.WebSocketShardEvents = require('./util/WebSocketShardEvents');\nexports.version = require('../package.json').version;\n\n// Managers\nexports.ApplicationCommandManager = require('./managers/ApplicationCommandManager');\nexports.ApplicationEmojiManager = require('./managers/ApplicationEmojiManager');\nexports.ApplicationCommandPermissionsManager = require('./managers/ApplicationCommandPermissionsManager');\nexports.AutoModerationRuleManager = require('./managers/AutoModerationRuleManager');\nexports.BaseGuildEmojiManager = require('./managers/BaseGuildEmojiManager');\nexports.CachedManager = require('./managers/CachedManager');\nexports.ChannelManager = require('./managers/ChannelManager');\nexports.ClientVoiceManager = require('./client/voice/ClientVoiceManager');\nexports.DataManager = require('./managers/DataManager');\nexports.DMMessageManager = require('./managers/DMMessageManager');\nexports.EntitlementManager = require('./managers/EntitlementManager').EntitlementManager;\nexports.GuildApplicationCommandManager = require('./managers/GuildApplicationCommandManager');\nexports.GuildBanManager = require('./managers/GuildBanManager');\nexports.GuildChannelManager = require('./managers/GuildChannelManager');\nexports.GuildEmojiManager = require('./managers/GuildEmojiManager');\nexports.GuildEmojiRoleManager = require('./managers/GuildEmojiRoleManager');\nexports.GuildForumThreadManager = require('./managers/GuildForumThreadManager');\nexports.GuildInviteManager = require('./managers/GuildInviteManager');\nexports.GuildManager = require('./managers/GuildManager');\nexports.GuildMemberManager = require('./managers/GuildMemberManager');\nexports.GuildMemberRoleManager = require('./managers/GuildMemberRoleManager');\nexports.GuildMessageManager = require('./managers/GuildMessageManager');\nexports.GuildScheduledEventManager = require('./managers/GuildScheduledEventManager');\nexports.GuildStickerManager = require('./managers/GuildStickerManager');\nexports.GuildTextThreadManager = require('./managers/GuildTextThreadManager');\nexports.MessageManager = require('./managers/MessageManager');\nexports.PermissionOverwriteManager = require('./managers/PermissionOverwriteManager');\nexports.PresenceManager = require('./managers/PresenceManager');\nexports.ReactionManager = require('./managers/ReactionManager');\nexports.ReactionUserManager = require('./managers/ReactionUserManager');\nexports.RoleManager = require('./managers/RoleManager');\nexports.StageInstanceManager = require('./managers/StageInstanceManager');\nexports.SubscriptionManager = require('./managers/SubscriptionManager').SubscriptionManager;\nexports.ThreadManager = require('./managers/ThreadManager');\nexports.ThreadMemberManager = require('./managers/ThreadMemberManager');\nexports.UserManager = require('./managers/UserManager');\nexports.VoiceStateManager = require('./managers/VoiceStateManager');\nexports.WebSocketManager = require('./client/websocket/WebSocketManager');\nexports.WebSocketShard = require('./client/websocket/WebSocketShard');\n\n// Structures\nexports.ActionRow = require('./structures/ActionRow');\nexports.ActionRowBuilder = require('./structures/ActionRowBuilder');\nexports.Activity = require('./structures/Presence').Activity;\nexports.AnonymousGuild = require('./structures/AnonymousGuild');\nexports.Application = require('./structures/interfaces/Application');\nexports.ApplicationCommand = require('./structures/ApplicationCommand');\nexports.ApplicationEmoji = require('./structures/ApplicationEmoji');\nexports.ApplicationRoleConnectionMetadata =\n  require('./structures/ApplicationRoleConnectionMetadata').ApplicationRoleConnectionMetadata;\nexports.AutocompleteInteraction = require('./structures/AutocompleteInteraction');\nexports.AutoModerationActionExecution = require('./structures/AutoModerationActionExecution');\nexports.AutoModerationRule = require('./structures/AutoModerationRule');\nexports.Base = require('./structures/Base');\nexports.BaseGuild = require('./structures/BaseGuild');\nexports.BaseGuildEmoji = require('./structures/BaseGuildEmoji');\nexports.BaseGuildTextChannel = require('./structures/BaseGuildTextChannel');\nexports.BaseGuildVoiceChannel = require('./structures/BaseGuildVoiceChannel');\nexports.ButtonBuilder = require('./structures/ButtonBuilder');\nexports.ButtonComponent = require('./structures/ButtonComponent');\nexports.ButtonInteraction = require('./structures/ButtonInteraction');\nexports.CategoryChannel = require('./structures/CategoryChannel');\nexports.BaseChannel = require('./structures/BaseChannel').BaseChannel;\nexports.ChatInputCommandInteraction = require('./structures/ChatInputCommandInteraction');\nexports.ClientApplication = require('./structures/ClientApplication');\nexports.ClientPresence = require('./structures/ClientPresence');\nexports.ClientUser = require('./structures/ClientUser');\nexports.CommandInteraction = require('./structures/CommandInteraction');\nexports.Collector = require('./structures/interfaces/Collector');\nexports.CommandInteractionOptionResolver = require('./structures/CommandInteractionOptionResolver');\nexports.Component = require('./structures/Component');\nexports.ContextMenuCommandInteraction = require('./structures/ContextMenuCommandInteraction');\nexports.DMChannel = require('./structures/DMChannel');\nexports.Embed = require('./structures/Embed');\nexports.EmbedBuilder = require('./structures/EmbedBuilder');\nexports.Emoji = require('./structures/Emoji').Emoji;\nexports.Entitlement = require('./structures/Entitlement').Entitlement;\nexports.ForumChannel = require('./structures/ForumChannel');\nexports.Guild = require('./structures/Guild').Guild;\nexports.GuildAuditLogs = require('./structures/GuildAuditLogs');\nexports.GuildAuditLogsEntry = require('./structures/GuildAuditLogsEntry');\nexports.GuildBan = require('./structures/GuildBan');\nexports.GuildChannel = require('./structures/GuildChannel');\nexports.GuildEmoji = require('./structures/GuildEmoji');\nexports.GuildMember = require('./structures/GuildMember').GuildMember;\nexports.GuildOnboarding = require('./structures/GuildOnboarding').GuildOnboarding;\nexports.GuildOnboardingPrompt = require('./structures/GuildOnboardingPrompt').GuildOnboardingPrompt;\nexports.GuildOnboardingPromptOption = require('./structures/GuildOnboardingPromptOption').GuildOnboardingPromptOption;\nexports.GuildPreview = require('./structures/GuildPreview');\nexports.GuildPreviewEmoji = require('./structures/GuildPreviewEmoji');\nexports.GuildScheduledEvent = require('./structures/GuildScheduledEvent').GuildScheduledEvent;\nexports.GuildTemplate = require('./structures/GuildTemplate');\nexports.Integration = require('./structures/Integration');\nexports.IntegrationApplication = require('./structures/IntegrationApplication');\nexports.InteractionCallback = require('./structures/InteractionCallback');\nexports.InteractionCallbackResource = require('./structures/InteractionCallbackResource');\nexports.InteractionCallbackResponse = require('./structures/InteractionCallbackResponse');\nexports.BaseInteraction = require('./structures/BaseInteraction');\nexports.InteractionCollector = require('./structures/InteractionCollector');\nexports.InteractionResponse = require('./structures/InteractionResponse');\nexports.InteractionWebhook = require('./structures/InteractionWebhook');\nexports.Invite = require('./structures/Invite');\nexports.InviteStageInstance = require('./structures/InviteStageInstance');\nexports.InviteGuild = require('./structures/InviteGuild');\nexports.Message = require('./structures/Message').Message;\nexports.Attachment = require('./structures/Attachment');\nexports.AttachmentBuilder = require('./structures/AttachmentBuilder');\nexports.ModalBuilder = require('./structures/ModalBuilder');\nexports.MediaChannel = require('./structures/MediaChannel');\nexports.MessageCollector = require('./structures/MessageCollector');\nexports.MessageComponentInteraction = require('./structures/MessageComponentInteraction');\nexports.MessageContextMenuCommandInteraction = require('./structures/MessageContextMenuCommandInteraction');\nexports.MessageMentions = require('./structures/MessageMentions');\nexports.MessagePayload = require('./structures/MessagePayload');\nexports.MessageReaction = require('./structures/MessageReaction');\nexports.ModalSubmitInteraction = require('./structures/ModalSubmitInteraction');\nexports.ModalSubmitFields = require('./structures/ModalSubmitFields');\nexports.NewsChannel = require('./structures/NewsChannel');\nexports.OAuth2Guild = require('./structures/OAuth2Guild');\nexports.PartialGroupDMChannel = require('./structures/PartialGroupDMChannel');\nexports.PermissionOverwrites = require('./structures/PermissionOverwrites');\nexports.Poll = require('./structures/Poll').Poll;\nexports.PollAnswer = require('./structures/PollAnswer').PollAnswer;\nexports.Presence = require('./structures/Presence').Presence;\nexports.ReactionCollector = require('./structures/ReactionCollector');\nexports.ReactionEmoji = require('./structures/ReactionEmoji');\nexports.RichPresenceAssets = require('./structures/Presence').RichPresenceAssets;\nexports.Role = require('./structures/Role').Role;\nexports.SelectMenuBuilder = require('./structures/SelectMenuBuilder');\nexports.ChannelSelectMenuBuilder = require('./structures/ChannelSelectMenuBuilder');\nexports.MentionableSelectMenuBuilder = require('./structures/MentionableSelectMenuBuilder');\nexports.RoleSelectMenuBuilder = require('./structures/RoleSelectMenuBuilder');\nexports.StringSelectMenuBuilder = require('./structures/StringSelectMenuBuilder');\nexports.UserSelectMenuBuilder = require('./structures/UserSelectMenuBuilder');\nexports.BaseSelectMenuComponent = require('./structures/BaseSelectMenuComponent');\nexports.SelectMenuComponent = require('./structures/SelectMenuComponent');\nexports.ChannelSelectMenuComponent = require('./structures/ChannelSelectMenuComponent');\nexports.MentionableSelectMenuComponent = require('./structures/MentionableSelectMenuComponent');\nexports.RoleSelectMenuComponent = require('./structures/RoleSelectMenuComponent');\nexports.StringSelectMenuComponent = require('./structures/StringSelectMenuComponent');\nexports.UserSelectMenuComponent = require('./structures/UserSelectMenuComponent');\nexports.SelectMenuInteraction = require('./structures/SelectMenuInteraction');\nexports.ChannelSelectMenuInteraction = require('./structures/ChannelSelectMenuInteraction');\nexports.MentionableSelectMenuInteraction = require('./structures/MentionableSelectMenuInteraction');\nexports.MentionableSelectMenuInteraction = require('./structures/MentionableSelectMenuInteraction');\nexports.RoleSelectMenuInteraction = require('./structures/RoleSelectMenuInteraction');\nexports.StringSelectMenuInteraction = require('./structures/StringSelectMenuInteraction');\nexports.UserSelectMenuInteraction = require('./structures/UserSelectMenuInteraction');\nexports.SelectMenuOptionBuilder = require('./structures/SelectMenuOptionBuilder');\nexports.SKU = require('./structures/SKU').SKU;\nexports.StringSelectMenuOptionBuilder = require('./structures/StringSelectMenuOptionBuilder');\nexports.StageChannel = require('./structures/StageChannel');\nexports.StageInstance = require('./structures/StageInstance').StageInstance;\nexports.Subscription = require('./structures/Subscription').Subscription;\nexports.Sticker = require('./structures/Sticker').Sticker;\nexports.StickerPack = require('./structures/StickerPack');\nexports.Team = require('./structures/Team');\nexports.TeamMember = require('./structures/TeamMember');\nexports.TextChannel = require('./structures/TextChannel');\nexports.TextInputBuilder = require('./structures/TextInputBuilder');\nexports.TextInputComponent = require('./structures/TextInputComponent');\nexports.ThreadChannel = require('./structures/ThreadChannel');\nexports.ThreadMember = require('./structures/ThreadMember');\nexports.ThreadOnlyChannel = require('./structures/ThreadOnlyChannel');\nexports.Typing = require('./structures/Typing');\nexports.User = require('./structures/User');\nexports.UserContextMenuCommandInteraction = require('./structures/UserContextMenuCommandInteraction');\nexports.VoiceChannelEffect = require('./structures/VoiceChannelEffect');\nexports.VoiceChannel = require('./structures/VoiceChannel');\nexports.VoiceRegion = require('./structures/VoiceRegion');\nexports.VoiceState = require('./structures/VoiceState');\nexports.Webhook = require('./structures/Webhook');\nexports.Widget = require('./structures/Widget');\nexports.WidgetMember = require('./structures/WidgetMember');\nexports.WelcomeChannel = require('./structures/WelcomeChannel');\nexports.WelcomeScreen = require('./structures/WelcomeScreen');\n\n// External\n__exportStar(require('discord-api-types/v10'), exports);\n__exportStar(require('@discordjs/builders'), exports);\n__exportStar(require('@discordjs/formatters'), exports);\n__exportStar(require('@discordjs/rest'), exports);\n__exportStar(require('@discordjs/util'), exports);\n__exportStar(require('@discordjs/ws'), exports);\n",
    "export {\n  //\n  ActionRowBuilder,\n  ApplicationCommand,\n  ButtonBuilder,\n  ButtonStyle,\n  ChannelType,\n  Client,\n  Collection,\n  EmbedBuilder,\n  Events,\n  GatewayIntentBits,\n  GuildMember,\n  GuildVerificationLevel,\n  Partials,\n  PermissionsBitField,\n  REST,\n  Routes,\n  SlashCommandBuilder,\n  User,\n} from 'discord.js';\n\nexport type {\n  //\n  APIInteractionGuildMember,\n  Interaction,\n  SlashCommandOptionsOnlyBuilder,\n} from 'discord.js';\n"
  ],
  "mappings": "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",
  "debugId": "A8AEB8A5613116F964756E2164756E21",
  "names": []
}